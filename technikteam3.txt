
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\db\migration\V1__Create_initial_schema.sql
========================================================================

-- This script contains the full DDL to create the database schema from scratch.
-- It has been reordered to ensure all tables are created before constraints are applied.
-- ALL `INSERT` statements have been removed as Flyway manages schema, not data.

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";

-- ===================================================================
-- PART 1: CREATE ALL TABLES
-- ===================================================================

CREATE TABLE `achievements` (
  `id` int(11) NOT NULL,
  `achievement_key` varchar(50) NOT NULL,
  `name` varchar(100) NOT NULL,
  `description` text DEFAULT NULL,
  `icon_class` varchar(50) DEFAULT 'fa-award'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `admin_logs` (
  `id` int(11) NOT NULL,
  `admin_username` varchar(50) DEFAULT NULL,
  `action_type` varchar(255) DEFAULT NULL,
  `details` text DEFAULT NULL,
  `action_timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `attachments` (
  `id` int(11) NOT NULL,
  `parent_type` enum('EVENT','MEETING') NOT NULL,
  `parent_id` int(11) NOT NULL,
  `filename` varchar(255) NOT NULL,
  `filepath` varchar(255) NOT NULL,
  `required_role` enum('NUTZER','ADMIN') NOT NULL DEFAULT 'NUTZER',
  `uploaded_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `courses` (
  `id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `abbreviation` varchar(20) DEFAULT NULL,
  `description` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `course_attendance` (
  `user_id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `signup_status` enum('ANGEMELDET','ABGEMELDET') NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `events` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `event_datetime` datetime NOT NULL,
  `end_datetime` datetime DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL,
  `status` enum('GEPLANT','KOMPLETT','LAUFEND','ABGESCHLOSSEN','ABGESAGT') NOT NULL DEFAULT 'GEPLANT',
  `leader_user_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_assignments` (
  `assignment_id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_attendance` (
  `user_id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `signup_status` enum('ANGEMELDET','ABGEMELDET') NOT NULL,
  `commitment_status` enum('BESTÄTIGT','OFFEN','ZUGESAGT') NOT NULL DEFAULT 'OFFEN'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_chat_messages` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `username` varchar(255) DEFAULT NULL,
  `message_text` text DEFAULT NULL,
  `edited` tinyint(1) NOT NULL DEFAULT 0,
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0,
  `deleted_by_user_id` int(11) DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `deleted_by_username` varchar(255) DEFAULT NULL,
  `sent_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_custom_fields` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `field_name` varchar(255) DEFAULT NULL,
  `field_type` enum('TEXT','BOOLEAN','DROPDOWN','CHECKBOX_GROUP') NOT NULL,
  `is_required` tinyint(1) NOT NULL DEFAULT 0,
  `field_options` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_custom_field_responses` (
  `id` int(11) NOT NULL,
  `field_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `response_value` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_skill_requirements` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `required_course_id` int(11) NOT NULL,
  `required_persons` int(11) NOT NULL DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_storage_reservations` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `reserved_quantity` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_tasks` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `description` text NOT NULL,
  `status` varchar(20) NOT NULL DEFAULT 'OFFEN',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `display_order` int(11) NOT NULL DEFAULT 0,
  `required_persons` int(11) NOT NULL DEFAULT 0,
  `details` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_task_assignments` (
  `task_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_task_kits` (
  `task_id` int(11) NOT NULL,
  `kit_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_task_storage_items` (
  `task_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `quantity` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `feedback_forms` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `feedback_responses` (
  `id` int(11) NOT NULL,
  `form_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `rating` int(11) NOT NULL COMMENT 'e.g., 1 to 5 stars',
  `comments` text DEFAULT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `feedback_submissions` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `subject` varchar(255) NOT NULL,
  `display_title` varchar(255) DEFAULT NULL,
  `content` text NOT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `status` enum('NEW','VIEWED','PLANNED','REJECTED','COMPLETED') NOT NULL DEFAULT 'NEW',
  `display_order` int(11) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `files` (
  `id` int(11) NOT NULL,
  `filename` varchar(255) DEFAULT NULL,
  `filepath` varchar(512) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `required_role` varchar(20) DEFAULT NULL,
  `uploaded_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `file_categories` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `inventory_kits` (
  `id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `inventory_kit_items` (
  `kit_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `quantity` int(11) NOT NULL DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `maintenance_log` (
  `id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `log_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `action` varchar(255) DEFAULT NULL,
  `notes` text DEFAULT NULL,
  `cost` decimal(10,2) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `meetings` (
  `id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `meeting_datetime` datetime NOT NULL,
  `end_datetime` datetime DEFAULT NULL,
  `leader_user_id` int(11) DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `meeting_attendance` (
  `user_id` int(11) NOT NULL,
  `meeting_id` int(11) NOT NULL,
  `attended` tinyint(1) DEFAULT 0,
  `remarks` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `permissions` (
  `id` int(11) NOT NULL,
  `permission_key` varchar(100) NOT NULL COMMENT 'e.g., USER_CREATE, EVENT_DELETE',
  `description` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `profile_change_requests` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `requested_changes` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`requested_changes`)),
  `status` enum('PENDING','APPROVED','DENIED') NOT NULL DEFAULT 'PENDING',
  `requested_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `reviewed_by_admin_id` int(11) DEFAULT NULL,
  `reviewed_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `roles` (
  `id` int(11) NOT NULL,
  `role_name` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `shared_documents` (
  `id` int(11) NOT NULL,
  `document_name` varchar(100) NOT NULL,
  `content` text DEFAULT NULL,
  `last_modified` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `storage_items` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `location` varchar(50) DEFAULT NULL,
  `cabinet` varchar(50) DEFAULT NULL,
  `shelf` varchar(50) DEFAULT NULL,
  `compartment` varchar(50) DEFAULT NULL,
  `quantity` int(11) NOT NULL DEFAULT 1,
  `max_quantity` int(11) NOT NULL DEFAULT 0,
  `defective_quantity` int(11) NOT NULL DEFAULT 0,
  `defect_reason` text DEFAULT NULL,
  `weight_kg` decimal(10,2) DEFAULT NULL,
  `price_eur` decimal(10,2) DEFAULT NULL,
  `image_path` varchar(512) DEFAULT NULL,
  `status` enum('IN_STORAGE','CHECKED_OUT','ASSIGNED_TO_EVENT','MAINTENANCE') NOT NULL DEFAULT 'IN_STORAGE',
  `current_holder_user_id` int(11) DEFAULT NULL,
  `assigned_event_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `storage_log` (
  `id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `quantity_change` int(11) NOT NULL,
  `notes` text DEFAULT NULL,
  `event_id` int(11) DEFAULT NULL,
  `transaction_timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(50) DEFAULT NULL,
  `password_hash` varchar(255) DEFAULT NULL,
  `role_id` int(11) DEFAULT NULL,
  `class_year` int(11) DEFAULT NULL,
  `class_name` varchar(10) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `chat_color` varchar(7) DEFAULT '#E9ECEF',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `theme` varchar(10) DEFAULT 'light'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_achievements` (
  `user_id` int(11) NOT NULL,
  `achievement_id` int(11) NOT NULL,
  `earned_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_passkeys` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `credential_id` text NOT NULL,
  `public_key` text NOT NULL,
  `signature_count` bigint(20) NOT NULL,
  `user_handle` text NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_permissions` (
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_qualifications` (
  `user_id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `completion_date` date DEFAULT NULL,
  `status` enum('BESUCHT','ABSOLVIERT') NOT NULL DEFAULT 'BESUCHT',
  `remarks` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ===================================================================
-- PART 2: ADD ALL PRIMARY KEYS, UNIQUE CONSTRAINTS, AND INDEXES
-- ===================================================================

ALTER TABLE `achievements` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `achievement_key` (`achievement_key`);
ALTER TABLE `admin_logs` ADD PRIMARY KEY (`id`);
ALTER TABLE `attachments` ADD PRIMARY KEY (`id`), ADD KEY `idx_attachments_parent` (`parent_type`,`parent_id`);
ALTER TABLE `courses` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`), ADD UNIQUE KEY `abbreviation` (`abbreviation`);
ALTER TABLE `course_attendance` ADD PRIMARY KEY (`user_id`,`course_id`), ADD KEY `course_id` (`course_id`);
ALTER TABLE `events` ADD PRIMARY KEY (`id`), ADD KEY `fk_event_leader` (`leader_user_id`);
ALTER TABLE `event_assignments` ADD PRIMARY KEY (`assignment_id`), ADD UNIQUE KEY `unique_assignment` (`event_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `event_attendance` ADD PRIMARY KEY (`user_id`,`event_id`), ADD KEY `event_id` (`event_id`);
ALTER TABLE `event_chat_messages` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`), ADD KEY `event_chat_messages_ibfk_2` (`user_id`);
ALTER TABLE `event_custom_fields` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`);
ALTER TABLE `event_custom_field_responses` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `field_id` (`field_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `event_skill_requirements` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`), ADD KEY `required_course_id` (`required_course_id`);
ALTER TABLE `event_storage_reservations` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `unique_event_item` (`event_id`,`item_id`), ADD KEY `item_id` (`item_id`);
ALTER TABLE `event_tasks` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`);
ALTER TABLE `event_task_assignments` ADD PRIMARY KEY (`task_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `event_task_kits` ADD PRIMARY KEY (`task_id`,`kit_id`), ADD KEY `kit_id` (`kit_id`);
ALTER TABLE `event_task_storage_items` ADD PRIMARY KEY (`task_id`,`item_id`), ADD KEY `item_id` (`item_id`);
ALTER TABLE `feedback_forms` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `event_id_unique` (`event_id`);
ALTER TABLE `feedback_responses` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `form_user_unique` (`form_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `feedback_submissions` ADD PRIMARY KEY (`id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `files` ADD PRIMARY KEY (`id`), ADD KEY `category_id` (`category_id`);
ALTER TABLE `file_categories` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`);
ALTER TABLE `inventory_kits` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`);
ALTER TABLE `inventory_kit_items` ADD PRIMARY KEY (`kit_id`,`item_id`), ADD KEY `item_id` (`item_id`);
ALTER TABLE `maintenance_log` ADD PRIMARY KEY (`id`), ADD KEY `item_id` (`item_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `meetings` ADD PRIMARY KEY (`id`), ADD KEY `course_id` (`course_id`), ADD KEY `fk_meeting_leader` (`leader_user_id`);
ALTER TABLE `meeting_attendance` ADD PRIMARY KEY (`user_id`,`meeting_id`), ADD KEY `meeting_id` (`meeting_id`);
ALTER TABLE `permissions` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `permission_key_unique` (`permission_key`);
ALTER TABLE `profile_change_requests` ADD PRIMARY KEY (`id`), ADD KEY `user_id` (`user_id`), ADD KEY `status` (`status`), ADD KEY `profile_change_requests_ibfk_2` (`reviewed_by_admin_id`);
ALTER TABLE `roles` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `role_name_unique` (`role_name`);
ALTER TABLE `shared_documents` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `document_name` (`document_name`), ADD UNIQUE KEY `idx_doc_name` (`document_name`);
ALTER TABLE `storage_items` ADD PRIMARY KEY (`id`), ADD KEY `fk_holder_user` (`current_holder_user_id`), ADD KEY `fk_assigned_event` (`assigned_event_id`);
ALTER TABLE `storage_log` ADD PRIMARY KEY (`id`), ADD KEY `item_id` (`item_id`), ADD KEY `user_id` (`user_id`), ADD KEY `fk_log_event` (`event_id`);
ALTER TABLE `users` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `username` (`username`), ADD UNIQUE KEY `email` (`email`), ADD KEY `fk_user_role` (`role_id`);
ALTER TABLE `user_achievements` ADD PRIMARY KEY (`user_id`,`achievement_id`), ADD KEY `achievement_id` (`achievement_id`);
ALTER TABLE `user_passkeys` ADD PRIMARY KEY (`id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `user_permissions` ADD PRIMARY KEY (`user_id`,`permission_id`), ADD KEY `permission_id` (`permission_id`);
ALTER TABLE `user_qualifications` ADD PRIMARY KEY (`user_id`,`course_id`), ADD KEY `course_id` (`course_id`);

-- ===================================================================
-- PART 3: ADD ALL AUTO_INCREMENT SETTINGS
-- ===================================================================

ALTER TABLE `achievements` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `admin_logs` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `attachments` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `courses` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `events` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_assignments` MODIFY `assignment_id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_chat_messages` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_custom_fields` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_custom_field_responses` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_skill_requirements` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_storage_reservations` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_tasks` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `feedback_forms` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `feedback_responses` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `feedback_submissions` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `files` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `file_categories` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `inventory_kits` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `maintenance_log` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `meetings` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `permissions` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `profile_change_requests` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `roles` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `shared_documents` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `storage_items` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `storage_log` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `users` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `user_passkeys` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

-- ===================================================================
-- PART 4: ADD ALL FOREIGN KEY CONSTRAINTS
-- ===================================================================

ALTER TABLE `course_attendance`
  ADD CONSTRAINT `course_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `course_attendance_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

ALTER TABLE `events`
  ADD CONSTRAINT `fk_event_leader` FOREIGN KEY (`leader_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

ALTER TABLE `event_assignments`
  ADD CONSTRAINT `event_assignments_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_assignments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_attendance`
  ADD CONSTRAINT `event_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_attendance_ibfk_2` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_chat_messages`
  ADD CONSTRAINT `event_chat_messages_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_chat_messages_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_custom_fields`
  ADD CONSTRAINT `event_custom_fields_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_custom_field_responses`
  ADD CONSTRAINT `event_custom_field_responses_ibfk_1` FOREIGN KEY (`field_id`) REFERENCES `event_custom_fields` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_custom_field_responses_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_skill_requirements`
  ADD CONSTRAINT `event_skill_requirements_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_skill_requirements_ibfk_2` FOREIGN KEY (`required_course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_storage_reservations`
  ADD CONSTRAINT `event_storage_reservations_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_storage_reservations_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_tasks`
  ADD CONSTRAINT `event_tasks_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_task_assignments`
  ADD CONSTRAINT `event_task_assignments_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_assignments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_task_kits`
  ADD CONSTRAINT `event_task_kits_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_kits_ibfk_2` FOREIGN KEY (`kit_id`) REFERENCES `inventory_kits` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_task_storage_items`
  ADD CONSTRAINT `event_task_storage_items_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_storage_items_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

ALTER TABLE `feedback_forms`
  ADD CONSTRAINT `feedback_forms_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `feedback_responses`
  ADD CONSTRAINT `feedback_responses_ibfk_1` FOREIGN KEY (`form_id`) REFERENCES `feedback_forms` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `feedback_responses_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `feedback_submissions`
  ADD CONSTRAINT `feedback_submissions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `files`
  ADD CONSTRAINT `files_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `file_categories` (`id`) ON DELETE SET NULL;

ALTER TABLE `inventory_kit_items`
  ADD CONSTRAINT `inventory_kit_items_ibfk_1` FOREIGN KEY (`kit_id`) REFERENCES `inventory_kits` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `inventory_kit_items_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

ALTER TABLE `maintenance_log`
  ADD CONSTRAINT `maintenance_log_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `maintenance_log_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);

ALTER TABLE `meetings`
  ADD CONSTRAINT `fk_meeting_leader` FOREIGN KEY (`leader_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `meetings_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

ALTER TABLE `meeting_attendance`
  ADD CONSTRAINT `meeting_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `meeting_attendance_ibfk_2` FOREIGN KEY (`meeting_id`) REFERENCES `meetings` (`id`) ON DELETE CASCADE;

ALTER TABLE `profile_change_requests`
  ADD CONSTRAINT `profile_change_requests_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `profile_change_requests_ibfk_2` FOREIGN KEY (`reviewed_by_admin_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

ALTER TABLE `storage_items`
  ADD CONSTRAINT `fk_assigned_event` FOREIGN KEY (`assigned_event_id`) REFERENCES `events` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `fk_holder_user` FOREIGN KEY (`current_holder_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

ALTER TABLE `storage_log`
  ADD CONSTRAINT `fk_log_event` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `storage_log_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `storage_log_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `users`
  ADD CONSTRAINT `fk_user_role` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE SET NULL;

ALTER TABLE `user_achievements`
  ADD CONSTRAINT `user_achievements_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_achievements_ibfk_2` FOREIGN KEY (`achievement_id`) REFERENCES `achievements` (`id`) ON DELETE CASCADE;

ALTER TABLE `user_passkeys`
  ADD CONSTRAINT `user_passkeys_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `user_permissions`
  ADD CONSTRAINT `user_permissions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_permissions_ibfk_2` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE;

ALTER TABLE `user_qualifications`
  ADD CONSTRAINT `user_qualifications_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_qualifications_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

COMMIT;
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\db\migration\V2__Add_initial_data.sql
========================================================================

-- Add default roles
INSERT INTO `roles` (`id`, `role_name`) VALUES (1, 'ADMIN'), (3, 'NUTZER');

-- Add all permissions
INSERT INTO `permissions` (`id`, `permission_key`, `description`) VALUES
(1, 'ACCESS_ADMIN_PANEL', 'Globaler Zugriff auf alle Admin-Funktionen. Überschreibt alle anderen Berechtigungen.'),
(2, 'USER_CREATE', 'Kann neue Benutzer anlegen.'),
(3, 'USER_READ', 'Kann Benutzerliste und -details einsehen.'),
(4, 'USER_UPDATE', 'Kann Benutzerprofile und deren Berechtigungen bearbeiten.'),
(5, 'USER_DELETE', 'Kann Benutzer löschen.'),
(6, 'USER_PASSWORD_RESET', 'Kann Passwörter anderer Benutzer zurücksetzen.'),
(7, 'EVENT_CREATE', 'Kann neue Events erstellen.'),
(8, 'EVENT_READ', 'Kann die Event-Verwaltungsliste einsehen.'),
(9, 'EVENT_UPDATE', 'Kann bestehende Events bearbeiten (Details, Personalbedarf, Material).'),
(10, 'EVENT_DELETE', 'Kann Events löschen.'),
(11, 'EVENT_MANAGE_ASSIGNMENTS', 'Kann Benutzer zu Events zuweisen.'),
(12, 'EVENT_MANAGE_TASKS', 'Kann Aufgaben innerhalb eines Events erstellen, bearbeiten und löschen.'),
(13, 'COURSE_CREATE', 'Kann neue Lehrgangs-Vorlagen erstellen.'),
(14, 'COURSE_READ', 'Kann Lehrgangs-Vorlagen und deren Termine einsehen.'),
(15, 'COURSE_UPDATE', 'Kann Lehrgangs-Vorlagen bearbeiten.'),
(16, 'COURSE_DELETE', 'Kann Lehrgangs-Vorlagen löschen.'),
(17, 'STORAGE_CREATE', 'Kann neue Lagerartikel anlegen.'),
(18, 'STORAGE_READ', 'Kann die Lager-Verwaltungsliste einsehen.'),
(19, 'STORAGE_UPDATE', 'Kann Lagerartikel bearbeiten, inkl. Defekt-Status.'),
(20, 'STORAGE_DELETE', 'Kann Lagerartikel löschen.'),
(21, 'KIT_CREATE', 'Kann neue Material-Kits/Koffer erstellen.'),
(22, 'KIT_READ', 'Kann die Kit-Verwaltungsliste einsehen.'),
(23, 'KIT_UPDATE', 'Kann Kits und deren Inhalte bearbeiten.'),
(24, 'KIT_DELETE', 'Kann Kits löschen.'),
(25, 'QUALIFICATION_READ', 'Kann die Qualifikations-Matrix einsehen.'),
(26, 'QUALIFICATION_UPDATE', 'Kann Teilnahme und Qualifikationen in der Matrix bearbeiten.'),
(27, 'FILE_CREATE', 'Kann Dateien hochladen und Kategorien erstellen.'),
(28, 'FILE_READ', 'Kann die Datei-Verwaltungsseite einsehen.'),
(29, 'FILE_DELETE', 'Kann Dateien und Kategorien löschen.'),
(30, 'LOG_READ', 'Kann das Admin-Aktionsprotokoll einsehen.'),
(31, 'REPORT_READ', 'Kann die Berichts- und Analyse-Seite einsehen.'),
(32, 'SYSTEM_READ', 'Kann die Systemstatus-Seite einsehen.'),
(33, 'ACHIEVEMENT_CREATE', 'Kann neue Erfolge und Abzeichen erstellen.'),
(34, 'ACHIEVEMENT_UPDATE', 'Kann bestehende Erfolge und Abzeichen bearbeiten.'),
(35, 'ACHIEVEMENT_DELETE', 'Kann Erfolge und Abzeichen löschen.'),
(36, 'FILE_MANAGE', 'Kann die Datei-Verwaltungsseite einsehen und grundlegende Operationen durchführen.'),
(37, 'FILE_UPDATE', 'Kann den Inhalt von Dateien (z.B. im Markdown-Editor) bearbeiten und neue Versionen hochladen.');

-- Create the default admin user with username 'admin' and password 'password'
-- The password hash is for 'password'
INSERT INTO `users` (`id`, `username`, `password_hash`, `role_id`, `theme`) VALUES
(1, 'admin', '$2a$10$odf1koglTR0zdzyPbDDkzOuw2XSKu19ylygl561RQ336KpABBFccu', 1, 'light');

-- Grant all permissions to the admin user
INSERT INTO `user_permissions` (`user_id`, `permission_id`) SELECT 1, id FROM `permissions`;
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\db\migration\V3__CreateTodoTables.sql
========================================================================

CREATE TABLE todo_categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    display_order INT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE todo_tasks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    category_id INT NOT NULL,
    content TEXT NOT NULL,
    is_completed BOOLEAN NOT NULL DEFAULT FALSE,
    display_order INT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_todo_category
        FOREIGN KEY (category_id)
        REFERENCES todo_categories(id)
        ON DELETE CASCADE
);

CREATE INDEX idx_todo_categories_display_order ON todo_categories(display_order);
CREATE INDEX idx_todo_tasks_display_order ON todo_tasks(display_order);
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\db\migration\V6__Add_storage_item_data.sql
========================================================================

-- This migration script inserts the initial set of storage items into the database.
-- Note that the table structure itself is already defined in V1.

INSERT INTO `storage_items` (`id`, `name`, `location`, `cabinet`, `shelf`, `compartment`, `quantity`, `max_quantity`, `defective_quantity`, `defect_reason`, `weight_kg`, `price_eur`, `image_path`, `status`, `current_holder_user_id`, `assigned_event_id`) VALUES
(4, 'Movingheads', 'Oben', '1', '/', '2', 2, 4, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(5, 'Tri leds', 'Oben', '1', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '1000014818.jpg', 'IN_STORAGE', NULL, NULL),
(6, 'Par 56', 'Oben', '1', '/', '3', 4, 14, 0, NULL, 0.00, 0.00, '1000014819.jpg', 'IN_STORAGE', NULL, NULL),
(7, 'Mischpult (alt)', 'Erdgeschoss', '2', '/', '4', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2714.43.484538135326788297692.jpg', 'IN_STORAGE', NULL, NULL),
(8, 'Strand Lighting', 'Erdgeschoss', '2', '/', '4', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2714.45.122077548250905478222.jpg', 'IN_STORAGE', NULL, NULL),
(10, 'DMX Kabel ', 'Erdgeschoss', '1', '/', '/', 12, 12, 0, '', 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(11, 'Traversen', 'Oben', '1-3', '/', '1', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(12, 'Laser', 'Oben', '1', '/', '3', 2, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(13, 'Led bars', 'Oben', '2', '/', '2', 7, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(14, 'Mikrofonstativ', 'Erdgeschoss ', '2', '/', '4', 6, 6, 0, NULL, 0.00, 0.00, '1000004426.jpg', 'IN_STORAGE', NULL, NULL),
(15, 'Par Scheinwerfer', 'Oben', '2', '/', '3', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(16, 'XLR Kabel (normal)', 'Erdgeschoss', '1', '/', 'Hängend', 19, 19, 0, NULL, 0.00, 0.00, '2025-06-2716.17.57144115011978189604.jpg', 'IN_STORAGE', NULL, NULL),
(17, 'DMX dimmer', 'Oben', '2', '/', '2', 6, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(18, 'Mehrfachstecker', 'Erdgeschoss', '2', '/', 'Hängend', 12, 10, 0, NULL, 0.00, 0.00, '2025-06-2716.20.283964599778401908342.jpg', 'IN_STORAGE', NULL, NULL),
(19, 'Farbfolien', 'Oben', '4', '/', '3', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(20, 'Farbfolienhalter', 'Oben', '4', '/', '2', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(21, 'Plugboxen', 'Oben', '5', '/', '2-4', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(22, 'Große Lampe', 'Oben', '5', '/', '4', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(23, 'Mikrofonklemmen (groß)', 'Erdgeschoss', '2', '/', '2', 10, 10, 0, NULL, 0.00, 0.00, '2025-06-2716.25.505575202287104074157.jpg', 'IN_STORAGE', NULL, NULL),
(24, 'leuchtmittel', 'Oben', '/', '/', '1', 15, 0, 2, '', 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(25, 'Lampenstative', 'Oben', 'ganz hinten', '/', '0', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(26, 'Mikrofonhalterung', 'Erdgeschoss', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '1000004428.jpg', 'IN_STORAGE', NULL, NULL),
(27, 'Mikrofonständer Zubehör ', 'Erdgeschoss', '2', '/', '2', 7, 7, 0, NULL, 0.00, 0.00, '2025-06-2716.43.268863184837397618557.jpg', 'IN_STORAGE', NULL, NULL),
(28, 'XLR 1m', 'Erdgeschoss ', '2', '/', 'Hängend', 14, 14, 0, NULL, 0.00, 0.00, '2025-06-2716.44.217215765873591130197.jpg', 'IN_STORAGE', NULL, NULL),
(29, 'Verlängerungskabel', 'Erdgeschoss', '1', '/', 'Hängend', 17, 17, 0, NULL, 0.00, 0.00, '2025-06-2716.46.3329023597302231662.jpg', 'IN_STORAGE', NULL, NULL),
(30, 'Klinke (groß)', 'Erdgeschoss ', '1', '/', 'Hängend', 7, 7, 0, NULL, 0.00, 0.00, '2025-06-2716.47.474256954529147799815.jpg', 'IN_STORAGE', NULL, NULL),
(31, 'Kat 5e', 'Erdgeschoss', '1', '/', 'Hängend', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2716.48.438613619599782685040.jpg', 'IN_STORAGE', NULL, NULL),
(32, 'Tape (schwarz)', 'Erdgeschoss', '1', '/', 'Hängend', 5, 5, 0, NULL, 0.00, 0.00, '2025-06-2716.50.189037015943349490192.jpg', 'IN_STORAGE', NULL, NULL),
(33, 'Isolierband (mehrfarbig)', 'Erdgeschoss', '1', '/', 'Hängend', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2716.52.326139423796119518903.jpg', 'IN_STORAGE', NULL, NULL),
(34, 'Klettband', 'Erdgeschoss', '2', '/', 'Hängend', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2716.54.436320883725802641087.jpg', 'IN_STORAGE', NULL, NULL),
(35, 'LAN Kabel', 'Erdgeschoss', '2', '/', '1', 24, 24, 0, NULL, 0.00, 0.00, '2025-06-2717.00.06154248686898973087.jpg', 'IN_STORAGE', NULL, NULL),
(36, 'Kameramikrofon', 'Erdgeschoss', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2717.03.512938281413325712878.jpg', 'IN_STORAGE', NULL, NULL),
(37, 'Shotgun Mikrofon', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.06.098569123668927925595.jpg', 'IN_STORAGE', NULL, NULL),
(38, 'Oberflächenmikrofon', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2717.10.391795435121197552263.jpg', 'IN_STORAGE', NULL, NULL),
(39, 'Kaltgeräte Kabel', 'Erdgeschoss ', '2', '/', '2', 77, 77, 0, NULL, 0.00, 0.00, '2025-06-2717.15.074914010989957328333.jpg', 'IN_STORAGE', NULL, NULL),
(40, 'Funkzubehör', 'Erdgeschoss', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.17.043830938027829171798.jpg', 'IN_STORAGE', NULL, NULL),
(41, 'Kaltgeräte Kabel (Daisy Chain)', 'Erdgeschoss', '1', '/', '1', 11, 11, 1, 'Defekte Buchse ', 0.00, 0.00, '2025-06-2717.18.125709401359377594527.jpg', 'IN_STORAGE', NULL, NULL),
(42, 'Kennzeichnungsringe (mehrfarbig)', 'Erdgeschoss ', '2', '/', '2', 7, 8, 0, NULL, 0.00, 0.00, '2025-06-2717.20.11195938865415073150.jpg', 'IN_STORAGE', NULL, NULL),
(43, 'Mikrofonklemmen (klein)', 'Erdgeschoss ', '2', '/', '2', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2717.27.274588107262469783348.jpg', 'IN_STORAGE', NULL, NULL),
(44, 'HDMI Kabel', 'Erdgeschoss ', '2', '/', '1', 10, 10, 0, NULL, 0.00, 0.00, '2025-06-2717.56.305143014867881008801.jpg', 'IN_STORAGE', NULL, NULL),
(45, 'Kabelmikrofon', 'Erdgeschoss', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.58.177946197060559751805.jpg', 'IN_STORAGE', NULL, NULL),
(46, 'Adapter (Klinke - VGA)', 'Erdgeschoss', '2', '/', '2', 1, 1, 1, 'VGA Anschluss fehlen Pole', 0.00, 0.00, '2025-06-2717.59.556036963108161859221.jpg', 'IN_STORAGE', NULL, NULL),
(47, 'Adapterkabel (2 XLR - Klinke (klein))', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(48, 'Adapterkabel (Klinke - RCA)', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(49, 'Adapterkabel (2 Klinke - Klinke (klein))', 'Erdgeschoss ', '2', '/', '1', 3, 3, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(50, 'Adapterkabel (Klinke (klein) - Klinke)', 'Erdgeschoss ', '2', '/', '1', 2, 2, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(51, 'Adapterkabel (XLR - Klinke)', 'Erdgeschoss ', '2', '/', '1', 9, 9, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(52, 'Klinke (klein)', 'Erdgeschoss', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(53, 'Adapter (Klinke (klein) - Chinch)', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.23.499020825943256947204.jpg', 'IN_STORAGE', NULL, NULL),
(54, 'Adapter (Klinke (klein) - Klinke (groß))', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.25.576661925063283895663.jpg', 'IN_STORAGE', NULL, NULL),
(55, 'Adapter (XLR (5-polig) - XLR (3-polig))', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.27.096864481674443203081.jpg', 'IN_STORAGE', NULL, NULL),
(56, 'Adapter (XLR - XLR)', 'Erdgeschoss', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2718.28.148498265326953710617.jpg', 'IN_STORAGE', NULL, NULL),
(57, 'Adapter (Klinke (groß) - Klinke (klein))', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.29.288337895956067779676.jpg', 'IN_STORAGE', NULL, NULL),
(58, 'Adapter (Klinke (klein) - Klinke (groß))', 'Erdgeschoss ', '2', '/', '2', 8, 8, 0, NULL, 0.00, 0.00, '2025-06-2718.31.31210849178064261929.jpg', 'IN_STORAGE', NULL, NULL),
(59, 'Adapter (XLR (3-polig) - XLR (5-polig))', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2718.59.517877817548047227728.jpg', 'IN_STORAGE', NULL, NULL),
(60, 'Adapter (XLR - Chinch)', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.01.268681550318375427445.jpg', 'IN_STORAGE', NULL, NULL),
(61, 'Adapter (Klinke (groß) - 2 Klinke (groß))', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.03.262282293221670794195.jpg', 'IN_STORAGE', NULL, NULL),
(62, 'Adapter (Klinke (groß) - Klinke (klein))', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.04.443477670903409475836.jpg', 'IN_STORAGE', NULL, NULL),
(63, 'Adapter (Dell Strom)', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.09.478882073636558604076.jpg', 'IN_STORAGE', NULL, NULL),
(64, 'BNC Kabel ', 'Erdgeschoss ', '2', '/', '1', 3, 0, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(65, 'Klinke (klein) - 2x RCA (Male)', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(66, 'Doppel RCA', 'Erdgeschoss ', '2', '/', '1', 4, 4, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(67, 'Dreifach RCA', 'Erdgeschoss ', '2', '/', '1', 3, 3, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(68, 'RCA', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(69, 'Nebelmaschine (klein) ', 'Erdgeschoss ', '1', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(70, 'Nebelmaschine (groß)', 'Erdgeschoss ', '1', '/', '0', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(71, 'Boden Nebelmaschine  ', 'Erdgeschoss ', '1', '/', '0', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(72, 'Nebelfluid (divers)', 'Erdgeschoss ', '1', '/', '1', 12, 12, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(73, 'Traversenbolzen', 'Erdgeschoss ', 'Riggingkiste', '/', 'Riggingkiste', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2812.24.214632515314181386114.jpg', 'IN_STORAGE', NULL, NULL);

-- Set auto-increment start value
ALTER TABLE `storage_items` AUTO_INCREMENT = 75;
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\css\style.css
========================================================================

/* =================================================================== */
/*  TECHNIKTEAM DESIGN V3 (Component-Based & Modern)                   */
/* =================================================================== */

/* --- 1. THEME & COLOR PALETTE --- */
:root {
	--primary-color: #007bff;
	--primary-color-hover: #0056b3;
	--primary-color-light: rgba(0, 123, 255, 0.1);
	--bg-color: #f8f9fa;
	--surface-color: #ffffff;
	--text-color: #212529;
	--heading-color: #002B5B; /* Dark, rich blue for headings */
	--text-muted-color: #6c757d;
	--border-color: #dee2e6;
	--success-color: #28a745;
	--danger-color: #dc3545;
	--warning-color: #ffc107;
	--info-color: #0dcaf0;
	--shadow-sm: 0 1px 2px 0 rgb(0 0 0/ 0.05);
	--shadow-md: 0 4px 6px -1px rgb(0 0 0/ 0.1), 0 2px 4px -2px
		rgb(0 0 0/ 0.1);
	--shadow-lg: 0 10px 15px -3px rgb(0 0 0/ 0.1), 0 4px 6px -4px
		rgb(0 0 0/ 0.1);
	--sidebar-width: 260px;
	--header-height: 64px;
	--border-radius: 8px;
	--sidebar-bg: var(--surface-color);
	--sidebar-border: var(--border-color);
	--sidebar-text-color: #343a40;
	--sidebar-text-muted: #6c757d;
	--sidebar-icon-color: #6c757d;
	--sidebar-hover-bg: #e9ecef;
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
	--sidebar-active-text: var(--primary-color);
	--sidebar-active-icon: var(--primary-color);
}

[data-theme="dark"] {
	--primary-color: #58a6ff;
	--primary-color-hover: #80b6ff;
	--primary-color-light: rgba(88, 166, 255, 0.15);
	--bg-color: #0d1117;
	--surface-color: #161b22;
	--text-color: #c9d1d9;
	--heading-color: var(--primary-color);
	/* Vibrant blue for dark mode headings */
	--text-muted-color: #8b949e;
	--border-color: #30363d;
	--success-color: #56d364;
	--danger-color: #f87171;
	--warning-color: #f0b72f;
	--info-color: #67d4ed;
	--sidebar-bg: #161b22;
	--sidebar-border: #30363d;
	--sidebar-text-color: #c9d1d9;
	--sidebar-text-muted: #8b949e;
	--sidebar-icon-color: #8b949e;
	--sidebar-hover-bg: #21262d;
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
	--sidebar-active-text: var(--primary-color);
	--sidebar-active-icon: var(--primary-color);
}

/* --- 2. BASE & TYPOGRAPHY --- */
*, *::before, *::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

html {
	scroll-behavior: smooth;
}

body {
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
		"Helvetica Neue", Arial, sans-serif;
	background-color: var(--bg-color);
	color: var(--text-color);
	line-height: 1.6;
	transition: background-color 0.3s, color 0.3s;
}

h1, h2, h3, h4 {
	color: var(--heading-color);
	line-height: 1.3;
}

h1 {
	font-size: clamp(1.8rem, 5vw, 2.2rem);
	font-weight: 700;
	margin-bottom: 1rem;
}

h2 {
	font-size: clamp(1.2rem, 4vw, 1.5rem);
	margin-bottom: 1.25rem;
	padding-bottom: 0.75rem;
	border-bottom: 1px solid var(--border-color);
	font-weight: 600;
}

h3 {
	font-size: 1.25rem;
	margin-bottom: 1rem;
	font-weight: 600;
}

a {
	color: var(--primary-color);
	text-decoration: none;
	transition: color 0.2s;
}

a:hover {
	text-decoration: underline;
	color: var(--primary-color-hover);
}

.text-success {
	color: var(--success-color) !important;
}

.text-danger {
	color: var(--danger-color) !important;
}

/* --- 3. LAYOUT & CONTAINERS --- */
.main-content-wrapper {
	transition: margin-left 0.3s ease-in-out;
}

.main-content {
	padding: 1.5rem;
	max-width: 1600px;
	margin-left: auto;
	margin-right: auto;
}

.card {
	background: var(--surface-color);
	border-radius: var(--border-radius);
	padding: 1.5rem;
	margin-bottom: 1.5rem;
	box-shadow: var(--shadow-sm);
	border: 1px solid var(--border-color);
	transition: all .3s;
}

.card:hover {
	box-shadow: var(--shadow-md);
}

.card-title {
	border: none;
	padding: 0;
	margin-bottom: 1rem;
}

.dashboard-grid, .responsive-dashboard-grid {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	gap: 1.5rem;
}

.feedback-card {
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
}


@media (max-width: 767.98px) {
    .responsive-dashboard-grid {
        grid-template-columns: 1fr;
    }
}


/* --- 4. NAVIGATION --- */
.sidebar {
	position: fixed;
	top: 0;
	left: calc(-1 * var(--sidebar-width));
	width: var(--sidebar-width);
	height: 100%;
	background: var(--sidebar-bg);
	border-right: 1px solid var(--sidebar-border);
	z-index: 1010;
	transition: left 0.3s ease-in-out, background-color 0.3s, border-color
		0.3s;
	display: flex;
	flex-direction: column;
}

body.nav-open .sidebar {
	left: 0;
	box-shadow: var(--shadow-md);
}

.sidebar-header {
	display: flex;
	align-items: center;
	gap: 0.75rem;
	padding: 0 1.5rem;
	height: var(--header-height);
	flex-shrink: 0;
}

.sidebar-header .logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--heading-color);
	text-decoration: none;
}

.sidebar-header .logo i {
	color: var(--primary-color);
}

.sidebar-nav {
	list-style: none;
	flex-grow: 1;
	overflow-y: auto;
	padding: 0.5rem 0;
}

.sidebar-nav a {
	display: flex;
	align-items: center;
	gap: 1rem;
	padding: 0.9rem 1.5rem;
	color: var(--sidebar-text-muted);
	font-weight: 500;
	transition: all 0.2s;
	border-left: 4px solid transparent;
	white-space: nowrap;
	text-decoration: none;
}

.sidebar-nav a i.fa-fw {
	width: 20px;
	text-align: center;
	color: var(--sidebar-icon-color);
	transition: color 0.2s;
}

.sidebar-nav a:hover {
	color: var(--text-color);
	background-color: var(--sidebar-hover-bg);
}

.sidebar-nav a:hover i.fa-fw {
	color: var(--primary-color);
}

.sidebar-nav a.active-nav-link {
	color: var(--sidebar-active-text);
	font-weight: 600;
	border-left-color: var(--sidebar-active-border);
	background-color: var(--sidebar-active-bg);
}

.sidebar-nav a.active-nav-link i.fa-fw {
	color: var(--sidebar-active-icon);
}

.sidebar-nav .nav-section-title {
	padding: 1.5rem 1.5rem 0.5rem;
	font-size: 0.8rem;
	font-weight: 600;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	color: var(--text-muted-color);
}

.user-actions {
	padding: 1rem 1.5rem;
	border-top: 1px solid var(--sidebar-border);
	flex-shrink: 0;
}

.user-info {
	font-weight: 500;
	margin-bottom: 1rem;
	font-size: 0.9rem;
	color: var(--text-muted-color);
}

.user-info strong {
	color: var(--text-color);
}

.mobile-header {
	display: flex;
	align-items: center;
	justify-content: space-between;
	height: var(--header-height);
	background-color: var(--surface-color);
	padding: 0 1rem;
	position: sticky;
	top: 0;
	z-index: 1000;
	border-bottom: 1px solid var(--border-color);
}

.mobile-header-right {
    display: flex;
    align-items: center;
    gap: 1rem;
}


.mobile-nav-toggle {
	background: none;
	border: none;
	cursor: pointer;
	padding: 0.5rem;
	z-index: 1020;
}

.mobile-nav-toggle .line {
	width: 25px;
	height: 3px;
	background-color: var(--primary-color);
	margin: 5px 0;
	border-radius: 3px;
	transition: all 0.3s;
}

body.nav-open .mobile-nav-toggle .line-1 {
	transform: rotate(45deg) translate(5px, 6px);
}

body.nav-open .mobile-nav-toggle .line-2 {
	opacity: 0;
}

body.nav-open .mobile-nav-toggle .line-3 {
	transform: rotate(-45deg) translate(5px, -6px);
}

.mobile-logo {
	font-weight: 600;
	font-size: 1.2rem;
	color: var(--heading-color);
	text-decoration: none;
}

.page-overlay {
	display: none;
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: rgba(0, 0, 0, 0.5);
	z-index: 1005;
}

body.nav-open .page-overlay {
	display: block;
}

@media ( min-width : 992px) {
	.mobile-header, .page-overlay {
		display: none !important;
	}
	.sidebar {
		left: 0;
	}
	.main-content-wrapper {
		margin-left: var(--sidebar-width);
	}
	.sidebar .mobile-only {
        display: none !important;
    }
}

@media ( max-width : 991.98px) {
    .sidebar .desktop-only {
        display: none !important;
    }
}

/* --- 5. COMPONENTS --- */

/* Buttons */
.btn {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	gap: 0.5rem;
	padding: 0.6rem 1.2rem;
	background-color: var(--primary-color);
	color: #fff;
	border: 1px solid transparent;
	border-radius: 6px;
	cursor: pointer;
	font-weight: 500;
	transition: all 0.2s;
	text-align: center;
	text-decoration: none;
}

.btn:hover {
	background-color: var(--primary-color-hover);
	color: #fff;
	text-decoration: none;
	transform: translateY(-1px);
}

.btn:disabled {
	background-color: var(--text-muted-color);
	cursor: not-allowed;
	transform: none;
	opacity: 0.65;
}

.btn.btn-danger {
	background-color: var(--danger-color);
}

.btn.btn-danger-outline {
	background-color: transparent;
	border-color: var(--danger-color);
	color: var(--danger-color);
}

.btn.btn-danger-outline:hover {
	background-color: var(--danger-color);
	color: #fff;
}

.btn.btn-success {
	background-color: var(--success-color);
}

.btn.btn-secondary {
	background-color: var(--text-muted-color);
}

.btn-small {
	padding: 0.4rem 0.8rem;
	font-size: 0.875rem;
}

/* Messages & Banners */
.success-message, .error-message, .info-message, .password-reset-alert {
	padding: 1rem;
	margin-bottom: 1.5rem;
	border-radius: var(--border-radius);
	font-weight: 500;
	display: flex;
	align-items: center;
	gap: 0.75rem;
	color: #fff;
}

.success-message {
	background-color: var(--success-color);
}

.error-message {
	background-color: var(--danger-color);
}

.info-message, .password-reset-alert {
	background-color: var(--info-color);
	color: #000;
}

.password-reset-alert strong {
	cursor: pointer;
	text-decoration: underline;
}

/* Toast Notifications */
.toast {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: var(--surface-color);
    color: var(--text-color);
    padding: 1rem 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
    z-index: 9999;
    transform: translateY(150%);
    transition: transform 0.4s ease-in-out, opacity 0.4s;
    border-left: 5px solid var(--primary-color);
    opacity: 0;
}
.toast.toast-success { border-left-color: var(--success-color); }
.toast.toast-danger { border-left-color: var(--danger-color); }
.toast.toast-info { border-left-color: var(--info-color); }

.toast.show {
    transform: translateY(0);
    opacity: 1;
}


/* Forms & Inputs */
.form-group {
	margin-bottom: 1.25rem;
}

.form-group label {
	display: block;
	margin-bottom: 0.5rem;
	font-weight: 500;
	color: var(--text-muted-color);
}

.form-group input, .form-group select, .form-group textarea {
	width: 100%;
	padding: 0.75rem;
	border: 1px solid var(--border-color);
	border-radius: 6px;
	background-color: var(--surface-color);
	color: var(--text-color);
	font-size: 1rem;
	transition: border-color 0.2s, box-shadow 0.2s;
}

fieldset {
    border: none;
    padding: 0;
    margin: 0;
}

[data-theme="dark"] .form-group textarea,
[data-theme="dark"] #editor {
    color: var(--text-color);
    background-color: var(--surface-color);
}

.form-group input:focus, .form-group select:focus, .form-group textarea:focus
	{
	outline: none;
	border-color: var(--primary-color);
	box-shadow: 0 0 0 3px var(--primary-color-light);
}

.form-group input[type="file"] {
	background-color: var(--bg-color);
}

.password-input-wrapper {
	position: relative;
	display: flex;
	align-items: center;
}

.password-input-wrapper input {
	padding-right: 40px; /* Make space for the icon */
}

.password-toggle-icon {
	position: absolute;
	right: 0;
	top: 0;
	height: 100%;
	width: 40px;
	display: flex;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	color: var(--text-muted-color);
}


.file-size-warning {
	color: var(--danger-color);
	display: none;
	font-size: 0.875rem;
	margin-top: 0.5rem;
}

/* Modals */
.modal-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgba(0, 0, 0, 0.6);
	display: none;
	justify-content: center;
	align-items: center;
	z-index: 2000;
}

.modal-overlay.active {
	display: flex;
}

.modal-content {
	background-color: var(--surface-color);
	padding: 2rem;
	border-radius: var(--border-radius);
	width: 90%;
	max-width: 600px;
	max-height: 90vh;
	overflow-y: auto;
	position: relative;
	box-shadow: var(--shadow-lg);
}

.modal-close-btn {
	position: absolute;
	top: 1rem;
	right: 1rem;
	background: none;
	border: none;
	font-size: 1.5rem;
	cursor: pointer;
	color: var(--text-muted-color);
}

.modal-tabs {
	display: flex;
	border-bottom: 1px solid var(--border-color);
	margin-bottom: 1.5rem;
}

.modal-tab-button {
	padding: 0.75rem 1rem;
	border: none;
	background: none;
	cursor: pointer;
	font-size: 1rem;
	font-weight: 500;
	color: var(--text-muted-color);
	border-bottom: 3px solid transparent;
	transition: all 0.2s;
}

.modal-tab-button.active {
	color: var(--primary-color);
	border-bottom-color: var(--primary-color);
}

.modal-tab-content {
	display: none;
}

.modal-tab-content.active {
	display: block;
}

.dynamic-row {
	display: flex;
	gap: 0.5rem;
	align-items: center;
	margin-bottom: 0.5rem;
	flex-wrap: wrap; /* Allow wrapping on small screens */
}

.dynamic-row .form-group {
	flex-grow: 1;
	margin-bottom: 0;
}

.dynamic-row .btn-small {
	flex-shrink: 0;
}

/* --- 6. TABLES & RESPONSIVE LISTS --- */
.table-wrapper {
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	overflow-x: auto;
	background-color: var(--surface-color);
}

.data-table {
	width: 100%;
	border-collapse: collapse;
}

.data-table th, .data-table td {
	padding: 1rem;
	text-align: left;
	border-bottom: 1px solid var(--border-color);
	white-space: nowrap;
	vertical-align: middle;
}

/* FIX for admin requests table */
.data-table pre {
    white-space: pre-wrap;
    word-break: break-all;
    background-color: var(--bg-color);
    padding: 0.5rem;
    border-radius: 4px;
}

.data-table thead th {
	font-size: 0.8rem;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	color: var(--text-muted-color);
	background-color: var(--bg-color);
}

.data-table tbody tr:hover {
	background-color: var(--bg-color);
}

.mobile-card-list {
	display: flex;
	flex-direction: column;
	gap: 1rem;
}

.list-item-card {
	background-color: var(--surface-color);
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	padding: 1rem;
	box-shadow: var(--shadow-sm);
}

.list-item-card .card-title {
	margin-bottom: 0.5rem;
	font-size: 1.1rem;
	border-bottom: none;
	padding-bottom: 0;
}

.card-row {
	display: flex;
	justify-content: space-between;
	align-items: center;
	font-size: 0.9rem;
	padding: 0.4rem 0;
	border-bottom: 1px solid var(--border-color);
}

.card-row:last-of-type {
	border-bottom: none;
}

.card-actions {
	margin-top: 1rem;
	padding-top: 1rem;
	border-top: 1px solid var(--border-color);
	display: flex;
	flex-wrap: wrap;
	gap: 0.5rem;
}

.desktop-table-wrapper {
	display: none;
}

@media ( min-width : 992px) {
	.mobile-card-list {
		display: none !important;
	}
	.desktop-table-wrapper {
		display: block !important;
	}
}

/* --- 7. UTILITY & PAGE-SPECIFIC --- */

/* Login Page */
.login-page-container {
	display: flex;
	align-items: center;
	justify-content: center;
	width: 100%;
	min-height: 100vh;
	padding: 1rem;
	background: var(--bg-color);
}

.login-box {
	width: 100%;
	max-width: 400px;
	padding: 2.5rem;
	background-color: var(--surface-color);
	border-radius: var(--border-radius);
	box-shadow: var(--shadow-md);
}

/* Table Controls */
.table-controls {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	align-items: center;
	gap: 1rem;
	margin-bottom: 1.5rem;
}

/* Status Badges */
.status-badge {
	padding: 0.25em 0.6em;
	font-size: 0.8rem;
	font-weight: 600;
	border-radius: 20px;
	text-transform: uppercase;
}

.status-ok {
	background-color: var(--success-color);
	color: #fff;
}

.status-warn {
	background-color: var(--warning-color);
	color: #000;
}

.status-danger {
	background-color: var(--danger-color);
	color: #fff;
}

.status-info {
	background-color: var(--text-muted-color);
	color: #fff;
}

/* Details List (for User/Event Details) */
.details-list {
	list-style-type: none;
	padding-left: 0;
}

.details-list li {
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	align-items: center;
	gap: 0.5rem;
}

@media (max-width: 576px) {
    .details-list li {
        flex-direction: column;
        align-items: flex-start;
    }
}

.details-list li:last-child {
	border-bottom: none;
}

.details-subtitle {
	font-size: 1.1rem;
	color: var(--text-muted-color);
	margin-bottom: 1.5rem;
}

/* Star Rating (for Feedback Form) */
.star-rating {
	display: flex;
	flex-direction: row-reverse;
	justify-content: flex-end;
	font-size: 2em;
}

.star-rating input {
	display: none;
}

.star-rating label {
	color: #ccc;
	cursor: pointer;
	transition: color 0.2s;
}

.star-rating label:before {
	content: '★';
}

.star-rating input:checked ~ label, .star-rating:not(:checked)>label:hover,
	.star-rating:not(:checked)>label:hover ~ label {
	color: #ffc107;
}

/* File Manager (admin_files.jsp) */
.file-manager-layout {
	display: grid;
	gap: 1.5rem;
	grid-template-columns: 1fr;
}

@media ( min-width : 992px) {
	.file-manager-layout {
		grid-template-columns: 300px 1fr;
	}
}

.category-list {
	list-style: none;
	padding: 0;
}

.category-list li {
	padding: 0.75rem;
	cursor: pointer;
	border-radius: 6px;
	transition: background-color 0.2s;
	display: flex;
	align-items: center;
	gap: 0.75rem;
}

.category-list li.active {
	background-color: var(--primary-color-light);
	font-weight: 600;
	color: var(--primary-color);
}

.category-list li:hover:not(.active) {
	background-color: var(--bg-color);
}

.file-list {
	list-style: none;
	padding: 0;
}

.file-list li {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
}

.file-list li:last-child {
	border-bottom: none;
}

.file-info {
	flex-grow: 1;
}

.file-info .file-meta {
	display: block;
	font-size: 0.8rem;
	color: var(--text-muted-color);
}

.category-actions-grid {
	display: grid;
	grid-template-columns: 1fr;
	gap: 1.5rem;
}

@media ( min-width : 768px) {
	.category-actions-grid {
		grid-template-columns: 1fr 1fr;
	}
}

/* QR Action Page */
.qr-action-body {
	display: flex;
	justify-content: center;
	align-items: center;
	min-height: 100vh;
	background-color: var(--bg-color);
}

.qr-action-container {
	text-align: center;
	width: 90%;
	max-width: 400px;
}

.qr-action-item-name {
	font-size: 1.5rem;
	font-weight: bold;
	margin-bottom: 2rem;
}

.qr-action-buttons {
	display: grid;
	grid-template-columns: 1fr;
	gap: 1rem;
}

.qr-action-btn {
	font-size: 1.2rem;
	padding: 1.5rem;
}

/* Lightbox */
.lightbox-overlay {
	display: none;
	position: fixed;
	z-index: 3000;
	padding: 1rem;
	justify-content: center;
	align-items: center;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
	overflow: auto;
	background-color: rgba(0, 0, 0, 0.8);
}

.lightbox-content {
	margin: auto;
	display: block;
	width: auto;
	height: auto;
	max-width: 90vw;
	max-height: 90vh;
}

.lightbox-close {
	position: absolute;
	top: 15px;
	right: 35px;
	color: #f1f1f1;
	font-size: 40px;
	font-weight: bold;
	transition: 0.3s;
}

.lightbox-close:hover, .lightbox-close:focus {
	color: #bbb;
	text-decoration: none;
	cursor: pointer;
}

/* Matrix Table */
.data-table .sticky-header {
	position: sticky;
	top: 0;
	z-index: 10;
}

.data-table .sticky-col {
	position: sticky;
	left: 0;
	background-color: var(--surface-color);
	z-index: 5;
}

.data-table .qual-cell[data-attended="true"] {
	color: var(--success-color);
}

.horizontal-scroll-hint {
    display: none;
    text-align: center;
    padding: 0.5rem;
    background-color: var(--warning-color);
    color: #000;
    font-weight: 500;
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
}

@media (max-width: 768px) {
    .horizontal-scroll-hint {
        display: block;
    }
}

/* Progress Bars (System Page) */
.progress-bar-container {
	width: 100%;
	background-color: var(--border-color);
	border-radius: 8px;
	overflow: hidden;
	height: 25px;
}

.progress-bar {
	height: 100%;
	background-color: var(--primary-color);
	transition: width 0.5s ease-in-out;
}

.progress-text {
	text-align: center;
	font-weight: 500;
	margin-top: 0.5rem;
}

/* NEW: Storage Page Redesign Styles */
.item-name-cell {
	display: flex;
	align-items: center;
	gap: 0.75rem;
}

.camera-btn {
	background: transparent;
	border: 1px solid var(--border-color);
	color: var(--text-muted-color);
	padding: 0.2rem 0.5rem;
	line-height: 1;
	border-radius: 4px;
}

.camera-btn:hover {
	background: var(--bg-color);
	color: var(--primary-color);
	border-color: var(--primary-color);
}

.inventory-details, .item-status-details {
	display: block;
	font-size: 0.85rem;
	color: var(--text-muted-color);
}

.kit-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    flex-wrap: wrap; /* Allow wrapping on mobile */
    gap: 1rem;
}

/* Custom Calendar List (Mobile) */
.termin-list {
    list-style: none;
    padding: 0;
}
.termin-item-link {
    text-decoration: none;
    color: inherit;
    display: block;
}
.termin-item {
    display: flex;
    align-items: center;
    padding: 1rem;
    background-color: var(--surface-color);
    border-bottom: 1px solid var(--border-color);
    transition: background-color 0.2s;
}
.termin-item:hover {
    background-color: var(--bg-color);
}
.termin-list li:first-child {
    border-top: 1px solid var(--border-color);
}
.termin-month-header {
    margin-top: 2rem;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-muted-color);
    border: none;
    padding: 0;
}
.termin-date {
    flex-shrink: 0;
    text-align: center;
    margin-right: 1.5rem;
    width: 60px;
}
.termin-date-day {
    font-size: 1.8rem;
    font-weight: 600;
    display: block;
    line-height: 1;
    color: var(--primary-color);
}
.termin-date-month {
    font-size: 0.9rem;
    text-transform: uppercase;
    font-weight: 500;
    display: block;
    color: var(--text-muted-color);
}
.termin-details {
    flex-grow: 1;
}
.termin-title {
    font-weight: 600;
    display: block;
    margin-bottom: 0.25rem;
}
.termin-type-event {
    background-color: var(--danger-color);
    color: white;
}
.termin-type-lehrgang {
    background-color: var(--primary-color);
    color: white;
}
.termin-arrow {
    color: var(--text-muted-color);
    margin-left: 1rem;
}

.mobile-list-view { display: block; }
.desktop-calendar-view { display: none; }

@media (min-width: 992px) {
    .mobile-list-view { display: none; }
    .desktop-calendar-view { display: block; }
}


/* --- 8. ERROR PAGES --- */
.error-page-container {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	min-height: 70vh;
	padding: 2rem;
}

.error-code {
	font-size: 5rem;
	font-weight: 800;
	line-height: 1;
	margin: 0;
	color: var(--text-muted-color);
}

.error-page-container h2 {
	font-size: 1.75rem;
	border: none;
	margin: 0 0 1.5rem 0;
}

.error-message-text {
	max-width: 600px;
	font-size: 1.1rem;
	line-height: 1.6;
	margin-bottom: 2rem;
}

/* --- 9. KEYFRAME ANIMATIONS --- */
@keyframes blink { 50% {
	background-color: transparent;
}

}

/* =================================================================== */
/*  10. CHAT INTERFACE (Combined & Final)                              */
/* =================================================================== */
.chat-message-container {
	display: flex;
	align-items: center;
	margin-bottom: 0.75rem;
	position: relative;
	max-width: 90%; /* Prevent bubbles from taking the full width */
	align-self: flex-start; /* Default alignment for others' messages */
}

.chat-message-container.current-user {
	align-self: flex-end;
}

.chat-bubble {
	padding: 0.6rem 0.9rem;
	border-radius: 18px;
	word-wrap: break-word;
	border: 1px solid transparent;
}

.chat-bubble.current-user-bubble {
	background-color: var(--primary-color) !important;
	color: #fff !important;
	border-color: var(--primary-color) !important;
}

.chat-username {
	display: block;
	font-size: 0.8rem;
	font-weight: 700;
	margin-bottom: 0.2rem;
}

.chat-text {
	display: block;
	font-size: 1rem;
	line-height: 1.4;
}

.chat-timestamp {
	display: block;
	font-size: 0.75rem;
	margin-top: 0.3rem;
	text-align: right;
}

.chat-edited-marker {
	font-size: 0.7em;
	font-style: italic;
	color: inherit;
}

.chat-options {
	opacity: 0;
	transition: opacity 0.2s;
	display: flex;
	gap: 0.25rem;
	background-color: var(--surface-color);
	padding: 0.25rem;
	border-radius: 20px;
	box-shadow: var(--shadow-md);
	margin: 0 0.5rem;
}

.chat-message-container:hover .chat-options {
	opacity: 1;
}

.chat-message-container {
	flex-direction: row;
}

.chat-message-container.current-user {
	flex-direction: row-reverse;
}

.chat-option-btn {
	background: none;
	border: none;
	cursor: pointer;
	color: var(--text-muted-color);
	width: 28px;
	height: 28px;
	border-radius: 50%;
	display: flex;
	align-items: center;
	justify-content: center;
}

.chat-option-btn:hover {
	background-color: var(--bg-color);
	color: var(--text-color);
}

.chat-edit-input {
	width: 100%;
	padding: 0.2rem 0.4rem;
	border: 1px solid var(--primary-color);
	border-radius: 4px;
	background: var(--surface-color);
	color: var(--text-color);
	font-family: inherit;
	font-size: 1rem;
}

.chat-bubble.deleted {
	font-style: italic;
	opacity: 0.7;
}

.chat-deleted-info {
	font-size: 0.9em;
}

#chat-box {
	display: flex;
	flex-direction: column;
}

/* =================================================================== */
/*  11. SIDEBAR CONTROLS & EDITOR STYLES                               */
/* =================================================================== */
.sidebar-controls {
	display: flex;
	justify-content: space-between;
	align-items: center;
	gap: 1rem;
	margin-bottom: 1rem;
}

.sidebar-controls .btn {
	flex-grow: 1;
}

/* Theme & Mode Switcher Container Styles */
.theme-switcher, .mode-switcher {
	display: flex;
	align-items: center;
	gap: 0.5rem;
	color: var(--text-muted-color);
}

/* Generic Toggle Switch Component */
.toggle-switch {
	position: relative;
	display: inline-block;
	width: 44px;
	height: 24px;
}

.toggle-switch input {
	opacity: 0;
	width: 0;
	height: 0;
}

.toggle-switch .slider {
	position: absolute;
	cursor: pointer;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: #ccc;
	transition: .4s;
	border-radius: 24px;
}

.toggle-switch .slider:before {
	position: absolute;
	content: "";
	height: 18px;
	width: 18px;
	left: 3px;
	bottom: 3px;
	background-color: white;
	transition: .4s;
	border-radius: 50%;
}

.toggle-switch input:checked + .slider {
	background-color: var(--primary-color);
}

.toggle-switch input:checked + .slider:before {
	transform: translateX(20px);
}


/* Editor Specific Styles */
#editor-page-wrapper {
    /* Make the wrapper take up all available vertical space */
    height: calc(100vh - var(--header-height)); /* Account for mobile header */
    display: flex;
    flex-direction: column;
}

@media (min-width: 992px) {
	#editor-page-wrapper {
		/* On desktop, the main header is gone, so just 100vh */
		height: 100vh;
	}
}

#editor-page-wrapper .main-content {
    flex-grow: 1; /* Allow main-content to fill remaining height */
    padding: 1rem; /* Consistent padding on all sides */
    max-width: none; /* Remove max-width constraint for full flexibility */
    margin: 0; /* Remove auto margins to allow full width */
    display: flex;
    flex-direction: column;
    min-height: 0; /* Important for flex container to properly shrink children */
}

#editor-page-container {
    display: flex;
    flex-direction: column;
    flex-grow: 1; /* Make it fill the remaining space */
    min-height: 0; /* Crucial for nested flex items */
}

.editor-header {
	flex-shrink: 0;
	margin-bottom: 1rem;
}
.editor-header h1 {
	margin-bottom: 0;
    font-size: 1.5rem;
}
.editor-controls {
	display: flex;
	align-items: center;
	gap: 1rem;
	flex-wrap: wrap;
}
.editor-container { /* This is the flex container for editor/preview panes */
	display: flex;
	flex-direction: column; /* Stack vertically on mobile */
	gap: 1.5rem; /* Space between panes */
    flex-grow: 1; /* Allow this container to fill available height */
    min-height: 0; /* Crucial for flex item inside a flex column */
	padding: 1.5rem; /* Padding *inside* the card, around the panes */
    margin: 0; /* Remove external margins */
    border: 1px solid var(--border-color);
    box-shadow: var(--shadow-sm);
    background: var(--surface-color);
    border-radius: var(--border-radius);
}

#editor, #markdown-preview {
	flex-grow: 1; /* Allow the element to grow and fill the flex container */
	width: 100%; /* Ensure it takes full width in mobile stack */
	border: none; /* Border is now on .editor-container */
	padding: 0; /* Padding is now on .editor-container */
	background: transparent; /* Background is now on .editor-container */
    overflow-y: auto; /* Internal scrolling within each pane */
    
    /* Unified typography for WYSIWYG feel */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
	font-size: 1rem;
	line-height: 1.6;
    color: var(--text-color);
}

#editor {
	resize: none; /* Disable manual resizing */
}

@media (min-width: 992px) {
	.editor-container {
		flex-direction: row; /* Desktop: side-by-side */
	}
	#editor, #markdown-preview {
		flex-basis: 50%; /* Distribute space evenly */
	}
}


/* =================================================================== */
/*  12. MARKDOWN STYLES                                                */
/* =================================================================== */
.markdown-content {
    overflow-wrap: break-word;
    word-wrap: break-word; /* legacy */
}

.markdown-content h1, .markdown-content h2, .markdown-content h3,
.markdown-content h4, .markdown-content h5, .markdown-content h6 {
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    font-weight: 600;
    border: none;
    padding: 0;
}
.markdown-content p {
    margin-bottom: 1rem;
}
.markdown-content ul, .markdown-content ol {
    padding-left: 2rem;
    margin-bottom: 1rem;
}
.markdown-content blockquote {
    padding: 0.5rem 1rem;
    margin: 0 0 1rem;
    font-size: 1rem;
    border-left: 0.25rem solid var(--border-color);
    background-color: var(--bg-color);
    color: var(--text-muted-color);
}
.markdown-content blockquote > :first-child {
    margin-top: 0;
}
.markdown-content blockquote > :last-child {
    margin-bottom: 0;
}
.markdown-content code {
    padding: .2em .4em;
    margin: 0;
    font-size: 85%;
    background-color: var(--primary-color-light);
    border-radius: 6px;
    font-family: monospace;
}
.markdown-content pre {
    padding: 1rem;
    overflow: auto;
    font-size: 85%;
    line-height: 1.45;
    background-color: var(--bg-color);
    border-radius: 6px;
    margin-bottom: 1rem;
}
.markdown-content pre code {
    padding: 0;
    margin: 0;
    font-size: 100%;
    background-color: transparent;
    border-radius: 0;
}
.markdown-content table {
    width: 100%;
    margin-bottom: 1rem;
    border-collapse: collapse;
    display: block;
    overflow-x: auto;
}
.markdown-content th, .markdown-content td {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
}
.markdown-content thead {
    background-color: var(--bg-color);
}
.markdown-content img {
    max-width: 100%;
    height: auto;
}

/* =================================================================== */
/*  13. PRINT STYLES                                                   */
/* =================================================================== */
@media print {
	.sidebar, .mobile-header, .no-print {
		display: none !important;
	}
	.main-content-wrapper, .main-content {
		margin-left: 0 !important;
		padding: 0 !important;
	}
	body {
		background-color: #fff;
		color: #000;
	}
	.card {
		box-shadow: none;
		border: 1px solid #ccc;
		page-break-inside: avoid;
	}
	a {
		text-decoration: none;
		color: #000;
	}
	h1, h2, h3 {
		color: #000;
	}
}

/* =================================================================== */
/*  14. CUSTOM CALENDAR STYLES (NEW)                                   */
/* =================================================================== */
.calendar-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
}
.calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    border-top: 1px solid var(--border-color);
    border-left: 1px solid var(--border-color);
}
.calendar-header, .calendar-day {
    border-right: 1px solid var(--border-color);
    border-bottom: 1px solid var(--border-color);
    padding: 0.5rem;
}
.calendar-header {
    text-align: center;
    font-weight: 600;
    background-color: var(--bg-color);
}
.calendar-day {
    min-height: 120px;
    position: relative;
}
.calendar-day.other-month .day-number {
    color: var(--text-muted-color);
    opacity: 0.5;
}
.calendar-day.today .day-number {
    background-color: var(--primary-color);
    color: white;
    border-radius: 50%;
    width: 28px;
    height: 28px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}
.day-number {
    font-size: 0.9rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
}
.calendar-event, .calendar-meeting {
    display: block;
    font-size: 0.8rem;
    padding: 0.3rem 0.6rem;
    margin-bottom: 0.3rem;
    border-radius: 4px;
    color: #fff;
    text-decoration: none;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    transition: opacity 0.2s;
}
.calendar-event { background-color: var(--danger-color); }
.calendar-meeting { background-color: var(--primary-color); }
.calendar-event:hover, .calendar-meeting:hover {
    opacity: 0.8;
    color: #fff;
}
.calendar-week-grid {
    display: flex;
    border-top: 1px solid var(--border-color);
    border-left: 1px solid var(--border-color);
}
.calendar-week-day {
    flex: 1;
    border-right: 1px solid var(--border-color);
}
.calendar-week-day .events-container {
    padding: 0.5rem;
    min-height: 60vh;
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\main.js
========================================================================

/**
 * Main JavaScript file for the TechnikTeam application.
 * This file is included on every page and handles global user interface logic.
 */
document.addEventListener('DOMContentLoaded', () => {

	const contextPath = document.body.dataset.contextPath || '';
	const currentPage = document.body.dataset.page || '';

	// --- GLOBAL PASSWORD VISIBILITY TOGGLE ---
	document.body.addEventListener('click', (event) => {
		const toggle = event.target.closest('.password-toggle-icon');
		if (toggle) {
			const wrapper = toggle.closest('.password-input-wrapper');
			const input = wrapper.querySelector('input[type="password"], input[type="text"]');
			const icon = toggle.querySelector('i');
			if (input) {
				const isPassword = input.getAttribute('type') === 'password';
				input.setAttribute('type', isPassword ? 'text' : 'password');
				icon.classList.toggle('fa-eye', !isPassword);
				icon.classList.toggle('fa-eye-slash', isPassword);
			}
		}
	});

	// --- MOBILE NAVIGATION ---
	const navToggle = document.querySelector('.mobile-nav-toggle');
	const pageOverlay = document.querySelector('.page-overlay');
	if (navToggle) {
		navToggle.addEventListener('click', (event) => {
			event.stopPropagation();
			document.body.classList.toggle('nav-open');
		});
	}
	if (pageOverlay) {
		pageOverlay.addEventListener('click', () => {
			document.body.classList.remove('nav-open');
		});
	}

	// --- ACTIVE NAV LINK HIGHLIGHTING ---
	const currentPath = window.location.pathname;
	document.querySelectorAll('.sidebar-nav a').forEach(link => {
		const linkPath = link.getAttribute('href');
		if (linkPath === currentPath || (currentPath.startsWith(linkPath) && linkPath !== `${contextPath}/` && linkPath !== `${contextPath}` && currentPath.charAt(linkPath.length) === '/')) {
			link.classList.add('active-nav-link');
		}
	});

	// --- THEME SWITCHER (SYNCED) ---
	const themeSwitches = document.querySelectorAll('.theme-switcher input[type="checkbox"]');
	const currentTheme = document.documentElement.dataset.theme || localStorage.getItem('theme') || 'light';
	document.documentElement.setAttribute('data-theme', currentTheme);

	const updateSwitches = (isDark) => {
		themeSwitches.forEach(sw => {
			sw.checked = isDark;
		});
	};

	updateSwitches(currentTheme === 'dark');

	themeSwitches.forEach(sw => {
		sw.addEventListener('change', (event) => {
			const newTheme = event.target.checked ? 'dark' : 'light';
			document.documentElement.setAttribute('data-theme', newTheme);
			localStorage.setItem('theme', newTheme);
			updateSwitches(event.target.checked);

			const csrfToken = document.body.dataset.csrfToken;
			const formData = new URLSearchParams();
			formData.append('theme', newTheme);
			if (csrfToken) {
				formData.append('csrfToken', csrfToken);
			}
			fetch(`${contextPath}/api/user/preferences`, {
				method: 'POST',
				body: formData
			}).catch(err => console.error("Failed to sync theme with server:", err));
		});
	});

	// --- PERSISTENT SIDEBAR SCROLL POSITION ---
	const sidebarNav = document.querySelector('.sidebar-nav');
	const scrollPositionKey = 'sidebarScrollPosition';

	if (sidebarNav) {
		const savedPosition = sessionStorage.getItem(scrollPositionKey);
		if (savedPosition) {
			sidebarNav.scrollTop = parseInt(savedPosition, 10);
		}
		window.addEventListener('beforeunload', () => {
			sessionStorage.setItem(scrollPositionKey, sidebarNav.scrollTop);
		});
	}

	// --- GLOBAL CONFIRMATION MODAL ---
	const confirmationModalElement = document.createElement('div');
	confirmationModalElement.className = 'modal-overlay';
	confirmationModalElement.id = 'confirmation-modal';
	confirmationModalElement.innerHTML = `
        <div class="modal-content" style="max-width: 450px;">
            <h3 id="confirmation-title">Bestätigung erforderlich</h3>
            <p id="confirmation-message" style="margin: 1.5rem 0; font-size: 1.1rem;"></p>
            <div style="display: flex; justify-content: flex-end; gap: 1rem;">
                <button id="confirmation-btn-cancel" class="btn" style="background-color: var(--text-muted-color);">Abbrechen</button>
                <button id="confirmation-btn-confirm" class="btn btn-danger">Bestätigen</button>
            </div>
        </div>`;
	document.body.appendChild(confirmationModalElement);

	const messageElement = document.getElementById('confirmation-message');
	const confirmBtn = document.getElementById('confirmation-btn-confirm');
	const cancelBtn = document.getElementById('confirmation-btn-cancel');

	let onConfirmCallback = null;

	window.showConfirmationModal = (message, onConfirm) => {
		messageElement.textContent = message;
		onConfirmCallback = onConfirm;
		confirmationModalElement.classList.add('active');
	};

	const closeConfirmModal = () => {
		confirmationModalElement.classList.remove('active');
		onConfirmCallback = null;
	};

	confirmBtn.addEventListener('click', () => {
		if (typeof onConfirmCallback === 'function') onConfirmCallback();
		closeConfirmModal();
	});

	cancelBtn.addEventListener('click', closeConfirmModal);
	confirmationModalElement.addEventListener('click', (e) => {
		if (e.target === confirmationModalElement) closeConfirmModal();
	});

	const logoutLink = document.getElementById('logout-link');
	if (logoutLink) {
		logoutLink.addEventListener('click', (event) => {
			event.preventDefault();
			showConfirmationModal(
				'Möchten Sie sich wirklich ausloggen?',
				() => { window.location.href = logoutLink.href; }
			);
		});
	}

	// --- GLOBAL EVENT DELEGATION FOR MODALS & CONFIRMATIONS ---
	document.body.addEventListener('click', (event) => {
		const modalOpenTrigger = event.target.closest('[data-modal-target]');
		if (modalOpenTrigger) {
			event.preventDefault();
			const modalId = modalOpenTrigger.dataset.modalTarget;
			const modal = document.getElementById(modalId);
			if (modal) {
				modal.classList.add('active');
			}
		}

		const modalCloseTrigger = event.target.closest('[data-modal-close]');
		if (modalCloseTrigger) {
			event.preventDefault();
			const modal = modalCloseTrigger.closest('.modal-overlay');
			if (modal) {
				modal.classList.remove('active');
			}
		}
	});

	document.body.addEventListener('submit', (event) => {
		const form = event.target;
		if (form.matches('.js-confirm-form')) {
			event.preventDefault();
			const message = form.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => form.submit());
		}
	});

	// --- GLOBAL TOAST NOTIFICATIONS ---
	window.showToast = (message, type = 'success') => {
		const toast = document.createElement('div');
		toast.className = `toast toast-${type}`;
		toast.innerHTML = `<p>${message}</p>`;
		document.body.appendChild(toast);
		setTimeout(() => { toast.classList.add('show'); }, 100);
		setTimeout(() => {
			toast.classList.remove('show');
			setTimeout(() => { toast.remove(); }, 500);
		}, 5000);
	};

	// --- SERVER-SENT EVENTS (SSE) NOTIFICATIONS & UI UPDATES ---
	if (document.body.dataset.isLoggedIn === 'true' && window.EventSource && currentPage !== 'editor') {
		const eventSource = new EventSource(`${contextPath}/notifications`);
		eventSource.onopen = () => console.log("SSE connection established.");
		eventSource.onmessage = (event) => {
			try {
				const data = JSON.parse(event.data);
				if (data.type === 'ui_update') {
					handleUIUpdate(data.payload);
				} else if (data.type === 'logout_notification') {
					showToast(data.payload.message, 'info');
					setTimeout(() => { window.location.href = `${contextPath}/logout`; }, 4000);
				} else {
					showBrowserNotification(data.payload);
				}
			} catch (e) {
				showBrowserNotification({ message: event.data });
			}
		};
		eventSource.onerror = (err) => {
			console.error("SSE connection error.", err);
			eventSource.close();
		};
	}

	const feedbackStatusOrder = { 'NEW': 0, 'VIEWED': 1, 'PLANNED': 2, 'COMPLETED': 3, 'REJECTED': 4 };

	// --- UI UPDATE HANDLER (COMPLETE & UNABBREVIATED) ---
	function handleUIUpdate(payload) {
		console.log("Handling UI update:", payload.updateType, payload.data);
		const getStatusBadgeClass = (status, prefix = 'status-') => {
			const classMap = {
				'LAUFEND': 'warn', 'ABGESCHLOSSEN': 'info', 'ABGESAGT': 'info',
				'GEPLANT': 'ok', 'KOMPLETT': 'ok',
				'NEW': 'info', 'VIEWED': 'info', 'PLANNED': 'warn',
				'COMPLETED': 'ok', 'REJECTED': 'danger'
			};
			return prefix + (classMap[status] || 'info');
		};

		switch (payload.updateType) {
			case 'user_updated':
				const user = payload.data;
				document.querySelectorAll(`[data-user-id="${user.id}"]`).forEach(el => {
					const usernameEl = el.querySelector('[data-field="username"]');
					const roleNameEl = el.querySelector('[data-field="roleName"]');
					if (usernameEl) usernameEl.textContent = user.username;
					if (roleNameEl) roleNameEl.textContent = user.roleName;
				});
				break;
			case 'user_deleted':
				document.querySelectorAll(`[data-user-id="${payload.data.userId}"]`).forEach(el => {
					el.style.transition = 'opacity 0.5s';
					el.style.opacity = '0';
					setTimeout(() => el.remove(), 500);
				});
				break;
			case 'event_status_updated':
				const { eventId, newStatus } = payload.data;
				document.querySelectorAll(`[data-event-id="${eventId}"]`).forEach(element => {
					const badge = element.querySelector('.status-badge');
					if (badge) {
						badge.textContent = newStatus;
						badge.className = `status-badge ${getStatusBadgeClass(newStatus)}`;
					}
				});
				break;
			case 'feedback_status_updated':
				const { submissionId, newStatus: newFeedbackStatus } = payload.data;
				const card = document.querySelector(`.feedback-card[data-submission-id="${submissionId}"]`);
				if (card) {
					// 1. Update the data attribute and badge
					card.dataset.status = newFeedbackStatus;
					const badge = card.querySelector('.status-badge');
					if (badge) {
						badge.textContent = newFeedbackStatus;
						badge.className = `status-badge ${getStatusBadgeClass(newFeedbackStatus)}`;
					}

					// 2. Re-sort the list
					const container = card.parentElement;
					const allCards = Array.from(container.querySelectorAll('.feedback-card'));

					allCards.sort((a, b) => {
						const statusA = feedbackStatusOrder[a.dataset.status] ?? 99;
						const statusB = feedbackStatusOrder[b.dataset.status] ?? 99;
						return statusA - statusB;
					});

					// 3. Re-append sorted cards
					allCards.forEach(c => container.appendChild(c));
				}
				break;
			case 'feedback_deleted':
				const cardToDelete = document.querySelector(`[data-submission-id="${payload.data.submissionId}"]`);
				if (cardToDelete) {
					cardToDelete.style.transition = 'opacity 0.5s';
					cardToDelete.style.opacity = '0';
					setTimeout(() => cardToDelete.remove(), 500);
				}
				break;
		}
	}

	// --- BROWSER NOTIFICATION HANDLER (COMPLETE & UNABBREVIATED) ---
	function showBrowserNotification(payload) {
		const message = payload.message || 'Neue Benachrichtigung';
		const url = payload.url;

		if (!("Notification" in window)) {
			console.warn("This browser does not support desktop notifications.");
			return;
		}

		const showNotification = () => {
			const notification = new Notification("Technik Team Update", {
				body: message,
				icon: `${contextPath}/images/favicon.ico`
			});

			if (url) {
				notification.onclick = (event) => {
					event.preventDefault();
					window.open(contextPath + url, '_blank');
					notification.close();
				};
			}
		};

		if (Notification.permission === "granted") {
			showNotification();
		} else if (Notification.permission !== "denied") {
			Notification.requestPermission().then((permission) => {
				if (permission === "granted") {
					showNotification();
				}
			});
		}
	}

	// --- GLOBAL MARKDOWN RENDERER ---
	window.renderMarkdown = (element) => {
		if (!element || typeof marked === 'undefined') return;
		const sanitizedHtml = marked.parse(element.textContent || '', { sanitize: true });
		element.innerHTML = sanitizedHtml;
	};

	document.querySelectorAll('.markdown-content').forEach(window.renderMarkdown);
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_achievements.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const modal = document.getElementById('achievement-modal');
	if (!modal) return;

	const form = document.getElementById('achievement-modal-form');
	const title = document.getElementById('achievement-modal-title');
	const actionInput = document.getElementById('achievement-modal-action');
	const idInput = document.getElementById('achievement-modal-id');
	const nameInput = document.getElementById('name-modal');
	const iconInput = document.getElementById('icon-modal');
	const descInput = document.getElementById('description-modal');

	// --- Key Builder Elements for Creating New Achievements ---
	const keyBuilderGroup = document.getElementById('key-builder-group');
	const keyTypeSelect = document.getElementById('key-type-select');
	const keySubtypeGroups = document.querySelectorAll('.key-subtype-group');
	const keyNumberGroup = document.getElementById('key-number-group');
	const keyValueInput = document.getElementById('key-value-input');
	const keyCourseGroup = document.getElementById('key-course-group');
	const keyCourseSelect = document.getElementById('key-course-select');
	const keyPreview = document.getElementById('generated-key-preview');
	const hiddenKeyInput = document.getElementById('achievement-key-hidden');

	/**
	 * Dynamically builds the programmatic key for the achievement based on user selections.
	 * This ensures a consistent key format.
	 */
	const updateKey = () => {
		const type = keyTypeSelect.value;
		let generatedKey = '';

		// Hide all subtype groups initially for a clean slate
		keySubtypeGroups.forEach(group => group.style.display = 'none');

		if (type === 'EVENT_PARTICIPANT' || type === 'EVENT_LEADER') {
			keyNumberGroup.style.display = 'block';
			const value = keyValueInput.value || '1';
			generatedKey = `${type}_${value}`;
		} else if (type === 'QUALIFICATION') {
			keyCourseGroup.style.display = 'block';
			const value = keyCourseSelect.value;
			if (value) {
				generatedKey = `${type}_${value}`;
			}
		}

		keyPreview.textContent = generatedKey || '-- Bitte eine Art wählen --';
		hiddenKeyInput.value = generatedKey;
	};

	if (keyTypeSelect) keyTypeSelect.addEventListener('change', updateKey);
	if (keyValueInput) keyValueInput.addEventListener('input', updateKey);
	if (keyCourseSelect) keyCourseSelect.addEventListener('change', updateKey);

	// --- Event Listeners for Buttons ---
	document.getElementById('new-achievement-btn').addEventListener('click', () => {
		form.reset();
		title.textContent = 'Neuen Erfolg anlegen';
		actionInput.value = 'create';
		idInput.value = '';
		keyBuilderGroup.style.display = 'block'; // Show key builder for new achievements
		updateKey(); // Initialize/reset the key builder state
	});

	document.querySelectorAll('.edit-achievement-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const id = btn.dataset.id;
			try {
				const response = await fetch(`${contextPath}/admin/achievements?action=getAchievementData&id=${id}`);
				if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
				const data = await response.json();

				form.reset();
				title.textContent = 'Erfolg bearbeiten';
				actionInput.value = 'update';
				idInput.value = data.id;
				nameInput.value = data.name || '';
				iconInput.value = data.iconClass || 'fa-award';
				descInput.value = data.description || '';
				keyBuilderGroup.style.display = 'none'; // Hide key builder on edit, as the key is immutable

			} catch (error) {
				console.error('Failed to open edit modal:', error);
				alert("Fehler: Die Daten für diesen Erfolg konnten nicht geladen werden.");
			}
		});
	});

	// --- Generic Modal Closing ---
	modal.addEventListener('click', (e) => {
		if (e.target === modal) modal.classList.remove('active');
	});
	document.addEventListener('keydown', (e) => {
		if (e.key === 'Escape' && modal.classList.contains('active')) modal.classList.remove('active');
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_course_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	// --- Edit/Create Modal Logic ---
	const courseModal = document.getElementById('course-modal');
	if (courseModal) {
		const form = document.getElementById('course-modal-form');
		const title = document.getElementById('course-modal-title');
		const actionInput = document.getElementById('course-modal-action');
		const idInput = document.getElementById('course-modal-id');
		const nameInput = document.getElementById('name-modal');
		const abbrInput = document.getElementById('abbreviation-modal');
		const descInput = document.getElementById('description-modal');

		document.getElementById('new-course-btn')?.addEventListener('click', () => {
			form.reset();
			title.textContent = "Neue Lehrgangs-Vorlage anlegen";
			actionInput.value = "create";
			idInput.value = "";
		});

		document.querySelectorAll('.edit-course-btn').forEach(btn => {
			btn.addEventListener('click', async (e) => {
				form.reset();
				title.textContent = "Lehrgangs-Vorlage bearbeiten";
				actionInput.value = "update";
				const courseId = e.currentTarget.dataset.id;
				idInput.value = courseId;

				try {
					const response = await fetch(`${contextPath}/admin/lehrgaenge?action=getCourseData&id=${courseId}`);
					if (!response.ok) throw new Error('Could not fetch course data');
					const data = await response.json();

					nameInput.value = data.name || '';
					abbrInput.value = data.abbreviation || '';
					descInput.value = data.description || '';
				} catch (error) {
					console.error("Failed to open edit modal:", error);
					alert("Fehler beim Laden der Vorlagen-Daten.");
				}
			});
		});
	}

	// --- Grant Qualifications Modal Logic ---
	const grantQualsModal = document.getElementById('grant-quals-modal');
	if (grantQualsModal) {
		const modalTitle = document.getElementById('grant-quals-modal-title');
		const courseIdInput = document.getElementById('grant-quals-course-id');

		document.querySelectorAll('.grant-quals-btn').forEach(btn => {
			btn.addEventListener('click', (e) => {
				const button = e.currentTarget;
				modalTitle.textContent = `Qualifikationen für "${button.dataset.courseName}" vergeben`;
				courseIdInput.value = button.dataset.courseId;
			});
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_dashboard.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	let eventChartInstance = null;

	const upcomingEventsContainer = document.getElementById('widget-upcoming-events');
	const lowStockContainer = document.getElementById('widget-low-stock');
	const recentLogsContainer = document.getElementById('widget-recent-logs');
	const eventTrendCanvas = document.getElementById('eventTrendChart');

	function formatDateTime(isoString) {
		if (!isoString) return 'N/A';
		const date = new Date(isoString);
		return date.toLocaleString('de-DE', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' });
	}

	function createAlertBanner(message, type = 'info') {
		const banner = document.createElement('div');
		banner.className = `${type}-message`; // info-message, error-message, etc.
		const iconClass = type === 'danger' ? 'fa-exclamation-triangle' : 'fa-info-circle';
		banner.innerHTML = `<i class="fas ${iconClass}"></i> ${message}`;
		return banner;
	}

	function renderUpcomingEvents(events) {
		const header = '<h2><i class="fas fa-calendar-check"></i> Nächste Einsätze</h2>';
		if (!events || events.length === 0) {
			upcomingEventsContainer.innerHTML = header + '<p>Keine anstehenden Einsätze gefunden.</p>';
			return;
		}

		const list = events.map(event => `
            <li>
                <a href="${contextPath}/veranstaltungen/details?id=${event.id}">${event.name}</a>
                <small>${formatDateTime(event.eventDateTime)} Uhr</small>
            </li>
        `).join('');

		upcomingEventsContainer.innerHTML = header + `<ul class="details-list">${list}</ul>`;
	}

	function renderLowStockItems(items) {
		const header = '<h2><i class="fas fa-battery-quarter"></i> Niedriger Lagerbestand</h2>';

		let content = '';
		if (!items || items.length === 0) {
			content = '<p>Alle Artikel sind ausreichend vorhanden.</p>';
		} else {
			const list = items.map(item => {
				const percentage = item.maxQuantity > 0 ? ((item.quantity - item.defectiveQuantity) / item.maxQuantity * 100).toFixed(0) : 0;
				return `
                    <li>
                        <a href="${contextPath}/lager/details?id=${item.id}">${item.name}</a>
                        <span class="status-badge status-warn">${percentage}%</span>
                    </li>
                `;
			}).join('');
			content = `<ul class="details-list">${list}</ul>`;

			// Add an alert banner if there are low stock items
			const alertMessage = `Es gibt ${items.length} Artikel mit niedrigem Lagerbestand. <a href="${contextPath}/admin/lager">Jetzt prüfen</a>.`;
			const banner = createAlertBanner(alertMessage, 'danger');
			lowStockContainer.prepend(banner);
		}

		lowStockContainer.innerHTML = header + content;
	}

	function renderRecentLogs(logs) {
		const header = '<h2><i class="fas fa-history"></i> Letzte Aktivitäten</h2>';
		if (!logs || logs.length === 0) {
			recentLogsContainer.innerHTML = header + '<p>Keine aktuellen Aktivitäten protokolliert.</p>';
			return;
		}

		const list = logs.map(log => `
            <li>
                <div>
                    <strong>${log.actionType}</strong> von <em>${log.adminUsername}</em>
                    <small style="display: block; color: var(--text-muted-color);">${log.details}</small>
                </div>
                <small>${formatDateTime(log.actionTimestamp)}</small>
            </li>
        `).join('');

		recentLogsContainer.innerHTML = header + `<ul class="details-list">${list}</ul>`;
	}

	function renderEventTrendChart(trendData) {
		if (eventChartInstance) {
			eventChartInstance.destroy();
		}

		if (!trendData || trendData.length === 0) {
			return;
		}

		const labels = trendData.map(d => d.month);
		const data = trendData.map(d => d.count);

		const chartConfig = {
			type: 'line',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl Events pro Monat',
					data: data,
					fill: true,
					borderColor: 'rgb(0, 123, 255)',
					backgroundColor: 'rgba(0, 123, 255, 0.1)',
					tension: 0.1
				}]
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					y: {
						beginAtZero: true,
						ticks: {
							stepSize: 1,
							precision: 0
						}
					}
				},
				plugins: {
					legend: {
						display: false
					}
				}
			}
		};

		eventChartInstance = new Chart(eventTrendCanvas.getContext('2d'), chartConfig);
	}

	async function fetchData() {
		try {
			const response = await fetch(`${contextPath}/api/admin/dashboard-data`);
			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}
			const data = await response.json();

			renderUpcomingEvents(data.upcomingEvents);
			renderLowStockItems(data.lowStockItems);
			renderRecentLogs(data.recentLogs);
			renderEventTrendChart(data.eventTrendData);

		} catch (error) {
			console.error("Failed to fetch dashboard data:", error);
			upcomingEventsContainer.innerHTML = '<h2><i class="fas fa-calendar-check"></i> Nächste Einsätze</h2><p class="error-message">Fehler beim Laden der Daten.</p>';
			lowStockContainer.innerHTML = '<h2><i class="fas fa-battery-quarter"></i> Niedriger Lagerbestand</h2><p class="error-message">Fehler beim Laden der Daten.</p>';
			recentLogsContainer.innerHTML = '<h2><i class="fas fa-history"></i> Letzte Aktivitäten</h2><p class="error-message">Fehler beim Laden der Daten.</p>';
		}
	}

	fetchData();
	setInterval(fetchData, 60000); // Re-fetch every 60 seconds
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_defect_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const defectModal = document.getElementById('defect-modal');
	if (!defectModal) return;

	const modalTitle = document.getElementById('defect-modal-title');
	const itemIdInput = document.getElementById('defect-item-id');
	const defectQtyInput = document.getElementById('defective_quantity');
	const reasonInput = document.getElementById('defect_reason');

	/**
	 * Attaches an event listener to all "Status bearbeiten" buttons to open the defect modal.
	 */
	document.querySelectorAll('.defect-modal-btn').forEach(btn => {
		btn.addEventListener('click', () => {
			// Populate the modal with data from the clicked button's data attributes
			modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
			itemIdInput.value = btn.dataset.itemId;
			defectQtyInput.value = btn.dataset.currentDefectQty;
			defectQtyInput.max = btn.dataset.maxQty; // Set max value to prevent invalid input
			reasonInput.value = btn.dataset.currentReason;
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_editor.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const editorContainer = document.getElementById('editor-page-container');
	if (!editorContainer) return;

	const fileId = editorContainer.dataset.fileId;
	const editor = document.getElementById('editor');
	const preview = document.getElementById('markdown-preview');
	const toggle = document.getElementById('mode-toggle');
	const statusIndicator = document.getElementById('save-status-indicator');

	let socket;
	let debounceTimer;

	// Function to render markdown content
	const renderMarkdown = (content) => {
		if (typeof marked !== 'undefined') {
			preview.innerHTML = marked.parse(content, { sanitize: true });
		}
	};

	// --- Status Indicator Logic ---
	const showStatus = (state, message) => {
		if (statusIndicator) {
			statusIndicator.style.display = 'inline-block';
			statusIndicator.className = `status-badge status-${state}`;
			statusIndicator.textContent = message;
		}
	};

	// --- WebSocket Connection Logic ---
	const connect = () => {
		const websocketProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
		const websocketUrl = `${websocketProtocol}//${window.location.host}${document.body.dataset.contextPath}/ws/editor/${fileId}`;

		socket = new WebSocket(websocketUrl);

		socket.onopen = () => {
			console.log('WebSocket connection established.');
			showStatus('ok', 'Verbunden');
		};

		socket.onmessage = (event) => {
			const data = JSON.parse(event.data);
			if (data.type === 'content_update') {
				console.log('Received content update from another client.');

				// Save cursor position before updating
				const cursorStart = editor.selectionStart;
				const cursorEnd = editor.selectionEnd;

				editor.value = data.payload;
				renderMarkdown(data.payload);

				// Restore cursor position
				editor.setSelectionRange(cursorStart, cursorEnd);
			}
		};

		socket.onclose = () => {
			console.warn('WebSocket connection closed.');
			showStatus('danger', 'Getrennt');
			setTimeout(connect, 5000); // Try to reconnect after 5 seconds
		};

		socket.onerror = (error) => {
			console.error('WebSocket error:', error);
			showStatus('danger', 'Verbindungsfehler');
		};
	};


	// --- Event Listeners ---
	if (editor.readOnly) {
		renderMarkdown(editor.value);
		return;
	}

	connect();
	renderMarkdown(editor.value);

	// Debounced function to send content updates
	const sendContentUpdate = () => {
		if (socket && socket.readyState === WebSocket.OPEN) {
			const payload = {
				type: 'content_update',
				payload: editor.value
			};
			socket.send(JSON.stringify(payload));
			showStatus('warn', 'Speichern...');
			// Give visual feedback that saving is complete
			setTimeout(() => {
				if (statusIndicator.textContent === 'Speichern...') {
					showStatus('ok', 'Gespeichert');
				}
			}, 1000);
		}
	};

	// Live preview and debounced saving on input
	editor.addEventListener('input', () => {
		renderMarkdown(editor.value);
		clearTimeout(debounceTimer);
		debounceTimer = setTimeout(sendContentUpdate, 500); // Send update 500ms after user stops typing
	});

	// Event listener for the toggle switch
	if (toggle) {
		toggle.addEventListener('change', () => {
			if (toggle.checked) { // Edit mode
				editor.style.display = 'block';
				preview.style.display = 'none';
			} else { // View mode
				renderMarkdown(editor.value);
				editor.style.display = 'none';
				preview.style.display = 'block';
			}
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_events_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			showConfirmationModal(this.dataset.confirmMessage || 'Sind Sie sicher?', () => this.submit());
		});
	});

	// Client-side file size validation
	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			if (!file) return;

			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.closest('.form-group').querySelector('.file-size-warning');

			if (file.size > maxSize) {
				if (warningElement) warningElement.style.display = 'block';
				e.target.value = ''; // Clear the invalid selection
			} else {
				if (warningElement) warningElement.style.display = 'none';
			}
		});
	});

	const assignModal = document.getElementById('assign-users-modal');
	const eventModal = document.getElementById('event-modal');
	const reqContainer = document.getElementById('modal-requirements-container');
	const resContainer = document.getElementById('modal-reservations-container');
	const cfContainer = document.getElementById('modal-custom-fields-container');
	const attachmentsList = document.getElementById('modal-attachments-list');
	const kitSelect = document.getElementById('kit-selection-modal');
	const findCrewBtn = document.getElementById('find-crew-btn');
	const findCrewModal = document.getElementById('find-crew-modal');

	const allCourses = JSON.parse(document.getElementById('allCoursesData').textContent);
	const allItems = JSON.parse(document.getElementById('allItemsData').textContent);

	const assignForm = document.getElementById('assign-users-form');
	const assignModalTitle = document.getElementById('assign-users-modal-title');
	const assignCheckboxes = document.getElementById('user-checkboxes-container');
	const assignEventIdInput = assignForm.querySelector('input[name="eventId"]');

	const openAssignModal = async (btn) => {
		const eventId = btn.dataset.eventId;
		const eventName = btn.dataset.eventName;
		assignModalTitle.textContent = `Team für "${eventName}" zuweisen`;
		assignEventIdInput.value = eventId;
		assignCheckboxes.innerHTML = '<p>Lade Benutzer...</p>';
		assignModal.classList.add('active');
		try {
			const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getAssignmentData&id=${eventId}`);
			if (!response.ok) throw new Error('Could not fetch assignment data.');
			const data = await response.json();
			assignCheckboxes.innerHTML = '';
			if (data.signedUpUsers && data.signedUpUsers.length > 0) {
				data.signedUpUsers.forEach(user => {
					const isChecked = data.assignedUserIds.includes(user.id) ? 'checked' : '';
					assignCheckboxes.innerHTML += `
						<label class="checkbox-label">
							<input type="checkbox" name="userIds" value="${user.id}" ${isChecked}>
							${user.username}
						</label>`;
				});
			} else {
				assignCheckboxes.innerHTML = '<p>Es haben sich noch keine Benutzer für dieses Event angemeldet.</p>';
			}
		} catch (error) {
			assignCheckboxes.innerHTML = '<p class="error-message">Fehler beim Laden der Benutzerdaten.</p>';
			console.error('Error fetching assignment data:', error);
		}
	};
	document.querySelectorAll('.assign-users-btn').forEach(btn => btn.addEventListener('click', () => openAssignModal(btn)));
	assignModal.querySelector('.modal-close-btn').addEventListener('click', () => assignModal.classList.remove('active'));

	const createRow = (container) => {
		const newRow = document.createElement('div'); newRow.className = 'dynamic-row';
		const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn-small btn-danger';
		removeBtn.innerHTML = '×'; removeBtn.onclick = () => newRow.remove();
		newRow.appendChild(removeBtn); container.appendChild(newRow);
		return newRow;
	};

	const addRequirementRow = (courseId = '', personCount = 1) => {
		const row = createRow(reqContainer);
		const select = document.createElement('select'); select.name = 'requiredCourseId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Lehrgang --</option>' + allCourses.map(c => `<option value="${c.id}">${c.name}</option>`).join('');
		select.value = courseId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'requiredPersons'; input.value = personCount; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

	const addReservationRow = (itemId = '', quantity = 1) => {
		const row = createRow(resContainer);
		const select = document.createElement('select'); select.name = 'itemId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Material --</option>' + allItems.map(i => `<option value="${i.id}">${i.name}</option>`).join('');
		select.value = itemId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'itemQuantity'; input.value = quantity; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

	const addCustomFieldRow = (fieldName = '', fieldType = 'TEXT') => {
		const row = createRow(cfContainer);
		const nameInput = document.createElement('input');
		nameInput.type = 'text';
		nameInput.name = 'customFieldName';
		nameInput.placeholder = 'Frage eingeben (z.B. T-Shirt Größe)';
		nameInput.className = 'form-group';
		nameInput.style.flexGrow = '2';
		nameInput.value = fieldName;

		const typeSelect = document.createElement('select');
		typeSelect.name = 'customFieldType';
		typeSelect.className = 'form-group';
		typeSelect.innerHTML = `<option value="TEXT">Text</option><option value="BOOLEAN">Ja/Nein</option>`;
		typeSelect.value = fieldType;

		row.prepend(nameInput, typeSelect);
	};

	const addAttachmentRow = (id, filename, filepath) => {
		const li = document.createElement('li'); li.id = `attachment-item-${id}`;
		li.innerHTML = `<a href="${contextPath}/download?id=${id}" target="_blank">${filename}</a>`;
		const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn btn-small btn-danger-outline';
		removeBtn.innerHTML = '×';
		removeBtn.onclick = () => {
			showConfirmationModal(`Anhang '${filename}' wirklich löschen?`, async () => {
				const formData = new FormData();
				formData.append('action', 'deleteAttachment');
				formData.append('id', id);
				formData.append('csrfToken', document.querySelector('#event-modal-form input[name="csrfToken"]').value);

				try {
					const response = await fetch(`${contextPath}/admin/veranstaltungen`, {
						method: 'POST',
						body: new URLSearchParams(formData)
					});
					if (response.ok) li.remove();
					else alert('Fehler beim Löschen des Anhangs.');
				} catch (e) {
					console.error('Error deleting attachment:', e);
					alert('Netzwerkfehler beim Löschen des Anhangs.');
				}
			});
		};
		li.appendChild(removeBtn); attachmentsList.appendChild(li);
	};

	if (kitSelect) {
		kitSelect.addEventListener('change', async () => {
			const kitId = kitSelect.value;
			if (!kitId) return;

			try {
				const response = await fetch(`${contextPath}/admin/kits?action=getKitItems&id=${kitId}`);
				if (!response.ok) throw new Error('Could not fetch kit items');
				const items = await response.json();
				items.forEach(item => addReservationRow(item.itemId, item.quantity));
			} catch (e) {
				console.error("Error fetching kit items:", e);
				alert("Fehler beim Laden der Kit-Inhalte.");
			}
			kitSelect.value = '';
		});
	}

	if (findCrewBtn) {
		findCrewBtn.addEventListener('click', async () => {
			const eventId = document.getElementById('event-modal-id').value;
			if (!eventId) {
				alert("Bitte speichern Sie das Event zuerst.");
				return;
			}
			const crewListContainer = document.getElementById('find-crew-list');
			crewListContainer.innerHTML = '<p>Suche nach qualifizierter Crew...</p>';
			findCrewModal.classList.add('active');
			try {
				const response = await fetch(`${contextPath}/api/admin/crew-finder?eventId=${eventId}`);
				if (!response.ok) throw new Error('Could not find crew members.');
				const users = await response.json();

				document.getElementById('find-crew-event-id').value = eventId;
				crewListContainer.innerHTML = '';

				if (users.length > 0) {
					users.forEach(user => {
						crewListContainer.innerHTML += `
							<label class="checkbox-label" style="padding: 0.5rem; border-bottom: 1px solid var(--border-color);">
								<input type="checkbox" name="userIds" value="${user.id}">
								${user.username}
							</label>`;
					});
				} else {
					crewListContainer.innerHTML = '<p>Keine passenden und verfügbaren Benutzer gefunden.</p>';
				}

			} catch (e) {
				console.error("Error finding crew:", e);
				crewListContainer.innerHTML = '<p class="error-message">Fehler bei der Crew-Suche.</p>';
			}
		});
		findCrewModal.querySelector('.modal-close-btn').addEventListener('click', () => findCrewModal.classList.remove('active'));
	}

	document.getElementById('modal-add-requirement-btn').addEventListener('click', () => addRequirementRow());
	document.getElementById('modal-add-reservation-btn').addEventListener('click', () => addReservationRow());
	document.getElementById('modal-add-custom-field-btn').addEventListener('click', () => addCustomFieldRow());

	const eventForm = document.getElementById('event-modal-form');
	const eventModalTitle = document.getElementById('event-modal-title');
	const actionInput = document.getElementById('event-modal-action');
	const idInput = document.getElementById('event-modal-id');

	const resetEventModal = () => {
		eventForm.reset();
		reqContainer.innerHTML = '';
		resContainer.innerHTML = '';
		cfContainer.innerHTML = '';
		attachmentsList.innerHTML = '';
		document.querySelectorAll('.file-size-warning').forEach(el => el.style.display = 'none');
	};

	const openEventModal = () => eventModal.classList.add('active');
	const closeEventModal = () => eventModal.classList.remove('active');
	eventModal.querySelector('.modal-close-btn').addEventListener('click', closeEventModal);
	eventModal.addEventListener('click', e => { if (e.target === eventModal) closeEventModal(); });

	document.getElementById('new-event-btn').addEventListener('click', () => {
		resetEventModal();
		eventModalTitle.textContent = "Neues Event anlegen";
		actionInput.value = "create";
		idInput.value = "";
		openEventModal();
	});

	document.querySelectorAll('.edit-event-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const eventId = btn.dataset.eventId;
			try {
				const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getEventData&id=${eventId}`);
				if (!response.ok) throw new Error('Event data could not be fetched.');
				const event = await response.json();
				resetEventModal();
				eventModalTitle.textContent = "Event bearbeiten";
				actionInput.value = "update";
				idInput.value = event.id;
				eventForm.querySelector('#name-modal').value = event.name || '';
				eventForm.querySelector('#location-modal').value = event.location || '';
				eventForm.querySelector('#leaderUserId-modal').value = event.leaderUserId || '';
				eventForm.querySelector('#eventDateTime-modal').value = event.eventDateTime ? event.eventDateTime.substring(0, 16) : '';
				eventForm.querySelector('#endDateTime-modal').value = event.endDateTime ? event.endDateTime.substring(0, 16) : '';
				eventForm.querySelector('#description-modal').value = event.description || '';

				event.skillRequirements?.forEach(req => addRequirementRow(req.requiredCourseId, req.requiredPersons));
				event.reservedItems?.forEach(res => addReservationRow(res.id, res.quantity));
				event.customFields?.forEach(cf => addCustomFieldRow(cf.fieldName, cf.fieldType));
				event.attachments?.forEach(att => addAttachmentRow(att.id, att.filename, att.filepath));

				openEventModal();
			} catch (error) {
				console.error('Error opening edit modal:', error);
				alert('Fehler beim Laden der Event-Daten.');
			}
		});
	});

	const tabButtons = eventModal.querySelectorAll('.modal-tab-button');
	const tabContents = eventModal.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_feedback.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const csrfToken = document.body.dataset.csrfToken;

	const columns = document.querySelectorAll('.feedback-list');
	if (!columns.length || typeof Sortable === 'undefined') {
		if (typeof Sortable === 'undefined') {
			console.error("Sortable.js library not loaded. Drag & drop functionality will not be available.");
		}
		return;
	}

	const modal = document.getElementById('feedback-details-modal');
	const modalForm = document.getElementById('feedback-details-form');
	const modalIdInput = document.getElementById('feedback-modal-id');
	const modalOriginalSubject = document.getElementById('feedback-modal-original-subject');
	const modalDisplayTitle = document.getElementById('feedback-modal-display-title');
	const modalContent = document.getElementById('feedback-modal-content');
	const modalStatus = document.getElementById('feedback-modal-status');

	const api = {
		async getDetails(id) {
			const response = await fetch(`${contextPath}/admin/action/feedback?action=getDetails`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
				body: new URLSearchParams({ submissionId: id, csrfToken: csrfToken })
			});
			if (!response.ok) throw new Error('Could not fetch feedback details.');
			return response.json();
		},
		async update(formData) {
			const response = await fetch(`${contextPath}/admin/action/feedback?action=updateStatus`, {
				method: 'POST',
				body: new URLSearchParams(formData)
			});
			return response.json();
		},
		async reorder(data) {
			const response = await fetch(`${contextPath}/admin/action/feedback?action=reorder`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
				body: new URLSearchParams({
					csrfToken: csrfToken,
					reorderData: JSON.stringify(data)
				})
			});
			return response.json();
		}
	};

	document.querySelector('.feedback-board').addEventListener('click', async (e) => {
		const card = e.target.closest('.feedback-card-item');
		if (!card) return;

		try {
			const submissionId = card.dataset.id;
			const result = await api.getDetails(submissionId);
			if (!result.success) throw new Error(result.message);

			const submission = result.data;

			modalIdInput.value = submission.id;
			modalOriginalSubject.textContent = submission.subject;
			modalDisplayTitle.value = submission.displayTitle || '';
			modalContent.textContent = submission.content;
			if (window.renderMarkdown) window.renderMarkdown(modalContent);
			modalStatus.value = submission.status;

			modal.classList.add('active');
		} catch (error) {
			console.error(error);
			showToast('Details konnten nicht geladen werden.', 'danger');
		}
	});

	modalForm.addEventListener('submit', async (e) => {
		e.preventDefault();
		const formData = new FormData(modalForm);
		formData.append('csrfToken', csrfToken);

		try {
			const result = await api.update(formData);
			if (result.success) {
				showToast('Änderungen gespeichert.', 'success');
				modal.classList.remove('active');
				window.location.reload(); // Reload to reflect changes
			} else {
				throw new Error(result.message);
			}
		} catch (error) {
			showToast(error.message || 'Fehler beim Speichern.', 'danger');
		}
	});

	modal.querySelector('.modal-close-btn').addEventListener('click', () => modal.classList.remove('active'));
	modal.addEventListener('click', (e) => { if (e.target === modal) modal.classList.remove('active'); });

	const handleReorder = async (evt) => {
		const item = evt.item;
		const toList = evt.to;
		const newStatus = toList.dataset.statusId;
		const submissionId = item.dataset.id;

		item.dataset.status = newStatus;

		const reorderData = {
			submissionId: parseInt(submissionId, 10),
			newStatus: newStatus,
			orderedIds: Array.from(toList.children).map(child => parseInt(child.dataset.id, 10))
		};

		try {
			const result = await api.reorder(reorderData);
			if (result.success) {
				showToast(result.message, 'success');
			} else {
				throw new Error(result.message);
			}
		} catch (error) {
			console.error('Error saving new order:', error);
			showToast(error.message || 'Sortierung konnte nicht gespeichert werden.', 'danger');
		}
	};

	columns.forEach(col => {
		new Sortable(col, {
			group: 'feedback',
			animation: 150,
			ghostClass: 'sortable-ghost',
			onEnd: handleReorder
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_files.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {

	// --- Upload New Version Modal Logic ---
	const uploadModal = document.getElementById('upload-version-modal');
	if (uploadModal) {
		const modalTitle = document.getElementById('upload-modal-title');
		const modalFileIdInput = document.getElementById('upload-file-id');
		const modalFileNameSpan = document.getElementById('upload-file-name');
		const fileInput = document.getElementById('new-file-version');
		const closeModalBtn = uploadModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.upload-new-version-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				const fileId = btn.dataset.fileId;
				const fileName = btn.dataset.fileName;

				modalFileIdInput.value = fileId;
				modalFileNameSpan.textContent = fileName;
				fileInput.value = ''; // Reset file input
				uploadModal.classList.add('active');
			});
		});

		const closeModal = () => uploadModal.classList.remove('active');
		if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
		uploadModal.addEventListener('click', (e) => {
			if (e.target === uploadModal) closeModal();
		});
	}

	// --- Reassign File Modal Logic ---
	const reassignModal = document.getElementById('reassign-file-modal');
	if (reassignModal) {
		const modalFileIdInput = document.getElementById('reassign-file-id');
		const modalFileNameSpan = document.getElementById('reassign-file-name');
		const closeModalBtn = reassignModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.reassign-file-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalFileIdInput.value = btn.dataset.fileId;
				modalFileNameSpan.textContent = btn.dataset.fileName;
				reassignModal.classList.add('active');
			});
		});

		const closeReassignModal = () => reassignModal.classList.remove('active');
		if (closeModalBtn) closeModalBtn.addEventListener('click', closeReassignModal);
		reassignModal.addEventListener('click', (e) => {
			if (e.target === reassignModal) closeReassignModal();
		});
	}

	// --- Generic File Input Size Validation ---
	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			if (!file) return;

			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.closest('.form-group').querySelector('.file-size-warning');

			if (file.size > maxSize) {
				if (warningElement) warningElement.style.display = 'block';
				e.target.value = ''; // Clear the invalid selection
			} else {
				if (warningElement) warningElement.style.display = 'none';
			}
		});
	});

});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_kits.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	// --- Kit Create/Edit Modal ---
	const kitModal = document.getElementById('kit-modal');
	if (kitModal) {
		const form = kitModal.querySelector('form');
		const title = kitModal.querySelector('h3');
		const actionInput = form.querySelector('input[name="action"]');
		const idInput = form.querySelector('input[name="id"]');
		const nameInput = form.querySelector('#name-modal');
		const descInput = form.querySelector('#description-modal');
		const locationInput = form.querySelector('#location-modal');

		document.getElementById('new-kit-btn')?.addEventListener('click', () => {
			form.reset();
			title.textContent = 'Neues Kit anlegen';
			actionInput.value = 'create';
			idInput.value = '';
		});

		document.querySelectorAll('.edit-kit-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				form.reset();
				title.textContent = 'Kit bearbeiten';
				actionInput.value = 'update';
				idInput.value = btn.dataset.kitId;
				nameInput.value = btn.dataset.kitName;
				descInput.value = btn.dataset.kitDesc;
				locationInput.value = btn.dataset.kitLocation || '';
			});
		});
	}

	// --- Kit Content Management (Accordion & Dynamic Rows) ---
	const allItems = JSON.parse(document.getElementById('allItemsData').textContent || '[]');
	const allSelectableItems = JSON.parse(document.getElementById('allSelectableItemsData').textContent || '[]');

	// Toggle accordion for each kit
	document.querySelectorAll('.kit-header').forEach(header => {
		header.addEventListener('click', () => {
			const content = header.nextElementSibling;
			const icon = header.querySelector('.toggle-icon');
			const isOpening = content.style.display !== 'block';

			content.style.display = isOpening ? 'block' : 'none';
			icon.classList.toggle('fa-chevron-down', !isOpening);
			icon.classList.toggle('fa-chevron-up', isOpening);
		});
	});

	const updateMaxQuantity = (selectElement) => {
		const selectedId = parseInt(selectElement.value, 10);
		const quantityInput = selectElement.closest('.dynamic-row').querySelector('input[name="quantities"]');
		const selectedItem = allItems.find(item => item.id === selectedId);

		if (selectedItem) {
			quantityInput.max = selectedItem.availableQuantity;
			quantityInput.title = `Maximal verfügbar: ${selectedItem.availableQuantity}`;
			if (parseInt(quantityInput.value) > selectedItem.availableQuantity) {
				quantityInput.value = selectedItem.availableQuantity;
			}
		} else {
			quantityInput.removeAttribute('max');
			quantityInput.title = '';
		}
	};

	const createItemRow = (item = { id: '', quantity: 1 }) => {
		const row = document.createElement('div');
		row.className = 'dynamic-row';

		const select = document.createElement('select');
		select.name = 'itemIds';
		select.className = 'form-group';
		select.innerHTML = '<option value="">-- Artikel auswählen --</option>' +
			allSelectableItems.map(i => `<option value="${i.id}">${i.name}</option>`).join('');
		select.value = item.id;

		const quantityInput = document.createElement('input');
		quantityInput.type = 'number';
		quantityInput.name = 'quantities';
		quantityInput.value = item.quantity;
		quantityInput.min = '1';
		quantityInput.className = 'form-group';
		quantityInput.style.maxWidth = '100px';
		quantityInput.required = true;

		const removeBtn = document.createElement('button');
		removeBtn.type = 'button';
		removeBtn.className = 'btn btn-small btn-danger btn-remove-kit-item-row';
		removeBtn.title = 'Zeile entfernen';
		removeBtn.innerHTML = '×';

		row.appendChild(select);
		row.appendChild(quantityInput);
		row.appendChild(removeBtn);

		select.addEventListener('change', () => updateMaxQuantity(select));

		// Initial check in case the row is pre-populated
		if (item.id) {
			updateMaxQuantity(select);
		}

		return row;
	};

	document.querySelectorAll('.kit-content select[name="itemIds"]').forEach(select => {
		updateMaxQuantity(select);
	});

	// Event delegation for adding/removing item rows
	document.body.addEventListener('click', e => {
		const addBtn = e.target.closest('.btn-add-kit-item-row');
		const removeBtn = e.target.closest('.btn-remove-kit-item-row');

		if (addBtn) {
			e.preventDefault();
			const container = document.getElementById(addBtn.dataset.containerId);
			if (container) {
				const noItemsMsg = container.querySelector('.no-items-message');
				if (noItemsMsg) noItemsMsg.remove();
				container.appendChild(createItemRow());
			}
		} else if (removeBtn) {
			e.preventDefault();
			const row = removeBtn.closest('.dynamic-row');
			const container = row.parentElement;
			showConfirmationModal("Diesen Artikel wirklich aus dem Kit entfernen?", () => {
				row.remove();
				// If the container is now empty, show the placeholder message again.
				if (container && !container.querySelector('.dynamic-row')) {
					const p = document.createElement('p');
					p.className = 'no-items-message';
					p.textContent = 'Dieses Kit ist leer. Fügen Sie einen Artikel hinzu.';
					container.appendChild(p);
				}
			});
		}
	});

	// Enforce max value on quantity inputs
	document.body.addEventListener('input', e => {
		if (e.target.matches('input[name="quantities"]')) {
			const max = parseInt(e.target.max, 10);
			const value = parseInt(e.target.value, 10);
			if (!isNaN(max) && !isNaN(value) && value > max) {
				e.target.value = max;
			}
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_matrix.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const modalOverlay = document.getElementById('attendance-modal');
	if (!modalOverlay) return;

	// Get references to all modal elements once
	const modalTitle = document.getElementById('modal-title');
	const modalUserId = document.getElementById('modal-user-id');
	const modalMeetingId = document.getElementById('modal-meeting-id');
	const modalAttended = document.getElementById('modal-attended');
	const modalRemarks = document.getElementById('modal-remarks');
	const closeBtn = modalOverlay.querySelector('.modal-close-btn');

	/**
	 * Opens the attendance modal and populates it with data from the clicked cell.
	 * @param {HTMLElement} cell The table cell that was clicked.
	 */
	const openModal = (cell) => {
		const userData = cell.dataset;
		modalTitle.textContent = `Nutzer: ${userData.userName} | Meeting: ${userData.meetingName}`;
		modalUserId.value = userData.userId;
		modalMeetingId.value = userData.meetingId;
		modalRemarks.value = userData.remarks;
		// The value from dataset is a string, so we need to compare it to 'true'
		modalAttended.checked = (userData.attended === 'true');
		modalOverlay.classList.add('active');
	};

	/**
	 * Closes the attendance modal.
	 */
	const closeModal = () => modalOverlay.classList.remove('active');

	// Attach click listener to all qualification cells to open the modal
	document.querySelectorAll('.qual-cell').forEach(cell => {
		cell.addEventListener('click', (e) => openModal(e.currentTarget));
	});

	// --- Modal Closing Listeners ---
	if (closeBtn) closeBtn.addEventListener('click', closeModal);

	// Close modal if the overlay background is clicked
	modalOverlay.addEventListener('click', (event) => {
		if (event.target === modalOverlay) closeModal();
	});

	// Close modal on Escape key press
	document.addEventListener('keydown', (event) => {
		if (event.key === 'Escape' && modalOverlay.classList.contains('active')) {
			closeModal();
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_meeting_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const modal = document.getElementById('meeting-modal');
	if (!modal) return;

	const form = document.getElementById('meeting-modal-form');
	const modalTitle = document.getElementById('meeting-modal-title');
	const actionInput = document.getElementById('meeting-action');
	const idInput = document.getElementById('meeting-id');
	const attachmentsList = document.getElementById('modal-attachments-list');
	const closeModalBtn = modal.querySelector('.modal-close-btn');

	const openModal = () => modal.classList.add('active');
	const closeModal = () => modal.classList.remove('active');

	const resetModal = () => {
		form.reset();
		attachmentsList.innerHTML = '';
	};

	const newMeetingBtn = document.getElementById('new-meeting-btn');
	if (newMeetingBtn) {
		newMeetingBtn.addEventListener('click', () => {
			resetModal();
			modalTitle.textContent = "Neues Meeting planen";
			actionInput.value = "create";
			idInput.value = "";
			openModal();
		});
	}

	const addAttachmentRow = (attachment, courseId) => {
		const li = document.createElement('li');
		li.id = `attachment-item-${attachment.id}`;
		li.innerHTML = `<a href="${contextPath}/download?id=${attachment.id}" target="_blank">${attachment.filename}</a> (Rolle: ${attachment.requiredRole})`;
		const removeBtn = document.createElement('button');
		removeBtn.type = 'button';
		removeBtn.className = 'btn btn-small btn-danger-outline';
		removeBtn.innerHTML = '×';
		removeBtn.onclick = () => {
			showConfirmationModal(`Anhang '${attachment.filename}' wirklich löschen?`, () => {
				const csrfToken = form.querySelector('input[name="csrfToken"]').value; // Get token from main form
				const deleteForm = document.createElement('form');
				deleteForm.method = 'post';
				deleteForm.action = `${contextPath}/admin/meetings`;
				deleteForm.innerHTML = `
					<input type="hidden" name="action" value="deleteAttachment">
					<input type="hidden" name="attachmentId" value="${attachment.id}">
					<input type="hidden" name="courseId" value="${courseId}">
					<input type="hidden" name="csrfToken" value="${csrfToken}">
				`;
				document.body.appendChild(deleteForm);
				deleteForm.submit();
			});
		};
		li.appendChild(removeBtn);
		attachmentsList.appendChild(li);
	};

	document.querySelectorAll('.edit-meeting-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const meetingId = btn.dataset.meetingId;
			try {
				const response = await fetch(`${contextPath}/admin/meetings?action=getMeetingData&id=${meetingId}`);
				if (!response.ok) throw new Error('Meeting data could not be fetched.');
				const data = await response.json();
				const meeting = data.meetingData;
				const attachments = data.attachmentsData;

				resetModal();
				modalTitle.textContent = "Meeting bearbeiten";
				actionInput.value = "update";
				idInput.value = meeting.id;
				form.querySelector('#name-modal').value = meeting.name || '';
				form.querySelector('#location-modal').value = meeting.location || '';
				form.querySelector('#meetingDateTime-modal').value = meeting.meetingDateTime ? meeting.meetingDateTime.substring(0, 16) : '';
				form.querySelector('#endDateTime-modal').value = meeting.endDateTime ? meeting.endDateTime.substring(0, 16) : '';
				form.querySelector('#leader-modal').value = meeting.leaderUserId || '';
				form.querySelector('#description-modal').value = meeting.description || '';

				if (attachments && attachments.length > 0) {
					attachments.forEach(att => addAttachmentRow(att, meeting.courseId));
				} else {
					attachmentsList.innerHTML = '<li>Keine Anhänge vorhanden.</li>';
				}

				openModal();
			} catch (error) {
				console.error('Error fetching meeting data:', error);
				alert('Fehler beim Laden der Meeting-Daten.');
			}
		});
	});

	if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
	modal.addEventListener('click', e => { if (e.target === modal) closeModal(); });
	document.addEventListener('keydown', e => { if (e.key === 'Escape' && modal.classList.contains('active')) closeModal(); });

	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.nextElementSibling;
			if (file && file.size > maxSize) {
				warningElement.style.display = 'block';
				e.target.value = '';
			} else if (warningElement) {
				warningElement.style.display = 'none';
			}
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_reports.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const eventTrendCanvas = document.getElementById('eventTrendChart');
	const userActivityCanvas = document.getElementById('userActivityChart');

	const getJsonData = (id) => {
		const element = document.getElementById(id);
		if (element) {
			try {
				return JSON.parse(element.textContent);
			} catch (e) {
				console.error(`Failed to parse JSON from #${id}`, e);
				return null;
			}
		}
		return null;
	};

	const eventTrendData = getJsonData('eventTrendData');
	const userActivityData = getJsonData('userActivityData');

	if (eventTrendCanvas && eventTrendData && eventTrendData.length > 0) {
		const labels = eventTrendData.map(d => d.month);
		const data = eventTrendData.map(d => d.count);

		new Chart(eventTrendCanvas.getContext('2d'), {
			type: 'line',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl Events pro Monat',
					data: data,
					fill: true,
					borderColor: 'rgb(0, 123, 255)',
					backgroundColor: 'rgba(0, 123, 255, 0.1)',
					tension: 0.1
				}]
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					y: {
						beginAtZero: true,
						ticks: {
							stepSize: 1
						}
					}
				}
			}
		});
	} else if (eventTrendCanvas) {
		eventTrendCanvas.parentElement.innerHTML = '<p>Nicht genügend Daten für den Event-Trend vorhanden.</p>';
	}

	if (userActivityCanvas && userActivityData && userActivityData.length > 0) {
		const labels = userActivityData.map(d => d.username);
		const data = userActivityData.map(d => d.participation_count);

		new Chart(userActivityCanvas.getContext('2d'), {
			type: 'bar',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl zugewiesener Events',
					data: data,
					backgroundColor: 'rgba(0, 123, 255, 0.6)',
					borderColor: 'rgb(0, 123, 255)',
					borderWidth: 1
				}]
			},
			options: {
				indexAxis: 'y', 
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					x: {
						beginAtZero: true,
						ticks: {
							stepSize: 1
						}
					}
				},
				plugins: {
					legend: {
						display: false
					}
				}
			}
		});
	} else if (userActivityCanvas) {
		userActivityCanvas.parentElement.innerHTML = '<p>Nicht genügend Daten für Benutzeraktivität vorhanden.</p>';
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_requests.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	const handleRequestAction = async (form) => {
		try {
			// FIX: Use URLSearchParams to ensure the correct Content-Type for the servlet.
			const formData = new URLSearchParams(new FormData(form));

			const response = await fetch(form.action, {
				method: 'POST',
				body: formData
			});
			const result = await response.json();

			if (response.ok && result.success) {
				showToast(result.message, 'success');
				const row = document.querySelector(`tr[data-request-id='${result.data.requestId}']`);
				if (row) {
					row.style.transition = 'opacity 0.5s';
					row.style.opacity = '0';
					setTimeout(() => row.remove(), 500);
				}
			} else {
				showToast(result.message || 'Ein Fehler ist aufgetreten.', 'danger');
			}
		} catch (error) {
			console.error('Error processing request action:', error);
			showToast('Ein Netzwerkfehler ist aufgetreten.', 'danger');
		}
	};

	document.querySelectorAll('.js-approve-request-form').forEach(form => {
		form.addEventListener('submit', (e) => {
			e.preventDefault();
			showConfirmationModal('Diese Änderungen wirklich genehmigen und anwenden?', () => handleRequestAction(form));
		});
	});

	document.querySelectorAll('.js-deny-request-form').forEach(form => {
		form.addEventListener('submit', (e) => {
			e.preventDefault();
			showConfirmationModal('Diese Änderungsanfrage wirklich ablehnen?', () => handleRequestAction(form));
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_roles.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const modal = document.getElementById('role-permissions-modal');
	if (!modal) return;

	const modalTitle = document.getElementById('role-modal-title');
	const roleIdInput = document.getElementById('modal-role-id');
	const roleNameInput = document.getElementById('modal-role-name');
	const checkboxContainer = document.getElementById('permissions-checkbox-container');
	const allPermissions = JSON.parse(document.getElementById('allPermissionsData').textContent || '[]');

	/**
	 * Opens the permissions modal and fetches the permissions for the selected role.
	 * @param {HTMLElement} btn The button that was clicked.
	 */
	const openModal = async (btn) => {
		const roleId = btn.dataset.roleId;
		const roleName = btn.dataset.roleName;

		modalTitle.textContent = `Berechtigungen für Rolle: ${roleName}`;
		roleIdInput.value = roleId;
		roleNameInput.value = roleName;
		checkboxContainer.innerHTML = '<p>Lade Berechtigungen...</p>';
		modal.classList.add('active');

		try {
			const response = await fetch(`${contextPath}/admin/roles?action=getRolePermissions&roleId=${roleId}`);
			if (!response.ok) throw new Error('Could not fetch role permissions');

			const data = await response.json();
			const assignedIds = new Set(data.permissionIds);

			checkboxContainer.innerHTML = ''; // Clear loading message

			// Group permissions for better UI
			const grouped = allPermissions.reduce((acc, p) => {
				const groupName = p.permissionKey.split('_')[0] || 'ALLGEMEIN';
				if (!acc[groupName]) acc[groupName] = [];
				acc[groupName].push(p);
				return acc;
			}, {});


			for (const groupName in grouped) {
				const details = document.createElement('details');
				details.open = true; // Default to open
				const summary = document.createElement('summary');
				summary.textContent = groupName;
				details.appendChild(summary);

				const groupDiv = document.createElement('div');
				groupDiv.className = 'permission-group';
				grouped[groupName].forEach(p => {
					const isChecked = assignedIds.has(p.id) ? 'checked' : '';
					// Prevent ADMIN role from having the main access permission removed to avoid lockouts.
					const isDisabled = p.permissionKey === 'ACCESS_ADMIN_PANEL' && roleName === 'ADMIN' ? 'disabled' : '';
					const label = document.createElement('label');
					label.className = 'checkbox-label';
					label.innerHTML = `
                        <input type="checkbox" name="permissionIds" value="${p.id}" ${isChecked} ${isDisabled}>
                        <span>
                            <strong>${p.permissionKey}</strong>
                            <small>${p.description}</small>
                        </span>
                    `;
					groupDiv.appendChild(label);
				});
				details.appendChild(groupDiv);
				checkboxContainer.appendChild(details);
			}

		} catch (error) {
			console.error("Error fetching role permissions:", error);
			checkboxContainer.innerHTML = '<p class="error-message">Fehler beim Laden der Berechtigungen.</p>';
		}
	};

	document.querySelectorAll('.edit-permissions-btn').forEach(btn => {
		btn.addEventListener('click', (e) => openModal(e.currentTarget));
	});

	const closeModal = () => modal.classList.remove('active');

	modal.querySelector('.modal-close-btn').addEventListener('click', closeModal);
	modal.addEventListener('click', (e) => {
		if (e.target === modal) closeModal();
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_storage_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const lightbox = document.getElementById('lightbox');
	if (lightbox) {
		const lightboxImage = document.getElementById('lightbox-image');
		const closeBtn = lightbox.querySelector('.lightbox-close');

		document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
			trigger.addEventListener('click', (e) => {
				e.preventDefault();
				lightboxImage.src = trigger.dataset.src;
				lightbox.style.display = 'flex';
			});
		});

		const closeLightbox = () => {
			lightbox.style.display = 'none';
			lightboxImage.src = '';
		};

		if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
		lightbox.addEventListener('click', (e) => {
			if (e.target === lightbox) {
				closeLightbox();
			}
		});
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && lightbox.style.display === 'flex') {
				closeLightbox();
			}
		});
	}

	const itemModal = document.getElementById('item-modal');
	if (itemModal) {
		const form = itemModal.querySelector('form');
		const title = itemModal.querySelector('h3');
		const actionInput = form.querySelector('input[name="action"]');
		const idInput = form.querySelector('input[name="id"]');
		const closeModalBtn = itemModal.querySelector('.modal-close-btn');

		document.getElementById('new-item-btn').addEventListener('click', () => {
			form.reset();
			title.textContent = 'Neuen Lagerartikel anlegen';
			actionInput.value = 'create';
			itemModal.classList.add('active');
		});

		document.querySelectorAll('.edit-item-btn').forEach(btn => {
			btn.addEventListener('click', async () => {
				form.reset();
				const fetchUrl = btn.dataset.fetchUrl;
				try {
					const response = await fetch(fetchUrl);
					if (!response.ok) throw new Error('Could not fetch item data.');
					const itemData = await response.json();

					title.textContent = 'Lagerartikel bearbeiten';
					actionInput.value = 'update';
					idInput.value = itemData.id;
					form.querySelector('#name-modal').value = itemData.name || '';
					form.querySelector('#location-modal').value = itemData.location || '';
					form.querySelector('#cabinet-modal').value = itemData.cabinet || '';
					form.querySelector('#compartment-modal').value = itemData.compartment || '';
					form.querySelector('#quantity-modal').value = itemData.quantity;
					form.querySelector('#maxQuantity-modal').value = itemData.maxQuantity;
					form.querySelector('#weight_kg-modal').value = itemData.weightKg || '';
					form.querySelector('#price_eur-modal').value = itemData.priceEur || '';
					itemModal.classList.add('active');
				} catch (error) {
					console.error("Failed to open edit modal:", error);
					alert("Fehler beim Laden der Artikeldaten.");
				}
			});
		});
		closeModalBtn.addEventListener('click', () => itemModal.classList.remove('active'));
	}

	const defectModal = document.getElementById('defect-modal');
	if (defectModal) {
		const modalTitle = defectModal.querySelector('h3');
		const itemIdInput = defectModal.querySelector('#defect-item-id');
		const defectQtyInput = defectModal.querySelector('#defective_quantity');
		const reasonInput = defectModal.querySelector('#defect_reason');
		const closeModalBtn = defectModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.defect-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
				itemIdInput.value = btn.dataset.itemId;
				defectQtyInput.value = btn.dataset.currentDefectQty;
				defectQtyInput.max = btn.dataset.maxQty;
				reasonInput.value = btn.dataset.currentReason;
				defectModal.classList.add('active');
			});
		});
		closeModalBtn.addEventListener('click', () => defectModal.classList.remove('active'));
	}

	const repairModal = document.getElementById('repair-modal');
	if (repairModal) {
		const modalTitle = repairModal.querySelector('#repair-modal-title');
		const itemIdInput = repairModal.querySelector('#repair-item-id');
		const repairQtyInput = repairModal.querySelector('#repaired_quantity');
		const closeModalBtn = repairModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.repair-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Artikel "${btn.dataset.itemName}" repariert`;
				itemIdInput.value = btn.dataset.itemId;
				repairQtyInput.value = "1";
				repairQtyInput.max = btn.dataset.maxRepairQty;
				repairModal.classList.add('active');
			});
		});

		closeModalBtn.addEventListener('click', () => repairModal.classList.remove('active'));
		repairModal.addEventListener('click', (e) => {
			if (e.target === repairModal) repairModal.classList.remove('active');
		});
	}

	const maintenanceModal = document.getElementById('maintenance-modal');
	if (maintenanceModal) {
		const modalTitle = maintenanceModal.querySelector('h3');
		const itemIdInput = maintenanceModal.querySelector('#maintenance-item-id');
		const closeModalBtn = maintenanceModal.querySelector('.modal-close-btn');
		const statusSelect = maintenanceModal.querySelector('#maintenance-status');

		document.querySelectorAll('.maintenance-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Wartungs-Status für "${btn.dataset.itemName}"`;
				itemIdInput.value = btn.dataset.itemId;
				statusSelect.value = btn.dataset.currentStatus;
				maintenanceModal.classList.add('active');
			});
		});

		closeModalBtn.addEventListener('click', () => maintenanceModal.classList.remove('active'));
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_system.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const apiUrl = `${contextPath}/api/admin/system-stats`;

	const cpuProgress = document.getElementById('cpu-progress');
	const cpuText = document.getElementById('cpu-text');
	const ramProgress = document.getElementById('ram-progress');
	const ramText = document.getElementById('ram-text');
	const diskProgress = document.getElementById('disk-progress');
	const diskText = document.getElementById('disk-text');
	const uptimeText = document.getElementById('uptime-text');
	const batteryCard = document.getElementById('battery-card');
	const batteryProgress = document.getElementById('battery-progress');
	const batteryText = document.getElementById('battery-text');

	const formatGigaBytes = (gb) => {
		if (gb === 0) return '0 GB';
		if (gb < 1) return `${(gb * 1024).toFixed(0)} MB`;
		return `${gb.toFixed(2)} GB`;
	};

	const updateUI = (stats) => {
		const cpuPercent = stats.cpuLoad.toFixed(1);
		cpuProgress.style.width = cpuPercent + '%';
		cpuText.textContent = cpuPercent + '%';

		if (stats.totalMemory > 0) {
			const ramPercent = (stats.usedMemory / stats.totalMemory) * 100;
			ramProgress.style.width = ramPercent.toFixed(1) + '%';
			ramText.textContent = `${formatGigaBytes(stats.usedMemory)} / ${formatGigaBytes(stats.totalMemory)}`;
		}

		if (stats.totalDiskSpace > 0) {
			const diskPercent = (stats.usedDiskSpace / stats.totalDiskSpace) * 100;
			diskProgress.style.width = diskPercent.toFixed(1) + '%';
			diskText.textContent = `${formatGigaBytes(stats.usedDiskSpace)} / ${formatGigaBytes(stats.totalDiskSpace)}`;
		}

        const uptimeCard = uptimeText.closest('.card');
		if (stats.uptime && stats.uptime !== 'Nicht verfügbar') {
            if(uptimeCard) uptimeCard.style.display = 'block';
			uptimeText.textContent = stats.uptime;
		} else {
			if(uptimeCard) uptimeCard.style.display = 'none';
		}

		if (stats.batteryPercentage >= 0) {
			batteryCard.style.display = 'block';
			const batteryPercent = stats.batteryPercentage;
			batteryProgress.style.width = batteryPercent + '%';
			batteryText.textContent = batteryPercent + '%';
		} else {
			batteryCard.style.display = 'none';
		}
	};

	const fetchStats = async () => {
		try {
			const response = await fetch(apiUrl);
			if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
			const data = await response.json();
			updateUI(data);
		} catch (error) {
			console.error("Could not fetch system stats:", error);
			cpuText.textContent = "Fehler";
			ramText.textContent = "Fehler";
			diskText.textContent = "Fehler";
			uptimeText.textContent = "Fehler";
		}
	};

	fetchStats();
	let intervalId = setInterval(fetchStats, 5000);

	document.addEventListener("visibilitychange", () => {
		if (document.hidden) {
			clearInterval(intervalId);
		} else {
			fetchStats();
			intervalId = setInterval(fetchStats, 5000);
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_users.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	const modal = document.getElementById('user-modal');
	if (!modal) return;

	const form = document.getElementById('user-modal-form');
	const title = document.getElementById('user-modal-title');
	const actionInput = form.querySelector('#user-modal-action');
	const idInput = form.querySelector('#userId-modal');
	const usernameInput = form.querySelector('#username-modal');
	const passwordInput = form.querySelector('#password-modal');
	const passwordGroup = form.querySelector('#password-group');
	const roleInput = form.querySelector('#role-modal');
	const classYearInput = form.querySelector('#classYear-modal');
	const classNameInput = form.querySelector('#className-modal');
	const emailInput = form.querySelector('#email-modal');
	const permissionsContainer = document.getElementById('permissions-checkbox-container');
	const closeModalBtn = modal.querySelector('.modal-close-btn');

	const groupedPermissions = JSON.parse(document.getElementById('allPermissionsData').textContent);

	const closeModal = () => modal.classList.remove('active');

	const populatePermissions = (assignedIds = new Set()) => {
		permissionsContainer.innerHTML = '';

		for (const [groupName, permissionsInGroup] of Object.entries(groupedPermissions)) {
			const details = document.createElement('details');
			details.open = true;

			const summary = document.createElement('summary');
			summary.style.fontWeight = 'bold';
			summary.style.cursor = 'pointer';
			summary.style.padding = '0.5rem 0';
			summary.textContent = groupName;

			const groupDiv = document.createElement('div');
			groupDiv.style.paddingLeft = '1rem';

			permissionsInGroup.forEach(p => {
				const isChecked = assignedIds.has(p.id) ? 'checked' : '';
				const label = document.createElement('label');
				label.style.display = 'flex';
				label.style.alignItems = 'flex-start';
				label.style.marginBottom = '0.5rem';
				label.innerHTML = `
                    <input type="checkbox" name="permissionIds" value="${p.id}" ${isChecked} style="margin-top: 5px; margin-right: 10px;">
                    <div>
                        <strong>${p.permissionKey.replace(groupName + '_', '')}</strong>
                        <small style="display: block; color: var(--text-muted-color);">${p.description}</small>
                    </div>
                `;
				groupDiv.appendChild(label);
			});

			details.appendChild(summary);
			details.appendChild(groupDiv);
			permissionsContainer.appendChild(details);
		}
	};

	const newUserBtn = document.getElementById('new-user-btn');
	if (newUserBtn) {
		newUserBtn.addEventListener('click', () => {
			form.reset();
			title.textContent = "Neuen Benutzer anlegen";
			actionInput.value = "create";
			idInput.value = "";
			passwordInput.required = true;
			passwordGroup.style.display = 'block';
			roleInput.value = "3";
			populatePermissions();
			modal.classList.add('active');
			usernameInput.focus();
		});
	}

	document.querySelectorAll('.edit-user-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			form.reset();
			const fetchUrl = btn.dataset.fetchUrl;
			try {
				const response = await fetch(fetchUrl);
				if (!response.ok) throw new Error('Could not fetch user data');
				const data = await response.json();
				const user = data.user;
				const assignedPermissionIds = new Set(data.permissionIds);

				title.textContent = `Benutzer bearbeiten: ${user.username}`;
				actionInput.value = "update";
				idInput.value = user.id;
				usernameInput.value = user.username || '';
				roleInput.value = user.roleId || '3';
				classYearInput.value = user.classYear || '';
				classNameInput.value = user.className || '';
				emailInput.value = user.email || '';

				passwordInput.required = false;
				passwordGroup.style.display = 'none';

				populatePermissions(assignedPermissionIds);

				modal.classList.add('active');
			} catch (error) {
				console.error('Failed to open edit modal:', error);
				showToast('Benutzerdaten konnten nicht geladen werden.', 'danger');
			}
		});
	});

	const updateTableRow = (user) => {
		const row = document.querySelector(`tr[data-user-id='${user.id}']`);
		if (row) {
			row.querySelector("td[data-field='username']").textContent = user.username;
			row.querySelector("td[data-field='roleName']").textContent = user.roleName;
		}
		const card = document.querySelector(`.list-item-card[data-user-id='${user.id}']`);
		if (card) {
			card.querySelector("h3[data-field='username']").textContent = user.username;
			card.querySelector("strong[data-field='roleName']").textContent = user.roleName;
		}
	};

	const removeTableRow = (userId) => {
		document.querySelector(`tr[data-user-id='${userId}']`)?.remove();
		document.querySelector(`.list-item-card[data-user-id='${userId}']`)?.remove();
	};


	form.addEventListener('submit', async (event) => {
		event.preventDefault();
		const action = actionInput.value;
		const formActionUrl = `${contextPath}/admin/action/user?action=${action}`;

		const formData = new URLSearchParams(new FormData(form));
		try {
			const response = await fetch(formActionUrl, {
				method: 'POST',
				body: formData
			});

			const result = await response.json();

			if (response.ok && result.success) {
				closeModal();
				showToast(result.message, 'success');
				if (action === 'create') {
					window.location.reload();
				} else if (action === 'update') {
					updateTableRow(result.data);
				}
			} else {
				showToast(result.message || 'Ein unbekannter Fehler ist aufgetreten.', 'danger');
			}
		} catch (error) {
			console.error('Error submitting form:', error);
			showToast('Ein Netzwerkfehler ist aufgetreten.', 'danger');
		}
	});

	const handleAjaxFormSubmit = async (formElement) => {
		const formData = new URLSearchParams(new FormData(formElement));
		const actionUrl = formElement.getAttribute('action');

		try {
			const response = await fetch(actionUrl, { method: 'POST', body: formData });
			const result = await response.json();

			if (response.ok && result.success) {
				if (result.data && result.data.newPassword) {
					const bannerContainer = document.querySelector('.main-content');
					document.querySelectorAll('.password-reset-alert, .info-message, .success-message, .error-message').forEach(el => el.remove());

					const banner = document.createElement('p');
					banner.className = 'password-reset-alert';
					banner.id = 'password-reset-alert';
					banner.innerHTML = `<i class="fas fa-key"></i> ${result.message}`;
					bannerContainer.prepend(banner);
				} else {
					showToast(result.message, 'success');
				}

				// FIX: Get the action from the form data itself, not by parsing a URL object.
				const action = formData.get('action');
				if (action === 'delete') {
					removeTableRow(result.data.deletedUserId);
				}
			} else {
				showToast(result.message || 'Ein Fehler ist aufgetreten.', 'danger');
			}
		} catch (error) {
			console.error('Error submitting form via AJAX:', error);
			showToast('Ein Netzwerkfehler ist aufgetreten.', 'danger');
		}
	};

	document.body.addEventListener('submit', (event) => {
		const form = event.target;
		if (form.matches('.js-confirm-delete-form, .js-reset-password-form, .js-unlock-form')) {
			event.preventDefault();
			const message = form.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => handleAjaxFormSubmit(form));
		}
	});

	closeModalBtn.addEventListener('click', closeModal);
	modal.addEventListener('click', (event) => { if (event.target === modal) closeModal(); });
	document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && modal.classList.contains('active')) closeModal(); });

	const tabButtons = modal.querySelectorAll('.modal-tab-button');
	const tabContents = modal.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\login.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const lockoutTimer = document.getElementById('lockout-timer');
	if (lockoutTimer) {
		const endTime = parseInt(lockoutTimer.dataset.endTime, 10);
		const lockoutLevel = parseInt(lockoutTimer.dataset.lockoutLevel, 10);

		const durations = [60, 120, 300, 600, 1800]; // in seconds
		const duration = durations[Math.min(lockoutLevel, durations.length - 1)];

		const intervalId = setInterval(() => {
			const now = Date.now();
			const remainingSeconds = Math.max(0, Math.round((endTime + (duration * 1000) - now) / 1000));

			if (remainingSeconds <= 0) {
				clearInterval(intervalId);
				window.location.reload(); // Reload the page to clear the lockout message
			} else {
				const minutes = Math.floor(remainingSeconds / 60);
				const seconds = remainingSeconds % 60;
				lockoutTimer.textContent = `Bitte versuchen Sie es in ${minutes} Minute(n) und ${seconds.toString().padStart(2, '0')} Sekunde(n) erneut.`;
			}
		}, 1000);
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\logout.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	setTimeout(function() {
		window.location.href = `${contextPath}/login`;
	}, 5000);
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\passkey_auth.js
========================================================================

/**
 * Handles all client-side logic for WebAuthn (Passkey) authentication.
 */
document.addEventListener('DOMContentLoaded', () => {
    const contextPath = document.body.dataset.contextPath || '';
    const csrfToken = document.body.dataset.csrfToken;

    // --- UTILITY FUNCTIONS ---
    // These functions convert between ArrayBuffer and Base64URL strings
    const bufferDecode = (value) => Uint8Array.from(atob(value.replace(/_/g, '/').replace(/-/g, '+')), c => c.charCodeAt(0));
    const bufferEncode = (value) => btoa(String.fromCharCode.apply(null, new Uint8Array(value))).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');

    // --- REGISTRATION LOGIC ---
    const registerPasskeyBtn = document.getElementById('register-passkey-btn');
    if (registerPasskeyBtn) {
        registerPasskeyBtn.addEventListener('click', async () => {
            try {
                // 1. Get challenge from server
                const createOptionsRes = await fetch(`${contextPath}/api/auth/passkey/register/start`);
                const createOptions = await createOptionsRes.json();
                
                // 2. Decode challenge and user handle
                createOptions.challenge = bufferDecode(createOptions.challenge);
                createOptions.user.id = bufferDecode(createOptions.user.id);
                
                // 3. Call browser's WebAuthn API
                const credential = await navigator.credentials.create({ publicKey: createOptions });

                // 4. Encode the response data to send to server
                const credentialForServer = {
                    id: credential.id,
                    rawId: bufferEncode(credential.rawId),
                    type: credential.type,
                    response: {
                        clientDataJSON: bufferEncode(credential.response.clientDataJSON),
                        attestationObject: bufferEncode(credential.response.attestationObject),
                    },
                };
                
                // 5. Prompt for a device name
                const deviceName = prompt('Bitte geben Sie einen Namen für dieses Gerät ein (z.B. "Mein Laptop"):', 'Mein Gerät');
                if (!deviceName) return; // User cancelled

                // 6. Send response to server to finish registration
                const finishRes = await fetch(`${contextPath}/api/auth/passkey/register/finish?deviceName=${encodeURIComponent(deviceName)}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(credentialForServer)
                });

                const result = await finishRes.json();
                if (result.success) {
                    showToast('Gerät erfolgreich registriert!', 'success');
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    throw new Error(result.message || 'Registrierung fehlgeschlagen.');
                }
            } catch (err) {
                console.error('Passkey registration error:', err);
                showToast(`Fehler bei der Registrierung: ${err.message}`, 'danger');
            }
        });
    }
    
    // --- DELETE PASSKEY LOGIC ---
    document.querySelectorAll('.delete-passkey-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            const form = btn.closest('form');
            showConfirmationModal('Diesen Passkey wirklich entfernen?', () => form.submit());
        });
    });

    // --- LOGIN LOGIC ---
    const loginPasskeyBtn = document.getElementById('login-passkey-btn');
    if (loginPasskeyBtn) {
        loginPasskeyBtn.addEventListener('click', async () => {
            try {
                const username = document.getElementById('username').value;
                if (!username) {
                    showToast('Bitte geben Sie zuerst Ihren Benutzernamen ein.', 'info');
                    return;
                }
                
                // 1. Get challenge from server
                const getOptionsRes = await fetch(`${contextPath}/api/auth/passkey/login/start`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: `username=${encodeURIComponent(username)}`
                });
                const getOptions = await getOptionsRes.json();

                // 2. Decode challenge
                getOptions.challenge = bufferDecode(getOptions.challenge);
                
                // 3. Call browser's WebAuthn API
                const credential = await navigator.credentials.get({ publicKey: getOptions });

                // 4. Encode response data for server
                const credentialForServer = {
                    id: credential.id,
                    rawId: bufferEncode(credential.rawId),
                    type: credential.type,
                    response: {
                        clientDataJSON: bufferEncode(credential.response.clientDataJSON),
                        authenticatorData: bufferEncode(credential.response.authenticatorData),
                        signature: bufferEncode(credential.response.signature),
                        userHandle: credential.response.userHandle ? bufferEncode(credential.response.userHandle) : null,
                    },
                };
                
                // 5. Send to server for verification
                const finishRes = await fetch(`${contextPath}/api/auth/passkey/login/finish`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(credentialForServer)
                });
                
                const result = await finishRes.json();
                if(result.success) {
                    showToast('Erfolgreich eingeloggt!', 'success');
                    window.location.href = `${contextPath}/home`;
                } else {
                    throw new Error(result.message || 'Login fehlgeschlagen.');
                }
            } catch (err) {
                console.error('Passkey login error:', err);
                showToast(`Fehler beim Login: ${err.message}`, 'danger');
            }
        });
    }
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error400.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const output = document.getElementById('droid-output');
	const redirectContainer = document.getElementById('redirect-container');
	const contentLength = document.body.dataset.contentLength || 'UNKNOWN';

	const lines = [
		'INITIATING DATASTREAM ANALYSIS...',
		`PACKET RECEIVED. SIZE: ${contentLength} BYTES.`,
		'PARSING HEADER... [OK]',
		'ANALYSING PAYLOAD...',
		'    > SCANNING FOR SYNTAX VIOLATIONS...',
		'    > ERROR! UNEXPECTED TOKEN OR MALFORMED PARAMETER DETECTED.',
		'    > CORRUPTION LEVEL: MODERATE.',
		'CONCLUSION: ANFRAGE NICHT VERARBEITBAR. DATENINTEGRITÄT KOMPROMITTIERT.',
		'EMPFEHLUNG: ZURÜCKKEHREN UND ANFRAGE NEU FORMULIEREN.',
		''
	];

	let lineIndex = 0;

	function printLine() {
		if (lineIndex < lines.length) {
			const p = document.createElement('p');
			p.textContent = lines[lineIndex];
			output.appendChild(p);
			output.scrollTop = output.scrollHeight;
			lineIndex++;
			setTimeout(printLine, Math.random() * 200 + 50);
		} else {
			redirectContainer.style.opacity = '1';
		}
	}

	printLine();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error401.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const statusText = document.getElementById('scanner-status');
    const light = document.getElementById('scanner-light');
    const progress = document.getElementById('scanner-progress');
    const redirectContainer = document.getElementById('redirect-container');

    const steps = [
        { text: 'SCANNE...', color: '#ffc107', lightColor: '#ffc107', duration: 1500, progress: 50 },
        { text: 'KEINE ID', color: '#dc3545', lightColor: '#dc3545', duration: 1000, progress: 80 },
        { text: 'ZUGRIFF?', color: '#dc3545', lightColor: '#dc3545', duration: 800, progress: 100 },
        { text: 'VERWEIGERT', color: '#dc3545', lightColor: '#dc3545', duration: 2000, progress: 100 }
    ];

    let currentStep = 0;

    function runScan() {
        if(currentStep >= steps.length) {
            redirectContainer.style.opacity = '1';
            return;
        }

        const step = steps[currentStep];
        statusText.textContent = step.text;
        statusText.style.color = step.color;
        light.style.background = step.lightColor;
        light.style.boxShadow = `0 0 10px ${step.lightColor}`;
        progress.style.width = `${step.progress}%`;
        progress.style.backgroundColor = step.lightColor;

        currentStep++;
        setTimeout(runScan, step.duration);
    }

    setTimeout(runScan, 500); 
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error403.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const consoleBody = document.getElementById('console-body');
	const redirectContainer = document.getElementById('redirect-container');
	const username = document.body.dataset.username || 'unknown_user';
	const role = document.body.dataset.role || 'unknown_role';
	const requestUri = document.body.dataset.requestUri || '/';
	const contextPath = document.body.dataset.contextPath || '';

	let currentLine;

	async function type(text, delay = 25) {
		for (const char of text) {
			currentLine.innerHTML += char;
			consoleBody.scrollTop = consoleBody.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
		currentLine.innerHTML = currentLine.innerHTML.replace('<span class="cursor"></span>', '');
		consoleBody.innerHTML += '\n'; 
	}

	async function addLine(text, className = '') {
		currentLine = document.createElement('span');
		if (className) currentLine.className = className;
		consoleBody.appendChild(currentLine);
		await type(text + ' <span class="cursor"></span>');
	}

	async function runSequence() {
		await addLine('[INFO] Eingehender Request erkannt...', 'info');
		await new Promise(resolve => setTimeout(resolve, 300));
		await addLine(`[INFO] Ziel-Ressource: ${requestUri}`, 'info');
		await new Promise(resolve => setTimeout(resolve, 400));
		await addLine('[INFO] Starte Identitäts-Scan...', 'info');
		await new Promise(resolve => setTimeout(resolve, 500));
		await addLine(`[OK]   ... Subjekt identifiziert: "${username}"`, 'ok');
		await new Promise(resolve => setTimeout(resolve, 200));
		await addLine(`[OK]   ... Zugehörigkeit/Rolle: [${role}]`, 'ok');
		await new Promise(resolve => setTimeout(resolve, 400));
		await addLine('[WARN] Prüfe Berechtigungs-Matrix für Ziel-Ressource...', 'warn');
		await new Promise(resolve => setTimeout(resolve, 800));
		await addLine('[FAIL] >>> ZUGRIFF VERWEIGERT <<<', 'fail');
		await new Promise(resolve => setTimeout(resolve, 200));
		await addLine('[FAIL] >>> Erforderliche Berechtigung nicht im Token des Subjekts gefunden.', 'fail');
		await new Promise(resolve => setTimeout(resolve, 500));
		await addLine('[INFO] Aktion protokolliert. Sicherheits-Subsystem wird heruntergefahren.', 'info');

		currentLine = document.createElement('span');
		consoleBody.appendChild(currentLine);
		currentLine.innerHTML = '> <span class="cursor"></span>';

		redirectContainer.style.opacity = '1';

		setTimeout(() => {
			window.location.href = `${contextPath}/home`;
		}, 5000);
	}

	runSequence();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error404.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const terminalBody = document.getElementById('terminal-body');
	const homeLinkContainer = document.getElementById('home-link-container');
	const contextPath = document.body.dataset.contextPath || '';
	const requestUri = document.body.dataset.requestUri || '/';

	async function type(text, element, delay = 50) {
		for (const char of text) {
			element.textContent += char;
			terminalBody.scrollTop = terminalBody.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
	}

	async function addLine(text, className, delay = 20) {
		const p = document.createElement('p');
		if (className) p.className = className;
		terminalBody.appendChild(p);
		await type(text, p, delay);
	}

	async function runSequence() {
		const p1 = document.createElement('p');
		terminalBody.appendChild(p1);

		const prompt1 = document.createElement('span');
		prompt1.className = 'prompt';
		await type('user@technik-team:~$ ', prompt1, 20);
		p1.appendChild(prompt1);

		const command1 = document.createElement('span');
		command1.className = 'command';
		await type('ls -l ' + requestUri, command1, 50);
		p1.appendChild(command1);

		await new Promise(resolve => setTimeout(resolve, 500));

		await addLine('ls: cannot access \'' + requestUri + '\': No such file or directory', 'error', 15);
		await new Promise(resolve => setTimeout(resolve, 800));

		await addLine('Tipp: Kehren Sie mit dem folgenden Befehl zur Startseite zurück:', 'info', 25);
		await new Promise(resolve => setTimeout(resolve, 300));

		const p_link = document.createElement('p');
		terminalBody.appendChild(p_link);

		const prompt2 = document.createElement('span');
		prompt2.className = 'prompt';
		await type('user@technik-team:~$ ', prompt2, 20);
		p_link.appendChild(prompt2);

		const homeLink = document.createElement('a');
		homeLink.href = `${contextPath}/home`;
		homeLink.className = 'link';
		p_link.appendChild(homeLink);
		await type('cd /home', homeLink, 80);

		const cursor = document.createElement('span');
		cursor.className = 'cursor';
		cursor.innerHTML = ' ';
		p_link.appendChild(cursor);

		homeLinkContainer.style.opacity = '1';
	}

	runSequence();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error500.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const diagBtn = document.getElementById('diagnostic-btn');
	const output = document.getElementById('diagnostic-output');

	const steps = [
		{ text: 'Initialisiere Diagnose-Protokoll...', type: 'info', icon: 'fas fa-cogs' },
		{ text: 'Prüfe Speicher-Integrität...', type: 'info', icon: 'fas fa-memory' },
		{ text: '[OK] RAM Module antworten.', type: 'ok', icon: 'fas fa-check-circle' },
		{ text: 'Verbinde mit Kernel...', type: 'info', icon: 'fas fa-project-diagram' },
		{ text: '[WARN] Kernel antwortet langsam. Kaffee-Level kritisch.', type: 'warn', icon: 'fas fa-exclamation-triangle' },
		{ text: 'Lade KI-Logikmodule...', type: 'info', icon: 'fas fa-brain' },
		{ text: '[FAIL] Logikmodul "Hamster im Laufrad" hat die Arbeit niedergelegt.', type: 'fail', icon: 'fas fa-times-circle' },
		{ text: 'Versuche Workaround: Mehr Glitzer-Effekte laden...', type: 'warn', icon: 'fas fa-magic' },
		{ text: '[FAIL] Glitzer-Puffer übergelaufen.', type: 'fail', icon: 'fas fa-times-circle' },
		{ text: '--------------------------------', type: 'info', icon: '' },
		{ text: 'Diagnose abgeschlossen. Fehler gefunden.', type: 'fail', icon: 'fas fa-skull-crossbones' }
	];

	let isRunning = false;

	async function typeText(element, text, delay = 20) {
		for (let i = 0; i < text.length; i++) {
			element.innerHTML += text.charAt(i);
			output.scrollTop = output.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
	}

	diagBtn.addEventListener('click', async () => {
		if (isRunning) return;

		isRunning = true;
		diagBtn.disabled = true;
		diagBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Diagnose läuft...';
		output.innerHTML = ''; 

		for (const step of steps) {
			const line = document.createElement('p');
			line.className = step.type;
			const iconHtml = step.icon ? `<i class="${step.icon}" style="margin-right: 8px;"></i>` : '';
			line.innerHTML = `${iconHtml}`;
			output.appendChild(line);

			await typeText(line, step.text);

			await new Promise(resolve => setTimeout(resolve, 300)); 
		}

		const finalLine = document.createElement('p');
		finalLine.innerHTML = '> <span class="cursor"> </span>';
		output.appendChild(finalLine);
		output.scrollTop = output.scrollHeight;

		diagBtn.disabled = false;
		diagBtn.innerHTML = '<i class="fas fa-tasks"></i> Diagnose erneut starten';
		isRunning = false;
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error503.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const output = document.getElementById('reboot-output');
	const progress = document.getElementById('reboot-progress');
	const contextPath = document.body.dataset.contextPath || '';

	const steps = [
		{ text: 'System check initiated...', delay: 100, progress: 10 },
		{ text: 'Checking memory modules... [OK]', delay: 300, progress: 20 },
		{ text: 'Checking CPU cores... [OK]', delay: 300, progress: 30 },
		{ text: 'Pinging gateway... [NO RESPONSE]', delay: 1000, progress: 40 },
		{ text: 'Server overload detected. Reason: Too many requests.', delay: 500, progress: 50 },
		{ text: 'Flushing request queue...', delay: 1500, progress: 70 },
		{ text: 'Initializing reboot sequence...', delay: 500, progress: 80 },
		{ text: 'System will be back online shortly.', delay: 1000, progress: 100 },
		{ text: 'Redirecting to login page...', delay: 2000, progress: 100 }
	];

	let stepIndex = 0;

	function runSequence() {
		if (stepIndex >= steps.length) {
			window.location.href = `${contextPath}/login`;
			return;
		}

		const step = steps[stepIndex];
		const p = document.createElement('p');
		p.textContent = step.text;
		output.appendChild(p);
		output.scrollTop = output.scrollHeight;

		progress.style.width = `${step.progress}%`;

		stepIndex++;
		setTimeout(runSequence, step.delay);
	}

	runSequence();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\calendar.js
========================================================================

document.addEventListener('DOMContentLoaded', function() {
	const calendarEl = document.getElementById('calendar-container');
	const contextPath = document.body.dataset.contextPath || '';

	// FIX: The calendar must be initialized if the element exists.
	// CSS media queries are responsible for showing/hiding the container, not JS.
	// The previous getComputedStyle check was a race condition.
	if (calendarEl) {
		try {
			const calendar = new FullCalendar.Calendar(calendarEl, {
				initialView: 'dayGridMonth',
				locale: 'de',
				headerToolbar: {
					left: 'prev,next today',
					center: 'title',
					right: 'dayGridMonth,timeGridWeek,listWeek'
				},
				events: `${contextPath}/api/calendar/entries`,
				eventClick: function(info) {
					info.jsEvent.preventDefault();
					if (info.event.url) {
						window.location.href = info.event.url;
					}
				}
			});
			calendar.render();
		} catch (e) {
			console.error("FullCalendar failed to initialize. This is often caused by a corrupted library file.", e);
			calendarEl.innerHTML = `<div class="error-message">Kalender konnte nicht geladen werden. Möglicherweise ist eine Bibliotheksdatei beschädigt.</div>`;
		}
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\dateien.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const uploadModal = document.getElementById('upload-version-modal');
	if (!uploadModal) return;

	const modalTitle = document.getElementById('upload-modal-title');
	const modalFileIdInput = document.getElementById('upload-file-id');
	const modalFileNameSpan = document.getElementById('upload-file-name');
	const fileInput = document.getElementById('new-file-version');
	const closeModalBtn = uploadModal.querySelector('.modal-close-btn');

	document.querySelectorAll('.upload-new-version-btn').forEach(btn => {
		btn.addEventListener('click', () => {
			const fileId = btn.dataset.fileId;
			const fileName = btn.dataset.fileName;

			modalFileIdInput.value = fileId;
			modalFileNameSpan.textContent = fileName;
			fileInput.value = ''; // Reset file input
			uploadModal.classList.add('active');
		});
	});

	const closeModal = () => uploadModal.classList.remove('active');

	closeModalBtn.addEventListener('click', closeModal);
	uploadModal.addEventListener('click', (e) => {
		if (e.target === uploadModal) closeModal();
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\eventDetails.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const eventId = document.body.dataset.eventId || '';
	const currentUserId = document.body.dataset.userId || '';
	const isAdmin = document.body.dataset.isAdmin === 'true';

	const taskModal = document.getElementById('task-modal');
	if (taskModal) {
		const allUsers = JSON.parse(document.getElementById('allUsersData')?.textContent || '[]');
		const allItems = JSON.parse(document.getElementById('allItemsData')?.textContent || '[]');
		const allKits = JSON.parse(document.getElementById('allKitsData')?.textContent || '[]');
		const allTasks = JSON.parse(document.getElementById('allTasksData')?.textContent || '[]');

		const form = document.getElementById('task-modal-form');
		const title = document.getElementById('task-modal-title');
		const taskIdInput = document.getElementById('task-id-modal');
		const descInput = document.getElementById('task-description-modal');
		const detailsInput = document.getElementById('task-details-modal');
		const orderInput = document.getElementById('task-display-order-modal');
		const statusGroup = document.getElementById('task-status-group');
		const statusInput = document.getElementById('task-status-modal');
		const deleteBtn = document.getElementById('delete-task-btn');

		const assignmentTypeRadios = form.querySelectorAll('input[name="assignmentType"]');
		const directFields = document.getElementById('direct-assignment-fields');
		const poolFields = document.getElementById('pool-assignment-fields');
		const requiredPersonsInput = document.getElementById('task-required-persons-modal');
		const userCheckboxesContainer = document.getElementById('task-user-checkboxes');

		const itemsContainer = document.getElementById('task-items-container');
		const kitsContainer = document.getElementById('task-kits-container');

		const createRow = (container, onRemove) => {
			const row = document.createElement('div');
			row.className = 'dynamic-row';
			const removeBtn = document.createElement('button');
			removeBtn.type = 'button';
			removeBtn.className = 'btn-small btn-danger';
			removeBtn.innerHTML = '×';
			removeBtn.onclick = () => onRemove(row);
			row.appendChild(removeBtn);
			container.appendChild(row);
			return row;
		};

		const addItemRow = (item = { id: '', quantity: 1 }) => {
			const row = createRow(itemsContainer, r => r.remove());
			const select = document.createElement('select');
			select.name = 'itemIds[]';
			select.className = 'form-group';
			select.innerHTML = '<option value="">-- Material --</option>' + allItems.map(i => `<option value="${i.id}" data-max-qty="${i.availableQuantity}">${i.name}</option>`).join('');
			select.value = item.id;

			const input = document.createElement('input');
			input.type = 'number';
			input.name = 'itemQuantities[]';
			input.value = item.quantity;
			input.min = '1';
			input.className = 'form-group';
			input.style.maxWidth = '100px';

			select.addEventListener('change', () => {
				const selectedOption = select.options[select.selectedIndex];
				const maxQty = selectedOption.dataset.maxQty;
				input.max = maxQty || '';
				if (maxQty) input.title = `Maximal verfügbar: ${maxQty}`;
			});

			row.prepend(select, input);
		};

		const addKitRow = (kit = { id: '' }) => {
			const row = createRow(kitsContainer, r => r.remove());
			const select = document.createElement('select');
			select.name = 'kitIds[]';
			select.className = 'form-group';
			select.innerHTML = '<option value="">-- Kit --</option>' + allKits.map(k => `<option value="${k.id}">${k.name}</option>`).join('');
			select.value = kit.id;
			row.prepend(select);
		};

		const openModal = () => taskModal.classList.add('active');
		const closeModal = () => taskModal.classList.remove('active');

		const resetModal = () => {
			form.reset();
			taskIdInput.value = '';
			itemsContainer.innerHTML = '';
			kitsContainer.innerHTML = '';
			userCheckboxesContainer.innerHTML = '';
			statusGroup.style.display = 'none';
			deleteBtn.style.display = 'none';
			directFields.style.display = 'block';
			poolFields.style.display = 'none';
			form.querySelector('input[name="assignmentType"][value="direct"]').checked = true;
		};

		document.getElementById('new-task-btn')?.addEventListener('click', () => {
			resetModal();
			title.textContent = 'Neue Aufgabe erstellen';
			allUsers.forEach(user => {
				userCheckboxesContainer.innerHTML += `<label><input type="checkbox" name="userIds" value="${user.id}"> ${user.username}</label>`;
			});
			openModal();
		});

		document.querySelectorAll('.edit-task-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				const taskId = parseInt(btn.dataset.taskId, 10);
				const task = allTasks.find(t => t.id === taskId);
				if (!task) return;

				resetModal();
				title.textContent = 'Aufgabe bearbeiten';
				statusGroup.style.display = 'block';
				deleteBtn.style.display = 'inline-block';

				taskIdInput.value = task.id;
				descInput.value = task.description;
				detailsInput.value = task.details || '';
				orderInput.value = task.displayOrder;
				statusInput.value = task.status;

				if (task.requiredPersons > 0) {
					form.querySelector('input[name="assignmentType"][value="pool"]').checked = true;
					poolFields.style.display = 'block';
					directFields.style.display = 'none';
					requiredPersonsInput.value = task.requiredPersons;
				} else {
					const assignedIds = new Set(task.assignedUsers.map(u => u.id));
					allUsers.forEach(user => {
						const isChecked = assignedIds.has(user.id) ? 'checked' : '';
						userCheckboxesContainer.innerHTML += `<label><input type="checkbox" name="userIds" value="${user.id}" ${isChecked}> ${user.username}</label>`;
					});
				}

				task.requiredItems?.forEach(item => addItemRow({ id: item.id, quantity: item.quantity }));
				task.requiredKits?.forEach(kit => addKitRow({ id: kit.id }));
				openModal();
			});
		});

		assignmentTypeRadios.forEach(radio => {
			radio.addEventListener('change', () => {
				directFields.style.display = radio.value === 'direct' ? 'block' : 'none';
				poolFields.style.display = radio.value === 'pool' ? 'block' : 'none';
			});
		});

		deleteBtn.addEventListener('click', () => {
			showConfirmationModal('Diese Aufgabe wirklich löschen?', () => {
				const csrfToken = form.querySelector('input[name="csrfToken"]').value;
				const deleteForm = document.createElement('form');
				deleteForm.method = 'post';
				deleteForm.action = `${contextPath}/task-action`;
				deleteForm.innerHTML = `
					<input type="hidden" name="action" value="delete">
					<input type="hidden" name="taskId" value="${taskIdInput.value}">
					<input type="hidden" name="eventId" value="${eventId}">
					<input type="hidden" name="csrfToken" value="${csrfToken}">`;
				document.body.appendChild(deleteForm);
				deleteForm.submit();
			});
		});

		// FIX: Use event delegation on the body to handle clicks on dynamically added elements
		document.body.addEventListener('click', e => {
			const addItemBtn = e.target.closest('#add-task-item-btn');
			const addKitBtn = e.target.closest('#add-task-kit-btn');

			if (addItemBtn) {
				addItemRow();
			}
			if (addKitBtn) {
				addKitRow();
			}
		});

		taskModal.querySelector('.modal-close-btn').addEventListener('click', closeModal);
	}

	const taskListContainer = document.getElementById('task-list-container');
	if (taskListContainer) {
		taskListContainer.addEventListener('click', (e) => {
			const markDoneBtn = e.target.closest('.mark-task-done-btn');
			if (markDoneBtn) {
				const taskId = markDoneBtn.dataset.taskId;
				const csrfToken = document.body.dataset.csrfToken;
				const params = new URLSearchParams();
				params.append('action', 'updateStatus');
				params.append('taskId', taskId);
				params.append('status', 'ERLEDIGT');
				if (csrfToken) {
					params.append('csrfToken', csrfToken);
				}

				fetch(`${contextPath}/task-action`, {
					method: 'POST',
					body: params
				})
					.then(response => {
						if (response.ok) window.location.reload();
						else alert('Fehler beim Aktualisieren der Aufgabe.');
					})
					.catch(error => {
						console.error("Error updating task status:", error);
						alert('Netzwerkfehler beim Aktualisieren der Aufgabe.');
					});
			}
		});
	}

	const chatBox = document.getElementById('chat-box');
	if (chatBox) {
		const chatForm = document.getElementById('chat-form');
		const chatInput = document.getElementById('chat-message-input');
		const websocketProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
		const websocketUrl = `${websocketProtocol}//${window.location.host}${contextPath}/ws/chat/${eventId}`;
		let socket;

		const connect = () => {
			socket = new WebSocket(websocketUrl);
			socket.onopen = () => fetchMessages();
			socket.onmessage = (event) => {
				const data = JSON.parse(event.data);
				switch (data.type) {
					case 'new_message':
						appendMessage(data.payload);
						break;
					case 'message_soft_deleted':
						handleSoftDelete(data.payload);
						break;
					case 'message_updated':
						const messageTextElement = document.getElementById(`message-text-${data.payload.messageId}`);
						const editedMarkerElement = document.getElementById(`message-edited-marker-${data.payload.messageId}`);
						if (messageTextElement) messageTextElement.innerHTML = marked.parse(data.payload.newText, { sanitize: true });;
						if (editedMarkerElement) editedMarkerElement.style.display = 'inline';
						break;
				}
			};
			socket.onclose = (event) => console.warn('WebSocket connection closed.', event);
			socket.onerror = (error) => console.error('WebSocket error:', error);
		};

		const getTextColorForBackground = (hexColor) => {
			if (!hexColor || hexColor.length < 7) return '#000000';
			const r = parseInt(hexColor.slice(1, 3), 16);
			const g = parseInt(hexColor.slice(3, 5), 16);
			const b = parseInt(hexColor.slice(5, 7), 16);
			const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
			return luminance > 0.5 ? '#000000' : '#FFFFFF';
		};

		const formatAsLocaleTime = (dateString) => {
			if (!dateString) return '';
			return new Date(dateString).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' });
		};

		const appendMessage = (message) => {
			const isCurrentUser = String(message.userId) === String(currentUserId);

			const container = document.createElement('div');
			container.className = 'chat-message-container';
			container.id = `message-container-${message.id}`;
			if (isCurrentUser) container.classList.add('current-user');

			const bubbleElement = document.createElement('div');
			bubbleElement.className = 'chat-bubble';
			bubbleElement.id = `chat-bubble-${message.id}`;

			const bubbleBackgroundColor = isCurrentUser ? 'var(--primary-color)' : (message.chatColor || '#E9ECEF');
			bubbleElement.style.backgroundColor = bubbleBackgroundColor;
			bubbleElement.style.borderColor = bubbleBackgroundColor;
			bubbleElement.style.color = getTextColorForBackground(bubbleBackgroundColor);

			if (message.isDeleted) {
				renderDeletedState(bubbleElement, message);
			} else {
				renderNormalState(bubbleElement, message, isCurrentUser);
				const optionsMenu = createOptionsMenu(message, isCurrentUser);
				container.appendChild(optionsMenu);
			}

			container.prepend(bubbleElement);
			chatBox.appendChild(container);
			chatBox.scrollTop = chatBox.scrollHeight;
		};

		const renderNormalState = (bubbleElement, message, isCurrentUser) => {
			if (!isCurrentUser) {
				const usernameElement = document.createElement('strong');
				usernameElement.className = 'chat-username';
				usernameElement.style.color = 'black';
				usernameElement.textContent = message.username;
				bubbleElement.appendChild(usernameElement);
			}

			const textElement = document.createElement('span');
			textElement.className = 'chat-text';
			textElement.id = `message-text-${message.id}`;
			textElement.innerHTML = marked.parse(message.messageText, { sanitize: true });

			const timeElement = document.createElement('span');
			timeElement.className = 'chat-timestamp';
			timeElement.textContent = formatAsLocaleTime(message.sentAt);
			timeElement.style.color = bubbleElement.style.color === '#FFFFFF' ? 'rgba(255,255,255,0.7)' : 'var(--text-muted-color)';

			const editedMarker = document.createElement('span');
			editedMarker.className = 'chat-edited-marker';
			editedMarker.id = `message-edited-marker-${message.id}`;
			editedMarker.textContent = ' (bearbeitet)';
			editedMarker.style.display = message.edited ? 'inline' : 'none';

			timeElement.prepend(editedMarker);
			bubbleElement.appendChild(textElement);
			bubbleElement.appendChild(timeElement);
		};

		const renderDeletedState = (bubbleElement, message) => {
			let deletedText;
			const deletedByEl = document.createElement('span');
			deletedByEl.textContent = message.deletedByUsername;

			const originalUserEl = document.createElement('span');
			originalUserEl.textContent = message.username;

			const infoSpan = document.createElement('span');
			infoSpan.className = 'chat-deleted-info';

			if (message.username === message.deletedByUsername) {
				infoSpan.textContent = `Nachricht wurde von ${originalUserEl.textContent} gelöscht`;
			} else {
				infoSpan.textContent = `Nachricht von ${originalUserEl.textContent} wurde von ${deletedByEl.textContent} gelöscht`;
			}
			bubbleElement.appendChild(infoSpan);
			bubbleElement.classList.add('deleted');
		};

		const createOptionsMenu = (message, isCurrentUser) => {
			const optionsMenu = document.createElement('div');
			optionsMenu.className = 'chat-options';
			if (isCurrentUser) {
				const editButton = document.createElement('button');
				editButton.className = 'chat-option-btn';
				editButton.innerHTML = '<i class="fas fa-pencil-alt"></i>';
				editButton.onclick = () => handleEdit(message.id);
				optionsMenu.appendChild(editButton);
			}
			if (isAdmin || isCurrentUser) {
				const deleteButton = document.createElement('button');
				deleteButton.className = 'chat-option-btn';
				deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
				deleteButton.onclick = () => handleDelete(message.id, message.userId, message.username);
				optionsMenu.appendChild(deleteButton);
			}
			return optionsMenu;
		};

		const handleDelete = (messageId, originalUserId, originalUsername) => {
			showConfirmationModal("Nachricht wirklich löschen?", () => {
				socket.send(JSON.stringify({ type: 'delete_message', payload: { messageId, originalUserId, originalUsername } }));
			});
		};

		const handleSoftDelete = (payload) => {
			const bubbleElement = document.getElementById(`chat-bubble-${payload.messageId}`);
			const containerElement = document.getElementById(`message-container-${payload.messageId}`);
			if (bubbleElement && containerElement) {
				containerElement.querySelector('.chat-options')?.remove();

				const deletedByEl = document.createElement('span');
				deletedByEl.textContent = payload.deletedByUsername;

				const originalUserEl = document.createElement('span');
				originalUserEl.textContent = payload.originalUsername;

				const infoSpan = document.createElement('span');
				infoSpan.className = 'chat-deleted-info';

				if (payload.originalUsername === payload.deletedByUsername) {
					infoSpan.textContent = `Nachricht von ${originalUserEl.textContent} gelöscht`;
				} else {
					infoSpan.textContent = `Nachricht von ${originalUserEl.textContent} wurde von ${deletedByEl.textContent} gelöscht`;
				}

				bubbleElement.innerHTML = ''; // Clear existing content
				bubbleElement.appendChild(infoSpan);
				bubbleElement.classList.add('deleted');
			}
		};

		const handleEdit = (messageId) => {
			const textElement = document.getElementById(`message-text-${messageId}`);
			const currentText = textElement.textContent;
			const editInput = document.createElement('input');
			editInput.type = 'text';
			editInput.value = currentText;
			editInput.className = 'chat-edit-input';

			editInput.onkeydown = (keyboardEvent) => {
				if (keyboardEvent.key === 'Enter') {
					if (editInput.value.trim() && editInput.value !== currentText) {
						socket.send(JSON.stringify({ type: 'update_message', payload: { messageId, newText: editInput.value } }));
					}
					textElement.style.display = 'block';
					editInput.replaceWith(textElement);
				} else if (keyboardEvent.key === 'Escape') {
					textElement.style.display = 'block';
					editInput.replaceWith(textElement);
				}
			};

			textElement.style.display = 'none';
			textElement.parentElement.insertBefore(editInput, textElement);
			editInput.focus();
		};

		const fetchMessages = () => {
			fetch(`${contextPath}/api/event-chat?eventId=${eventId}`)
				.then(response => response.json())
				.then(messages => {
					chatBox.innerHTML = '';
					if (messages && messages.length > 0) messages.forEach(appendMessage);
				}).catch(error => console.error("Error fetching initial chat messages:", error));
		};

		chatInput.addEventListener('keyup', (e) => {
			const popup = document.getElementById('mention-popup');
			if (e.key === '@') {
				const assignedUsers = JSON.parse(document.getElementById('allUsersData')?.textContent || '[]');
				if (assignedUsers.length > 0) {
					popup.innerHTML = assignedUsers.map(u => `<div class="mention-item" data-username="${u.username}">${u.username}</div>`).join('');
					popup.style.display = 'block';
				}
			} else if (popup.style.display === 'block' && e.key !== 'Shift') { // Avoid closing on shift
				popup.style.display = 'none';
			}
		});

		document.getElementById('mention-popup').addEventListener('click', (e) => {
			if (e.target.classList.contains('mention-item')) {
				const username = e.target.dataset.username;
				const text = chatInput.value;
				const atIndex = text.lastIndexOf('@');
				chatInput.value = text.substring(0, atIndex + 1) + username + ' ';
				document.getElementById('mention-popup').style.display = 'none';
				chatInput.focus();
			}
		});

		chatForm.addEventListener('submit', (event) => {
			event.preventDefault();
			const messageText = chatInput.value.trim();
			if (messageText && socket && socket.readyState === WebSocket.OPEN) {
				const payload = { type: "new_message", payload: { messageText: messageText } };
				socket.send(JSON.stringify(payload));
				chatInput.value = '';
			}
		});

		connect();
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\events.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	// --- SIGNUP MODAL LOGIC ---
	const signupModal = document.getElementById('signup-modal');
	if (signupModal) {
		const signupModalTitle = document.getElementById('signup-modal-title');
		const signupEventIdInput = document.getElementById('signup-event-id');
		const customFieldsContainer = document.getElementById('custom-fields-container');
		const closeModalBtn = signupModal.querySelector('.modal-close-btn');

		const openSignupModal = async (btn) => {
			const eventId = btn.dataset.eventId;
			const eventName = btn.dataset.eventName;

			signupModalTitle.textContent = `Anmeldung für: ${eventName}`;
			signupEventIdInput.value = eventId;
			customFieldsContainer.innerHTML = '<p>Lade Anmelde-Optionen...</p>';
			signupModal.classList.add('active');

			try {
				const response = await fetch(`${contextPath}/api/public/event-custom-fields?eventId=${eventId}`);
				if (!response.ok) throw new Error('Could not fetch custom fields for the event.');

				const customFields = await response.json();

				customFieldsContainer.innerHTML = '';
				if (customFields && customFields.length > 0) {
					customFields.forEach(field => {
						const fieldGroup = document.createElement('div');
						fieldGroup.className = 'form-group';
						let fieldHtml = `<label for="customfield_${field.id}">${field.fieldName}</label>`;
						if (field.fieldType === 'BOOLEAN') {
							fieldHtml += `<select name="customfield_${field.id}" id="customfield_${field.id}" class="form-control"><option value="true">Ja</option><option value="false">Nein</option></select>`;
						} else {
							fieldHtml += `<input type="text" name="customfield_${field.id}" id="customfield_${field.id}" class="form-control">`;
						}
						fieldGroup.innerHTML = fieldHtml;
						customFieldsContainer.appendChild(fieldGroup);
					});
				} else {
					customFieldsContainer.innerHTML = '<p>Für dieses Event sind keine weiteren Angaben nötig.</p>';
				}
			} catch (error) {
				console.error('Failed to load custom fields:', error);
				customFieldsContainer.innerHTML = '<p class="error-message">Fehler beim Laden der Anmelde-Optionen.</p>';
			}
		};

		document.querySelectorAll('.signup-btn').forEach(btn => btn.addEventListener('click', () => openSignupModal(btn)));
		closeModalBtn.addEventListener('click', () => signupModal.classList.remove('active'));
		signupModal.addEventListener('click', (e) => {
			if (e.target === signupModal) signupModal.classList.remove('active');
		});
	}

	// --- SIGN-OFF LOGIC (WITH REASON FOR RUNNING EVENTS) ---
	const signoffReasonModal = document.getElementById('signoff-reason-modal');
	if (signoffReasonModal) {
		const signoffEventIdInput = document.getElementById('signoff-event-id');
		const closeReasonModalBtn = signoffReasonModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.js-signoff-form').forEach(form => {
			form.addEventListener('submit', function(e) {
				const eventStatus = this.dataset.eventStatus;

				if (eventStatus === 'LAUFEND') {
					e.preventDefault(); // Stop the default form submission
					signoffEventIdInput.value = this.dataset.eventId;
					signoffReasonModal.classList.add('active');
				} else {
					// For non-running events, use the standard confirmation
					e.preventDefault();
					showConfirmationModal(this.dataset.confirmMessage || 'Sind Sie sicher?', () => this.submit());
				}
			});
		});

		closeReasonModalBtn.addEventListener('click', () => signoffReasonModal.classList.remove('active'));
		signoffReasonModal.addEventListener('click', (e) => {
			if (e.target === signoffReasonModal) signoffReasonModal.classList.remove('active');
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\lager.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const transactionModal = document.getElementById('transaction-modal');
	if (transactionModal) {
		const modalTitle = document.getElementById('transaction-modal-title');
		const modalItemId = document.getElementById('transaction-item-id');
		const quantityInput = document.getElementById('transaction-quantity');
		const checkoutButton = transactionModal.querySelector('button[value="checkout"]');
		const checkinButton = transactionModal.querySelector('button[value="checkin"]');
		const closeModalBtn = transactionModal.querySelector('.modal-close-btn');

		const openModal = (btn) => {
			modalTitle.textContent = `${btn.dataset.itemName}: Entnehmen / Einräumen`;
			modalItemId.value = btn.dataset.itemId;

			const availableQty = parseInt(btn.dataset.maxQty, 10);
			const currentQty = parseInt(btn.dataset.currentQty, 10);
			const totalMaxQty = parseInt(btn.dataset.totalMaxQty, 10);
			const availableSpace = totalMaxQty > 0 ? totalMaxQty - currentQty : 9999;

			quantityInput.max = availableQty;
			quantityInput.title = `Maximal entnehmbar: ${availableQty}`;
			quantityInput.value = 1;

			checkoutButton.disabled = (availableQty <= 0);
			checkinButton.disabled = (totalMaxQty > 0 && currentQty >= totalMaxQty);

			checkoutButton.onmouseover = () => {
				quantityInput.max = availableQty;
				quantityInput.title = `Maximal entnehmbar: ${availableQty}`;
			};

			checkinButton.onmouseover = () => {
				quantityInput.max = availableSpace > 0 ? availableSpace : 9999;
				quantityInput.title = `Maximal einräumbar: ${availableSpace}`;
			};

			transactionModal.classList.add('active');
		};

		const closeModal = () => transactionModal.classList.remove('active');
		document.querySelectorAll('.transaction-btn').forEach(btn => btn.addEventListener('click', () => openModal(btn)));
		closeModalBtn.addEventListener('click', closeModal);
		transactionModal.addEventListener('click', e => { if (e.target === transactionModal) closeModal(); });
	}

	const lightbox = document.getElementById('lightbox');
	if (lightbox) {
		const lightboxImage = document.getElementById('lightbox-image');
		const closeBtn = lightbox.querySelector('.lightbox-close');

		document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
			trigger.addEventListener('click', (e) => {
				e.preventDefault();
				lightboxImage.src = trigger.dataset.src;
				lightbox.style.display = 'flex';
			});
		});

		const closeLightbox = () => {
			lightbox.style.display = 'none';
			lightboxImage.src = '';
		};

		if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
		lightbox.addEventListener('click', (e) => {
			if (e.target === lightbox) {
				closeLightbox();
			}
		});
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && lightbox.style.display === 'flex') {
				closeLightbox();
			}
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\profile.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const profileForm = document.getElementById('profile-form');
	if (!profileForm) return;

	const editBtn = document.getElementById('edit-profile-btn');
	const submitBtn = document.getElementById('submit-profile-btn');
	const cancelBtn = document.getElementById('cancel-edit-btn');

	const editableFields = profileForm.querySelectorAll('.editable-field');
	const originalValues = {};

	const toggleEditMode = (isEditing) => {
		editableFields.forEach(field => {
			field.readOnly = !isEditing;
			if (!isEditing) {
				field.style.backgroundColor = '';
				field.style.border = '1px solid transparent';
			} else {
				field.style.backgroundColor = 'var(--bg-color)';
				field.style.border = '1px solid var(--border-color)';
			}
		});

		// Defensive check: only manipulate buttons if they exist
		if (editBtn) editBtn.style.display = isEditing ? 'none' : 'inline-flex';
		if (submitBtn) submitBtn.style.display = isEditing ? 'inline-flex' : 'none';
		if (cancelBtn) cancelBtn.style.display = isEditing ? 'inline-flex' : 'none';

		if (isEditing) {
			editableFields.forEach(input => {
				originalValues[input.name] = input.value;
			});
		}
	};

	// Initialize view mode
	toggleEditMode(false);
	profileForm.querySelector('input[name="username"]').style.border = '1px solid transparent';

	if (editBtn) {
		editBtn.addEventListener('click', () => toggleEditMode(true));
	}

	if (cancelBtn) {
		cancelBtn.addEventListener('click', () => {
			editableFields.forEach(input => {
				input.value = originalValues[input.name];
			});
			toggleEditMode(false);
		});
	}

	profileForm.addEventListener('submit', async (e) => {
		e.preventDefault();

		const body = new URLSearchParams(new FormData(profileForm));
		const actionUrl = profileForm.getAttribute('action');

		try {
			const response = await fetch(actionUrl, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/x-www-form-urlencoded',
				},
				body: body
			});

			const contentType = response.headers.get("content-type");
			if (contentType && contentType.includes("application/json")) {
				const result = await response.json();
				if (response.ok && result.success) {
					showToast(result.message, 'success');
					toggleEditMode(false);
					setTimeout(() => window.location.reload(), 1500);
				} else {
					showToast(result.message || 'Ein Fehler ist aufgetreten.', 'danger');
				}
			} else {
				const text = await response.text();
				console.error("Server returned non-JSON response:", text);
				throw new Error("Server did not return a valid JSON response. Status: " + response.status);
			}
		} catch (error) {
			console.error('Error submitting profile change request:', error);
			showToast('Ein Netzwerkfehler oder Serverfehler ist aufgetreten.', 'danger');
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\qr_action.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const quantityInput = document.getElementById('quantity');
	const checkoutBtn = document.getElementById('checkout-btn');
	const checkinBtn = document.getElementById('checkin-btn');

	const form = document.querySelector('.qr-action-container form');
	const availableQty = parseInt(form.dataset.availableQty, 10);
	const totalQty = parseInt(form.dataset.totalQty, 10);
	const maxQty = parseInt(form.dataset.maxQty, 10);

	quantityInput.max = availableQty;

	checkoutBtn.addEventListener('click', () => {
		quantityInput.max = availableQty;
		quantityInput.title = `Maximal entnehmbar: ${availableQty}`;
	});

	checkinBtn.addEventListener('click', () => {
		const availableSpace = maxQty > 0 ? maxQty - totalQty : 9999;
		quantityInput.max = availableSpace > 0 ? availableSpace : 9999;
		quantityInput.title = `Maximal einräumbar: ${availableSpace}`;
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\storage_item_details.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const lightbox = document.getElementById('lightbox');
	if (lightbox) {
		const lightboxImage = document.getElementById('lightbox-image');
		const closeBtn = lightbox.querySelector('.lightbox-close');

		document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
			trigger.addEventListener('click', (e) => {
				e.preventDefault();
				lightboxImage.src = trigger.href;
				lightbox.style.display = 'flex';
			});
		});

		const closeLightbox = () => { lightbox.style.display = 'none'; };
		if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
		lightbox.addEventListener('click', (e) => { if (e.target === lightbox) closeLightbox(); });
		document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && lightbox.style.display === 'flex') closeLightbox(); });
	}

	const tabButtons = document.querySelectorAll('.modal-tab-button');
	const tabContents = document.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_achievements.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Erfolge & Abzeichen" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />
<c:set var="hasMasterAccess"
	value="${userPermissions.contains('ACCESS_ADMIN_PANEL')}" />

<h1>
	<i class="fas fa-award"></i> Erfolge & Abzeichen verwalten
</h1>
<p>Hier können Sie die Bedingungen und das Aussehen für Erfolge
	definieren, die Benutzer verdienen können.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if
		test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_CREATE')}">
		<button type="button" id="new-achievement-btn" class="btn btn-success"
			data-modal-target="achievement-modal">
			<i class="fas fa-plus"></i> Neuen Erfolg anlegen
		</button>
	</c:if>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th>Icon</th>
				<th>Name</th>
				<th>Programmatischer Key</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty achievements}">
				<tr>
					<td colspan="4" style="text-align: center;">Keine Erfolge
						definiert.</td>
				</tr>
			</c:if>
			<c:forEach var="ach" items="${achievements}">
				<tr>
					<td style="font-size: 1.5rem; text-align: center;"><i
						class="fas ${ach.iconClass}"></i></td>
					<td><c:out value="${ach.name}" /></td>
					<td><code>
							<c:out value="${ach.achievementKey}" />
						</code></td>
					<td><c:if
							test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_UPDATE')}">
							<button type="button"
								class="btn btn-small btn-secondary edit-achievement-btn"
								data-id="${ach.id}" data-modal-target="achievement-modal">
								<i class="fas fa-edit"></i> Bearbeiten
							</button>
						</c:if> <c:if
							test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_DELETE')}">
							<form
								action="${pageContext.request.contextPath}/admin/achievements"
								method="post" class="js-confirm-form" style="display: inline;"
								data-confirm-message="Erfolg '${fn:escapeXml(ach.name)}' wirklich löschen?">
								<input type="hidden" name="csrfToken"
									value="${sessionScope.csrfToken}"> <input type="hidden"
									name="action" value="delete"> <input type="hidden"
									name="id" value="${ach.id}">
								<button type="submit" class="btn btn-small btn-danger">
									<i class="fas fa-trash"></i> Löschen
								</button>
							</form>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list">
	<c:if test="${empty achievements}">
		<div class="card">
			<p>Keine Erfolge definiert.</p>
		</div>
	</c:if>
	<c:forEach var="ach" items="${achievements}">
		<div class="list-item-card">
			<h3 class="card-title">
				<i class="fas ${ach.iconClass}"></i>
				<c:out value="${ach.name}" />
			</h3>
			<div class="card-row">
				<span>Key:</span>
				<code>
					<c:out value="${ach.achievementKey}" />
				</code>
			</div>
			<div class="card-actions">
				<c:if
					test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_UPDATE')}">
					<button type="button"
						class="btn btn-small btn-secondary edit-achievement-btn"
						data-id="${ach.id}" data-modal-target="achievement-modal">
						<i class="fas fa-edit"></i> Bearbeiten
					</button>
				</c:if>
				<c:if
					test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_DELETE')}">
					<form
						action="${pageContext.request.contextPath}/admin/achievements"
						method="post" class="js-confirm-form"
						data-confirm-message="Erfolg '${fn:escapeXml(ach.name)}' wirklich löschen?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="delete"> <input type="hidden"
							name="id" value="${ach.id}">
						<button type="submit" class="btn btn-small btn-danger">
							<i class="fas fa-trash"></i> Löschen
						</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Modal for Create/Edit Achievement -->
<div class="modal-overlay" id="achievement-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen"
			data-modal-close>×</button>
		<h3 id="achievement-modal-title">Erfolg verwalten</h3>
		<form id="achievement-modal-form"
			action="${pageContext.request.contextPath}/admin/achievements"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="achievement-modal-action"> <input
				type="hidden" name="id" id="achievement-modal-id"> <input
				type="hidden" name="achievement_key" id="achievement-key-hidden">

			<div class="form-group">
				<label for="name-modal">Name des Erfolgs</label> <input type="text"
					id="name-modal" name="name" required>
			</div>

			<div id="key-builder-group">
				<div class="form-group">
					<label for="key-type-select">Art des Erfolgs (Trigger)</label> <select
						id="key-type-select">
						<option value="">-- Bitte wählen --</option>
						<option value="EVENT_PARTICIPANT">Event-Teilnahme
							(Anzahl)</option>
						<option value="EVENT_LEADER">Event-Leitung (Anzahl)</option>
						<option value="QUALIFICATION">Qualifikation erhalten</option>
					</select>
				</div>
				<div id="key-number-group" class="key-subtype-group"
					style="display: none;">
					<div class="form-group">
						<label for="key-value-input">Erforderliche Anzahl</label> <input
							type="number" id="key-value-input" min="1" value="1"
							placeholder="z.B. 5 für 5 Teilnahmen">
					</div>
				</div>
				<div id="key-course-group" class="key-subtype-group"
					style="display: none;">
					<div class="form-group">
						<label for="key-course-select">Qualifikation</label> <select
							id="key-course-select">
							<option value="">-- Lehrgang wählen --</option>
							<c:forEach var="course" items="${allCourses}">
								<option value="${fn:replace(course.abbreviation, ' ', '_')}"><c:out
										value="${course.name}" /></option>
							</c:forEach>
						</select>
					</div>
				</div>
				<p>
					Generierter Key:
					<code id="generated-key-preview">--</code>
				</p>
			</div>

			<div class="form-group">
				<label for="icon-modal"> Icon-Klasse (Font Awesome) <a
					href="https://fontawesome.com/v5/search?m=free" target="_blank"
					title="Icons durchsuchen"> <i class="fas fa-external-link-alt"></i>
				</a>
				</label> <input type="text" id="icon-modal" name="icon_class"
					value="fa-award" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>

			<button type="submit" class="btn btn-success">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_achievements.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_course_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lehrgangs-Vorlagen" />
</c:import>

<h1>Lehrgangs-Vorlagen verwalten</h1>
<p>Dies sind die übergeordneten Lehrgänge. Einzelne Termine
	(Meetings) werden für jede Vorlage separat verwaltet.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" id="new-course-btn" class="btn btn-success"
		data-modal-target="course-modal">
		<i class="fas fa-plus"></i> Neue Vorlage
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Vorlagen filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name der Vorlage</th>
				<th class="sortable" data-sort-type="string">Abkürzung (für
					Matrix)</th>
				<th style="min-width: 350px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty courseList}">
				<tr>
					<td colspan="3" style="text-align: center;">Es wurden noch
						keine Lehrgangs-Vorlagen erstellt.</td>
				</tr>
			</c:if>
			<c:forEach var="course" items="${courseList}">
				<tr>
					<td><c:out value="${course.name}" /></td>
					<td><c:out value="${course.abbreviation}" /></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><a
						href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
						class="btn btn-small"> <i class="fas fa-calendar-day"></i>
							Meetings
					</a>
						<button type="button"
							class="btn btn-small btn-secondary edit-course-btn"
							data-id="${course.id}" data-modal-target="course-modal">
							<i class="fas fa-edit"></i> Bearbeiten
						</button>
						<form action="${pageContext.request.contextPath}/admin/lehrgaenge"
							method="post" class="js-confirm-form"
							data-confirm-message="Vorlage '${fn:escapeXml(course.name)}' wirklich löschen? Alle zugehörigen Meetings und Qualifikationen werden auch gelöscht!">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="id" value="${course.id}">
							<button type="submit" class="btn btn-small btn-danger">
								<i class="fas fa-trash"></i> Löschen
							</button>
						</form></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty courseList}">
		<div class="card">
			<p>Es wurden noch keine Lehrgangs-Vorlagen erstellt.</p>
		</div>
	</c:if>
	<c:forEach var="course" items="${courseList}">
		<div class="list-item-card">
			<h3 class="card-title">
				<c:out value="${course.name}" />
			</h3>
			<div class="card-row">
				<span>Abkürzung:</span> <strong><c:out
						value="${course.abbreviation}" /></strong>
			</div>
			<div class="card-actions">
				<a
					href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
					class="btn btn-small"> <i class="fas fa-calendar-day"></i>
					Meetings
				</a>
				<button type="button"
					class="btn btn-small btn-secondary edit-course-btn"
					data-id="${course.id}" data-modal-target="course-modal">
					<i class="fas fa-edit"></i> Bearbeiten
				</button>
				<form action="${pageContext.request.contextPath}/admin/lehrgaenge"
					method="post" class="js-confirm-form"
					data-confirm-message="Vorlage '${fn:escapeXml(course.name)}' wirklich löschen? Alle zugehörigen Meetings und Qualifikationen werden auch gelöscht!">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="delete"> <input type="hidden"
						name="id" value="${course.id}">
					<button type="submit" class="btn btn-small btn-danger">
						<i class="fas fa-trash"></i> Löschen
					</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>

<!-- MODAL FOR CREATE/EDIT COURSE -->
<div class="modal-overlay" id="course-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen"
			data-modal-close>×</button>
		<h3 id="course-modal-title">Lehrgangs-Vorlage</h3>
		<form id="course-modal-form"
			action="${pageContext.request.contextPath}/admin/lehrgaenge"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="course-modal-action"> <input type="hidden"
				name="id" id="course-modal-id">
			<div class="form-group">
				<label for="name-modal">Name der Vorlage</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="form-group">
				<label for="abbreviation-modal">Abkürzung (max. 10 Zeichen)</label>
				<input type="text" id="abbreviation-modal" name="abbreviation"
					maxlength="10" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Allgemeine Beschreibung</label>
				<textarea id="description-modal" name="description" rows="4"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Vorlage Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_course_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_dashboard.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Dashboard" />
</c:import>

<h1>
	Willkommen im Admin-Bereich,
	<c:out value="${sessionScope.user.username}" />
	!
</h1>
<p>Hier können Sie die Anwendung verwalten. Wählen Sie eine Option
	aus der Navigation oder nutzen Sie den Schnellzugriff.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid">
	<div class="card" id="widget-upcoming-events">
		<h2>
			<i class="fas fa-calendar-check"></i> Nächste Einsätze
		</h2>
		<p>Lade Daten...</p>
	</div>

	<div class="card" id="widget-low-stock">
		<h2>
			<i class="fas fa-battery-quarter"></i> Niedriger Lagerbestand
		</h2>
		<p>Lade Daten...</p>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-exclamation-triangle text-danger"></i> Defekte
			Artikel
		</h2>
		<p>
			Es sind aktuell <strong><c:out
					value="${fn:length(defectiveItems)}" /></strong> Artikel als defekt
			gemeldet.
		</p>
		<a href="${pageContext.request.contextPath}/admin/defekte"
			class="btn btn-small" style="margin-top: 1rem;">Defekte anzeigen</a>
	</div>

	<div class="card" id="widget-recent-logs">
		<h2>
			<i class="fas fa-history"></i> Letzte Aktivitäten
		</h2>
		<p>Lade Daten...</p>
	</div>
</div>

<div class="card" style="margin-top: 2rem;">
	<h2 class="card-title">Event-Trend (Letzte 12 Monate)</h2>
	<div style="position: relative; height: 300px;">
		<canvas id="eventTrendChart"></canvas>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script
	src="${pageContext.request.contextPath}/js/admin/admin_dashboard.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_defect_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Defekte Artikel" />
</c:import>

<h1>
	<i class="fas fa-wrench"></i> Defekte Artikel verwalten
</h1>
<p>Hier sind alle Artikel gelistet, von denen mindestens ein
	Exemplar als defekt markiert wurde.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Defekt / Gesamt</th>
				<th>Grund</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty defectiveItems}">
				<tr>
					<td colspan="4" style="text-align: center;">Aktuell sind keine
						Artikel als defekt gemeldet.</td>
				</tr>
			</c:if>
			<c:forEach var="item" items="${defectiveItems}">
				<tr>
					<td><a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
								value="${item.name}" /></a></td>
					<td><c:out value="${item.defectiveQuantity}" /> / <c:out
							value="${item.quantity}" /></td>
					<td><c:out value="${item.defectReason}" /></td>
					<td>
						<button class="btn btn-small btn-warning defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-max-qty="${item.quantity}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}"
							data-modal-target="defect-modal">Status bearbeiten</button>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list">
	<c:if test="${empty defectiveItems}">
		<div class="card">
			<p>Aktuell sind keine Artikel als defekt gemeldet.</p>
		</div>
	</c:if>
	<c:forEach var="item" items="${defectiveItems}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
						value="${item.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Defekt / Gesamt:</span> <strong><c:out
						value="${item.defectiveQuantity}" /> / <c:out
						value="${item.quantity}" /></strong>
			</div>
			<div class="card-row"
				style="flex-direction: column; align-items: flex-start;">
				<span>Grund:</span>
				<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
					<c:out
						value="${not empty item.defectReason ? item.defectReason : 'Kein Grund angegeben.'}" />
				</p>
			</div>
			<div class="card-actions">
				<button class="btn btn-small btn-warning defect-modal-btn"
					data-item-id="${item.id}"
					data-item-name="${fn:escapeXml(item.name)}"
					data-max-qty="${item.quantity}"
					data-current-defect-qty="${item.defectiveQuantity}"
					data-current-reason="${fn:escapeXml(item.defectReason)}"
					data-modal-target="defect-modal">Status bearbeiten</button>
			</div>
		</div>
	</c:forEach>
</div>


<!-- Modal for updating defect status -->
<div class="modal-overlay" id="defect-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen"
			data-modal-close>×</button>
		<h3 id="defect-modal-title">Defekt-Status bearbeiten</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="updateDefect"> <input type="hidden"
				name="id" id="defect-item-id"> <input type="hidden"
				name="returnTo" value="defekte">
			<div class="form-group">
				<label for="defective_quantity">Anzahl defekter Artikel</label> <input
					type="number" name="defective_quantity" id="defective_quantity"
					min="0" required>
			</div>
			<div class="form-group">
				<label for="defect_reason">Grund (optional)</label>
				<textarea name="defect_reason" id="defect_reason" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_defect_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_editor.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Editor: ${file.filename}" />
	<c:param name="page" value="editor" />
</c:import>

<div id="editor-page-wrapper">
	<div id="editor-page-container" data-file-id="${file.id}">
		<div class="editor-header">
			<h1>
				<i class="fas fa-file-alt"></i>
				<c:out value="${file.filename}" />
			</h1>
			<div class="editor-controls">
				<c:if test="${editorMode eq 'edit'}">
					<div class="mode-switcher">
						<span>View</span> <label class="toggle-switch"> <input
							type="checkbox" id="mode-toggle" checked> <span
							class="slider"></span>
						</label> <span>Edit</span>
					</div>
				</c:if>
				<span id="save-status-indicator" class="status-badge"
					style="display: none;"></span>
			</div>
		</div>

		<c:import url="/WEB-INF/jspf/message_banner.jspf" />

		<div class="editor-container card">
			<textarea id="editor" name="content"
				style="display: ${editorMode eq 'edit' ? 'block' : 'none'};"
				<c:if test="${editorMode ne 'edit'}">readonly</c:if>>${fn:escapeXml(fileContent)}</textarea>
			<div id="markdown-preview" class="markdown-content"
				style="display: ${editorMode eq 'edit' ? 'none' : 'block'};">
			</div>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_editor.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_events_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Eventverwaltung" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />
<c:set var="hasMasterAccess"
	value="${userPermissions.contains('ACCESS_ADMIN_PANEL')}" />

<h1>
	<i class="fas fa-calendar-check"></i> Eventverwaltung
</h1>
<p>Hier können Sie Events erstellen, bearbeiten, Personal zuweisen
	und den Status verwalten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if
		test="${hasMasterAccess or userPermissions.contains('EVENT_CREATE')}">
		<button type="button" class="btn btn-success" id="new-event-btn">
			<i class="fas fa-plus"></i> Neues Event anlegen
		</button>
	</c:if>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter" placeholder="Events filtern..."
			aria-label="Tabelle filtern">
	</div>
</div>

<c:if test="${empty eventList}">
	<div class="card">
		<p>Keine Events gefunden.</p>
	</div>
</c:if>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th class="sortable" data-sort-type="string">Zeitraum</th>
				<th class="sortable" data-sort-type="string">Status</th>
				<th style="min-width: 450px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="event" items="${eventList}">
				<c:set var="isLeader"
					value="${sessionScope.user.id == event.leaderUserId}" />
				<tr data-event-id="${event.id}">
					<td><a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
								value="${event.name}" /></a></td>
					<td><c:out value="${event.formattedEventDateTimeRange}" /></td>
					<td><span
						class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
								value="${event.status}" /></span></td>
					<td style="display: flex; gap: 5px; flex-wrap: wrap;"><c:if
							test="${hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader}">
							<button type="button" class="btn btn-small edit-event-btn"
								data-event-id="${event.id}">Bearbeiten</button>
						</c:if> <c:if
							test="${hasMasterAccess or userPermissions.contains('EVENT_MANAGE_ASSIGNMENTS') or isLeader}">
							<button type="button"
								class="btn btn-small btn-success assign-users-btn"
								data-event-id="${event.id}"
								data-event-name="${fn:escapeXml(event.name)}">Zuweisen</button>
						</c:if>
						<div class="event-status-actions">
							<c:if
								test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and (event.status == 'GEPLANT' || event.status == 'KOMPLETT')}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich starten? Der Chat wird aktiviert.">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="LAUFEND">
									<button type="submit" class="btn btn-small btn-warning">Starten</button>
								</form>
							</c:if>
							<c:if
								test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and event.status == 'LAUFEND'}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich abschließen?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="ABGESCHLOSSEN">
									<button type="submit" class="btn btn-small"
										style="background-color: var(--text-muted-color);">Abschließen</button>
								</form>
							</c:if>
						</div> <c:if
							test="${hasMasterAccess or userPermissions.contains('EVENT_DELETE')}">
							<form
								action="${pageContext.request.contextPath}/admin/veranstaltungen"
								method="post" class="inline-form js-confirm-form"
								data-confirm-message="Soll das Event '${fn:escapeXml(event.name)}' wirklich endgültig gelöscht werden?">
								<input type="hidden" name="csrfToken"
									value="${sessionScope.csrfToken}"> <input type="hidden"
									name="action" value="delete"><input type="hidden"
									name="id" value="${event.id}">
								<button type="submit" class="btn btn-small btn-danger">Löschen</button>
							</form>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="event" items="${eventList}">
		<c:set var="isLeader"
			value="${sessionScope.user.id == event.leaderUserId}" />
		<div class="list-item-card" data-event-id="${event.id}">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
						value="${event.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${event.formattedEventDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Status:</span> <span><span
					class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
							value="${event.status}" /></span></span>
			</div>
			<div class="card-actions">
				<c:if
					test="${hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader}">
					<button type="button" class="btn btn-small edit-event-btn"
						data-event-id="${event.id}">Bearbeiten</button>
				</c:if>
				<c:if
					test="${hasMasterAccess or userPermissions.contains('EVENT_MANAGE_ASSIGNMENTS') or isLeader}">
					<button type="button"
						class="btn btn-small btn-success assign-users-btn"
						data-event-id="${event.id}"
						data-event-name="${fn:escapeXml(event.name)}">Zuweisen</button>
				</c:if>
				<div class="event-status-actions">
					<c:if
						test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and (event.status == 'GEPLANT' || event.status == 'KOMPLETT')}">
						<form
							action="${pageContext.request.contextPath}/admin/veranstaltungen"
							method="post" style="display: inline;" class="js-confirm-form"
							data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich starten? Der Chat wird aktiviert.">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="updateStatus"><input type="hidden"
								name="id" value="${event.id}"><input type="hidden"
								name="newStatus" value="LAUFEND">
							<button type="submit" class="btn btn-small btn-warning">Starten</button>
						</form>
					</c:if>
					<c:if
						test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and event.status == 'LAUFEND'}">
						<form
							action="${pageContext.request.contextPath}/admin/veranstaltungen"
							method="post" style="display: inline;" class="js-confirm-form"
							data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich abschließen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="updateStatus"><input type="hidden"
								name="id" value="${event.id}"><input type="hidden"
								name="newStatus" value="ABGESCHLOSSEN">
							<button type="submit" class="btn btn-small"
								style="background-color: var(--text-muted-color);">Abschließen</button>
						</form>
					</c:if>
				</div>
				<c:if
					test="${hasMasterAccess or userPermissions.contains('EVENT_DELETE')}">
					<form
						action="${pageContext.request.contextPath}/admin/veranstaltungen"
						method="post" class="inline-form js-confirm-form"
						data-confirm-message="Soll das Event '${fn:escapeXml(event.name)}' wirklich endgültig gelöscht werden?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="delete"><input type="hidden"
							name="id" value="${event.id}">
						<button type="submit" class="btn btn-small btn-danger">Löschen</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<jsp:include page="/WEB-INF/jspf/event_modals.jspf" />

<!-- Crew Finder Modal -->
<div class="modal-overlay" id="find-crew-modal">
	<div class="modal-content" style="max-width: 500px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="find-crew-modal-title">Crew Finder</h3>
		<p>Folgende Benutzer sind qualifiziert und verfügbar. Wählen Sie
			aus, wen Sie per Benachrichtigung einladen möchten.</p>
		<form id="find-crew-form"
			action="${pageContext.request.contextPath}/admin/veranstaltungen"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="inviteUsers"> <input type="hidden"
				name="eventId" id="find-crew-event-id">
			<div id="find-crew-list"
				style="max-height: 40vh; overflow-y: auto; border: 1px solid var(--border-color); border-radius: 6px; padding: 0.5rem; margin-bottom: 1rem;">
				<!-- User list will be populated by JS -->
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-paper-plane"></i> Ausgewählte einladen
			</button>
		</form>
	</div>
</div>

<script id="allCoursesData" type="application/json">${allCoursesJson}</script>
<script id="allItemsData" type="application/json">${allItemsJson}</script>
<script id="allKitsData" type="application/json">${allKitsJson}</script>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_events_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_feedback.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Feedback Board" />
</c:import>

<style>
.feedback-board {
	display: flex;
	gap: 1.5rem;
	overflow-x: auto;
	padding-bottom: 1rem;
}

.feedback-column {
	flex: 1 0 300px; /* Flex-grow, flex-shrink, flex-basis */
	min-width: 300px;
	background-color: var(--bg-color);
	border-radius: var(--border-radius);
	padding: 1rem;
}

.feedback-column h2 {
	font-size: 1.2rem;
	border-bottom: 2px solid var(--border-color);
	padding-bottom: 0.5rem;
	margin-bottom: 1rem;
}

.feedback-list {
	min-height: 100px;
	display: flex;
	flex-direction: column;
	gap: 1rem;
}

.feedback-card-item {
	background-color: var(--surface-color);
	border: 1px solid var(--border-color);
	border-radius: 6px;
	padding: 1rem;
	box-shadow: var(--shadow-sm);
	cursor: pointer;
}

.feedback-card-item:active {
	cursor: grabbing;
}

.feedback-card-item .subject {
	font-weight: 600;
	margin-bottom: 0.5rem;
	display: block;
}

.feedback-card-item .content-preview {
	font-size: 0.9rem;
	color: var(--text-muted-color);
	margin-bottom: 0.75rem;
	display: -webkit-box;
	-webkit-line-clamp: 2;
	-webkit-box-orient: vertical;
	overflow: hidden;
	text-overflow: ellipsis;
}

.feedback-card-item .meta {
	font-size: 0.8rem;
	color: var(--text-muted-color);
}

.sortable-ghost {
	opacity: 0.4;
	background: var(--primary-color-light);
}
</style>

<h1>
	<i class="fas fa-columns"></i> Feedback Board
</h1>
<p>Verwalten Sie hier alle eingereichten Feedbacks. Sie können die
	Karten per Drag & Drop zwischen den Spalten verschieben, um den Status
	zu ändern.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="feedback-board">
	<c:forEach var="status" items="${feedbackStatusOrder}">
		<c:if test="${status ne 'NEW' or not empty groupedSubmissions['NEW']}">
			<div class="feedback-column">
				<h2>${status}</h2>
				<div class="feedback-list" data-status-id="${status}">
					<c:forEach var="submission" items="${groupedSubmissions[status]}">
						<div class="feedback-card-item" data-id="${submission.id}">
							<strong class="subject">${fn:escapeXml(not empty submission.displayTitle ? submission.displayTitle : submission.subject)}</strong>
							<p class="content-preview">${fn:escapeXml(submission.content)}</p>
							<p class="meta">
								Von: <strong>${fn:escapeXml(submission.username)}</strong> am
								${submission.formattedSubmittedAt}
							</p>
						</div>
					</c:forEach>
				</div>
			</div>
		</c:if>
	</c:forEach>
</div>

<!-- Modal for Feedback Details -->
<div class="modal-overlay" id="feedback-details-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="feedback-modal-title">Feedback Details</h3>
		<form id="feedback-details-form">
			<input type="hidden" name="submissionId" id="feedback-modal-id">
			<div class="form-group">
				<label>Originaltitel</label>
				<p id="feedback-modal-original-subject" style="font-weight: bold;"></p>
			</div>
			<div class="form-group">
				<label for="feedback-modal-display-title">Anzeigetitel
					(optional, für Admins)</label> <input type="text"
					id="feedback-modal-display-title" name="displayTitle">
			</div>
			<div class="form-group">
				<label>Inhalt</label>
				<div id="feedback-modal-content" class="markdown-content"
					style="white-space: pre-wrap; background-color: var(--bg-color); padding: 1rem; border-radius: var(--border-radius);"></div>
			</div>
			<div class="form-group">
				<label for="feedback-modal-status">Status</label> <select
					name="status" id="feedback-modal-status">
					<c:forEach var="status" items="${feedbackStatusOrder}">
						<option value="${status}">${status}</option>
					</c:forEach>
				</select>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-save"></i> Änderungen speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/webjars/sortablejs/1.15.2/Sortable.min.js"></script>
<script
	src="${pageContext.request.contextPath}/js/admin/admin_feedback.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_files.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Datei- & Kategorienverwaltung" />
</c:import>

<h1>
	<i class="fas fa-folder-open"></i> Datei- & Kategorienverwaltung
</h1>
<p>Verwalten Sie hier alle hochgeladenen Dateien und deren
	Kategorien.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="file-manager-layout">

	<div class="card">
		<h2>Aktionen</h2>
		<form
			action="${pageContext.request.contextPath}/admin/dateien/kategorien/erstellen"
			method="post" style="margin-bottom: 2rem;">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}">
			<div class="form-group">
				<label for="newCategoryName">Neue Kategorie erstellen</label> <input
					type="text" name="categoryName" id="newCategoryName" required>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-plus"></i> Erstellen
			</button>
		</form>

		<hr>

		<h3 style="margin-top: 1.5rem;">Neue Datei hochladen</h3>
		<form action="${pageContext.request.contextPath}/admin/dateien"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="create">
			<div class="form-group">
				<label for="file">Datei auswählen</label> <input type="file"
					name="file" id="file" class="file-input" data-max-size="20971520"
					required> <small class="file-size-warning">Datei
					ist zu groß! (Max. 20 MB)</small>
			</div>
			<div class="form-group">
				<label for="categoryId">In Kategorie</label> <select
					name="categoryId" id="categoryId" required>
					<option value="">-- Bitte wählen --</option>
					<c:forEach var="cat" items="${allCategories}">
						<option value="${cat.id}"><c:out value="${cat.name}" /></option>
					</c:forEach>
				</select>
			</div>
			<div class="form-group">
				<label for="requiredRole">Sichtbar für</label> <select
					name="requiredRole" id="requiredRole">
					<option value="NUTZER" selected>Alle zugeordneten Nutzer</option>
					<option value="ADMIN">Nur Admins</option>
				</select>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-cloud-upload-alt"></i> Hochladen
			</button>
		</form>
	</div>

	<div class="card">
		<h2>Vorhandene Dateien nach Kategorie</h2>
		<c:if test="${empty groupedFiles}">
			<p>Es sind keine Kategorien oder Dateien vorhanden.</p>
		</c:if>

		<c:forEach var="categoryEntry" items="${groupedFiles}">
			<div class="category-group" style="margin-bottom: 2rem;">
				<div
					style="display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid var(--border-color); padding-bottom: 0.5rem;">
					<h3>
						<i class="fas fa-folder"></i>
						<c:out value="${categoryEntry.key}" />
					</h3>
					<c:if test="${categoryEntry.key != 'Ohne Kategorie'}">
						<form
							action="${pageContext.request.contextPath}/admin/dateien/kategorien/loeschen"
							method="post" class="js-confirm-form"
							data-confirm-message="Kategorie '${fn:escapeXml(categoryEntry.key)}' wirklich löschen? Alle Dateien in dieser Kategorie werden der Gruppe 'Ohne Kategorie' zugeordnet.">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="categoryId" value="${categoryEntry.value[0].categoryId}">
							<button type="submit" class="btn btn-small btn-danger-outline"
								title="Kategorie löschen">
								<i class="fas fa-trash"></i>
							</button>
						</form>
					</c:if>
				</div>
				<ul class="file-list">
					<c:if test="${empty categoryEntry.value}">
						<li style="justify-content: center;">Keine Dateien in dieser
							Kategorie.</li>
					</c:if>
					<c:forEach var="file" items="${categoryEntry.value}">
						<li>
							<div class="file-info">
								<a href="<c:url value='/download?id=${file.id}'/>"
									title="Datei herunterladen"> <i class="fas fa-download"></i>
									<c:out value="${file.filename}" />
								</a> <small class="file-meta">Sichtbar für: <c:out
										value="${file.requiredRole}" /></small>
							</div>
							<div class="file-actions"
								style="display: flex; gap: 0.5rem; align-items: center;">
								<button type="button"
									class="btn btn-small btn-info reassign-file-btn"
									data-file-id="${file.id}"
									data-file-name="${fn:escapeXml(file.filename)}">
									<i class="fas fa-random"></i>
								</button>
								<button type="button"
									class="btn btn-small btn-secondary upload-new-version-btn"
									data-file-id="${file.id}"
									data-file-name="${fn:escapeXml(file.filename)}">
									<i class="fas fa-upload"></i>
								</button>
								<form action="${pageContext.request.contextPath}/admin/dateien"
									method="post" class="js-confirm-form"
									data-confirm-message="Datei '${fn:escapeXml(file.filename)}' wirklich löschen?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="delete"> <input
										type="hidden" name="fileId" value="${file.id}">
									<button type="submit" class="btn btn-small btn-danger-outline"
										title="Löschen">
										<i class="fas fa-trash-alt"></i>
									</button>
								</form>
							</div>
						</li>
					</c:forEach>
				</ul>
			</div>
		</c:forEach>
	</div>
</div>

<!-- Modal for reassigning a file -->
<div class="modal-overlay" id="reassign-file-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="reassign-modal-title">Datei neu zuordnen</h3>
		<form action="${pageContext.request.contextPath}/admin/dateien"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="reassign"> <input type="hidden"
				name="fileId" id="reassign-file-id">
			<p>
				Wählen Sie die neue Kategorie für die Datei <strong
					id="reassign-file-name"></strong>.
			</p>
			<div class="form-group">
				<label for="newCategoryId">Neue Kategorie</label> <select
					name="newCategoryId" id="newCategoryId" required>
					<c:forEach var="cat" items="${allCategories}">
						<option value="${cat.id}">${cat.name}</option>
					</c:forEach>
				</select>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-save"></i> Neu zuordnen
			</button>
		</form>
	</div>
</div>

<!-- Modal for uploading a new version -->
<div class="modal-overlay" id="upload-version-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="upload-modal-title">Neue Version hochladen</h3>
		<form id="upload-version-form"
			action="${pageContext.request.contextPath}/admin/dateien"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="update"> <input type="hidden"
				name="fileId" id="upload-file-id">
			<p>
				Sie sind dabei, eine neue Version für die Datei <strong
					id="upload-file-name"></strong> hochzuladen. Die alte Version wird
				dabei überschrieben.
			</p>
			<div class="form-group">
				<label for="new-file-version">Neue Datei auswählen (muss
					denselben Dateityp haben)</label> <input type="file" name="file"
					id="new-file-version" class="file-input" data-max-size="20971520"
					required> <small class="file-size-warning">Datei
					ist zu groß! (Max. 20 MB)</small>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-cloud-upload-alt"></i> Jetzt hochladen
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_files.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_kits.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Kit-Verwaltung" />
</c:import>

<h1>
	<i class="fas fa-box-open"></i> Kit-Verwaltung
</h1>
<p>Verwalten Sie hier wiederverwendbare Material-Zusammenstellungen
	(Kits oder Koffer).</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-kit-btn"
		data-modal-target="kit-modal">
		<i class="fas fa-plus"></i> Neues Kit anlegen
	</button>
</div>

<div class="card">
	<c:if test="${empty kits}">
		<p>Es wurden noch keine Kits erstellt.</p>
	</c:if>
	<c:forEach var="kit" items="${kits}">
		<div class="kit-container"
			style="border-bottom: 1px solid var(--border-color); padding-bottom: 1.5rem; margin-bottom: 1.5rem;">
			<div class="kit-header">
				<div>
					<h3>
						<i class="fas fa-chevron-down toggle-icon"></i>
						<c:out value="${kit.name}" />
					</h3>
					<p
						style="margin: -0.5rem 0 0 1.75rem; color: var(--text-muted-color);">
						<c:out value="${kit.description}" />
					</p>
				</div>
				<div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
					<c:set var="absoluteActionUrl"
						value="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/pack-kit?kitId=${kit.id}" />
					<c:set var="qrApiUrl"
						value="https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${fn:escapeXml(absoluteActionUrl)}" />
					<a href="${qrApiUrl}" target="_blank" class="btn btn-small">QR-Code</a>

					<button type="button"
						class="btn btn-small btn-secondary edit-kit-btn"
						data-kit-id="${kit.id}" data-kit-name="${fn:escapeXml(kit.name)}"
						data-kit-desc="${fn:escapeXml(kit.description)}"
						data-kit-location="${fn:escapeXml(kit.location)}"
						data-modal-target="kit-modal">Bearbeiten</button>
					<form action="${pageContext.request.contextPath}/admin/kits"
						method="post" class="js-confirm-form"
						data-confirm-message="Kit '${fn:escapeXml(kit.name)}' wirklich löschen?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="delete"> <input type="hidden"
							name="id" value="${kit.id}">
						<button type="submit" class="btn btn-small btn-danger">Löschen</button>
					</form>
				</div>
			</div>
			<div class="kit-content"
				style="display: none; padding-left: 2rem; margin-top: 1rem;">

				<form action="${pageContext.request.contextPath}/admin/kits"
					method="post">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="updateKitItems"> <input type="hidden"
						name="kitId" value="${kit.id}">

					<h4>Inhalt bearbeiten</h4>
					<div id="kit-items-container-${kit.id}" class="kit-items-container">
						<c:if test="${empty kit.items}">
							<p class="no-items-message">Dieses Kit ist leer. Fügen Sie
								einen Artikel hinzu.</p>
						</c:if>
						<c:forEach var="item" items="${kit.items}">
							<div class="dynamic-row">
								<select name="itemIds" class="form-group">
									<c:forEach var="storageItem" items="${allItems}">
										<option value="${storageItem.id}"
											${storageItem.id == item.itemId ? 'selected' : ''}>
											<c:out value="${storageItem.name}" />
										</option>
									</c:forEach>
								</select> <input type="number" name="quantities" value="${item.quantity}"
									min="1" class="form-group" style="max-width: 100px;">
								<button type="button"
									class="btn btn-small btn-danger btn-remove-kit-item-row"
									title="Zeile entfernen">×</button>
							</div>
						</c:forEach>
					</div>

					<div
						style="margin-top: 1rem; display: flex; justify-content: space-between; align-items: center;">
						<button type="button" class="btn btn-small btn-add-kit-item-row"
							data-container-id="kit-items-container-${kit.id}">
							<i class="fas fa-plus"></i> Zeile hinzufügen
						</button>
						<button type="submit" class="btn btn-success">
							<i class="fas fa-save"></i> Kit-Inhalt speichern
						</button>
					</div>
				</form>

			</div>
		</div>
	</c:forEach>
</div>

<!-- Modal for Create/Edit Kit -->
<div class="modal-overlay" id="kit-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen"
			data-modal-close>×</button>
		<h3>Kit verwalten</h3>
		<form action="${pageContext.request.contextPath}/admin/kits"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value=""> <input type="hidden" name="id"
				value="">
			<div class="form-group">
				<label for="name-modal">Name des Kits</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>
			<div class="form-group">
				<label for="location-modal">Physischer Standort des Kits</label> <input
					type="text" id="location-modal" name="location"
					placeholder="z.B. Lager, Schrank 3, Fach A">
			</div>
			<button type="submit" class="btn">Speichern</button>
		</form>
	</div>
</div>

<script id="allItemsData" type="application/json">
    ${allItemsJson}
</script>
<script id="allSelectableItemsData" type="application/json">
    ${allItemsJson}
</script>


<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_kits.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_log.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Log" />
</c:import>

<h1>Admin Aktions-Protokoll</h1>

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Nach Details, Name oder Aktion filtern..."
			style="width: 100%;" aria-label="Protokoll filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table searchable-table">
		<thead>
			<tr>
				<th>Wann</th>
				<th>Wer</th>
				<th>Aktionstyp</th>
				<th>Details</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="log" items="${logs}">
				<tr>
					<td><c:out value="${log.formattedActionTimestamp}" /> Uhr</td>
					<td><c:out value="${log.adminUsername}" /></td>
					<td><c:out value="${log.actionType}" /></td>
					<td style="white-space: normal;"><c:out value="${log.details}" /></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty logs}">
		<div class="card">
			<p>Keine Log-Einträge gefunden.</p>
		</div>
	</c:if>
	<c:forEach var="log" items="${logs}">
		<div class="list-item-card">
			<h3 class="card-title" style="word-break: break-all;">
				<c:out value="${log.actionType}" />
			</h3>
			<div class="card-row">
				<span>Wer:</span> <strong><c:out
						value="${log.adminUsername}" /></strong>
			</div>
			<div class="card-row">
				<span>Wann:</span> <strong><c:out
						value="${log.formattedActionTimestamp}" /> Uhr</strong>
			</div>
			<div class="card-row"
				style="flex-direction: column; align-items: flex-start;">
				<span style="font-weight: 500;">Details:</span>
				<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
					<c:out value="${log.details}" />
				</p>
			</div>
		</div>
	</c:forEach>
</div>


<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_matrix.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Qualifikations-Matrix" />
</c:import>

<h1>
	<i class="fas fa-th-list"></i> Qualifikations-Matrix
</h1>
<p>Klicken Sie auf eine Zelle, um die Teilnahme an einem Meeting zu
	bearbeiten. Die Kopfzeile und die Benutzerleiste bleiben beim Scrollen
	fixiert.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="horizontal-scroll-hint">
	<i class="fas fa-arrows-alt-h"></i> Tabelle ist seitlich scrollbar
</div>

<div class="table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th rowspan="2" class="sticky-header sticky-col"
					style="vertical-align: middle; left: 0; z-index: 15;">Nutzer /
					Lehrgang ↓</th>
				<c:forEach var="course" items="${allCourses}">
					<th colspan="${fn:length(meetingsByCourse[course.id])}"
						class="sticky-header" style="text-align: center;"><a
						href="${pageContext.request.contextPath}/admin/lehrgaenge"
						title="Vorlagen verwalten">${course.abbreviation}</a></th>
				</c:forEach>
			</tr>
			<tr>
				<c:forEach var="course" items="${allCourses}">
					<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
						<th class="sticky-header"
							style="text-align: center; min-width: 120px;"><a
							href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
							title="Meetings für '${course.name}' verwalten">${meeting.name}</a>
						</th>
					</c:forEach>
				</c:forEach>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="user" items="${allUsers}">
				<tr>
					<td class="sticky-col" style="font-weight: 500; left: 0;"><a
						href="${pageContext.request.contextPath}/admin/mitglieder?action=details&id=${user.id}">${user.username}</a>
					</td>
					<c:forEach var="course" items="${allCourses}">
						<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
							<c:set var="attendanceKey" value="${user.id}-${meeting.id}" />
							<c:set var="attendance" value="${attendanceMap[attendanceKey]}" />
							<td class="qual-cell" data-user-id="${user.id}"
								data-user-name="${user.username}"
								data-meeting-id="${meeting.id}"
								data-meeting-name="${course.name} - ${meeting.name}"
								data-attended="${not empty attendance && attendance.attended}"
								data-remarks="${not empty attendance ? attendance.remarks : ''}"
								style="text-align: center; font-weight: bold; cursor: pointer;"
								title="Klicken zum Bearbeiten"><c:choose>
									<c:when test="${not empty attendance && attendance.attended}">
										<span style="font-size: 1.2rem;">✔</span>
									</c:when>
									<c:otherwise>
										<span class="text-muted">-</span>
									</c:otherwise>
								</c:choose></td>
						</c:forEach>
					</c:forEach>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Attendance Modal -->
<div class="modal-overlay" id="attendance-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3>Teilnahme bearbeiten</h3>
		<p id="modal-title" style="font-weight: bold; margin-bottom: 1rem;"></p>
		<form action="${pageContext.request.contextPath}/admin/teilnahme"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="returnTo" value="matrix"> <input type="hidden"
				name="userId" id="modal-user-id"> <input type="hidden"
				name="meetingId" id="modal-meeting-id">
			<div class="form-group"
				style="display: flex; align-items: center; gap: 1rem;">
				<label for="modal-attended" style="margin-bottom: 0;">Teilgenommen:</label>
				<input type="checkbox" id="modal-attended" name="attended"
					value="true" style="width: auto; height: 1.5rem;">
			</div>
			<div class="form-group">
				<label for="modal-remarks">Bemerkungen:</label>
				<textarea name="remarks" id="modal-remarks" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_matrix.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_meeting_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Meetings für ${parentCourse.name}" />
</c:import>

<h1>
	Meetings für "
	<c:out value="${parentCourse.name}" />
	"
</h1>
<a href="${pageContext.request.contextPath}/admin/lehrgaenge"
	style="margin-bottom: 1rem; display: inline-block;"> <i
	class="fas fa-arrow-left"></i> Zurück zu allen Vorlagen
</a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-meeting-btn">
		<i class="fas fa-plus"></i> Neues Meeting planen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Meetings filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<c:if test="${empty meetings}">
	<div class="card">
		<p>Für diesen Lehrgang wurden noch keine Meetings geplant.</p>
	</div>
</c:if>

<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Meeting-Name</th>
				<th class="sortable" data-sort-type="string">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Leitung</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="meeting" items="${meetings}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
								value="${meeting.name}" /></a></td>
					<td><c:out value="${meeting.formattedMeetingDateTimeRange}" /></td>
					<td><c:out
							value="${empty meeting.leaderUsername ? 'N/A' : meeting.leaderUsername}" /></td>
					<td style="display: flex; gap: 0.5rem;">
						<button type="button" class="btn btn-small edit-meeting-btn"
							data-meeting-id="${meeting.id}">Bearbeiten & Anhänge</button>
						<form action="${pageContext.request.contextPath}/admin/meetings"
							method="post" class="inline-form js-confirm-form"
							data-confirm-message="Meeting '${fn:escapeXml(meeting.name)}' wirklich löschen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="courseId" value="${parentCourse.id}"> <input
								type="hidden" name="meetingId" value="${meeting.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="meeting" items="${meetings}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
						value="${meeting.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${meeting.formattedMeetingDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Leitung:</span> <strong><c:out
						value="${empty meeting.leaderUsername ? 'N/A' : meeting.leaderUsername}" /></strong>
			</div>
			<div class="card-actions">
				<button type="button" class="btn btn-small edit-meeting-btn"
					data-meeting-id="${meeting.id}">Bearbeiten & Anhänge</button>
				<form action="${pageContext.request.contextPath}/admin/meetings"
					method="post" class="inline-form js-confirm-form"
					data-confirm-message="Meeting '${fn:escapeXml(meeting.name)}' wirklich löschen?">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="delete"> <input type="hidden"
						name="courseId" value="${parentCourse.id}"> <input
						type="hidden" name="meetingId" value="${meeting.id}">
					<button type="submit" class="btn btn-small btn-danger">Löschen</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>


<!-- Modal for creating/editing a meeting -->
<div class="modal-overlay" id="meeting-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="meeting-modal-title">Meeting</h3>
		<form id="meeting-modal-form"
			action="${pageContext.request.contextPath}/admin/meetings"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="meeting-action"> <input type="hidden"
				name="courseId" value="${parentCourse.id}"> <input
				type="hidden" name="id" id="meeting-id">
			<div class="form-group">
				<label for="name-modal">Name des Meetings</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="meetingDateTime-modal">Beginn</label> <input
						type="datetime-local" id="meetingDateTime-modal"
						name="meetingDateTime" required>
				</div>
				<div class="form-group">
					<label for="endDateTime-modal">Ende (optional)</label> <input
						type="datetime-local" id="endDateTime-modal" name="endDateTime">
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="location-modal">Ort</label><input type="text"
						id="location-modal" name="location">
				</div>
				<div class="form-group">
					<label for="leader-modal">Leitende Person</label> <select
						name="leaderUserId" id="leader-modal">
						<option value="">(Keine)</option>
						<c:forEach var="user" items="${allUsers}">
							<option value="${user.id}"><c:out
									value="${user.username}" /></option>
						</c:forEach>
					</select>
				</div>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>
			<div class="card"
				style="margin-top: 1rem; padding: 1rem; background-color: var(--bg-color);">
				<h4 class="card-title" style="border: none; padding: 0;">Anhänge</h4>
				<ul id="modal-attachments-list" class="details-list"
					style="margin-bottom: 1rem;"></ul>
				<div class="form-group">
					<label for="attachment-modal">Neuen Anhang hochladen</label> <input
						type="file" name="attachment" id="attachment-modal"
						class="file-input" data-max-size="20971520"> <small
						class="file-size-warning" style="color: red; display: none;">Datei
						ist zu groß! (Max. 20 MB)</small>
				</div>
				<div class="form-group">
					<label for="requiredRole-modal">Sichtbar für</label> <select
						name="requiredRole" id="requiredRole-modal">
						<option value="NUTZER" selected>Alle Nutzer</option>
						<option value="ADMIN">Nur Admins</option>
					</select>
				</div>
			</div>
			<button type="submit" class="btn" style="margin-top: 1.5rem;">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_meeting_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_reports.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Berichte & Analysen" />
</c:import>

<h1>
	<i class="fas fa-chart-pie"></i> Berichte & Analysen
</h1>
<p>Hier finden Sie zusammengefasste Daten und Analysen über die
	Anwendungsnutzung.</p>

<div class="dashboard-grid">
	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Event-Trend (Letzte 12 Monate)</h2>
		<div style="position: relative; height: 300px;">
			<canvas id="eventTrendChart"></canvas>
		</div>
	</div>
	<div class="card">
		<h2 class="card-title">Top 10 Aktivste Benutzer</h2>
		<div style="position: relative; height: 400px;">
			<canvas id="userActivityChart"></canvas>
		</div>
		<a href="<c:url value='/admin/berichte?report=user_activity'/>"
			class="btn btn-small" style="margin-top: 1rem;">Vollständiger
			Bericht</a>
	</div>
	<div class="card">
		<h2 class="card-title">Sonstige Berichte</h2>
		<ul class="details-list">
			<li><a
				href="<c:url value='/admin/berichte?report=event_participation'/>">Teilnahme-Zusammenfassung</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt die
					Anzahl der Anmeldungen pro Event.</p></li>
			<li><a
				href="<c:url value='/admin/berichte?report=inventory_usage'/>">Nutzungsfrequenz
					(Material)</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt,
					welche Artikel am häufigsten entnommen werden.</p></li>
			<li><span>Gesamtwert des Lagers</span> <span
				style="font-weight: bold;"> <fmt:setLocale value="de_DE" />
					<fmt:formatNumber value="${totalInventoryValue}" type="currency" />
			</span></li>
		</ul>
	</div>
</div>

<script id="eventTrendData" type="application/json">
    <c:out value="${eventTrendDataJson}" />
</script>
<script id="userActivityData" type="application/json">
    <c:out value="${userActivityDataJson}" />
</script>


<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_reports.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_requests.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Anträge" />
</c:import>

<h1>
	<i class="fas fa-inbox"></i> Offene Anträge
</h1>
<p>Hier sehen Sie alle ausstehenden Anträge von Benutzern auf
	Änderung ihrer Profildaten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="card">
	<div class="table-wrapper">
		<table class="data-table">
			<thead>
				<tr>
					<th>Antragssteller</th>
					<th>Beantragt am</th>
					<th>Beantragte Änderungen</th>
					<th style="width: 200px;">Aktionen</th>
				</tr>
			</thead>
			<tbody>
				<c:if test="${empty pendingRequests}">
					<tr>
						<td colspan="4" style="text-align: center;">Derzeit liegen
							keine offenen Anträge vor.</td>
					</tr>
				</c:if>
				<c:forEach var="req" items="${pendingRequests}">
					<tr data-request-id="${req.id}">
						<td><c:out value="${req.username}" /></td>
						<td><c:out value="${req.requestedAt}" /></td>
						<td><pre>
								<code>
									<c:out value="${req.requestedChanges}" />
								</code>
							</pre></td>
						<td>
							<div style="display: flex; gap: 0.5rem;">
								<form
									action="${pageContext.request.contextPath}/admin/action/request?action=approve"
									method="POST" class="js-approve-request-form">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="requestId" value="${req.id}">
									<button type="submit" class="btn btn-small btn-success">Genehmigen</button>
								</form>
								<form
									action="${pageContext.request.contextPath}/admin/action/request?action=deny"
									method="POST" class="js-deny-request-form">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="requestId" value="${req.id}">
									<button type="submit" class="btn btn-small btn-danger">Ablehnen</button>
								</form>
							</div>
						</td>
					</tr>
				</c:forEach>
			</tbody>
		</table>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_requests.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_storage_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lagerverwaltung" />
</c:import>

<h1>
	<i class="fas fa-warehouse"></i> Lagerverwaltung
</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-item-btn">
		<i class="fas fa-plus"></i> Neuen Artikel anlegen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Artikel filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th class="sortable" data-sort-type="string">Ort</th>
				<th class="sortable" data-sort-type="string">Schrank</th>
				<th class="sortable" data-sort-type="string">Fach</th>
				<th class="sortable" data-sort-type="number">Verfügbar</th>
				<th>Status</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="item" items="${storageList}">
				<tr
					class="${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
					<td class="item-name-cell"><a
						href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
								value="${item.name}" /></a> <c:if
							test="${not empty item.imagePath}">
							<button class="camera-btn lightbox-trigger"
								data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
								title="Bild anzeigen">
								<i class="fas fa-camera"></i>
							</button>
						</c:if></td>
					<td><c:out value="${item.location}" /></td>
					<td><c:out
							value="${not empty item.cabinet ? item.cabinet : '-'}" /></td>
					<td><c:out
							value="${not empty item.compartment ? item.compartment : '-'}" /></td>
					<td>${item.availableQuantity}/${item.maxQuantity}<c:if
							test="${item.defectiveQuantity > 0}">
							<span class="text-danger">(${item.defectiveQuantity} def.)</span>
						</c:if>
					</td>
					<td><span
						class="status-badge ${item.status == 'IN_STORAGE' ? 'status-ok' : (item.status == 'CHECKED_OUT' ? 'status-danger' : 'status-warn')}"><c:out
								value="${item.status}" /></span></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
						<button type="button" class="btn btn-small edit-item-btn"
							data-fetch-url="<c:url value='/admin/lager?action=getItemData&id=${item.id}'/>">Bearbeiten</button>

						<c:set var="absoluteActionUrl"
							value="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/lager/aktionen?id=${item.id}" />
						<c:set var="qrApiUrl"
							value="https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${fn:escapeXml(absoluteActionUrl)}" />
						<a href="${qrApiUrl}" target="_blank"
						class="btn btn-small btn-secondary">QR-Code</a>

						<button class="btn btn-small btn-warning defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-max-qty="${item.quantity}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}">Defekt</button>

						<button class="btn btn-small btn-info maintenance-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-current-status="${item.status}">Wartung</button>

						<form action="${pageContext.request.contextPath}/admin/lager"
							method="post" class="js-confirm-form"
							data-confirm-message="Artikel '${fn:escapeXml(item.name)}' wirklich löschen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="id" value="${item.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty storageList}">
		<div class="card">
			<p>Keine Artikel gefunden.</p>
		</div>
	</c:if>
	<c:forEach var="item" items="${storageList}">
		<div
			class="list-item-card ${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
			<h3 class="card-title">
				<a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
						value="${item.name}" /></a>
				<c:if test="${not empty item.imagePath}">
					<button class="camera-btn lightbox-trigger"
						data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
						title="Bild anzeigen">
						<i class="fas fa-camera"></i>
					</button>
				</c:if>
			</h3>
			<div class="card-row">
				<span>Ort:</span> <strong><c:out value="${item.location}" />,
					<c:out value="${item.cabinet}" />, <c:out
						value="${item.compartment}" /></strong>
			</div>
			<div class="card-row">
				<span>Bestand:</span> <strong>${item.availableQuantity} /
					${item.maxQuantity} <c:if test="${item.defectiveQuantity > 0}">
						<span class="text-danger">(${item.defectiveQuantity} def.)</span>
					</c:if>
				</strong>
			</div>
			<div class="card-row">
				<span>Status:</span> <span><span
					class="status-badge ${item.status == 'IN_STORAGE' ? 'status-ok' : (item.status == 'CHECKED_OUT' ? 'status-danger' : 'status-warn')}"><c:out
							value="${item.status}" /></span></span>
			</div>
			<div class="card-actions">
				<button type="button" class="btn btn-small edit-item-btn"
					data-fetch-url="<c:url value='/admin/lager?action=getItemData&id=${item.id}'/>">Bearbeiten</button>
				<c:if test="${item.defectiveQuantity > 0}">
					<button class="btn btn-small btn-success repair-modal-btn"
						data-item-id="${item.id}"
						data-item-name="${fn:escapeXml(item.name)}"
						data-max-repair-qty="${item.defectiveQuantity}">Repariert</button>
				</c:if>
				<button class="btn btn-small btn-warning defect-modal-btn"
					data-item-id="${item.id}"
					data-item-name="${fn:escapeXml(item.name)}"
					data-max-qty="${item.quantity}"
					data-current-defect-qty="${item.defectiveQuantity}"
					data-current-reason="${fn:escapeXml(item.defectReason)}">Defekt</button>
				<button class="btn btn-small btn-info maintenance-modal-btn"
					data-item-id="${item.id}"
					data-item-name="${fn:escapeXml(item.name)}"
					data-current-status="${item.status}">Wartung</button>
				<form action="${pageContext.request.contextPath}/admin/lager"
					method="post" class="js-confirm-form"
					data-confirm-message="Artikel '${fn:escapeXml(item.name)}' wirklich löschen?">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="delete"> <input type="hidden"
						name="id" value="${item.id}">
					<button type="submit" class="btn btn-small btn-danger">Löschen</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>

<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>

<jsp:include page="/WEB-INF/jspf/storage_modals.jspf" />

<!-- Repair Modal -->
<div class="modal-overlay" id="repair-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="repair-modal-title">Artikel als repariert markieren</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="repair"> <input type="hidden" name="id"
				id="repair-item-id">
			<div class="form-group">
				<label for="repaired_quantity">Anzahl reparierter Artikel</label> <input
					type="number" name="repaired_quantity" id="repaired_quantity"
					value="1" min="1" required>
			</div>
			<div class="form-group">
				<label for="repair_notes">Notiz (optional)</label>
				<textarea name="repair_notes" id="repair_notes" rows="3"
					placeholder="z.B. Kabel neu gelötet"></textarea>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-check-circle"></i> Als repariert buchen
			</button>
		</form>
	</div>
</div>


<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_storage_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_system.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Systemstatus" />
</c:import>

<h1>
	<i class="fas fa-server"></i> Systemstatus
</h1>
<p>Live-Statistiken des Servers. Die Daten werden alle 5 Sekunden
	aktualisiert.</p>

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-microchip"></i> CPU Auslastung
		</h2>
		<div class="progress-bar-container">
			<div id="cpu-progress" class="progress-bar"></div>
		</div>
		<p id="cpu-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-memory"></i> Arbeitsspeicher (RAM)
		</h2>
		<div class="progress-bar-container">
			<div id="ram-progress" class="progress-bar"></div>
		</div>
		<p id="ram-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-hdd"></i> Festplattenspeicher
		</h2>
		<div class="progress-bar-container">
			<div id="disk-progress" class="progress-bar"></div>
		</div>
		<p id="disk-text" class="progress-text">Lade...</p>
	</div>
	<div class="card" id="battery-card" style="display: none;">
		<h2 class="card-title">
			<i class="fas fa-battery-half"></i> Akku
		</h2>
		<div class="progress-bar-container">
			<div id="battery-progress" class="progress-bar"></div>
		</div>
		<p id="battery-text" class="progress-text">Lade...</p>
	</div>
	<div class="card" id="uptime-card">
		<h2 class="card-title">
			<i class="fas fa-clock"></i> Server Uptime
		</h2>
		<p id="uptime-text"
			style="font-size: 1.5rem; font-weight: 500; color: var(--primary-color); text-align: center;">Lade...</p>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="<c:url value='/js/admin/admin_system.js'/>"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_users.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Benutzerverwaltung" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />
<c:set var="hasMasterAccess"
	value="${userPermissions.contains('ACCESS_ADMIN_PANEL')}" />

<h1>
	<i class="fas fa-users-cog"></i> Benutzerverwaltung
</h1>
<p>Verwalten Sie hier alle Benutzerkonten und deren individuelle
	Berechtigungen.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if
		test="${hasMasterAccess or userPermissions.contains('USER_CREATE')}">
		<button type="button" class="btn btn-success" id="new-user-btn">
			<i class="fas fa-user-plus"></i> Neuen Benutzer anlegen
		</button>
	</c:if>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Benutzer filtern..." aria-label="Benutzer filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="number">ID</th>
				<th class="sortable" data-sort-type="string">Benutzername</th>
				<th class="sortable" data-sort-type="string">Rolle</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty requestScope.userList}">
				<tr>
					<td colspan="4" style="text-align: center;">Keine Benutzer
						gefunden.</td>
				</tr>
			</c:if>
			<c:forEach var="user" items="${requestScope.userList}">
				<tr data-user-id="${user.id}">
					<td data-field="id"><c:out value="${user.id}" /></td>
					<td data-field="username"><c:out value="${user.username}" /></td>
					<td data-field="roleName"><c:out value="${user.roleName}" /></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><c:if
							test="${hasMasterAccess or userPermissions.contains('USER_UPDATE')}">
							<button type="button" class="btn btn-small edit-user-btn"
								data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
						</c:if> <a
						href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
						class="btn btn-small">Details</a>
						<form action="<c:url value='/admin/action/user?action=unlock'/>"
							method="post" class="js-unlock-form"
							data-confirm-message="Die Login-Sperre für '${fn:escapeXml(user.username)}' wirklich aufheben?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="username" value="${user.username}">
							<button type="submit" class="btn btn-small btn-info">Entsperren</button>
						</form> <c:if test="${sessionScope.user.id != user.id}">
							<c:if
								test="${hasMasterAccess or userPermissions.contains('USER_PASSWORD_RESET')}">
								<form
									action="<c:url value='/admin/action/user?action=resetPassword'/>"
									method="post" class="js-reset-password-form"
									data-confirm-message="Passwort für '${fn:escapeXml(user.username)}' zurücksetzen? Das neue Passwort wird als Nachricht angezeigt.">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-warning">Passwort
										Reset</button>
								</form>
							</c:if>
							<c:if
								test="${hasMasterAccess or userPermissions.contains('USER_DELETE')}">
								<form action="<c:url value='/admin/action/user?action=delete'/>"
									method="post" class="js-confirm-delete-form"
									data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-danger">Löschen</button>
								</form>
							</c:if>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty requestScope.userList}">
		<div class="card">
			<p>Keine Benutzer gefunden.</p>
		</div>
	</c:if>
	<c:forEach var="user" items="${requestScope.userList}">
		<div class="list-item-card" data-user-id="${user.id}">
			<h3 class="card-title" data-field="username">
				<c:out value="${user.username}" />
			</h3>
			<div class="card-row">
				<span>Rolle:</span> <strong data-field="roleName"><c:out
						value="${user.roleName}" /></strong>
			</div>
			<div class="card-row">
				<span>ID:</span> <strong data-field="id"><c:out
						value="${user.id}" /></strong>
			</div>
			<div class="card-actions">
				<c:if
					test="${hasMasterAccess or userPermissions.contains('USER_UPDATE')}">
					<button type="button" class="btn btn-small edit-user-btn"
						data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
				</c:if>
				<a
					href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
					class="btn btn-small">Details</a>
				<form action="<c:url value='/admin/action/user?action=unlock'/>"
					method="post" class="js-unlock-form"
					data-confirm-message="Die Login-Sperre für '${fn:escapeXml(user.username)}' wirklich aufheben?">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="username" value="${user.username}">
					<button type="submit" class="btn btn-small btn-info">Entsperren</button>
				</form>
				<c:if test="${sessionScope.user.id != user.id}">
					<c:if
						test="${hasMasterAccess or userPermissions.contains('USER_PASSWORD_RESET')}">
						<form
							action="<c:url value='/admin/action/user?action=resetPassword'/>"
							method="post" class="js-reset-password-form"
							data-confirm-message="Passwort für '${fn:escapeXml(user.username)}' zurücksetzen? Das neue Passwort wird als Nachricht angezeigt.">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="userId" value="${user.id}">
							<button type="submit" class="btn btn-small btn-warning">Reset</button>
						</form>
					</c:if>
					<c:if
						test="${hasMasterAccess or userPermissions.contains('USER_DELETE')}">
						<form action="<c:url value='/admin/action/user?action=delete'/>"
							method="post" class="js-confirm-delete-form"
							data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="userId" value="${user.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</c:if>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<jsp:include page="/WEB-INF/jspf/user_modals.jspf" />

<script id="allPermissionsData" type="application/json">
    ${groupedPermissionsJson}
</script>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_users.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_user_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle"
		value="Benutzerdetails: ${fn:escapeXml(userToView.username)}" />
</c:import>

<h1>
	Benutzerdetails:
	<c:out value="${userToView.username}" />
</h1>
<a href="${pageContext.request.contextPath}/admin/mitglieder"
	style="display: inline-block; margin-bottom: 1rem;"> <i
	class="fas fa-arrow-left"></i> Zurück zur Benutzerliste
</a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="responsive-dashboard-grid">
	<div class="card">
		<h2 class="card-title">Stammdaten</h2>
		<ul class="details-list">
			<li><strong>Benutzername:</strong> <c:out
					value="${userToView.username}" /></li>
			<li><strong>Rolle:</strong> <c:out
					value="${userToView.roleName}" /></li>
			<li><strong>Jahrgang:</strong> <c:out
					value="${userToView.classYear}" /></li>
			<li><strong>Klasse:</strong> <c:out
					value="${userToView.className}" /></li>
			<li><strong>E-Mail:</strong> <c:out
					value="${not empty userToView.email ? userToView.email : 'Nicht hinterlegt'}" /></li>
			<li><strong>Registriert seit:</strong> <c:out
					value="${userToView.formattedCreatedAt}" /> Uhr</li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Event-Teilnahmehistorie</h2>
		<div class="table-wrapper"
			style="max-height: 450px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Event</th>
						<th>Datum</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty eventHistory}">
						<tr>
							<td colspan="3" style="text-align: center;">Keine
								Event-Historie vorhanden.</td>
						</tr>
					</c:if>
					<c:forEach var="event" items="${eventHistory}">
						<tr>
							<td><a
								href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
										value="${event.name}" /></a></td>
							<td><c:out value="${event.formattedEventDateTime}" /> Uhr</td>
							<td><c:out value="${event.userAttendanceStatus}" /></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_wiki_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Wiki: ${filePath}" />
</c:import>

<h1>
	<i class="fas fa-file-alt"></i> Wiki:
	<code>
		<c:out value="${filePath}" />
	</code>
</h1>
<a href="${pageContext.request.contextPath}/admin/wiki"
	class="btn btn-secondary" style="margin-bottom: 1.5rem;"> <i
	class="fas fa-arrow-left"></i> Back to Wiki Index
</a>

<div class="card">
	<div id="wiki-content-container" class="markdown-content">
		${wikiContent}</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script>
	document.addEventListener('DOMContentLoaded', () => {
		const wikiContainer = document.getElementById('wiki-content-container');
		if (wikiContainer && window.renderMarkdown) {
			window.renderMarkdown(wikiContainer);
		}
	});
</script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_wiki_index.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Technical Wiki Index" />
</c:import>

<style>
.wiki-tree ul {
	list-style-type: none;
	padding-left: 20px;
}

.wiki-tree li {
	padding: 2px 0;
}
</style>

<h1>
	<i class="fas fa-book-reader"></i> Technical Wiki - Index
</h1>
<p>Select a file from the project tree below to view its detailed
	technical documentation.</p>

<div class="card">
	<div class="wiki-tree">${projectTreeHtml}</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\report_display.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Bericht: ${reportTitle}" />
</c:import>

<h1>${reportTitle}</h1>
<div class="table-controls">
	<a href="<c:url value='/admin/berichte'/>" class="btn btn-secondary"><i
		class="fas fa-arrow-left"></i> Zurück zur Berichtsübersicht</a> <a
		href="?report=${param.report}&export=csv" class="btn btn-success"><i
		class="fas fa-file-csv"></i> Als CSV exportieren</a>
</div>

<div class="table-wrapper">
	<c:if test="${empty reportData}">
		<p style="text-align: center; padding: 2rem;">Keine Daten für
			diesen Bericht verfügbar.</p>
	</c:if>
	<c:if test="${not empty reportData}">
		<table class="data-table">
			<c:choose>
				<c:when test="${param.report == 'event_participation'}">
					<thead>
						<tr>
							<th>Event-Name</th>
							<th>Zugewiesene Teilnehmer</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<td><c:out value="${row.event_name}" /></td>
								<td><c:out value="${row.participant_count}" /></td>
							</tr>
						</c:forEach>
					</tbody>
				</c:when>

				<c:when test="${param.report == 'inventory_usage'}">
					<thead>
						<tr>
							<th>Artikelname</th>
							<th>Gesamtmenge entnommen</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<td><c:out value="${row.item_name}" /></td>
								<td><c:out value="${row.total_quantity_checked_out}" /></td>
							</tr>
						</c:forEach>
					</tbody>
				</c:when>

				<c:when test="${param.report == 'user_activity'}">
					<thead>
						<tr>
							<th>Benutzername</th>
							<th>Anmeldungen (Events)</th>
							<th>Teilnahmen (Meetings)</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<td><c:out value="${row.username}" /></td>
								<td><c:out value="${row.events_signed_up}" /></td>
								<td><c:out value="${row.meetings_attended}" /></td>
							</tr>
						</c:forEach>
					</tbody>
				</c:when>

				<c:otherwise>
					<thead>
						<tr>
							<c:forEach var="header" items="${reportData[0].keySet()}">
								<th><c:out value="${fn:replace(header, '_', ' ')}" /></th>
							</c:forEach>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<c:forEach var="key" items="${reportData[0].keySet()}">
									<td><c:out value="${row[key]}" /></td>
								</c:forEach>
							</tr>
						</c:forEach>
					</tbody>
				</c:otherwise>
			</c:choose>
		</table>
	</c:if>

</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\auth\login.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Anmeldung" />
	<c:param name="showNav" value="false" />
</c:import>

<div class="login-page-container">
	<div class="login-box">
		<h1>
			<i class="fas fa-bolt"></i> TechnikTeam
		</h1>
		<c:import url="/WEB-INF/jspf/message_banner.jspf" />

		<c:if test="${not empty sessionScope.lockoutEndTime}">
			<div class="error-message" id="lockout-timer"
				data-end-time="${sessionScope.lockoutEndTime}"
				data-lockout-level="${sessionScope.lockoutLevel}">Lade
				Timer...</div>
			<c:remove var="lockoutEndTime" scope="session" />
			<c:remove var="lockoutLevel" scope="session" />
		</c:if>

		<form action="<c:url value='/login'/>" method="post">
			<div class="form-group">
				<label for="username">Benutzername</label> <input type="text"
					id="username" name="username"
					value="<c:out value='${failedUsername}'/>" required
					autocomplete="username" autofocus>
				<c:remove var="failedUsername" scope="session" />
			</div>
			<div class="form-group">
				<label for="password">Passwort</label>
				<div class="password-input-wrapper">
					<input type="password" id="password" name="password" required
						autocomplete="current-password"> <span
						class="password-toggle-icon"> <i class="fas fa-eye"></i>
					</span>
				</div>
			</div>
			<button type="submit" class="btn" style="width: 100%; margin-bottom: 0.75rem;"
				${not empty sessionScope.lockoutEndTime ? 'disabled' : ''}>Anmelden</button>
			<button type="button" id="login-passkey-btn" class="btn btn-secondary" style="width: 100%;"
				${not empty sessionScope.lockoutEndTime ? 'disabled' : ''}>
				<i class="fas fa-fingerprint"></i> Mit Passkey anmelden
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/auth/login.js"></script>
<script src="${pageContext.request.contextPath}/js/auth/passkey_auth.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\auth\logout.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Logout" />
	<c:param name="showNav" value="false" />
</c:import>

<div style="text-align: center; margin-top: 5rem; padding: 2rem;">
	<h1>
		<c:out value="${not empty username ? username : 'Du'}" />
		, du wurdest erfolgreich ausgeloggt!
	</h1>
	<p>Du wirst in 5 Sekunden automatisch zur Login-Seite
		weitergeleitet.</p>
	<p>
		<a href="${pageContext.request.contextPath}/login">Jetzt zur
			Login-Seite</a>
	</p>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/auth/logout.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error400.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="400 - Fehlerhafte Anfrage" />
</c:import>

<body
	data-content-length="${pageContext.request.contentLength > 0 ? pageContext.request.contentLength : 'UNKNOWN'}">
	<div class="error-page-container">
		<h1 class="error-code" style="color: var(--info-color);">400</h1>
		<h2>Fehlerhafte Anfrage</h2>
		<p class="error-message-text">Der Server konnte die Anfrage
			aufgrund einer fehlerhaften Syntax nicht verstehen. Das
			Protokolldroiden-System analysiert die Übertragung.</p>

		<div class="protocol-droid-console">
			<div class="droid-eye"></div>
			<pre id="droid-output"></pre>
		</div>

		<div id="redirect-container"
			style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
			<a href="javascript:history.back()" class="btn btn-secondary"> <i
				class="fas fa-arrow-left"></i> Einen Schritt zurück
			</a>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error400.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error401.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="401 - Nicht autorisiert" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--danger-color);">401</h1>
	<h2>Nicht Autorisiert</h2>
	<p class="error-message-text">Für den Zugriff auf diese Ressource
		ist eine Authentifizierung erforderlich. Ihre Anmeldeinformationen
		fehlen oder sind ungültig.</p>

	<div class="card-scanner">
		<div class="scanner-light" id="scanner-light"></div>
		<div class="card-slot">
			<div class="card-content">
				<p>STATUS:</p>
				<h3 id="scanner-status">BEREIT</h3>
				<div class="progress-bar-container"
					style="height: 10px; margin-top: 1rem;">
					<div id="scanner-progress" class="progress-bar"></div>
				</div>
			</div>
		</div>
	</div>

	<div id="redirect-container"
		style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
		<a href="${pageContext.request.contextPath}/login"
			class="btn btn-success"> <i class="fas fa-sign-in-alt"></i> Zur
			Anmeldeseite
		</a>
	</div>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error401.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error403.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="403 - Zugriff Verweigert" />
</c:import>

<body data-context-path="${pageContext.request.contextPath}"
	data-username="${fn:escapeXml(sessionScope.user.username)}"
	data-role="${fn:escapeXml(sessionScope.user.roleName)}"
	data-request-uri="${fn:escapeXml(pageContext.errorData.requestURI)}">

	<div class="error-page-container">
		<h1 class="error-code" style="color: var(--warning-color);">403</h1>
		<h2>Zugriff Verweigert</h2>
		<p class="error-message-text">Ihre Zugriffsebene ist für die
			angeforderte Ressource nicht ausreichend. Das Sicherheitsprotokoll
			wurde aktiviert.</p>

		<div class="security-console">
			<div class="console-header">
				<span>SYSTEM SECURITY DAEMON - PROTOKOLL</span>
			</div>
			<pre id="console-body"></pre>
		</div>

		<div id="redirect-container"
			style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
			<a href="${pageContext.request.contextPath}/home"
				class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
				Startseite
			</a>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error403.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error404.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="404 - Seite nicht gefunden" />
</c:import>

<body data-context-path="${pageContext.request.contextPath}"
	data-request-uri="${fn:escapeXml(pageContext.errorData.requestURI)}">

	<div class="error-page-container">
		<h1 class="error-code">404</h1>
		<h2>Ressource nicht gefunden</h2>
		<p class="error-message-text">
			Sie haben sich im Dateisystem verirrt. Die angeforderte Ressource
			wurde nicht gefunden. <br>Das Systemprotokoll unten zeigt
			weitere Details.
		</p>

		<div class="terminal-window">
			<div class="terminal-header">
				<div class="terminal-buttons">
					<span class="term-btn close"></span><span class="term-btn min"></span><span
						class="term-btn max"></span>
				</div>
				<span>bash -- technik-team</span>
			</div>
			<div id="terminal-body" class="terminal-body"></div>
		</div>

		<div id="home-link-container"
			style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
			<a href="${pageContext.request.contextPath}/home"
				class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
				Startseite
			</a>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error404.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error500.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="500 - Interner Fehler" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--danger-color);">500</h1>
	<h2>Systemfehler im Hauptrechner</h2>
	<p class="error-message-text">Ein unerwarteter Fehler ist
		aufgetreten und unser System ist ins Stolpern geraten. Starten Sie die
		automatische Systemdiagnose, um den Fehler zu analysieren.</p>

	<div class="diagnostic-container">
		<button id="diagnostic-btn" class="btn btn-warning">
			<i class="fas fa-tasks"></i> Diagnose starten
		</button>
		<div id="diagnostic-output" class="diagnostic-console">
		</div>
	</div>

	<a href="${pageContext.request.contextPath}/home"
		class="btn btn-primary" style="margin-top: 1.5rem;"> <i
		class="fas fa-home"></i> Flucht zur Startseite
	</a>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error500.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error503.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="503 - Dienst nicht verfügbar" />
</c:import>

<body data-context-path="${pageContext.request.contextPath}">
	<div class="error-page-container">
		<h1 class="error-code" style="color: #ff8c00;">503</h1>
		<h2>Dienst Nicht Verfügbar</h2>
		<p class="error-message-text">Der Server ist zurzeit überlastet
			oder wird gewartet. Bitte versuchen Sie es in Kürze erneut. Das
			System versucht einen Neustart.</p>

		<div class="reboot-console">
			<pre id="reboot-output"></pre>
			<div class="progress-bar-container"
				style="margin-top: 1rem; background: #333;">
				<div id="reboot-progress" class="progress-bar"
					style="background: var(--success-color);"></div>
			</div>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error503.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error_generic.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="Fehler" />
</c:import>

<c:set var="statusCode" value="${pageContext.errorData.statusCode}" />

<c:set var="errorMessage"
	value="Ein unerwarteter Fehler ist aufgetreten." />
<c:choose>
	<c:when test="${statusCode == 402}">
		<c:set var="errorMessage"
			value="Zahlung erforderlich. (Dieser Code ist für die zukünftige Verwendung reserviert.)" />
	</c:when>
	<c:when test="${statusCode == 405}">
		<c:set var="errorMessage"
			value="Methode nicht erlaubt. Die verwendete HTTP-Methode (z.B. GET, POST) ist für diese Ressource nicht zulässig." />
	</c:when>
	<c:when test="${statusCode == 406}">
		<c:set var="errorMessage"
			value="Nicht akzeptabel. Der Server kann keine Antwort generieren, die den Kriterien des Clients entspricht." />
	</c:when>
	<c:when test="${statusCode == 408}">
		<c:set var="errorMessage"
			value="Anfrage-Zeitüberschreitung. Der Server hat zu lange auf eine Antwort gewartet." />
	</c:when>
	<c:when test="${statusCode == 409}">
		<c:set var="errorMessage"
			value="Konflikt. Die Anfrage konnte wegen eines Konflikts mit dem aktuellen Zustand der Ressource nicht abgeschlossen werden." />
	</c:when>
	<c:when test="${statusCode == 410}">
		<c:set var="errorMessage"
			value="Verschwunden. Die angeforderte Ressource ist nicht mehr verfügbar und wird es auch in Zukunft nicht sein." />
	</c:when>
	<c:when test="${statusCode == 501}">
		<c:set var="errorMessage"
			value="Nicht implementiert. Der Server erkennt die Anfragemethode nicht oder kann sie nicht erfüllen." />
	</c:when>
	<c:when test="${statusCode == 502}">
		<c:set var="errorMessage"
			value="Bad Gateway. Der Server hat als Gateway oder Proxy eine ungültige Antwort vom Upstream-Server erhalten." />
	</c:when>
	<c:when test="${statusCode == 504}">
		<c:set var="errorMessage"
			value="Gateway-Zeitüberschreitung. Der Server hat als Gateway oder Proxy keine rechtzeitige Antwort erhalten." />
	</c:when>
</c:choose>

<div class="error-page-container">
	<h1 class="error-code">${statusCode}</h1>
	<h2>${errorMessage}</h2>
	<p class="error-message-text">Wenn Sie glauben, dass dies ein
		Fehler ist, kontaktieren Sie bitte den Administrator.</p>
	<a href="${pageContext.request.contextPath}/home"
		class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
		Startseite
	</a>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\calendar.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Kalender" />
</c:import>

<h1>
	<i class="fas fa-calendar-alt"></i> Terminübersicht
</h1>
<p>
	Übersicht aller anstehenden Veranstaltungen und Lehrgänge. <a
		href="<c:url value='/calendar.ics'/>" class="btn btn-small btn-info"
		style="margin-left: 1rem;"> <i class="fas fa-rss"></i> Kalender
		abonnieren
	</a>
</p>

<!-- Mobile List View (Default for small screens) -->
<div class="mobile-list-view">
	<c:if test="${empty mobileList}">
		<div class="card">
			<p>Derzeit sind keine Termine geplant.</p>
		</div>
	</c:if>

	<c:forEach var="entry" items="${mobileList}">
		<a href="${entry.url}" class="termin-item-link">
			<div class="termin-item">
				<div class="termin-date">
					<span class="termin-date-day">${entry.day}</span> <span
						class="termin-date-month">${entry.monthAbbr}</span>
				</div>
				<div class="termin-details">
					<span class="termin-title">${entry.title}</span> <span
						class="status-badge ${entry.typeClass}">${entry.type}</span>
				</div>
				<div class="termin-arrow">
					<i class="fas fa-chevron-right"></i>
				</div>
			</div>
		</a>
	</c:forEach>
</div>

<!-- Desktop Calendar View -->
<div class="desktop-calendar-view card">
	<div class="calendar-controls">
		<div>
			<a
				href="?view=month&year=${prevMonth.year}&month=${prevMonth.monthValue}"
				class="btn btn-secondary"><</a> <a
				href="?view=month&year=${nextMonth.year}&month=${nextMonth.monthValue}"
				class="btn btn-secondary">></a> <a href="?view=month"
				class="btn btn-secondary">Heute</a>
		</div>
		<h2>${monthName}${year}</h2>
		<div>
			<a href="?view=week"
				class="btn ${view == 'week' ? 'btn-primary' : 'btn-secondary'}">Woche</a>
			<a href="?view=month"
				class="btn ${view == 'month' ? 'btn-primary' : 'btn-secondary'}">Monat</a>
		</div>
	</div>

	<c:if test="${view == 'month'}">
		<div class="calendar-grid">
			<div class="calendar-header">So</div>
			<div class="calendar-header">Mo</div>
			<div class="calendar-header">Di</div>
			<div class="calendar-header">Mi</div>
			<div class="calendar-header">Do</div>
			<div class="calendar-header">Fr</div>
			<div class="calendar-header">Sa</div>

			<c:if test="${startDayOfWeekOffset > 0}">
				<c:forEach begin="1" end="${startDayOfWeekOffset}">
					<div class="calendar-day other-month"></div>
				</c:forEach>
			</c:if>

			<c:forEach var="day" begin="1" end="${daysInMonth}">
				<c:set var="dayDate" value="${currentYearMonth.atDay(day)}" />
				<div
					class="calendar-day ${currentDate.isEqual(dayDate) ? 'today' : ''}">
					<div class="day-number">${day}</div>
					<c:forEach var="entry" items="${eventsByDate[dayDate]}">
						<c:choose>
							<c:when test="${entry.type == 'Event'}">
								<a
									href="${pageContext.request.contextPath}/veranstaltungen/details?id=${entry.object.id}"
									class="calendar-event">${entry.object.name}</a>
							</c:when>
							<c:when test="${entry.type == 'Meeting'}">
								<a
									href="${pageContext.request.contextPath}/meetingDetails?id=${entry.object.id}"
									class="calendar-meeting">${entry.object.name}</a>
							</c:when>
						</c:choose>
					</c:forEach>
				</div>
			</c:forEach>
		</div>
	</c:if>

	<c:if test="${view == 'week'}">
		<div class="calendar-week-grid">
			<c:forEach var="day" items="${weekData}">
				<div class="calendar-week-day">
					<div class="calendar-header">
						${day.dayName} <span class="day-number">${day.dayOfMonth}</span>
					</div>
					<div class="events-container">
						<c:forEach var="entry" items="${eventsByDate[day.date]}">
							<c:choose>
								<c:when test="${entry.type == 'Event'}">
									<a
										href="${pageContext.request.contextPath}/veranstaltungen/details?id=${entry.object.id}"
										class="calendar-event">${entry.object.name}</a>
								</c:when>
								<c:when test="${entry.type == 'Meeting'}">
									<a
										href="${pageContext.request.contextPath}/meetingDetails?id=${entry.object.id}"
										class="calendar-meeting">${entry.object.name}</a>
								</c:when>
							</c:choose>
						</c:forEach>
					</div>
				</div>
			</c:forEach>
		</div>
	</c:if>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\dateien.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Dateien & Dokumente" />
</c:import>

<h1>Dateien & Dokumente</h1>
<p>Hier können Sie zentrale Dokumente und Vorlagen herunterladen.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<c:if test="${empty fileData}">
	<div class="card">
		<p>Es sind keine Dateien oder Dokumente verfügbar.</p>
	</div>
</c:if>

<c:set var="canUpdateFiles"
	value="${sessionScope.user.permissions.contains('FILE_UPDATE') or sessionScope.user.permissions.contains('ACCESS_ADMIN_PANEL')}" />

<c:forEach var="categoryEntry" items="${fileData}">
	<div class="card">
		<h2>
			<i class="fas fa-folder"></i>
			<c:out value="${categoryEntry.key}" />
		</h2>
		<ul class="file-list">
			<c:forEach var="file" items="${categoryEntry.value}">
				<li style="padding: 0.75rem 0;">
					<div>
						<a href="<c:url value='/download?id=${file.id}'/>"><i
							class="fas fa-download"></i> <c:out value="${file.filename}" /></a>
					</div> <c:if
						test="${canUpdateFiles and fn:endsWith(fn:toLowerCase(file.filename), '.md')}">
						<div class="file-actions">
							<a href="<c:url value='/editor?fileId=${file.id}'/>"
								class="btn btn-small"> <i class="fas fa-edit"></i>
								Bearbeiten
							</a>
						</div>
					</c:if>
				</li>
			</c:forEach>
		</ul>
	</div>
</c:forEach>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\eventDetails.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Event Details: ${event.name}" />
</c:import>


<div
	style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap; margin-bottom: 0.5rem;">
	<h1>
		<c:out value="${event.name}" />
	</h1>
	<c:if test="${not empty event.status}">
		<c:set var="statusClass"
			value="${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}" />
		<span class="status-badge ${statusClass}"><c:out
				value="${event.status}" /></span>
	</c:if>
</div>

<p class="details-subtitle">
	<strong>Zeitraum:</strong>
	<c:out value="${event.formattedEventDateTimeRange}" />
	<c:if test="${not empty event.location}">
		<span style="margin-left: 1rem;"><strong>Ort:</strong> <c:out
				value="${event.location}" /></span>
	</c:if>
</p>

<div class="responsive-dashboard-grid">
	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Aufgaben</h2>
		<div id="task-list-container">
			<c:if test="${empty event.eventTasks}">
				<p>Für dieses Event wurden noch keine Aufgaben erstellt.</p>
			</c:if>
			<c:forEach var="task" items="${event.eventTasks}">
				<div class="card" style="margin-bottom: 1rem;">
					<div
						style="display: flex; justify-content: space-between; align-items: start;">
						<div>
							<span
								class="status-badge ${task.status == 'ERLEDIGT' ? 'status-ok' : 'status-warn'}"><c:out
									value="${task.status}" /></span>
							<h4 style="margin-top: 0.5rem;">
								<c:out value="${task.displayOrder}" />
								.
								<c:out value="${task.description}" />
							</h4>
						</div>
						<c:if test="${hasTaskManagementPermission}">
							<div>
								<button class="btn btn-small edit-task-btn"
									data-task-id="${task.id}">Bearbeiten</button>
							</div>
						</c:if>
					</div>

					<div class="markdown-content" style="margin-top: 1rem;">${fn:escapeXml(task.details)}</div>

					<p style="margin-top: 1rem;">
						<strong>Zugewiesen an:</strong>
						<c:if test="${task.requiredPersons > 0}">
							<span class="text-muted">Offener Pool
								(${fn:length(task.assignedUsers)} / ${task.requiredPersons}
								Plätze)</span>
						</c:if>
						<c:out value="${task.getAssignedUsernames()}" />
					</p>

					<c:if
						test="${not empty task.requiredItems || not empty task.requiredKits}">
						<p style="margin-top: 1rem;">
							<strong>Benötigtes Material:</strong>
						</p>
						<ul style="padding-left: 1.5rem;">
							<c:forEach var="item" items="${task.requiredItems}">
								<li><a
									href="${pageContext.request.contextPath}/lager/details?id=${item.id}"><c:out
											value="${item.quantity}" />x <c:out value="${item.name}" /></a></li>
							</c:forEach>
							<c:forEach var="kit" items="${task.requiredKits}">
								<li><a
									href="${pageContext.request.contextPath}/pack-kit?kitId=${kit.id}">1x
										Kit: <c:out value="${kit.name}" />
								</a></li>
							</c:forEach>
						</ul>
					</c:if>

					<c:if
						test="${event.status == 'LAUFEND' and (isUserAssigned or isUserParticipant)}">
						<div
							style="margin-top: 1.5rem; border-top: 1px solid var(--border-color); padding-top: 1rem;">
							<c:set var="isTaskAssignedToCurrentUser" value="false" />
							<c:forEach var="assigned" items="${task.assignedUsers}">
								<c:if test="${assigned.id == sessionScope.user.id}">
									<c:set var="isTaskAssignedToCurrentUser" value="true" />
								</c:if>
							</c:forEach>

							<c:if test="${task.requiredPersons > 0}">
								<c:choose>
									<c:when test="${isTaskAssignedToCurrentUser}">
										<form action="${pageContext.request.contextPath}/task-action"
											method="post">
											<input type="hidden" name="csrfToken"
												value="${sessionScope.csrfToken}"> <input
												type="hidden" name="action" value="unclaim"> <input
												type="hidden" name="taskId" value="${task.id}">
											<button type="submit"
												class="btn btn-danger-outline btn-small">Aufgabe
												zurückgeben</button>
										</form>
									</c:when>
									<c:when
										test="${fn:length(task.assignedUsers) < task.requiredPersons}">
										<form action="${pageContext.request.contextPath}/task-action"
											method="post">
											<input type="hidden" name="csrfToken"
												value="${sessionScope.csrfToken}"> <input
												type="hidden" name="action" value="claim"> <input
												type="hidden" name="taskId" value="${task.id}">
											<button type="submit" class="btn btn-success btn-small">Aufgabe
												übernehmen</button>
										</form>
									</c:when>
								</c:choose>
							</c:if>

							<c:if
								test="${isTaskAssignedToCurrentUser and task.status == 'OFFEN'}">
								<button class="btn btn-primary btn-small mark-task-done-btn"
									data-task-id="${task.id}">Als erledigt markieren</button>
							</c:if>
						</div>
					</c:if>
				</div>
			</c:forEach>
		</div>
		<c:if test="${hasTaskManagementPermission}">
			<button class="btn btn-success" id="new-task-btn"
				style="margin-top: 1rem;">
				<i class="fas fa-plus"></i> Neue Aufgabe
			</button>
		</c:if>
	</div>

	<c:if test="${isUserAssigned or isUserParticipant}">
		<div class="card" style="grid-column: 1/-1;">
			<h2 class="card-title">Event-Chat</h2>
			<c:choose>
				<c:when test="${event.status == 'LAUFEND'}">
					<div id="chat-box"
						style="height: 300px; overflow-y: auto; border: 1px solid var(--border-color); padding: 0.5rem; margin-bottom: 1rem; background: var(--bg-color);"></div>
					<div style="position: relative;">
						<form id="chat-form" style="display: flex; gap: 0.5rem;">
							<input type="text" id="chat-message-input" class="form-group"
								style="flex-grow: 1; margin: 0;"
								placeholder="Nachricht eingeben... @ für Erwähnungen">
							<button type="submit" class="btn">Senden</button>
						</form>
						<div id="mention-popup"
							style="display: none; position: absolute; bottom: 100%; left: 0; background: var(--surface-color); border: 1px solid var(--border-color); border-radius: 6px; box-shadow: var(--shadow-md); max-height: 150px; overflow-y: auto; z-index: 10;">
						</div>
					</div>
				</c:when>
				<c:otherwise>
					<p class="info-message">Der Chat ist nur aktiv, während das
						Event läuft.</p>
				</c:otherwise>
			</c:choose>
		</div>
	</c:if>
</div>

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">Beschreibung</h2>
		<div class="markdown-content">${fn:escapeXml(not empty event.description ? event.description : 'Keine Beschreibung für dieses Event vorhanden.')}
		</div>
	</div>
	<div class="card">
		<h2 class="card-title">Benötigter Personalbedarf</h2>
		<ul class="details-list">
			<c:if test="${empty event.skillRequirements}">
				<li>Keine speziellen Qualifikationen benötigt.</li>
			</c:if>
			<c:forEach var="req" items="${event.skillRequirements}">
				<li><strong><c:out value="${req.courseName}" />:</strong> <span><c:out
							value="${req.requiredPersons}" /> Person(en)</span></li>
			</c:forEach>
		</ul>
	</div>
	<div class="card">
		<h2 class="card-title">Reserviertes Material</h2>
		<ul class="details-list">
			<c:if test="${empty event.reservedItems}">
				<li>Kein Material für dieses Event reserviert.</li>
			</c:if>
			<c:forEach var="item" items="${event.reservedItems}">
				<li><c:out value="${item.name}" /> <span><c:out
							value="${item.quantity}" />x</span></li>
			</c:forEach>
		</ul>
	</div>
	<div class="card">
		<h2 class="card-title">Anhänge</h2>
		<ul class="details-list">
			<c:if test="${empty event.attachments}">
				<li>Keine Anhänge für dieses Event vorhanden.</li>
			</c:if>
			<c:forEach var="att" items="${event.attachments}">
				<li><a href="<c:url value='/download?id=${att.id}'/>"><c:out
							value="${att.filename}" /></a></li>
			</c:forEach>
		</ul>
	</div>
</div>

<div class="card">
	<h2 class="card-title">Zugewiesenes Team</h2>
	<ul class="details-list">
		<c:if test="${empty event.assignedAttendees}">
			<li>Noch kein Team zugewiesen.</li>
		</c:if>
		<c:forEach var="attendee" items="${event.assignedAttendees}">
			<li><c:out value="${attendee.username}" /></li>
		</c:forEach>
	</ul>
</div>

<div style="margin-top: 2rem;">
	<a href="${pageContext.request.contextPath}/veranstaltungen"
		class="btn"><i class="fas fa-arrow-left"></i> Zurück zur
		Event-Übersicht</a>
</div>

<c:if test="${hasTaskManagementPermission}">
	<jsp:include page="/WEB-INF/jspf/task_modal.jspf" />
</c:if>

<script id="allUsersData" type="application/json">${assignedUsersJson}</script>
<script id="allItemsData" type="application/json">${allItemsJson}</script>
<script id="allKitsData" type="application/json">${allKitsJson}</script>
<script id="allTasksData" type="application/json">${tasksJson}</script>


<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script>
	document.body.dataset.eventId = "${event.id}";
	document.body.dataset.userId = "${sessionScope.user.id}";
	document.body.dataset.isAdmin = "${hasTaskManagementPermission}";
</script>
<script
	src="${pageContext.request.contextPath}/js/public/eventDetails.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\events.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Veranstaltungen" />
</c:import>

<h1>Anstehende Veranstaltungen</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter" placeholder="Events filtern..."
			style="width: 100%;" aria-label="Events filtern">
	</div>
</div>

<c:if test="${empty events}">
	<div class="card">
		<p>Derzeit stehen keine Veranstaltungen an.</p>
	</div>
</c:if>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Veranstaltung</th>
				<th class="sortable" data-sort-type="date">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Event-Status</th>
				<th class="sortable" data-sort-type="string">Dein Status</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="event" items="${events}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
								value="${event.name}" /></a></td>
					<td data-sort-value="${event.eventDateTime}"><c:out
							value="${event.formattedEventDateTimeRange}" /></td>
					<td><span
						class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
								value="${event.status}" /></span></td>
					<td><c:choose>
							<c:when test="${event.userAttendanceStatus == 'ZUGEWIESEN'}">
								<strong class="text-success"><c:out value="Zugewiesen" /></strong>
							</c:when>
							<c:when test="${event.userAttendanceStatus == 'ANGEMELDET'}">
								<span class="text-success"><c:out value="Angemeldet" /></span>
							</c:when>
							<c:when test="${event.userAttendanceStatus == 'ABGEMELDET'}">
								<span class="text-danger"><c:out value="Abgemeldet" /></span>
							</c:when>
							<c:otherwise>
								<c:out value="Offen" />
							</c:otherwise>
						</c:choose></td>
					<td>
						<div style="display: flex; gap: 0.5rem;">
							<c:if
								test="${event.userAttendanceStatus == 'OFFEN' or event.userAttendanceStatus == 'ABGEMELDET'}">
								<c:choose>
									<c:when test="${event.userQualified}">
										<button type="button"
											class="btn btn-small btn-success signup-btn"
											data-event-id="${event.id}"
											data-event-name="${fn:escapeXml(event.name)}">Anmelden</button>
									</c:when>
									<c:otherwise>
										<button type="button" class="btn btn-small btn-success"
											disabled
											title="Du erfüllst die Anforderungen für dieses Event nicht.">Anmelden</button>
									</c:otherwise>
								</c:choose>
							</c:if>
							<c:if test="${event.userAttendanceStatus == 'ANGEMELDET'}">
								<form action="${pageContext.request.contextPath}/event-action"
									method="post" class="js-signoff-form"
									data-event-id="${event.id}" data-event-status="${event.status}"
									data-confirm-message="Wirklich vom Event '${fn:escapeXml(event.name)}' abmelden?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="eventId" value="${event.id}"> <input
										type="hidden" name="action" value="signoff">
									<button type="submit" class="btn btn-small btn-danger">Abmelden</button>
								</form>
							</c:if>
						</div>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="event" items="${events}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
						value="${event.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${event.formattedEventDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Event-Status:</span> <span><span
					class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
							value="${event.status}" /></span></span>
			</div>
			<div class="card-row">
				<span>Dein Status:</span> <strong> <c:choose>
						<c:when test="${event.userAttendanceStatus == 'ZUGEWIESEN'}">
							<span class="text-success">Zugewiesen</span>
						</c:when>
						<c:when test="${event.userAttendanceStatus == 'ANGEMELDET'}">
							<span class="text-success">Angemeldet</span>
						</c:when>
						<c:when test="${event.userAttendanceStatus == 'ABGEMELDET'}">
							<span class="text-danger">Abgemeldet</span>
						</c:when>
						<c:otherwise>Offen</c:otherwise>
					</c:choose>
				</strong>
			</div>
			<div class="card-actions">
				<c:if
					test="${event.userAttendanceStatus == 'OFFEN' or event.userAttendanceStatus == 'ABGEMELDET'}">
					<c:choose>
						<c:when test="${event.userQualified}">
							<button type="button"
								class="btn btn-small btn-success signup-btn"
								data-event-id="${event.id}"
								data-event-name="${fn:escapeXml(event.name)}">Anmelden</button>
						</c:when>
						<c:otherwise>
							<button type="button" class="btn btn-small btn-success" disabled
								title="Du erfüllst die Anforderungen für dieses Event nicht.">Anmelden</button>
						</c:otherwise>
					</c:choose>
				</c:if>
				<c:if test="${event.userAttendanceStatus == 'ANGEMELDET'}">
					<form action="${pageContext.request.contextPath}/event-action"
						method="post" class="js-signoff-form" data-event-id="${event.id}"
						data-event-status="${event.status}"
						data-confirm-message="Wirklich vom Event '${fn:escapeXml(event.name)}' abmelden?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="eventId" value="${event.id}"> <input type="hidden"
							name="action" value="signoff">
						<button type="submit" class="btn btn-small btn-danger">Abmelden</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Signup Modal -->
<div class="modal-overlay" id="signup-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="signup-modal-title">Anmeldung</h3>
		<form id="signup-form"
			action="${pageContext.request.contextPath}/event-action"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="signup"> <input type="hidden"
				name="eventId" id="signup-event-id">
			<div id="custom-fields-container"></div>
			<button type="submit" class="btn btn-success"
				style="margin-top: 1rem;">Anmeldung bestätigen</button>
		</form>
	</div>
</div>

<!-- Sign-off with Reason Modal -->
<div class="modal-overlay" id="signoff-reason-modal">
	<div class="modal-content" style="max-width: 500px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3>Abmeldung vom laufenden Event</h3>
		<p>Da dieses Event bereits läuft, ist eine Begründung für die
			Abmeldung erforderlich. Der Event-Leiter wird benachrichtigt.</p>
		<form id="signoff-reason-form"
			action="${pageContext.request.contextPath}/event-action"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="signOffWithReason"> <input
				type="hidden" name="eventId" id="signoff-event-id">
			<div class="form-group">
				<label for="signoff-reason">Begründung</label>
				<textarea id="signoff-reason" name="reason" rows="4" required></textarea>
			</div>
			<button type="submit" class="btn btn-danger">Abmeldung
				bestätigen</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/public/events.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\feedback.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Feedback geben" />
</c:import>

<div style="max-width: 800px; margin: auto;">
	<div class="card">
		<h1>
			<i class="fas fa-lightbulb"></i> Feedback & Wünsche
		</h1>
		<p>Hast du eine Idee für eine neue Funktion, einen
			Verbesserungsvorschlag oder ist dir ein Fehler aufgefallen? Teile es
			uns hier mit! Dein Feedback hilft uns, diese Anwendung besser zu
			machen.</p>

		<c:import url="/WEB-INF/jspf/message_banner.jspf" />

		<form action="${pageContext.request.contextPath}/feedback"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="submitGeneralFeedback">

			<div class="form-group">
				<label for="subject">Betreff</label> <input type="text" id="subject"
					name="subject" required maxlength="255"
					placeholder="z.B. Feature-Wunsch: Dunkelmodus für die Packliste">
			</div>

			<div class="form-group">
				<label for="content">Deine Nachricht</label>
				<textarea id="content" name="content" rows="8" required
					placeholder="Bitte beschreibe deine Idee oder das Problem so detailliert wie möglich."></textarea>
			</div>

			<button type="submit" class="btn btn-success">
				<i class="fas fa-paper-plane"></i> Feedback absenden
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\feedback_form.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Feedback geben" />
</c:import>

<div style="max-width: 700px; margin: auto;">
	<div class="card">
		<h1>
			Feedback für:
			<c:out value="${event.name}" />
		</h1>
		<p>Dein Feedback hilft uns, zukünftige Events zu verbessern.</p>

		<form action="${pageContext.request.contextPath}/feedback"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="submitEventFeedbackResponse"> <input
				type="hidden" name="formId" value="${form.id}">

			<div class="form-group">
				<label>Gesamteindruck (1 = schlecht, 5 = super)</label>
				<div class="star-rating">
					<input type="radio" id="star5" name="rating" value="5" required /><label
						for="star5" title="5 Sterne"></label> <input type="radio"
						id="star4" name="rating" value="4" /><label for="star4"
						title="4 Sterne"></label> <input type="radio" id="star3"
						name="rating" value="3" /><label for="star3" title="3 Sterne"></label>
					<input type="radio" id="star2" name="rating" value="2" /><label
						for="star2" title="2 Sterne"></label> <input type="radio"
						id="star1" name="rating" value="1" /><label for="star1"
						title="1 Stern"></label>
				</div>
			</div>

			<div class="form-group">
				<label for="comments">Kommentare & Verbesserungsvorschläge</label>
				<textarea id="comments" name="comments" rows="5"></textarea>
			</div>

			<button type="submit" class="btn">Feedback absenden</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\home.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Home" />
</c:import>

<h1>
	Willkommen zurück,
	<c:out value="${sessionScope.user.username}" />
	!
</h1>
<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">Meine nächsten Einsätze</h2>
		<c:choose>
			<c:when test="${not empty assignedEvents}">
				<ul class="details-list">
					<c:forEach var="event" items="${assignedEvents}">
						<li><a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
									value="${event.name}" /></a> <small><c:out
									value="${event.formattedEventDateTimeRange}" /></small></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Du bist derzeit für keine kommenden Events fest eingeteilt.</p>
			</c:otherwise>
		</c:choose>
		<a href="${pageContext.request.contextPath}/veranstaltungen"
			class="btn btn-small" style="margin-top: 1rem;">Alle
			Veranstaltungen anzeigen</a>
	</div>

	<div class="card">
		<h2 class="card-title">Meine offenen Aufgaben</h2>
		<c:choose>
			<c:when test="${not empty openTasks}">
				<ul class="details-list">
					<c:forEach var="task" items="${openTasks}">
						<li><a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${task.eventId}">
								<c:out value="${task.description}" /> <small
								style="display: block; color: var(--text-muted-color);">Für
									Event: <c:out value="${task.eventName}" />
							</small>
						</a></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Super! Du hast aktuell keine offenen Aufgaben.</p>
			</c:otherwise>
		</c:choose>
	</div>

	<div class="card">
		<h2 class="card-title">Weitere anstehende Veranstaltungen</h2>
		<c:choose>
			<c:when test="${not empty upcomingEvents}">
				<ul class="details-list">
					<c:forEach var="event" items="${upcomingEvents}">
						<li><a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
									value="${event.name}" /></a> <small><c:out
									value="${event.formattedEventDateTimeRange}" /></small></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Keine weiteren anstehenden Veranstaltungen.</p>
			</c:otherwise>
		</c:choose>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\lager.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lager" />
</c:import>

<h1>
	<i class="fas fa-boxes"></i> Lagerübersicht
</h1>
<p>Hier finden Sie eine Übersicht aller erfassten Artikel im Lager.
	Klicken Sie auf einen Artikelnamen für Details und Verlauf.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Alle Artikel filtern..." aria-label="Lager filtern">
	</div>
</div>

<c:if test="${empty storageData}">
	<div class="card">
		<p>Derzeit sind keine Artikel im Lager erfasst.</p>
	</div>
</c:if>

<div class="searchable-table">
	<c:forEach var="locationEntry" items="${storageData}">
		<div class="card">
			<h2>
				<i class="fas fa-map-marker-alt"></i>
				<c:out value="${locationEntry.key}" />
			</h2>

			<!-- Desktop Table View -->
			<div class="desktop-table-wrapper">
				<table class="data-table">
					<thead>
						<tr>
							<th>Gerät</th>
							<th class="sortable" data-sort-type="string">Schrank</th>
							<th class="sortable" data-sort-type="string">Fach</th>
							<th>Status</th>
							<th>Bestand</th>
							<th>Aktion</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="item" items="${locationEntry.value}">
							<tr
								class="${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
								<td class="item-name-cell"><a
									href="<c:url value='/lager/details?id=${item.id}'/>"
									title="Details für ${item.name} ansehen"><c:out
											value="${item.name}" /></a> <c:if
										test="${not empty item.imagePath}">
										<button class="camera-btn lightbox-trigger"
											data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
											title="Bild anzeigen">
											<i class="fas fa-camera"></i>
										</button>
									</c:if></td>
								<td><c:out
										value="${not empty item.cabinet ? item.cabinet : '-'}" /></td>
								<td><c:out
										value="${not empty item.compartment ? item.compartment : '-'}" /></td>
								<td><c:choose>
										<c:when test="${item.status == 'CHECKED_OUT'}">
											<span class="status-badge status-warn">Entnommen</span>
											<span class="item-status-details">an:
												${item.currentHolderUsername}</span>
										</c:when>
										<c:when test="${item.status == 'MAINTENANCE'}">
											<span class="status-badge status-info">Wartung</span>
										</c:when>
										<c:otherwise>
											<span class="status-badge status-ok">Im Lager</span>
										</c:otherwise>
									</c:choose></td>
								<td><span class="inventory-details">${item.availableQuantity}
										/ ${item.maxQuantity}</span> <c:if
										test="${item.defectiveQuantity > 0}">
										<span class="inventory-details text-danger">(${item.defectiveQuantity}
											defekt)</span>
									</c:if></td>
								<td>
									<button class="btn btn-small transaction-btn"
										data-item-id="${item.id}"
										data-item-name="${fn:escapeXml(item.name)}"
										data-max-qty="${item.availableQuantity}"
										data-current-qty="${item.quantity}"
										data-total-max-qty="${item.maxQuantity}">Aktion</button>
								</td>
							</tr>
						</c:forEach>
					</tbody>
				</table>
			</div>

			<!-- Mobile Card View -->
			<div class="mobile-card-list">
				<c:forEach var="item" items="${locationEntry.value}">
					<div
						class="list-item-card ${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
						<h3 class="card-title">
							<a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
									value="${item.name}" /></a>
							<c:if test="${not empty item.imagePath}">
								<button class="camera-btn lightbox-trigger"
									data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
									title="Bild anzeigen">
									<i class="fas fa-camera"></i>
								</button>
							</c:if>
						</h3>
						<div class="card-row">
							<span>Ort:</span> <strong><c:out value="${item.cabinet}" />,
								<c:out value="${item.compartment}" /></strong>
						</div>
						<div class="card-row">
							<span>Bestand:</span> <strong>${item.availableQuantity}
								/ ${item.maxQuantity} <c:if test="${item.defectiveQuantity > 0}">
									<span class="text-danger">(${item.defectiveQuantity}
										def.)</span>
								</c:if>
							</strong>
						</div>
						<div class="card-row">
							<span>Status:</span> <span> <c:choose>
									<c:when test="${item.status == 'CHECKED_OUT'}">
										<span class="status-badge status-warn">Entnommen</span>
										<span class="item-status-details">an:
											${item.currentHolderUsername}</span>
									</c:when>
									<c:when test="${item.status == 'MAINTENANCE'}">
										<span class="status-badge status-info">Wartung</span>
									</c:when>
									<c:otherwise>
										<span class="status-badge status-ok">Im Lager</span>
									</c:otherwise>
								</c:choose>
							</span>
						</div>
						<div class="card-actions">
							<button class="btn btn-small transaction-btn"
								data-item-id="${item.id}"
								data-item-name="${fn:escapeXml(item.name)}"
								data-max-qty="${item.availableQuantity}"
								data-current-qty="${item.quantity}"
								data-total-max-qty="${item.maxQuantity}">Aktion</button>
						</div>
					</div>
				</c:forEach>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Lightbox Modal (HTML is in main_footer.jspf, this is just a comment) -->

<%@ include file="/WEB-INF/jspf/storage_modals.jspf"%>
<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/public/lager.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\lehrgaenge.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lehrgänge" />
</c:import>

<h1>Anstehende Lehrgänge & Meetings</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Lehrgänge filtern..." style="width: 100%;"
			aria-label="Lehrgänge filtern">
	</div>
</div>

<c:if test="${empty meetings}">
	<div class="card">
		<p>Derzeit stehen keine Lehrgänge oder Meetings an.</p>
	</div>
</c:if>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Meeting</th>
				<th class="sortable" data-sort-type="string">Gehört zu Kurs</th>
				<th class="sortable" data-sort-type="date">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Dein Status</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="meeting" items="${meetings}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
								value="${meeting.name}" /></a></td>
					<td><c:out value="${meeting.parentCourseName}" /></td>
					<td data-sort-value="${meeting.meetingDateTime}"><c:out
							value="${meeting.formattedMeetingDateTimeRange}" /></td>
					<td><c:choose>
							<c:when test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
								<span class="text-success"><c:out value="Angemeldet" /></span>
							</c:when>
							<c:when test="${meeting.userAttendanceStatus == 'ABGEMELDET'}">
								<span class="text-danger"><c:out value="Abgemeldet" /></span>
							</c:when>
							<c:otherwise>
								<c:out value="Offen" />
							</c:otherwise>
						</c:choose></td>
					<td>
						<form action="${pageContext.request.contextPath}/meeting-action"
							method="post" style="display: flex; gap: 0.5rem;">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="meetingId" value="${meeting.id}">
							<c:if test="${meeting.userAttendanceStatus != 'ANGEMELDET'}">
								<button type="submit" name="action" value="signup"
									class="btn btn-small btn-success">Anmelden</button>
							</c:if>
							<c:if test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
								<button type="submit" name="action" value="signoff"
									class="btn btn-small btn-danger">Abmelden</button>
							</c:if>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="meeting" items="${meetings}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
						value="${meeting.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Kurs:</span> <strong><c:out
						value="${meeting.parentCourseName}" /></strong>
			</div>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${meeting.formattedMeetingDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Dein Status:</span> <strong> <c:choose>
						<c:when test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
							<span class="text-success">Angemeldet</span>
						</c:when>
						<c:when test="${meeting.userAttendanceStatus == 'ABGEMELDET'}">
							<span class="text-danger">Abgemeldet</span>
						</c:when>
						<c:otherwise>Offen</c:otherwise>
					</c:choose>
				</strong>
			</div>
			<div class="card-actions">
				<form action="${pageContext.request.contextPath}/meeting-action"
					method="post" style="display: flex; gap: 0.5rem;">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="meetingId" value="${meeting.id}">
					<c:if test="${meeting.userAttendanceStatus != 'ANGEMELDET'}">
						<button type="submit" name="action" value="signup"
							class="btn btn-small btn-success">Anmelden</button>
					</c:if>
					<c:if test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
						<button type="submit" name="action" value="signoff"
							class="btn btn-small btn-danger">Abmelden</button>
					</c:if>
				</form>
			</div>
		</div>
	</c:forEach>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\meetingDetails.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Meeting Details" />
</c:import>

<h1>
	<c:out value="${meeting.parentCourseName}" />
</h1>
<h2 style="border: none; padding: 0; margin-top: -1rem;">
	<c:out value="${meeting.name}" />
</h2>

<div class="dashboard-grid"
	style="grid-template-columns: 2fr 1fr; align-items: flex-start;">

	<div class="card">
		<ul class="details-list">
			<li><strong>Datum & Uhrzeit:</strong> <span><c:out
						value="${meeting.formattedMeetingDateTimeRange}" /></span></li>
			<li><strong>Ort:</strong> <span><c:out
						value="${not empty meeting.location ? meeting.location : 'N/A'}" /></span></li>
			<li><strong>Leitung:</strong> <span><c:out
						value="${not empty meeting.leaderUsername ? meeting.leaderUsername : 'N/A'}" /></span></li>
		</ul>
		<h3 style="margin-top: 2rem;">Beschreibung</h3>
		<div class="markdown-content">${fn:escapeXml(not empty meeting.description ? meeting.description : 'Keine Beschreibung für dieses Meeting vorhanden.')}
		</div>
	</div>

	<div class="card">
		<h2 class="card-title">Anhänge</h2>
		<c:if test="${empty attachments}">
			<p>Für dieses Meeting sind keine Anhänge verfügbar.</p>
		</c:if>
		<ul class="details-list">
			<c:forEach var="att" items="${attachments}">
				<li><a href="<c:url value='/download?id=${att.id}'/>"><c:out
							value="${att.filename}" /></a> <c:if
						test="${sessionScope.user.id == meeting.leaderUserId or sessionScope.user.permissions.contains('ACCESS_ADMIN_PANEL')}">
						<span class="text-muted">(<c:out
								value="${att.requiredRole}" />)
						</span>
					</c:if></li>
			</c:forEach>
		</ul>
	</div>

</div>

<div style="margin-top: 1rem;">
	<a href="${pageContext.request.contextPath}/lehrgaenge"
		class="btn btn-secondary"> <i class="fas fa-arrow-left"></i>
		Zurück zu allen Lehrgängen
	</a>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\my_feedback.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Mein Feedback" />
</c:import>

<h1>
	<i class="fas-fa-inbox"></i> Mein eingereichtes Feedback
</h1>
<p>Hier sehen Sie den Status Ihrer Vorschläge und Meldungen.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="feedback-list">
	<c:if test="${empty mySubmissions}">
		<div class="card">
			<p>
				Sie haben noch kein Feedback eingereicht. <a
					href="${pageContext.request.contextPath}/feedback">Jetzt eine
					Idee teilen!</a>
			</p>
		</div>
	</c:if>

	<c:forEach var="sub" items="${mySubmissions}">
		<c:set var="statusClass" value="status-info" />
		<c:if test="${sub.status == 'PLANNED'}">
			<c:set var="statusClass" value="status-warn" />
		</c:if>
		<c:if test="${sub.status == 'COMPLETED'}">
			<c:set var="statusClass" value="status-ok" />
		</c:if>
		<c:if test="${sub.status == 'REJECTED'}">
			<c:set var="statusClass" value="status-danger" />
		</c:if>

		<div class="card">
			<div
				style="display: flex; justify-content: space-between; align-items: start;">
				<div>
					<h3 class="card-title" style="border: none; padding: 0;">
						<c:out value="${sub.subject}" />
					</h3>
					<p class="details-subtitle" style="margin-top: -0.75rem;">
						Eingereicht am
						<c:out value="${sub.formattedSubmittedAt}" />
						Uhr
					</p>
				</div>
				<div>
					<span class="status-badge ${statusClass}"><c:out
							value="${sub.status}" /></span>
				</div>
			</div>

			<div class="markdown-content"
				style="white-space: pre-wrap; background-color: var(--bg-color); padding: 1rem; border-radius: var(--border-radius);">${fn:escapeXml(sub.content)}
			</div>
		</div>
	</c:forEach>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\pack_kit.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Packliste: ${kit.name}" />
	<c:param name="showNav" value="false" />
</c:import>

<div class="main-content" style="max-width: 800px; margin: 2rem auto;">
	<div class="card">
		<div
			style="display: flex; justify-content: space-between; align-items: start;">
			<div>
				<h1>
					Packliste:
					<c:out value="${kit.name}" />
				</h1>
				<p class="details-subtitle" style="margin-top: -1rem;">
					<c:out value="${kit.description}" />
				</p>
			</div>
			<button class="btn no-print" onclick="window.print()">
				<i class="fas fa-print"></i> Drucken
			</button>
		</div>

		<c:if test="${not empty kit.location}">
			<div class="card" style="background-color: var(--bg-color);">
				<h3 class="card-title" style="border: none; padding: 0;">Standort</h3>
				<p style="font-size: 1.2rem; font-weight: 500;">
					<c:out value="${kit.location}" />
				</p>
			</div>
		</c:if>
		<c:if test="${empty kit.location}">
			<p class="info-message">Für dieses Kit ist kein physischer
				Standort hinterlegt.</p>
		</c:if>

		<h3 style="margin-top: 2rem;">Inhalt zum Einpacken</h3>
		<ul class="details-list">
			<c:if test="${empty kitItems}">
				<li>Dieses Kit hat keinen definierten Inhalt.</li>
			</c:if>
			<c:forEach var="item" items="${kitItems}">
				<li><label
					style="display: flex; align-items: center; gap: 1rem; cursor: pointer; width: 100%;">
						<input type="checkbox"
						style="width: 1.5rem; height: 1.5rem; flex-shrink: 0;"> <span>
							<strong>${item.quantity}x</strong> <c:out
								value="${item.itemName}" />
					</span>
				</label></li>
			</c:forEach>
		</ul>
		<div class="no-print" style="margin-top: 2rem; text-align: center;">
			<a href="${pageContext.request.contextPath}/lager"
				class="btn btn-secondary">Zurück zur Lagerübersicht</a>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\passwort.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Passwort ändern" />
</c:import>

<div style="max-width: 600px; margin: auto;">
	<div class="card">
		<h1>Passwort ändern</h1>
		<p class="text-muted"
			style="margin-top: -1rem; margin-bottom: 1.5rem;">Das neue
			Passwort muss mindestens 10 Zeichen lang sein und Groß-,
			Kleinbuchstaben, Zahlen und Sonderzeichen enthalten.</p>

		<c:if test="${not empty successMessage}">
			<p class="success-message">
				<c:out value="${successMessage}" />
			</p>
		</c:if>
		<c:if test="${not empty errorMessage}">
			<p class="error-message">
				<c:out value="${errorMessage}" />
			</p>
		</c:if>

		<form action="${pageContext.request.contextPath}/passwort"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}">
			<div class="form-group">
				<label for="currentPassword">Aktuelles Passwort</label>
				<div class="password-input-wrapper">
					<input type="password" id="currentPassword" name="currentPassword"
						required autocomplete="current-password"> <span
						class="password-toggle-icon"> <i class="fas fa-eye"></i>
					</span>
				</div>
			</div>
			<div class="form-group">
				<label for="newPassword">Neues Passwort</label>
				<div class="password-input-wrapper">
					<input type="password" id="newPassword" name="newPassword" required
						autocomplete="new-password"> <span
						class="password-toggle-icon"> <i class="fas fa-eye"></i>
					</span>
				</div>
			</div>
			<div class="form-group">
				<label for="confirmPassword">Neues Passwort bestätigen</label>
				<div class="password-input-wrapper">
					<input type="password" id="confirmPassword" name="confirmPassword"
						required autocomplete="new-password"> <span
						class="password-toggle-icon"> <i class="fas fa-eye"></i>
					</span>
				</div>
			</div>
			<button type="submit" class="btn">Passwort speichern</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\profile.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Mein Profil" />
</c:import>

<h1>Mein Profil</h1>
<p>Hier finden Sie eine Übersicht Ihrer Daten, Qualifikationen und
	Aktivitäten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="responsive-dashboard-grid">
	<div class="card">
		<h2 class="card-title">Stammdaten</h2>

		<c:if test="${hasPendingRequest}">
			<div class="info-message">
				<i class="fas fa-info-circle"></i> Sie haben eine ausstehende
				Profiländerung, die von einem Administrator geprüft wird.
			</div>
		</c:if>

		<form id="profile-form"
			action="${pageContext.request.contextPath}/profil" method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="requestProfileChange">

			<ul class="details-list">
				<li><strong>Benutzername:</strong> <input type="text"
					name="username" class="form-group"
					style="display: inline-block; width: auto; background-color: var(--bg-color); border-color: transparent;"
					value="${fn:escapeXml(sessionScope.user.username)}" readonly>
				</li>
				<li><strong>Jahrgang:</strong> <input type="number"
					name="classYear" class="form-group editable-field"
					style="display: inline-block; width: auto;"
					value="${sessionScope.user.classYear}"
					data-original="${sessionScope.user.classYear}" readonly></li>
				<li><strong>Klasse:</strong> <input type="text"
					name="className" class="form-group editable-field"
					style="display: inline-block; width: auto;"
					value="${fn:escapeXml(sessionScope.user.className)}"
					data-original="${fn:escapeXml(sessionScope.user.className)}"
					readonly></li>
				<li><strong>E-Mail:</strong> <input type="email" name="email"
					class="form-group editable-field"
					style="display: inline-block; width: auto;"
					value="${fn:escapeXml(sessionScope.user.email)}"
					data-original="${fn:escapeXml(sessionScope.user.email)}" readonly>
				</li>
			</ul>

			<div style="margin-top: 1.5rem; display: flex; gap: 0.5rem;">
				<c:if test="${!hasPendingRequest}">
					<button type="button" id="edit-profile-btn"
						class="btn btn-secondary">Profil bearbeiten</button>
					<button type="submit" id="submit-profile-btn"
						class="btn btn-success" style="display: none;">Antrag
						einreichen</button>
					<button type="button" id="cancel-edit-btn" class="btn"
						style="background-color: var(--text-muted-color); display: none;">Abbrechen</button>
				</c:if>
			</div>
		</form>

		<hr style="margin: 1.5rem 0;">

		<ul class="details-list">
			<li style="align-items: center; gap: 1rem;"><strong>Chat-Farbe:</strong>
				<form id="chat-color-form"
					action="${pageContext.request.contextPath}/profil" method="post"
					style="display: flex; align-items: center; gap: 0.5rem;">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="updateChatColor"> <input type="color"
						name="chatColor"
						value="<c:out value='${not empty sessionScope.user.chatColor ? sessionScope.user.chatColor : "#E9ECEF"}'/>"
						title="Wähle deine Chat-Farbe">
					<button type="submit" class="btn btn-small">Speichern</button>
				</form></li>
			<li><a href="${pageContext.request.contextPath}/passwort"
				class="btn btn-secondary">Passwort ändern</a></li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Sicherheit (Passkeys)</h2>
		<p>Registrieren Sie Geräte für einen passwortlosen Login.</p>
		<button id="register-passkey-btn" class="btn btn-success"
			style="margin-bottom: 1rem;">
			<i class="fas fa-plus-circle"></i> Neues Gerät registrieren
		</button>

		<h3 style="margin-top: 1.5rem; font-size: 1.1rem;">Registrierte
			Geräte</h3>
		<ul class="details-list">
			<c:if test="${empty passkeys}">
				<li>Keine Passkeys registriert.</li>
			</c:if>
			<c:forEach var="key" items="${passkeys}">
				<li><span> <i class="fas fa-key"></i> <c:out
							value="${key.name}" /> <small
						style="display: block; color: var(--text-muted-color);">
							Registriert am: <fmt:parseDate value="${key.createdAt}"
								pattern="yyyy-MM-dd'T'HH:mm:ss" var="parsedDate" type="both" />
							<fmt:formatDate value="${parsedDate}" type="both"
								dateStyle="medium" timeStyle="short" />
					</small>
				</span>
					<form action="${pageContext.request.contextPath}/profil"
						method="post" style="display: inline;">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="deletePasskey"> <input type="hidden"
							name="credentialId" value="${key.id}">
						<button type="submit"
							class="btn btn-small btn-danger-outline delete-passkey-btn">Entfernen</button>
					</form></li>
			</c:forEach>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Meine Qualifikationen</h2>
		<div class="table-wrapper"
			style="max-height: 400px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Lehrgang</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty qualifications}">
						<tr>
							<td colspan="2">Keine Qualifikationen erworben.</td>
						</tr>
					</c:if>
					<c:forEach var="qual" items="${qualifications}">
						<tr>
							<td><c:out value="${qual.courseName}" /></td>
							<td><c:out value="${qual.status}" /></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>

	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Meine Abzeichen</h2>
		<c:if test="${empty achievements}">
			<p>Du hast noch keine Abzeichen verdient. Nimm an Events teil, um
				sie freizuschalten!</p>
		</c:if>
		<div style="display: flex; flex-wrap: wrap; gap: 1rem;">
			<c:forEach var="ach" items="${achievements}">
				<div class="card"
					style="flex: 1; min-width: 250px; text-align: center;">
					<i class="fas ${ach.iconClass}"
						style="font-size: 3rem; color: var(--primary-color); margin-bottom: 1rem;"></i>
					<h4 style="margin: 0;">
						<c:out value="${ach.name}" />
					</h4>
					<p style="color: var(--text-muted-color); font-size: 0.9rem;">
						<c:out value="${ach.description}" />
					</p>
					<small>Verdient am: <c:out value="${ach.formattedEarnedAt}" /></small>
				</div>
			</c:forEach>
		</div>
	</div>

</div>

<div class="card">
	<h2 class="card-title">Meine Event-Historie</h2>
	<div class="desktop-table-wrapper">
		<div class="table-wrapper"
			style="max-height: 500px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Event</th>
						<th>Datum</th>
						<th>Dein Status</th>
						<th>Feedback</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty eventHistory}">
						<tr>
							<td colspan="4">Keine Event-Historie vorhanden.</td>
						</tr>
					</c:if>
					<c:forEach var="event" items="${eventHistory}">
						<tr>
							<td><a
								href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
										value="${event.name}" /></a></td>
							<td><c:out value="${event.formattedEventDateTime}" /> Uhr</td>
							<td><c:out value="${event.userAttendanceStatus}" /></td>
							<td><c:if
									test="${event.status == 'ABGESCHLOSSEN' && event.userAttendanceStatus == 'ZUGEWIESEN'}">
									<a
										href="${pageContext.request.contextPath}/feedback?action=submitEventFeedback&eventId=${event.id}"
										class="btn btn-small">Feedback geben</a>
								</c:if></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
	<div class="mobile-card-list">
		<c:if test="${empty eventHistory}">
			<div class="list-item-card">
				<p>Keine Event-Historie vorhanden.</p>
			</div>
		</c:if>
		<c:forEach var="event" items="${eventHistory}">
			<div class="list-item-card">
				<h3 class="card-title">
					<a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
							value="${event.name}" /></a>
				</h3>
				<div class="card-row">
					<span>Datum:</span> <strong><c:out
							value="${event.formattedEventDateTime}" /> Uhr</strong>
				</div>
				<div class="card-row">
					<span>Dein Status:</span> <strong><c:out
							value="${event.userAttendanceStatus}" /></strong>
				</div>
				<div class="card-actions">
					<c:if
						test="${event.status == 'ABGESCHLOSSEN' && event.userAttendanceStatus == 'ZUGEWIESEN'}">
						<a
							href="${pageContext.request.contextPath}/feedback?action=submitEventFeedback&eventId=${event.id}"
							class="btn btn-small">Feedback geben</a>
					</c:if>
				</div>
			</div>
		</c:forEach>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/auth/passkey_auth.js"></script>
<script src="${pageContext.request.contextPath}/js/public/profile.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\qr_action.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Lager-Aktion: <c:out value="${item.name}" /></title>
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet"
	href="${pageContext.request.contextPath}/css/style.css">

<script>
	// This script runs immediately to prevent a "flash" of the wrong theme.
	const savedTheme = localStorage.getItem('theme') || 'light';
	document.documentElement.setAttribute('data-theme', savedTheme);
</script>

</head>
<body class="qr-action-body">

	<div class="qr-action-container card">
		<p>Aktion für:</p>
		<h1 class="qr-action-item-name">
			<c:out value="${item.name}" />
		</h1>
		<p class="details-subtitle"
			style="margin-top: -1rem; margin-bottom: 2rem;">Bestand:
			${item.quantity} / ${item.maxQuantity} (Verfügbar:
			${item.availableQuantity})</p>


		<c:if test="${not empty sessionScope.successMessage}">
			<p class="success-message" style="margin-top: 1rem;">${sessionScope.successMessage}</p>
			<c:remove var="successMessage" scope="session" />
		</c:if>
		<c:if test="${not empty sessionScope.errorMessage}">
			<p class="error-message" style="margin-top: 1rem;">${sessionScope.errorMessage}</p>
			<c:remove var="errorMessage" scope="session" />
		</c:if>

		<form action="${pageContext.request.contextPath}/lager/transaktion"
			method="post" data-available-qty="${item.availableQuantity}"
			data-total-qty="${item.quantity}" data-max-qty="${item.maxQuantity}">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="itemId" value="${item.id}"> <input type="hidden"
				name="redirectUrl"
				value="${pageContext.request.contextPath}/lager/aktionen?id=${item.id}">

			<div class="form-group">
				<label for="quantity">Anzahl</label> <input type="number"
					name="quantity" id="quantity" value="1" min="1" required>
			</div>

			<div class="form-group">
				<label for="notes">Notiz (optional, z.B. für welches Event)</label>
				<input type="text" name="notes" id="notes"
					placeholder="z.B. für Event XYZ">
			</div>
			<div class="form-group">
				<label for="eventId">Zuweisen zu Event (optional)</label> <select
					name="eventId" id="eventId">
					<option value="">Kein Event</option>
					<c:forEach var="event" items="${activeEvents}">
						<option value="${event.id}">${event.name}</option>
					</c:forEach>
				</select>
			</div>

			<div class="qr-action-buttons">
				<button type="submit" name="type" value="checkout" id="checkout-btn"
					class="btn btn-danger qr-action-btn"
					${item.availableQuantity <= 0 ? 'disabled' : ''}>
					<i class="fas fa-sign-out-alt"></i> Entnehmen
				</button>
				<button type="submit" name="type" value="checkin" id="checkin-btn"
					class="btn btn-success qr-action-btn"
					${item.maxQuantity > 0 && item.quantity >= item.maxQuantity ? 'disabled' : ''}>
					<i class="fas fa-sign-in-alt"></i> Einräumen
				</button>
			</div>
		</form>
	</div>

	<script src="${pageContext.request.contextPath}/js/public/qr_action.js"></script>
</body>
</html>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\storage_item_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle"
		value="Artikeldetails: ${fn:escapeXml(item.name)}" />
</c:import>

<h1>
	<i class="fas fa-cube"></i> Artikeldetails
</h1>

<div class="responsive-dashboard-grid" style="align-items: flex-start;">

	<div class="card">
		<h2 class="card-title">
			<c:out value="${item.name}" />
		</h2>
		<c:if test="${not empty item.imagePath}">
			<a
				href="${pageContext.request.contextPath}/image?file=${item.imagePath}"
				class="lightbox-trigger"> <img
				src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
				alt="<c:out value='${item.name}'/>"
				style="width: 100%; border-radius: var(--border-radius); margin-bottom: 1rem; cursor: zoom-in;">
			</a>
		</c:if>
		<ul class="details-list">
			<li><strong>Allg. Status:</strong> <span
				class="status-badge ${item.availabilityStatusCssClass}"><c:out
						value="${item.availabilityStatus}" /></span></li>
			<li><strong>Verfügbar:</strong> <span><c:out
						value="${item.availableQuantity}" /> / <c:out
						value="${item.quantity}" /></span></li>
			<li><strong>Defekt:</strong> <span><c:out
						value="${item.defectiveQuantity}" /></span></li>
			<li><strong>Tracking-Status:</strong> <span> <c:choose>
						<c:when test="${item.status == 'CHECKED_OUT'}">
							<span class="status-badge status-warn"><c:out
									value="Entnommen" /></span>
						</c:when>
						<c:when test="${item.status == 'MAINTENANCE'}">
							<span class="status-badge status-info"><c:out
									value="Wartung" /></span>
						</c:when>
						<c:otherwise>
							<span class="status-badge status-ok"><c:out
									value="Im Lager" /></span>
						</c:otherwise>
					</c:choose>
			</span></li>
			<c:if test="${not empty item.currentHolderUsername}">
				<li><strong>Aktueller Inhaber:</strong> <span><c:out
							value="${item.currentHolderUsername}" /></span></li>
			</c:if>
			<li><strong>Ort:</strong> <span><c:out
						value="${item.location}" /></span></li>
			<li><strong>Schrank:</strong> <span><c:out
						value="${not empty item.cabinet ? item.cabinet : 'N/A'}" /></span></li>
			<li><strong>Fach:</strong> <span><c:out
						value="${not empty item.compartment ? item.compartment : 'N/A'}" /></span></li>
		</ul>
		<div style="margin-top: 2rem;">
			<a href="<c:url value='/lager'/>" class="btn btn-small"><i
				class="fas fa-arrow-left"></i> Zur Lagerübersicht</a>
		</div>
	</div>

	<div class="card">
		<div class="modal-tabs">
			<button class="modal-tab-button active" data-tab="history-tab">Verlauf</button>
			<button class="modal-tab-button" data-tab="maintenance-tab">Wartungshistorie</button>
		</div>

		<div id="history-tab" class="modal-tab-content active">
			<h2 class="card-title" style="border: none; padding: 0;">Verlauf
				/ Chronik</h2>

			<!-- Desktop Table View -->
			<div class="desktop-table-wrapper">
				<div class="table-wrapper"
					style="max-height: 60vh; overflow-y: auto;">
					<table class="data-table">
						<thead>
							<tr>
								<th>Wann</th>
								<th>Aktion</th>
								<th>Wer</th>
								<th>Notiz</th>
							</tr>
						</thead>
						<tbody>
							<c:if test="${empty history}">
								<tr>
									<td colspan="4" style="text-align: center;">Kein Verlauf
										für diesen Artikel vorhanden.</td>
								</tr>
							</c:if>
							<c:forEach var="entry" items="${history}">
								<tr>
									<td><c:out
											value="${entry.transactionTimestampLocaleString}" /></td>
									<td><span
										class="status-badge ${entry.quantityChange > 0 ? 'status-ok' : 'status-danger'}">${entry.quantityChange > 0 ? '+' : ''}<c:out
												value="${entry.quantityChange}" /></span></td>
									<td><c:out value="${entry.username}" /></td>
									<td><c:out
											value="${not empty entry.notes ? entry.notes : '-'}" /></td>
								</tr>
							</c:forEach>
						</tbody>
					</table>
				</div>
			</div>

			<!-- Mobile Card View -->
			<div class="mobile-card-list">
				<c:if test="${empty history}">
					<div class="list-item-card">
						<p>Kein Verlauf für diesen Artikel vorhanden.</p>
					</div>
				</c:if>
				<c:forEach var="entry" items="${history}">
					<div class="list-item-card">
						<h3 class="card-title">
							<span
								class="status-badge ${entry.quantityChange > 0 ? 'status-ok' : 'status-danger'}">
								${entry.quantityChange > 0 ? '+' : ''}<c:out
									value="${entry.quantityChange}" />
							</span>
							<c:out value="${entry.username}" />
						</h3>
						<div class="card-row">
							<span>Wann:</span> <strong><c:out
									value="${entry.transactionTimestampLocaleString}" /></strong>
						</div>
						<div class="card-row"
							style="flex-direction: column; align-items: flex-start;">
							<span>Notiz:</span>
							<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
								<c:out value="${not empty entry.notes ? entry.notes : '-'}" />
							</p>
						</div>
					</div>
				</c:forEach>
			</div>
		</div>

		<div id="maintenance-tab" class="modal-tab-content">
			<h2 class="card-title" style="border: none; padding: 0;">Wartungshistorie</h2>
			<!-- Desktop Table View -->
			<div class="desktop-table-wrapper">
				<div class="table-wrapper"
					style="max-height: 60vh; overflow-y: auto;">
					<table class="data-table">
						<thead>
							<tr>
								<th>Datum</th>
								<th>Aktion</th>
								<th>Bearbeiter</th>
								<th>Notiz</th>
							</tr>
						</thead>
						<tbody>
							<c:if test="${empty maintenanceHistory}">
								<tr>
									<td colspan="4" style="text-align: center;">Keine
										Wartungseinträge für diesen Artikel vorhanden.</td>
								</tr>
							</c:if>
							<c:forEach var="entry" items="${maintenanceHistory}">
								<tr>
									<td><c:out value="${entry.formattedLogDate}" /></td>
									<td><c:out value="${entry.action}" /></td>
									<td><c:out value="${entry.username}" /></td>
									<td><c:out value="${entry.notes}" /></td>
								</tr>
							</c:forEach>
						</tbody>
					</table>
				</div>
			</div>

			<!-- Mobile Card View -->
			<div class="mobile-card-list">
				<c:if test="${empty maintenanceHistory}">
					<div class="list-item-card">
						<p>Keine Wartungseinträge für diesen Artikel vorhanden.</p>
					</div>
				</c:if>
				<c:forEach var="entry" items="${maintenanceHistory}">
					<div class="list-item-card">
						<h3 class="card-title">
							<c:out value="${entry.action}" />
						</h3>
						<div class="card-row">
							<span>Datum:</span> <strong><c:out
									value="${entry.formattedLogDate}" /></strong>
						</div>
						<div class="card-row">
							<span>Bearbeiter:</span> <strong><c:out
									value="${entry.username}" /></strong>
						</div>
						<div class="card-row"
							style="flex-direction: column; align-items: flex-start;">
							<span>Notiz:</span>
							<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
								<c:out value="${entry.notes}" />
							</p>
						</div>
					</div>
				</c:forEach>
			</div>

		</div>
	</div>
</div>


<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/public/storage_item_details.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\web.xml
========================================================================

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"
	version="5.0">

	<display-name>TechnikTeam Web Application</display-name>

	<listener>
		<listener-class>de.technikteam.listener.ApplicationInitializerListener</listener-class>
	</listener>
	<listener>
		<listener-class>de.technikteam.config.GuiceConfig</listener-class>
	</listener>
	<listener>
		<listener-class>de.technikteam.listener.AppContextListener</listener-class>
	</listener>
	<listener>
		<listener-class>de.technikteam.listener.SessionListener</listener-class>
	</listener>

	<filter>
		<filter-name>guiceFilter</filter-name>
		<filter-class>com.google.inject.servlet.GuiceFilter</filter-class>
		<async-supported>true</async-supported>
	</filter>
	<filter-mapping>
		<filter-name>guiceFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- NEW SECTION FOR MULTIPART CONFIGURATION -->
	<servlet>
		<servlet-name>de.technikteam.servlet.admin.AdminFileManagementServlet</servlet-name>
		<servlet-class>de.technikteam.servlet.admin.AdminFileManagementServlet</servlet-class>
		<multipart-config>
			<max-file-size>20971520</max-file-size> <!-- 20MB -->
			<max-request-size>52428800</max-request-size> <!-- 50MB -->
			<file-size-threshold>1048576</file-size-threshold> <!-- 1MB -->
		</multipart-config>
	</servlet>
	<servlet>
		<servlet-name>de.technikteam.servlet.admin.AdminEventServlet</servlet-name>
		<servlet-class>de.technikteam.servlet.admin.AdminEventServlet</servlet-class>
		<multipart-config>
			<max-file-size>41943040</max-file-size> <!-- 40MB -->
			<max-request-size>83886080</max-request-size> <!-- 80MB -->
			<file-size-threshold>1048576</file-size-threshold> <!-- 1MB -->
		</multipart-config>
	</servlet>
	<servlet>
		<servlet-name>de.technikteam.servlet.admin.AdminMeetingServlet</servlet-name>
		<servlet-class>de.technikteam.servlet.admin.AdminMeetingServlet</servlet-class>
		<multipart-config>
			<max-file-size>20971520</max-file-size> <!-- 20MB -->
			<max-request-size>52428800</max-request-size> <!-- 50MB -->
			<file-size-threshold>1048576</file-size-threshold> <!-- 1MB -->
		</multipart-config>
	</servlet>
	<servlet>
		<servlet-name>de.technikteam.servlet.admin.AdminStorageServlet</servlet-name>
		<servlet-class>de.technikteam.servlet.admin.AdminStorageServlet</servlet-class>
		<multipart-config>
			<max-file-size>5242880</max-file-size> <!-- 5MB -->
			<max-request-size>10485760</max-request-size> <!-- 10MB -->
			<file-size-threshold>1048576</file-size-threshold> <!-- 1MB -->
		</multipart-config>
	</servlet>
	<!-- END NEW SECTION -->

	<session-config>
		<session-timeout>30</session-timeout>
		<cookie-config>
			<http-only>true</http-only>
			<secure>false</secure>
		</cookie-config>
	</session-config>

	<welcome-file-list>
		<welcome-file>/</welcome-file>
	</welcome-file-list>

	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<url-pattern>*.jspf</url-pattern>
			<el-ignored>false</el-ignored>
		</jsp-property-group>
	</jsp-config>

	<error-page>
		<error-code>400</error-code>
		<location>/views/error/error400.jsp</location>
	</error-page>
	<error-page>
		<error-code>401</error-code>
		<location>/views/error/error401.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/views/error/error403.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/views/error/error404.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/views/error/error500.jsp</location>
	</error-page>
	<error-page>
		<error-code>503</error-code>
		<location>/views/error/error503.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/views/error/error500.jsp</location>
	</error-page>
</web-app>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\common_modals.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
<!-- The confirmation modal is dynamically created and added to the body by main.js -->
<!-- This file is a placeholder for any other future global modals. -->
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\error_footer.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
    </div>
</div>
<script src="${pageContext.request.contextPath}/js/main.js"></script>
</body>
</html>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\error_header.jspf
========================================================================

<%@ page pageEncoding="UTF-8" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html>
<html lang="de" data-theme="light">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title><c:out value="${param.pageTitle}" /> - TechnikTeam</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body data-context-path="${pageContext.request.contextPath}">
<div class="main-content-wrapper no-sidebar">
    <div class="main-content">
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\event_modals.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!-- Event Create/Edit Modal -->
<div class="modal-overlay" id="event-modal">
	<div class="modal-content" style="max-width: 800px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="event-modal-title">Event verwalten</h3>

		<div class="modal-tabs">
			<button class="modal-tab-button active" data-tab="general">Allgemein</button>
			<button class="modal-tab-button" data-tab="requirements">Bedarf</button>
			<button class="modal-tab-button" data-tab="reservations">Material</button>
			<button class="modal-tab-button" data-tab="attachments">Anhänge</button>
			<button class="modal-tab-button" data-tab="custom-fields">Anmeldefelder</button>
		</div>

		<form id="event-modal-form"
			action="${pageContext.request.contextPath}/admin/veranstaltungen"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="event-modal-action"> <input type="hidden"
				name="id" id="event-modal-id">

			<!-- General Tab -->
			<div class="modal-tab-content active" id="general">
				<div class="form-group">
					<label for="name-modal">Name des Events</label> <input type="text"
						id="name-modal" name="name" required>
				</div>
				<div class="responsive-dashboard-grid">
					<div class="form-group">
						<label for="eventDateTime-modal">Beginn</label> <input
							type="datetime-local" id="eventDateTime-modal"
							name="eventDateTime" required>
					</div>
					<div class="form-group">
						<label for="endDateTime-modal">Ende (optional)</label> <input
							type="datetime-local" id="endDateTime-modal" name="endDateTime">
					</div>
				</div>
				<div class="responsive-dashboard-grid">
					<div class="form-group">
						<label for="location-modal">Ort</label> <input type="text"
							id="location-modal" name="location">
					</div>
					<div class="form-group">
						<label for="leaderUserId-modal">Event-Leitung</label> <select
							name="leaderUserId" id="leaderUserId-modal">
							<option value="">(Keine)</option>
							<c:forEach var="user" items="${allUsers}">
								<option value="${user.id}"><c:out
										value="${user.username}" /></option>
							</c:forEach>
						</select>
					</div>
				</div>
				<div class="form-group">
					<label for="description-modal">Beschreibung (Markdown wird
						unterstützt)</label>
					<textarea id="description-modal" name="description" rows="3"></textarea>
				</div>
			</div>

			<!-- Requirements Tab -->
			<div class="modal-tab-content" id="requirements">
				<h4>Personalbedarf</h4>
				<p>Legen Sie fest, welche Qualifikationen für dieses Event
					benötigt werden.</p>
				<div id="modal-requirements-container"></div>
				<button type="button" class="btn btn-small"
					id="modal-add-requirement-btn" style="margin-top: 1rem;">
					<i class="fas fa-plus"></i> Bedarf hinzufügen
				</button>
				<button type="button" class="btn btn-info" id="find-crew-btn"
					style="margin-top: 1rem; margin-left: 1rem;">
					<i class="fas fa-search"></i> Crew finden
				</button>
			</div>

			<!-- Reservations Tab -->
			<div class="modal-tab-content" id="reservations">
				<h4>Materialreservierung</h4>
				<p>Reservieren Sie Material aus dem Lager für dieses Event.</p>
				<div class="form-group">
					<label for="kit-selection-modal">Aus Kit hinzufügen</label> <select
						id="kit-selection-modal">
						<option value="">-- Kit auswählen --</option>
						<c:forEach var="kit" items="${allKits}">
							<option value="${kit.id}"><c:out value="${kit.name}" /></option>
						</c:forEach>
					</select>
				</div>
				<div id="modal-reservations-container"></div>
				<button type="button" class="btn btn-small"
					id="modal-add-reservation-btn" style="margin-top: 1rem;">
					<i class="fas fa-plus"></i> Material hinzufügen
				</button>
			</div>

			<!-- Attachments Tab -->
			<div class="modal-tab-content" id="attachments">
				<h4>Anhänge</h4>
				<ul id="modal-attachments-list" class="details-list"></ul>
				<div class="form-group">
					<label for="attachment-modal">Neuen Anhang hochladen</label> <input
						type="file" name="attachment" id="attachment-modal">
				</div>
				<div class="form-group">
					<label for="requiredRole-modal">Sichtbar für</label> <select
						name="requiredRole" id="requiredRole-modal">
						<option value="NUTZER" selected>Alle Nutzer</option>
						<option value="ADMIN">Nur Admins</option>
					</select>
				</div>
			</div>

			<!-- Custom Fields Tab -->
			<div class="modal-tab-content" id="custom-fields">
				<h4>Zusätzliche Anmeldefelder</h4>
				<p>Fügen Sie benutzerdefinierte Felder hinzu, die bei der
					Anmeldung abgefragt werden (z.B. T-Shirt Größe, Allergien etc.).</p>
				<div id="modal-custom-fields-container"></div>
				<button type="button" class="btn btn-small"
					id="modal-add-custom-field-btn" style="margin-top: 1rem;">
					<i class="fas fa-plus"></i> Feld hinzufügen
				</button>
			</div>

			<div style="margin-top: 1.5rem;">
				<button type="submit" class="btn btn-success">
					<i class="fas fa-save"></i> Event speichern
				</button>
			</div>
		</form>
	</div>
</div>

<!-- User Assignment Modal -->
<div class="modal-overlay" id="assign-users-modal">
	<div class="modal-content" style="max-width: 500px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="assign-users-modal-title">Team zuweisen</h3>
		<form id="assign-users-form"
			action="${pageContext.request.contextPath}/admin/veranstaltungen"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="assignUsers"> <input type="hidden"
				name="eventId" value="">
			<div id="user-checkboxes-container"
				style="max-height: 40vh; overflow-y: auto;">
				<!-- Checkboxes populated by JS -->
			</div>
			<button type="submit" class="btn btn-success"
				style="margin-top: 1rem;">
				<i class="fas fa-users"></i> Team finalisieren
			</button>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\main_footer.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
</main>
</div>
<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>
<script
	src="${pageContext.request.contextPath}/vendor/diff-match-patch/diff_match_patch.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="${pageContext.request.contextPath}/js/main.js"></script>
</body>
</html>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\main_header.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<!DOCTYPE html>
<html lang="de"
	data-theme="${not empty sessionScope.user.theme ? sessionScope.user.theme : 'light'}">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>${param.pageTitle}-TechnikTeam</title>
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet"
	href="${pageContext.request.contextPath}/css/style.css">
<link rel="icon"
	href="${pageContext.request.contextPath}/images/favicon.ico"
	type="image/x-icon">
<script>
	// This script runs immediately to prevent a "flash" of the wrong theme.
	const savedTheme = localStorage.getItem('theme')
			|| document.documentElement.dataset.theme || 'light';
	document.documentElement.setAttribute('data-theme', savedTheme);
</script>
<c:if test="${param.pageTitle == 'Kalender'}">
	<link
		href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css"
		rel="stylesheet" />
</c:if>
</head>
<body data-context-path="${pageContext.request.contextPath}"
	data-is-logged-in="${not empty sessionScope.user}"
	data-csrf-token="${sessionScope.csrfToken}"
	data-page="${not empty param.page ? param.page : ''}"
	data-all-permissions="${fn:escapeXml(not empty param.permissionsJson ? param.permissionsJson : '[]')}">

	<c:set var="showNav"
		value="${empty param.showNav or param.showNav == 'true'}" />
	<c:if test="${showNav}">
		<c:set var="user" value="${sessionScope.user}" />

		<aside class="sidebar">
			<header class="sidebar-header">
				<a href="${pageContext.request.contextPath}/home" class="logo">
					<i class="fas fa-bolt"></i> TechnikTeam
				</a>
			</header>
			<nav class="sidebar-nav">
				<ul>
					<c:set var="userSectionDrawn" value="false" />
					<c:set var="adminSectionDrawn" value="false" />
					<c:forEach var="navItem" items="${sessionScope.navigationItems}">
						<c:if test="${navItem.requiredPermission == null}">
							<c:if test="${not userSectionDrawn}">
								<li class="nav-section-title">Benutzerbereich</li>
								<c:set var="userSectionDrawn" value="true" />
							</c:if>
							<li><a
								href="${pageContext.request.contextPath}${navItem.url}"
								class="${pageContext.request.requestURI eq (pageContext.request.contextPath.concat(navItem.url)) ? 'active-nav-link' : ''}">
									<i class="fas ${navItem.icon} fa-fw"></i> ${navItem.label}
							</a></li>
						</c:if>
					</c:forEach>

					<c:forEach var="navItem" items="${sessionScope.navigationItems}">
						<c:if test="${not empty navItem.requiredPermission}">
							<c:if test="${not adminSectionDrawn}">
								<li class="nav-section-title">Admin-Bereich</li>
								<c:set var="adminSectionDrawn" value="true" />
							</c:if>
							<li><a
								href="${pageContext.request.contextPath}${navItem.url}"
								class="${pageContext.request.requestURI eq (pageContext.request.contextPath.concat(navItem.url)) ? 'active-nav-link' : ''}">
									<i class="fas ${navItem.icon} fa-fw"></i> ${navItem.label}
							</a></li>
						</c:if>
					</c:forEach>
				</ul>
			</nav>
			<div class="user-actions">
				<div class="theme-switcher desktop-only">
					<i class="fas fa-sun"></i> <label class="toggle-switch"> <input
						type="checkbox" id="theme-toggle-desktop"> <span
						class="slider"></span>
					</label> <i class="fas fa-moon"></i>
				</div>
				<hr style="margin: 1rem 0;" class="desktop-only">
				<div class="user-info">
					Angemeldet als: <strong>${user.username}</strong>
				</div>
				<div class="sidebar-controls">
					<a href="${pageContext.request.contextPath}/profil"
						class="btn btn-secondary btn-small" style="flex-grow: 1;">Profil</a>
					<a href="${pageContext.request.contextPath}/logout"
						id="logout-link" class="btn btn-danger-outline btn-small"
						style="flex-grow: 1;">Logout</a>
				</div>
			</div>
		</aside>

		<header class="mobile-header">
			<button class="mobile-nav-toggle" aria-label="Navigation umschalten">
				<span class="line line-1"></span> <span class="line line-2"></span>
				<span class="line line-3"></span>
			</button>
			<a href="${pageContext.request.contextPath}/home" class="mobile-logo">TechnikTeam</a>
			<div class="mobile-header-right">
				<div class="theme-switcher mobile-only">
					<i class="fas fa-sun"></i> <label class="toggle-switch"> <input
						type="checkbox" id="theme-toggle"> <span class="slider"></span>
					</label> <i class="fas fa-moon"></i>
				</div>
				<a href="${pageContext.request.contextPath}/profil"><i
					class="fas fa-user-circle" style="font-size: 1.5rem;"></i></a>
			</div>
		</header>
		<div class="page-overlay"></div>
	</c:if>

	<div class="main-content-wrapper">
		<main class="main-content">
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\message_banner.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:if test="${not empty sessionScope.successMessage}">
	<p class="success-message">
		<i class="fas fa-check-circle"></i>
		<c:out value="${sessionScope.successMessage}" />
	</p>
	<c:remove var="successMessage" scope="session" />
</c:if>

<c:if test="${not empty sessionScope.errorMessage}">
	<p class="error-message">
		<i class="fas fa-exclamation-triangle"></i>
		<c:out value="${sessionScope.errorMessage}" />
	</p>
	<c:remove var="errorMessage" scope="session" />
</c:if>

<c:if test="${not empty sessionScope.infoMessage}">
	<p class="info-message">
		<i class="fas fa-info-circle"></i>
		<c:out value="${sessionScope.infoMessage}" />
	</p>
	<c:remove var="infoMessage" scope="session" />
</c:if>

<c:if
	test="${not empty sessionScope.passwordResetUser and not empty sessionScope.passwordResetNewPassword}">
	<p class="password-reset-alert" id="password-reset-alert"
		style="word-wrap: break-word;">
		<i class="fas fa-key"></i> Passwort für '<strong><c:out
				value="${sessionScope.passwordResetUser}" /></strong>' wurde zurückgesetzt
		auf: <strong class="copyable-password"
			title="In Zwischenablage kopieren"><c:out
				value="${sessionScope.passwordResetNewPassword}" /></strong> (wurde in die
		Zwischenablage kopiert).
	</p>
	<c:remove var="passwordResetUser" scope="session" />
	<c:remove var="passwordResetNewPassword" scope="session" />
</c:if>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\storage_modals.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!-- Transaction Modal -->
<div class="modal-overlay" id="transaction-modal">
	<div class="modal-content" style="max-width: 450px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="transaction-modal-title">Aktion</h3>
		<form id="transaction-form"
			action="${pageContext.request.contextPath}/lager/transaktion"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="itemId" id="transaction-item-id">
			<div class="form-group">
				<label for="transaction-quantity">Anzahl</label> <input
					type="number" name="quantity" id="transaction-quantity" value="1"
					min="1" required>
			</div>
			<div class="form-group">
				<label for="transaction-notes">Notiz (optional)</label> <input
					type="text" name="notes" id="transaction-notes"
					placeholder="z.B. für Event XYZ">
			</div>
			<div class="form-group">
				<label for="transaction-eventId">Zuweisen zu Event
					(optional)</label> <select name="eventId" id="transaction-eventId">
					<option value="">Kein Event</option>
					<c:if test="${not empty activeEvents}">
						<c:forEach var="event" items="${activeEvents}">
							<option value="${event.id}">${event.name}</option>
						</c:forEach>
					</c:if>
				</select>
			</div>
			<div
				style="display: flex; justify-content: space-between; gap: 1rem;">
				<button type="submit" name="type" value="checkout"
					class="btn btn-danger" style="flex-grow: 1;">Entnehmen</button>
				<button type="submit" name="type" value="checkin"
					class="btn btn-success" style="flex-grow: 1;">Einräumen</button>
			</div>
		</form>
	</div>
</div>

<!-- Maintenance Modal -->
<div class="modal-overlay" id="maintenance-modal">
	<div class="modal-content" style="max-width: 450px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="maintenance-modal-title">Wartungs-Status</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="updateStatus"> <input type="hidden"
				name="id" id="maintenance-item-id">
			<div class="form-group">
				<label for="maintenance-status">Neuer Status</label> <select
					name="status" id="maintenance-status">
					<option value="IN_STORAGE">Zurück in den Bestand</option>
					<option value="MAINTENANCE">Zur Wartung</option>
				</select>
			</div>
			<div class="form-group">
				<label for="maintenance-notes">Notiz (z.B. was wurde
					gemacht?)</label>
				<textarea name="notes" id="maintenance-notes" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">Speichern</button>
		</form>
	</div>
</div>

<!-- Defect Modal -->
<div class="modal-overlay" id="defect-modal">
	<div class="modal-content" style="max-width: 450px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3>Defekt-Status bearbeiten</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="updateDefectStatus"> <input
				type="hidden" name="id" id="defect-item-id">

			<div class="form-group">
				<label for="defect-status">Status</label> <select name="status"
					id="defect-status" class="form-group">
					<option value="DEFECT">Defekt melden</option>
					<option value="UNREPAIRABLE">Nicht reparierbar</option>
				</select>
			</div>
			<div class="form-group">
				<label for="defective_quantity">Anzahl der betroffenen
					Artikel</label> <input type="number" name="quantity"
					id="defective_quantity" value="1" min="1" required>
			</div>
			<div class="form-group">
				<label for="defect_reason">Grund (optional)</label>
				<textarea name="reason" id="defect_reason" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>


<!-- Item Create/Edit Modal -->
<div class="modal-overlay" id="item-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3>Lagerartikel</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value=""> <input type="hidden" name="id"
				value="">

			<div class="form-group">
				<label for="name-modal">Name</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="location-modal">Ort</label> <input type="text"
						id="location-modal" name="location">
				</div>
				<div class="form-group">
					<label for="cabinet-modal">Schrank (optional)</label> <input
						type="text" id="cabinet-modal" name="cabinet">
				</div>
				<div class="form-group">
					<label for="compartment-modal">Fach (optional)</label> <input
						type="text" id="compartment-modal" name="compartment">
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="quantity-modal">Menge im Bestand</label> <input
						type="number" id="quantity-modal" name="quantity" min="0" required>
				</div>
				<div class="form-group">
					<label for="maxQuantity-modal">Max. Menge (für Status)</label> <input
						type="number" id="maxQuantity-modal" name="maxQuantity" min="0"
						required>
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="weight_kg-modal">Gewicht (kg)</label> <input
						type="text" id="weight_kg-modal" name="weight_kg"
						placeholder="z.B. 1.25">
				</div>
				<div class="form-group">
					<label for="price_eur-modal">Preis (€)</label> <input type="text"
						id="price_eur-modal" name="price_eur" placeholder="z.B. 49.99">
				</div>
			</div>
			<div class="form-group">
				<label for="imageFile-modal">Bild (optional)</label> <input
					type="file" name="imageFile" id="imageFile-modal" accept="image/*">
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\table_scripts.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- TABLE FILTERING LOGIC ---
    const filterInput = document.getElementById('table-filter');
    if (filterInput) {
        const searchableLists = document.querySelectorAll('.searchable-list');
        const searchableTables = document.querySelectorAll('.searchable-table');

        filterInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            
            searchableLists.forEach(list => {
                const items = list.querySelectorAll('[data-searchable-content]');
                items.forEach(item => {
                    const content = item.dataset.searchableContent.toLowerCase();
                    item.style.display = content.includes(searchTerm) ? '' : 'none';
                });
            });

            searchableTables.forEach(table => {
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const content = row.textContent.toLowerCase();
                    row.style.display = content.includes(searchTerm) ? '' : 'none';
                });
            });
        });
    }

    // --- TABLE SORTING LOGIC ---
    document.querySelectorAll('.sortable-table').forEach(table => {
        const headers = table.querySelectorAll('th.sortable');
        const tbody = table.querySelector('tbody');

        headers.forEach((header, index) => {
            header.addEventListener('click', () => {
                const rows = Array.from(tbody.querySelectorAll('tr'));
                const isAscending = !header.classList.contains('sorted-asc');
                const sortType = header.dataset.sortType || 'string';

                headers.forEach(h => h.classList.remove('sorted-asc', 'sorted-desc'));
                
                header.classList.toggle('sorted-asc', isAscending);
                header.classList.toggle('sorted-desc', !isAscending);

                rows.sort((a, b) => {
                    let valA = a.children[index].dataset.sortValue || a.children[index].textContent.trim();
                    let valB = b.children[index].dataset.sortValue || b.children[index].textContent.trim();
                    
                    if (sortType === 'number') {
                        valA = parseFloat(valA) || 0;
                        valB = parseFloat(valB) || 0;
                    }

                    if (valA < valB) return isAscending ? -1 : 1;
                    if (valA > valB) return isAscending ? 1 : -1;
                    return 0;
                });

                tbody.append(...rows);
            });
        });
    });
});
</script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\task_modal.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<div class="modal-overlay" id="task-modal">
	<div class="modal-content" style="max-width: 800px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="task-modal-title">Aufgabe verwalten</h3>
		<form id="task-modal-form"
			action="${pageContext.request.contextPath}/task-action" method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="save"> <input type="hidden"
				name="eventId" value="${event.id}"> <input type="hidden"
				id="task-id-modal" name="taskId">

			<div class="form-group">
				<label for="task-description-modal">Beschreibung</label> <input
					type="text" id="task-description-modal" name="description" required>
			</div>

			<div class="form-group">
				<label for="task-details-modal">Zusätzliche Details /
					Anleitung (optional)</label>
				<textarea id="task-details-modal" name="details" rows="3"></textarea>
			</div>

			<div class="form-group">
				<label for="task-display-order-modal">Anzeigereihenfolge</label> <input
					type="number" id="task-display-order-modal" name="displayOrder"
					value="10" min="0" required>
			</div>

			<div class="form-group" id="task-status-group" style="display: none;">
				<label for="task-status-modal">Status</label> <select
					id="task-status-modal" name="status">
					<option value="OFFEN">Offen</option>
					<option value="IN_ARBEIT">In Arbeit</option>
					<option value="ERLEDIGT">Erledigt</option>
					<option value="BLOCKIERT">Blockiert</option>
				</select>
			</div>

			<div class="card"
				style="margin: 1.5rem 0; background-color: var(--bg-color);">
				<h4 class="card-title">Zuweisung</h4>
				<div style="display: flex; gap: 1rem; margin-bottom: 1rem;">
					<label> <input type="radio" name="assignmentType"
						value="direct" checked> Direkte Zuweisung
					</label> <label> <input type="radio" name="assignmentType"
						value="pool"> Offener Pool
					</label>
				</div>
				<div id="direct-assignment-fields">
					<p>Wählen Sie die Benutzer aus, die dieser Aufgabe direkt
						zugewiesen sind.</p>
					<div id="task-user-checkboxes"
						style="max-height: 150px; overflow-y: auto; border: 1px solid var(--border-color); padding: 0.5rem; border-radius: 6px;">
						<!-- Checkboxes are populated by JS -->
					</div>
				</div>
				<div id="pool-assignment-fields" style="display: none;">
					<div class="form-group">
						<label for="task-required-persons-modal">Benötigte
							Personen</label> <input type="number" id="task-required-persons-modal"
							name="requiredPersons" value="1" min="1">
					</div>
				</div>
			</div>

			<div class="card"
				style="margin: 1.5rem 0; background-color: var(--bg-color);">
				<h4 class="card-title">Material & Kits</h4>
				<div id="task-items-container"></div>
				<button type="button" class="btn btn-small" id="add-task-item-btn">
					<i class="fas fa-plus"></i> Material hinzufügen
				</button>
				<div id="task-kits-container" style="margin-top: 1rem;"></div>
				<button type="button" class="btn btn-small" id="add-task-kit-btn"
					style="margin-top: 0.5rem;">
					<i class="fas fa-plus"></i> Kit hinzufügen
				</button>
			</div>

			<div style="display: flex; justify-content: space-between;">
				<button type="submit" class="btn btn-success">
					<i class="fas fa-save"></i> Aufgabe Speichern
				</button>
				<button type="button" class="btn btn-danger" id="delete-task-btn"
					style="display: none;">
					<i class="fas fa-trash"></i> Aufgabe Löschen
				</button>
			</div>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\user_modals.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<div class="modal-overlay" id="user-modal">
	<div class="modal-content" style="max-width: 800px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="user-modal-title">Benutzer</h3>

		<div class="modal-tabs">
			<button class="modal-tab-button active" data-tab="general-tab">Allgemein</button>
			<button class="modal-tab-button" data-tab="permissions-tab">Berechtigungen</button>
		</div>

		<form id="user-modal-form"
			action="${pageContext.request.contextPath}/admin/action/user"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				id="user-modal-action" name="action"> <input type="hidden"
				id="userId-modal" name="userId">

			<div class="modal-tab-content active" id="general-tab">
				<div class="form-group">
					<label for="username-modal">Benutzername</label> <input type="text"
						id="username-modal" name="username" required>
				</div>
				<div class="form-group" id="password-group">
					<label for="password-modal">Passwort</label>
					<div class="password-input-wrapper">
						<input type="password" id="password-modal" name="password"
							minlength="10"> <span class="password-toggle-icon">
							<i class="fas fa-eye"></i>
						</span>
					</div>
					<small class="text-muted">Muss 10+ Zeichen,
						Groß/Kleinbuchstaben, Zahlen & Sonderzeichen enthalten. Leer
						lassen, um es nicht zu ändern.</small>
				</div>
				<div class="responsive-dashboard-grid">
					<div class="form-group">
						<label for="role-modal">Rolle</label> <select name="roleId"
							id="role-modal" required>
							<c:forEach var="role" items="${allRoles}">
								<option value="${role.id}"><c:out
										value="${role.roleName}" /></option>
							</c:forEach>
						</select>
					</div>
					<div class="form-group">
						<label for="classYear-modal">Jahrgang</label> <input type="number"
							id="classYear-modal" name="classYear" placeholder="z.B. 2023">
					</div>
					<div class="form-group">
						<label for="className-modal">Klasse</label> <input type="text"
							id="className-modal" name="className" placeholder="z.B. 10b">
					</div>
				</div>
				<div class="form-group">
					<label for="email-modal">E-Mail (optional)</label> <input
						type="email" id="email-modal" name="email">
				</div>
			</div>

			<div class="modal-tab-content" id="permissions-tab">
				<h4>Individuelle Berechtigungen</h4>
				<p>Diese Berechtigungen gelten zusätzlich zu denen, die eine
					Rolle evtl. standardmäßig hat. Hier können granulare Rechte
					vergeben werden.</p>
				<div id="permissions-checkbox-container"
					style="max-height: 40vh; overflow-y: auto; padding: 0.5rem; border: 1px solid var(--border-color); border-radius: var(--border-radius);">
					<!-- Checkboxes will be populated by JS -->
				</div>
			</div>

			<button type="submit" class="btn" style="margin-top: 1.5rem;">
				<i class="fas fa-save"></i> Benutzer speichern
			</button>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\pom.xml
========================================================================

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.technikteam</groupId>
    <artifactId>TechnikTeam</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>TechnikTeam</name>
    <url>http://localhost:8080/</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <java.version>21</java.version>
        <guice.version>7.0.0</guice.version>
        <flyway.version>10.15.2</flyway.version>
        <caffeine.version>3.1.8</caffeine.version>
        <log4j.version>2.23.1</log4j.version>
        <jackson.version>2.17.1</jackson.version>
    </properties>

    <dependencies>
        <!-- Dependency Injection -->
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>${guice.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.inject.extensions</groupId>
            <artifactId>guice-servlet</artifactId>
            <version>${guice.version}</version>
        </dependency>

        <!-- Database -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway.version}</version>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-mysql</artifactId>
            <version>${flyway.version}</version>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>8.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
            <version>5.1.0</version>
        </dependency>
        
        <!-- Web & Servlet APIs -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>5.0.0</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.websocket</groupId>
            <artifactId>jakarta.websocket-api</artifactId>
            <version>2.1.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
            <version>2.0.0</version>
        </dependency>
        
        <!-- Utilities -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.10.1</version>
        </dependency>
        <dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-crypto</artifactId>
			<version>6.2.4</version> 
		</dependency>
	    <dependency>
		    <groupId>org.mnode.ical4j</groupId>
		    <artifactId>ical4j</artifactId>
		    <version>3.2.4</version>
		</dependency>
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
            <version>${caffeine.version}</version>
        </dependency>
        <dependency>
            <groupId>com.googlecode.java-diff-utils</groupId>
            <artifactId>diffutils</artifactId>
            <version>1.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.yubico</groupId>
            <artifactId>webauthn-server-core</artifactId>
            <version>2.2.0</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
		    <groupId>org.apache.logging.log4j</groupId>
		    <artifactId>log4j-layout-template-json</artifactId>
		    <version>${log4j.version}</version>
		</dependency>

        <!-- Jackson Dependencies (managed for Flyway compatibility) -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <!-- Frontend Dependencies (WebJars) -->
        <dependency>
            <groupId>org.webjars.npm</groupId>
            <artifactId>sortablejs</artifactId>
            <version>1.15.2</version>
        </dependency>
    </dependencies>

    <build>
        <finalName>TechnikTeam</finalName>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
            </plugin>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>