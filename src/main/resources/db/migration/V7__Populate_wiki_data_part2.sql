-- Flyway migration V7, Part 2

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/dao/AchievementDAO.java', '1.  **File Overview & Purpose**\n\n    This Data Access Object (DAO) is responsible for all database interactions related to achievements. It handles CRUD (Create, Read, Update, Delete) operations on the `achievements` table and manages the relationship between users and achievements in the `user_achievements` junction table.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It directly interacts with the database to persist and retrieve achievement data. It is exclusively called by the `AchievementService` and administrative servlets like `AdminAchievementServlet`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Used to inject the `DatabaseManager` for obtaining database connections.\n    *   `DatabaseManager`: Provides the connection pool for all database operations.\n    *   `Achievement` (Model): The data model object that this DAO creates and populates.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getAllAchievements()`**: Retrieves a list of all defined achievement templates from the `achievements` table.\n    *   **`getAchievementById(int id)`**: Fetches a single achievement template by its primary key.\n    *   **`createAchievement(Achievement achievement)`**: Inserts a new achievement template into the `achievements` table.\n    *   **`updateAchievement(Achievement achievement)`**: Updates an existing achievement template''s name, description, or icon. The `achievement_key` is immutable.\n    *   **`deleteAchievement(int id)`**: Deletes an achievement template from the `achievements` table.\n    *   **`getAchievementsForUser(int userId)`**: Retrieves all achievements that a specific user has earned, joining `achievements` and `user_achievements` tables. It also populates the `earnedAt` timestamp.\n    *   **`grantAchievementToUser(int userId, String achievementKey)`**: Grants an achievement to a user by inserting a record into the `user_achievements` table. It first checks if the user already has the achievement to prevent duplicates.\n    *   **`hasAchievement(int userId, String achievementKey)`**: Checks if a user has already earned a specific achievement.\n    *   **`mapResultSetToAchievement(ResultSet rs)`**: A private helper method to map a row from a `ResultSet` to an `Achievement` model object, reducing code duplication.'),
('src/main/java/de/dao/AdminLogDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all interactions with the `admin_logs` table. Its sole purpose is to create and retrieve audit log entries, providing a history of administrative actions performed within the application.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It provides a structured way for the `AdminLogService` to persist audit trails to the database.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `AdminLog` (Model): The data model representing a single log entry.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createLog(AdminLog log)`**\n        *   **Method Signature:** `public void createLog(AdminLog log)`\n        *   **Purpose:** Inserts a new log entry into the `admin_logs` table.\n        *   **Parameters:**\n            *   `log` (AdminLog): The log entry object containing the admin''s username, action type, and details.\n        *   **Returns:** void.\n        *   **Side Effects:** Writes a new record to the database. It includes robust error logging to ensure that a failure to log does not crash the primary operation.\n\n    *   **`getAllLogs()`**\n        *   **Method Signature:** `public List<AdminLog> getAllLogs()`\n        *   **Purpose:** Retrieves all log entries from the database, ordered from newest to oldest.\n        *   **Parameters:** None.\n        *   **Returns:** A `List` of `AdminLog` objects.\n        *   **Side Effects:** Performs a database read.\n\n    *   **`getRecentLogs(int limit)`**\n        *   **Method Signature:** `public List<AdminLog> getRecentLogs(int limit)`\n        *   **Purpose:** Retrieves the most recent log entries up to a specified limit. Used for dashboard widgets.\n        *   **Parameters:**\n            *   `limit` (int): The maximum number of log entries to retrieve.\n        *   **Returns:** A `List` of `AdminLog` objects.\n        *   **Side Effects:** Performs a database read with a `LIMIT` clause.'),
('src/main/java/de/dao/AttachmentDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO is responsible for managing file attachments associated with parent entities like Events or Meetings. It provides a unified interface for CRUD operations on the `attachments` table, abstracting away the polymorphic relationship defined by the `parent_type` and `parent_id` columns.\n\n2.  **Architectural Role**\n\n    This is a **DAO (Data Access) Tier** class. It is called by services (`EventService`, `MeetingService`) and servlets (`AdminEventServlet`, `AdminMeetingServlet`) that need to manage attachments for their respective entities.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `Attachment` (Model): The data model object this DAO works with.\n\n4.  **In-Depth Breakdown**\n\n    *   **`addAttachment(Attachment attachment, Connection conn)`**: Inserts a new attachment record into the database within an existing transaction.\n    *   **`getAttachmentsForParent(String parentType, int parentId, String userRole)`**: Retrieves all attachments for a specific parent (e.g., all attachments for Event with ID 5). It filters the results based on the user''s role (`ADMIN` or `NUTZER`), ensuring non-admins cannot see admin-only files.\n    *   **`getAttachmentById(int attachmentId)`**: Fetches a single attachment''s metadata by its unique ID. This is used by the `DownloadServlet` to verify existence and get the file path.\n    *   **`deleteAttachment(int attachmentId)`**: Deletes an attachment record from the database. Note: This does not delete the physical file from the disk; that is the responsibility of the calling service or servlet.\n    *   **`mapResultSetToAttachment(ResultSet rs)`**: A private helper method to convert a database row into an `Attachment` object.'),
('src/main/java/de/dao/MaintenanceLogDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all database interactions with the `maintenance_log` table. Its purpose is to create and retrieve maintenance history for specific inventory items, tracking actions like repairs or marking an item for maintenance.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `StorageService` and `AdminStorageServlet` to log maintenance activities and by the `StorageItemDetailsServlet` to display an item''s maintenance history.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `MaintenanceLogEntry` (Model): The data model representing a single maintenance log entry.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createLog(MaintenanceLogEntry log)`**\n        *   **Method Signature:** `public boolean createLog(MaintenanceLogEntry log)`\n        *   **Purpose:** Inserts a new maintenance record into the `maintenance_log` table.\n        *   **Parameters:**\n            *   `log` (MaintenanceLogEntry): An object containing the item ID, user ID, action taken, notes, and any associated cost.\n        *   **Returns:** `true` on successful insertion, `false` otherwise.\n        *   **Side Effects:** Writes a new record to the database.\n\n    *   **`getHistoryForItem(int itemId)`**\n        *   **Method Signature:** `public List<MaintenanceLogEntry> getHistoryForItem(int itemId)`\n        *   **Purpose:** Retrieves the complete maintenance history for a specific storage item, ordered from newest to oldest. It joins with the `users` table to get the username of the person who performed the action.\n        *   **Parameters:**\n            *   `itemId` (int): The ID of the storage item.\n        *   **Returns:** A `List` of `MaintenanceLogEntry` objects.\n        *   **Side Effects:** Performs a database read.'),
('src/main/java/de/dao/MeetingAttendanceDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO handles all database interactions for the `meeting_attendance` table. It is responsible for tracking which users have attended specific meetings, which is the basis for granting qualifications.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `AdminAttendanceServlet` and `MatrixServlet` to update and display attendance records.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `MeetingAttendance` (Model): The data model representing a user''s attendance at a meeting.\n\n4.  **In-Depth Breakdown**\n\n    *   **`setAttendance(int userId, int meetingId, boolean attended, String remarks)`**\n        *   **Method Signature:** `public boolean setAttendance(int userId, int meetingId, boolean attended, String remarks)`\n        *   **Purpose:** Sets or updates a user''s attendance status for a meeting. It uses an `INSERT ... ON DUPLICATE KEY UPDATE` SQL statement, which allows this single method to handle both initial registration and subsequent changes without needing to check for a pre-existing record.\n        *   **Parameters:** All parameters correspond to the columns in the `meeting_attendance` table.\n        *   **Returns:** `true` on success, `false` on SQL error.\n        *   **Side Effects:** Writes or updates a record in the database.\n\n    *   **`getAllAttendance()`**\n        *   **Method Signature:** `public List<MeetingAttendance> getAllAttendance()`\n        *   **Purpose:** Retrieves all attendance records from the database. This is used by the `MatrixServlet` to build a comprehensive map of all user attendance for display in the qualification matrix.\n        *   **Parameters:** None.\n        *   **Returns:** A `List` of all `MeetingAttendance` objects.\n        *   **Side Effects:** Performs a database read.\n\n    *   **`mapResultSetToAttendance(ResultSet rs)`**: A private helper method to map a database row to a `MeetingAttendance` object.'),
('src/main/java/de/dao/MeetingDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all database operations for the `meetings` table. It handles the CRUD lifecycle of individual, schedulable meeting instances, which are always children of a parent `Course`. It also manages user sign-ups for meetings via the `meeting_attendance` table.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It is primarily used by the `AdminMeetingServlet` for managing meetings and by public-facing servlets like `MeetingServlet` and `MeetingDetailsServlet` to display meeting information to users.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `Meeting`, `User` (Models): The data models this DAO works with.\n\n4.  **In-Depth Breakdown**\n\n    *   **CRUD Operations (`createMeeting`, `getMeetingById`, `updateMeeting`, `deleteMeeting`)**: Standard methods for managing meeting records. `deleteMeeting` will cascade-delete all associated attendance records.\n    *   **Listing Methods (`getMeetingsForCourse`, `getAllMeetings`, `getAllUpcomingMeetings`)**: Various methods to retrieve lists of meetings, either for a specific course, for all courses, or only upcoming ones for the calendar view. These queries join with `courses` and `users` to enrich the `Meeting` object with the parent course name and leader''s username.\n    *   **User-Specific Queries (`getUpcomingMeetingsForUser`, `isUserAssociatedWithMeeting`)**:\n        *   `getUpcomingMeetingsForUser`: Fetches upcoming meetings for a specific user and calculates their attendance status (`ANGEMELDET`, `ABGEMELDET`, or `OFFEN`) for each.\n        *   `isUserAssociatedWithMeeting`: A simple check to see if a user is signed up for a meeting, used for authorization checks.\n    *   **`mapResultSetToMeeting(ResultSet rs)`**: A private helper to populate a `Meeting` object from a database row, including data from joined tables.'),
('src/main/java/de/dao/PasskeyDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO is responsible for all database interactions related to WebAuthn/Passkey credentials. It handles the storage, retrieval, and management of public key credentials in the `user_passkeys` table, which enables passwordless authentication for users.\n\n2.  **Architectural Role**\n\n    This class is a critical component of the **DAO (Data Access) Tier**. It provides the persistence layer for the `PasskeyService`, allowing it to manage the lifecycle of user credentials securely.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `PasskeyCredential` (Model): The data model representing a stored credential.\n\n4.  **In-Depth Breakdown**\n\n    *   **`saveCredential(PasskeyCredential credential)`**: Inserts a new passkey record into the database after a user successfully completes the registration ceremony.\n    *   **`getCredentialsByUserId(int userId)`**: Retrieves all passkeys registered by a specific user. This is used during the authentication process where the server can suggest known credentials to the browser.\n    *   **`getCredentialById(String credentialId)`**: Fetches a single credential by its unique `credential_id` (a Base64URL string). This is the primary lookup method during an authentication ceremony to verify a user''s login attempt.\n    *   **`deleteCredential(int credentialDbId, int userId)`**: Removes a passkey from the database. It requires both the internal database ID and the user''s ID to ensure a user can only delete their own credentials.\n    *   **`updateSignatureCount(String credentialId, long newSignatureCount)`**: Updates the signature counter for a credential after a successful authentication. This is a security measure to help detect cloned authenticators.\n    *   **`mapResultSetToCredential(ResultSet rs)`**: A private helper method to map a database row to a `PasskeyCredential` object.'),
('src/main/java/de/dao/PermissionDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO provides read-only access to the application''s permission system. Its primary responsibilities are to fetch all available permission definitions from the `permissions` table and to retrieve the specific set of permissions granted to an individual user from the `user_permissions` junction table.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `UserDAO` to populate a `User` object with their complete set of permissions upon login, and by the `AdminUserServlet` to display the list of all possible permissions in the user editing modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `Permission` (Model): The data model representing a single permission definition.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getAllPermissions()`**\n        *   **Method Signature:** `public List<Permission> getAllPermissions()`\n        *   **Purpose:** Retrieves a complete list of all permissions defined in the system.\n        *   **Parameters:** None.\n        *   **Returns:** A `List` of `Permission` objects.\n        *   **Side Effects:** Performs a database read on the `permissions` table.\n\n    *   **`getPermissionIdsForUser(int userId)`**\n        *   **Method Signature:** `public Set<Integer> getPermissionIdsForUser(int userId)`\n        *   **Purpose:** Fetches the set of primary key IDs for all permissions directly assigned to a specific user.\n        *   **Parameters:**\n            *   `userId` (int): The ID of the user.\n        *   **Returns:** A `Set` of integer permission IDs.\n        *   **Side Effects:** Performs a database read on the `user_permissions` table.'),
('src/main/java/de/dao/ProfileChangeRequestDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages the lifecycle of user profile change requests. It handles all database operations for the `profile_change_requests` table, including creating new requests, fetching pending requests for administrators, and updating their status upon approval or denial.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It is used by the `ProfileServlet` when a user submits a change request and by the `AdminChangeRequestServlet` and its associated `Action` classes (`ApproveChangeAction`, `DenyChangeAction`) for processing these requests.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `ProfileChangeRequest` (Model): The data model for a change request.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createRequest(ProfileChangeRequest request)`**: Inserts a new profile change request into the database with a ''PENDING'' status.\n    *   **`getRequestById(int id)`**: Retrieves a single request by its ID, joining with the `users` table to get the requester''s and reviewer''s usernames.\n    *   **`getPendingRequests()`**: Fetches all requests that currently have a ''PENDING'' status, for display on the admin requests page.\n    *   **`hasPendingRequest(int userId)`**: A quick check to determine if a user already has a pending request, used to prevent them from submitting multiple requests.\n    *   **`updateRequestStatus(int requestId, String status, int adminId)`**: Updates a request''s status to ''APPROVED'' or ''DENIED'', and records which admin reviewed it and when.\n    *   **`mapResultSetToRequest(ResultSet rs)`**: A private helper method to map a database row to a `ProfileChangeRequest` object.'),
('src/main/java/de/dao/ReportDAO.java', '1.  **File Overview & Purpose**\n\n    This is a specialized DAO designed for generating analytical reports and summaries. Unlike other DAOs that focus on CRUD operations for single entities, this class contains complex, aggregate SQL queries that summarize data across multiple tables for administrative dashboards and dedicated report pages.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `AdminReportServlet` and `AdminDashboardService` to fetch data for visualization and export. It encapsulates the most complex SQL logic in the application.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getEventParticipationSummary()`**: Calculates the number of assigned participants for each event.\n    *   **`getUserActivityStats()`**: Aggregates statistics for each user, counting how many events they''ve signed up for and how many meetings they''ve attended.\n    *   **`getInventoryUsageFrequency()`**: Calculates the total number of times each inventory item has been checked out.\n    *   **`getTotalInventoryValue()`**: Calculates the total monetary value of all items in stock by multiplying quantity by price.\n    *   **`getEventCountByMonth(int months)`**: Generates a time-series dataset of how many events occurred each month over a given period, used for the trend chart on the dashboard.\n    *   **`getUserParticipationStats(int limit)`**: Retrieves the top N most active users based on the number of events they have been assigned to.');
COMMIT;