-- Flyway migration V14, Part 9

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/technikteam/servlet/admin/action/Action.java', '1.  **File Overview & Purpose**\n\n    This is the interface that defines the contract for the Command pattern used in the `FrontControllerServlet`. Each class that implements this interface represents a single, self-contained, executable administrative action. This pattern promotes a clean separation of concerns, making the `FrontControllerServlet` a simple dispatcher and encapsulating all business logic for an action in its own class.\n\n2.  **Architectural Role**\n\n    This interface is a core part of the **Web/Controller Tier**''s design. It defines the structure for the command objects that are managed by Guice and executed by the Front Controller.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `ApiResponse` (Model): The standardized response object that all actions must return.\n    *   **Jakarta Servlet API**: For the `HttpServletRequest` and `HttpServletResponse` parameters.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Method Signature:** `ApiResponse execute(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException`\n        *   **Purpose:** This is the single method that all action classes must implement. It contains the complete logic for processing a specific request, including parameter validation, authorization checks, calls to service or DAO layers, and constructing the final `ApiResponse`.\n        *   **Parameters:**\n            *   `request`: The HTTP request object, providing access to parameters, the session, etc.\n            *   `response`: The HTTP response object, which can be used to send errors directly if needed.\n        *   **Returns:** An `ApiResponse` object summarizing the outcome of the action.'),
('src/main/java/de/technikteam/servlet/admin/action/ApproveChangeAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the business logic for approving a user''s profile change request. It retrieves the request, applies the changes to the target user''s profile, updates the request status, and triggers a real-time notification to force the user to log out for security reasons.\n\n2.  **Architectural Role**\n\n    This class is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It coordinates between the `ProfileChangeRequestDAO` and `UserDAO` to perform a multi-step, state-changing operation.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the necessary DAOs and services.\n    *   `ProfileChangeRequestDAO`: To fetch the request and update its status.\n    *   `UserDAO`: To fetch the user to be updated and save the changes.\n    *   `AdminLogService`: To create an audit trail for the approval.\n    *   `NotificationService`: To send a real-time logout notification to the affected user.\n    *   `SessionManager`: To invalidate all of the user''s active sessions.\n    *   **Gson**: To deserialize the `requestedChanges` JSON string into a `Map`.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Performs the approval logic.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_UPDATE` permission.\n            2.  **Data Retrieval:** Fetches the `ProfileChangeRequest` and the target `User` object.\n            3.  **Apply Changes:** It deserializes the JSON string of requested changes into a `Map`. It then iterates through this map and applies the new values to the `userToUpdate` object.\n            4.  **Database Updates:** It calls `userDAO.updateUser()` to save the changes and `requestDAO.updateRequestStatus()` to mark the request as \"APPROVED\".\n            5.  **Logging & Notification:** If the updates are successful, it logs the action, sends a real-time notification to the user, and calls `SessionManager.invalidateSessionsForUser()` to terminate all of the user''s sessions, forcing them to log back in and get a fresh user object.\n            6.  **Response:** Returns an `ApiResponse` indicating success or failure.'),
('src/main/java/de/technikteam/servlet/admin/action/CreateUserAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for creating a new user. It handles parameter validation, checks the password against the security policy, and calls the `UserService` to perform the transactional creation of the user and their permissions.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It acts as a controller for the user creation process, delegating the core transactional logic to the `UserService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserService` and `RoleDAO`.\n    *   `UserService`: The service that handles the transactional creation of a user and their permissions.\n    *   `RoleDAO`: Used to enrich the response object with the role name after creation.\n    *   `PasswordPolicyValidator`: To ensure the new user''s password meets security standards.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** The main execution method for the create user action.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_CREATE` permission.\n            2.  **Parameter Retrieval:** Gets all user data (username, password, role, etc.) and permission IDs from the request.\n            3.  **Password Validation:** Calls `PasswordPolicyValidator.validate()` on the new password. If it fails, it immediately returns an error `ApiResponse`.\n            4.  **Object Creation:** Creates a new `User` model object and populates it with the form data.\n            5.  **Service Call:** Calls `userService.createUserWithPermissions()`, passing in the new user object, the password, and the permission IDs. This service method handles the database transaction.\n            6.  **Response:** If the service call is successful (returns a new user ID), it enriches the `User` object with its new role name and returns it in a successful `ApiResponse`. Otherwise, it returns an error response.'),
('src/main/java/de/technikteam/servlet/admin/action/DeleteFeedbackAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for deleting a feedback submission. It handles the database operation and logs the action.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is triggered by an AJAX call from the admin feedback board UI.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FeedbackSubmissionDAO` and `AdminLogService`.\n    *   `FeedbackSubmissionDAO`: The DAO used to perform the deletion.\n    *   `AdminLogService`: To create an audit trail of the deletion.\n    *   `NotificationService`: To broadcast a UI update to other connected admins.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Deletes a feedback submission record.\n        *   **Logic:**\n            1.  **Authorization:** Ensures the user has admin access.\n            2.  **Parameter Parsing:** Retrieves the `submissionId` from the request.\n            3.  **Database Deletion:** Calls `submissionDAO.deleteSubmission()`.\n            4.  **Logging & Notification:** If the deletion is successful, it logs the action and broadcasts a `feedback_deleted` UI update via the `NotificationService` so that the item disappears from the board for all other watching admins.\n            5.  **Response:** Returns an `ApiResponse` indicating success or failure.'),
('src/main/java/de/technikteam/servlet/admin/action/DeleteUserAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for deleting a user account. It includes several important security checks to prevent administrators from deleting themselves or other higher-privileged administrators.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It handles the user deletion process, which is a critical and destructive action.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserDAO` and `AdminLogService`.\n    *   `UserDAO`: The DAO used to delete the user record.\n    *   `AdminLogService`: To create an audit trail of the deletion.\n    *   `NotificationService`: To broadcast a UI update to other connected admins.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Performs a secure deletion of a user account.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the performing admin has the `USER_DELETE` permission.\n            2.  **Self-Deletion Check:** It verifies that the admin is not trying to delete their own account (`loggedInAdmin.getId() == userIdToDelete`).\n            3.  **Privilege Escalation Check:** It fetches the user to be deleted and checks if they have the master `ACCESS_ADMIN_PANEL` permission. If so, it only allows the deletion if the *performing* admin also has this master permission. This prevents a lower-level admin from deleting a superuser.\n            4.  **Database Deletion:** If all checks pass, it calls `userDAO.deleteUser()`.\n            5.  **Logging & Notification:** If the deletion is successful, it logs the action and broadcasts a `user_deleted` UI update so the user is removed from the user list for all watching admins.\n            6.  **Response:** Returns an `ApiResponse` indicating success or failure.'),
('src/main/java/de/technikteam/servlet/admin/action/DenyChangeAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for denying a user''s profile change request. It updates the request''s status in the database to \"DENIED\" and creates an audit log entry.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is called via an AJAX request from the admin requests page.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `ProfileChangeRequestDAO` and `AdminLogService`.\n    *   `ProfileChangeRequestDAO`: The DAO used to fetch the request and update its status.\n    *   `AdminLogService`: To create an audit trail of the denial.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Processes the denial of a change request.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_UPDATE` permission.\n            2.  **Data Validation:** It retrieves the request by its ID and ensures it is still in a \"PENDING\" state to prevent race conditions.\n            3.  **Database Update:** It calls `requestDAO.updateRequestStatus()`, passing the new status \"DENIED\" and the admin''s ID.\n            4.  **Logging:** If the update is successful, it logs the denial action.\n            5.  **Response:** Returns an `ApiResponse` indicating success or failure.'),
('src/main/java/de/technikteam/servlet/admin/action/GetFeedbackDetailsAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class is a simple data retrieval command. Its sole purpose is to fetch the full details of a single feedback submission from the database and return it as the data payload in an `ApiResponse`.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It serves as an API endpoint for the client-side JavaScript (`admin_feedback.js`) to populate the feedback details modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FeedbackSubmissionDAO`.\n    *   `FeedbackSubmissionDAO`: The DAO used to retrieve the feedback entry by its ID.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Fetches and returns the details of one feedback submission.\n        *   **Logic:**\n            1.  It parses the `submissionId` from the request parameters.\n            2.  It calls `submissionDAO.getSubmissionById()`.\n            3.  If a submission is found, it returns an `ApiResponse.success` with the `FeedbackSubmission` object as the data payload.\n            4.  If no submission is found, it returns an `ApiResponse.error`.'),
('src/main/java/de/technikteam/servlet/admin/action/ResetPasswordAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class handles the administrative function of resetting a user''s password. It generates a new, secure random password, updates the user''s password hash in the database, and returns the new password to the admin so it can be communicated to the user.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is a critical security-related action.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserDAO` and `AdminLogService`.\n    *   `UserDAO`: Used to save the new password hash.\n    *   `AdminLogService`: To create an audit trail of the password reset.\n    *   `java.security.SecureRandom`: Used to generate a cryptographically strong random password.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Resets a user''s password.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_PASSWORD_RESET` permission.\n            2.  It fetches the target `User` object to ensure it exists.\n            3.  It calls the private `generateRandomPassword()` method to create a new, compliant password.\n            4.  It calls `userDAO.changePassword()` to hash and save the new password.\n            5.  If successful, it logs the action and returns an `ApiResponse.success`. The new password is included in the response''s data payload so the client-side script can display it to the admin.\n\n    *   **`generateRandomPassword(int length)`**: A private helper method that generates a secure, random password of a given length, containing a mix of character types.'),
('src/main/java/de/technikteam/servlet/admin/action/UnlockUserAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class provides the functionality to manually unlock a user account that has been locked due to too many failed login attempts. It interacts with the static `LoginAttemptManager` to clear the lockout status for a given username.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It provides an administrative override for the brute-force protection mechanism.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `AdminLogService`.\n    *   `LoginServlet.LoginAttemptManager`: The static inner class that manages lockout state.\n    *   `AdminLogService`: To create an audit trail of the unlock action.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Unlocks a user account.\n        *   **Logic:**\n            1.  **Authorization:** Ensures the performing user is a full admin (`hasAdminAccess()`).\n            2.  It retrieves the `usernameToUnlock` from the request.\n            3.  It calls the static method `LoginServlet.LoginAttemptManager.clearLoginAttempts(usernameToUnlock)`, which removes all lockout and failed attempt records for that user from the in-memory maps.\n            4.  It logs the action and returns an `ApiResponse.success`.');
COMMIT;