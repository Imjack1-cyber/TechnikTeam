-- Flyway migration V15, Part 10

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/servlet/admin/action/UpdateFeedbackOrderAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class handles the complex logic of updating the feedback board after a drag-and-drop operation. It receives the ID of the moved item, its new status (based on the column it was dropped into), and the new order of all items in that destination column. It performs these updates within a single database transaction.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the server-side endpoint for the drag-and-drop functionality on the feedback Kanban board.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FeedbackSubmissionDAO`, `AdminLogService`, and `DatabaseManager`.\n    *   `DatabaseManager`: To manage the database transaction.\n    *   `FeedbackSubmissionDAO`: Provides the transactional methods `updateStatus` and `updateOrderForStatus`.\n    *   `AdminLogService`: For auditing the reorder action.\n    *   **Gson**: For deserializing the JSON payload from the client.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Persists the new state of the Kanban board after a drag-and-drop.\n        *   **Logic:**\n            1.  **Transaction Management:** It opens a database connection and disables auto-commit.\n            2.  **Payload Parsing:** It retrieves the JSON payload containing the `submissionId`, `newStatus`, and the array of `orderedIds` for the destination column.\n            3.  **Database Updates:** It performs two separate updates within the transaction:\n                *   Calls `submissionDAO.updateStatus()` to change the status of the card that was moved.\n                *   Calls `submissionDAO.updateOrderForStatus()` with the list of all IDs in the destination column to perform a batch update of their `display_order`.\n            4.  **Commit/Rollback:** It commits the transaction if both operations succeed, or rolls back if an error occurs.\n            5.  **Logging & Response:** It logs the action and returns an `ApiResponse`.'),
('src/main/java/de/servlet/admin/action/UpdateFeedbackStatusAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class handles updates to a feedback submission made via the details modal (not via drag-and-drop). It allows an admin to change a submission''s status and its optional display title.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the endpoint for the save button in the feedback details modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FeedbackSubmissionDAO` and `AdminLogService`.\n    *   `FeedbackSubmissionDAO`: The DAO used to update the record.\n    *   `AdminLogService`: For auditing the status change.\n    *   `NotificationService`: To broadcast a UI update to other connected admins.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Updates a feedback submission''s details.\n        *   **Logic:**\n            1.  **Authorization:** Ensures the user is an admin.\n            2.  **Parameter Parsing:** Retrieves `submissionId`, `newStatus`, and `displayTitle` from the request.\n            3.  **Database Update:** Calls `submissionDAO.updateStatusAndTitle()` to persist the changes.\n            4.  **Logging & Notification:** If successful, it logs the action and broadcasts a `feedback_status_updated` UI update to other clients, so they see the change in real-time.\n            5.  **Response:** Returns a standard `ApiResponse`.'),
('src/main/java/de/servlet/admin/action/UpdateUserAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for updating an existing user''s profile and permissions. It constructs a `User` object with the new data and calls the `UserService` to perform the transactional update.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the endpoint for the \"Save\" button in the user edit modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects `UserDAO`, `RoleDAO`, `UserService`, and `AdminLogService`.\n    *   `UserService`: The service that handles the transactional update of a user and their permissions.\n    *   `UserDAO`: To fetch the original user data for logging and comparison.\n    *   `AdminLogService`: To create a detailed audit log of what was changed.\n    *   `NotificationService`: To broadcast the user update to other clients.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** The main execution method for the update user action.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_UPDATE` permission.\n            2.  **Fetch Original User:** Retrieves the original `User` object from the database to compare against the new values.\n            3.  **Build Updated User:** Creates a new `User` object and populates it with the data from the form submission.\n            4.  **Change Detection:** It compares each field of the new user object with the original one and builds a detailed `changes` string for the audit log (e.g., \"Benutzername von ''old'' zu ''new'', Rolle-ID von ''1'' zu ''3'', ...\").\n            5.  **Service Call:** Calls `userService.updateUserWithPermissions()` to perform the transactional database update.\n            6.  **Session Update (Self-Edit):** If an admin updates their own profile, it refreshes the `User` object in their session to immediately reflect the changes.\n            7.  **Logging & Notification:** It logs the action with the detailed `changes` string and broadcasts a `user_updated` UI update.\n            8.  **Response:** Returns an `ApiResponse.success` with the refreshed user object as the data payload.'),
('src/main/java/de/servlet/admin/api/AdminTodoApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a complete JSON API for the administrative To-Do list feature. It handles all CRUD and reordering operations for To-Do categories and tasks, allowing the frontend (`admin_todo.js`) to manage the entire feature asynchronously without full page reloads.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (specifically, the API sub-layer). It receives AJAX requests, validates them, calls the `TodoService` to perform the business logic and database operations, and returns a standardized `ApiResponse` in JSON format.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `TodoService`.\n    *   `TodoService`: The service layer component that contains the transactional logic for all To-Do list operations.\n    *   **Gson**: Used for both deserializing incoming JSON payloads (for the `doPut` method) and serializing the `ApiResponse` for the response.\n    *   `CSRFUtil`: For security validation on all state-changing requests (POST, PUT, DELETE).\n\n4.  **In-Depth Breakdown**\n\n    This servlet implements `doGet`, `doPost`, `doPut`, and `doDelete` to correspond to RESTful principles.\n\n    *   **`doGet(...)`**: Fetches and returns the entire list of categories with their nested tasks as a JSON array.\n    *   **`doPost(...)`**: Handles the creation of new items. It uses an `action` parameter to distinguish between creating a category (`\"createCategory\"`) and creating a task (`\"createTask\"`).\n    *   **`doPut(...)`**: Handles updates. It reads a JSON payload from the request body and uses an `action` parameter within that payload to differentiate between updating a task''s content/status (`\"updateTask\"`) and reordering items (`\"reorder\"`).\n    *   **`doDelete(...)`**: Handles deletion. It checks for either a `taskId` or `categoryId` parameter in the URL to determine what to delete.\n    *   **`sendJsonResponse(...)`**: A private helper method to standardize the process of setting the HTTP status code, content type, and writing the JSON response.'),
('src/main/java/de/servlet/admin/api/CrewFinderApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves a specialized JSON API endpoint for the \"Crew Finder\" feature. Given an event ID, it identifies all users who are both qualified (meet all skill requirements) and available (not assigned to a conflicting event) for that specific event.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is called via an AJAX request from the event creation/editing modal in `admin_events_list.js`. It interacts directly with the `EventDAO` to execute the complex query required.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO`.\n    *   `EventDAO`: Contains the `getQualifiedAndAvailableUsersForEvent()` method, which performs the core database query.\n    *   **Gson**: Used to serialize the resulting list of `User` objects into a JSON array.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the GET request to find available crew members.\n        *   **Logic:**\n            1.  **Parameter Validation:** It requires an `eventId` parameter.\n            2.  **Authorization:** It performs a crucial authorization check to ensure the requesting user is either an admin or the leader of the specified event.\n            3.  **Data Fetching:** It calls `eventDAO.getQualifiedAndAvailableUsersForEvent(eventId)`. This single DAO call encapsulates the complex SQL logic involving subqueries and joins to determine user qualification and availability.\n            4.  **JSON Response:** It serializes the list of qualified `User` objects into JSON and writes it to the response.'),
('src/main/java/de/servlet/api/AdminDashboardApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet acts as the JSON API endpoint for the dynamic widgets on the administrative dashboard. It is designed to be called periodically via AJAX from the client-side to refresh the dashboard with the latest data.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is the data source for the `admin_dashboard.js` script. It delegates the task of data aggregation to the `AdminDashboardService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `AdminDashboardService`.\n    *   `AdminDashboardService`: The service that contains the business logic for gathering all the necessary dashboard data.\n    *   **Gson**: Used to serialize the `DashboardDataDTO` into a JSON object.\n    *   `LocalDateTimeAdapter`: A custom Gson adapter required to correctly serialize `LocalDateTime` objects within the DTO.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for dashboard data.\n        *   **Logic:**\n            1.  It calls `dashboardService.getDashboardData()` to get the fully populated `DashboardDataDTO`.\n            2.  It serializes this DTO object into a JSON string.\n            3.  It sets the response content type to `application/json` and writes the JSON string to the response.'),
('src/main/java/de/servlet/api/CalendarApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves as a JSON API endpoint to provide event and meeting data for a full-featured calendar component on the client side. It fetches all upcoming events and meetings from the respective DAOs and formats them into a structure that is compatible with libraries like FullCalendar.js.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as a dedicated data source for the client-side calendar view, responding to AJAX requests from the `calendar.js` script. It directly interacts with the `EventDAO` and `MeetingDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO` and `MeetingDAO`.\n    *   `EventDAO`, `MeetingDAO`: DAOs used to fetch all active and upcoming calendar entries.\n    *   **Gson**: Used to serialize the list of calendar entries into a JSON array.\n    *   `LocalDateTimeAdapter`: A custom Gson adapter to ensure `LocalDateTime` objects are serialized into the correct ISO 8601 format that FullCalendar can parse.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests to fetch calendar data.\n        *   **Logic:**\n            1.  It calls `eventDAO.getAllActiveAndUpcomingEvents()` and `meetingDAO.getAllUpcomingMeetings()` to get the raw data.\n            2.  It iterates through both lists, creating a `Map<String, String>` for each entry.\n            3.  Each map is populated with keys that FullCalendar expects: `title`, `start`, `end`, and `url`.\n            4.  It also adds custom properties like `backgroundColor` and `borderColor` to visually distinguish between events and meetings in the calendar.\n            5.  Finally, it serializes the combined list of maps into a JSON string and writes it to the response.\n        *   **Side Effects:** Performs database reads.');
COMMIT;