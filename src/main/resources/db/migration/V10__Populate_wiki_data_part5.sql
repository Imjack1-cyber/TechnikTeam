-- Flyway migration V10, Part 5

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/technikteam/filter/CharacterEncodingFilter.java', '1.  **File Overview & Purpose**\n\n    This is a simple but critical utility filter that ensures all incoming requests and outgoing responses are handled using the UTF-8 character encoding. This is essential for correctly processing and displaying international characters, such as German umlauts (ä, ö, ü), which might be present in user input or database content.\n\n2.  **Architectural Role**\n\n    This class is a low-level infrastructure component in the **Web/Controller Tier**. It should be the first filter in the chain to ensure that character encoding is set before any other filter or servlet attempts to read request parameters or write to the response.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.Filter`)**: The interface it implements.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doFilter(ServletRequest request, ServletResponse response, FilterChain chain)`**:\n        *   **Purpose:** Sets the character encoding for the request and response.\n        *   **Logic:**\n            1.  It calls `request.setCharacterEncoding(\"UTF-8\")`. This must be done *before* any parameters are read from the request.\n            2.  It calls `response.setCharacterEncoding(\"UTF-8\")`. This informs the browser how to interpret the response body.\n            3.  It then calls `chain.doFilter(request, response)` to pass control to the next filter in the chain.'),
('src/main/java/de/technikteam/listener/AppContextListener.java', '1.  **File Overview & Purpose**\n\n    This is a Jakarta EE lifecycle listener that executes code when the web application is shut down. Its primary responsibility is to perform critical cleanup of resources that are managed outside the servlet container''s direct control, specifically the MySQL JDBC driver. This prevents memory leaks in long-running application servers like Tomcat.\n\n2.  **Architectural Role**\n\n    This is a core **Configuration** / **Infrastructure** component. It hooks into the servlet container''s lifecycle to ensure a clean shutdown of the application.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.ServletContextListener`)**: The interface it implements to listen for application startup and shutdown events.\n    *   **MySQL Connector/J (`com.mysql.cj.jdbc.AbandonedConnectionCleanupThread`)**: A specific class from the MySQL driver that manages a background thread. This listener explicitly shuts it down.\n    *   **java.sql.DriverManager**: The standard Java class for managing JDBC drivers.\n\n4.  **In-Depth Breakdown**\n\n    *   **`contextInitialized(ServletContextEvent sce)`**: This method is called when the application starts. It currently only logs an informational message.\n\n    *   **`contextDestroyed(ServletContextEvent sce)`**:\n        *   **Purpose:** This method is called by the servlet container just before the application is undeployed or the server is shut down.\n        *   **Logic:**\n            1.  **Shutdown MySQL Cleanup Thread:** It calls `AbandonedConnectionCleanupThread.checkedShutdown()` to gracefully stop a background thread started by the MySQL JDBC driver. This prevents the thread from outliving the application and causing a memory leak.\n            2.  **Deregister JDBC Driver:** It iterates through all registered JDBC drivers using `DriverManager.getDrivers()`. For each driver, it checks if the driver was loaded by the web application''s own classloader. If so, it calls `DriverManager.deregisterDriver()` to remove it. This is the crucial step to allow the classloader and the driver''s classes to be garbage collected, preventing a common source of memory leaks in Java web applications.'),
('src/main/java/de/technikteam/listener/ApplicationInitializerListener.java', '1.  **File Overview & Purpose**\n\n    This is a Jakarta EE lifecycle listener that runs once when the application context is first initialized. Its sole responsibility is to set up and execute database migrations using the Flyway library. This ensures that the database schema is at the correct version before the application starts handling requests.\n\n2.  **Architectural Role**\n\n    This is a critical **Configuration** / **Infrastructure** component. It acts as the bootstrap for the **DAO Tier**, ensuring the database schema is consistent with what the application''s code expects. It runs before any servlets or DAOs are instantiated.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.ServletContextListener`)**: The interface it implements.\n    *   **Flyway (`org.flywaydb.core.Flyway`)**: The core library used to manage and apply database migrations.\n    *   `ConfigurationService`: Used to retrieve the database connection details from `config.properties`.\n\n4.  **In-Depth Breakdown**\n\n    *   **`contextInitialized(ServletContextEvent sce)`**:\n        *   **Purpose:** This method is called by the servlet container when the application starts up.\n        *   **Logic:**\n            1.  It instantiates a `ConfigurationService` to load the application''s properties.\n            2.  It configures a `Flyway` instance with the database URL, user, and password from the configuration.\n            3.  `locations(\"classpath:db/migration\")`: It tells Flyway to look for SQL migration scripts on the classpath in the `db/migration` folder.\n            4.  `baselineOnMigrate(true)`: This allows Flyway to automatically create its schema history table if it doesn''t exist, which is useful for the first-time deployment on an empty database.\n            5.  `flyway.migrate()`: This is the command that executes the migration. Flyway connects to the database, checks its history table, and applies any new, unapplied migration scripts in version order.\n            6.  **CORRECTION**: The code was updated to use the `result.migrationsExecuted` getter method instead of direct field access, resolving a compiler warning.\n            7.  It logs the outcome of the migration. If the migration fails (`!result.success`), it throws a `RuntimeException`, which will prevent the application from starting successfully.\n\n    *   **`contextDestroyed(ServletContextEvent sce)`**: This method is called on shutdown and currently only logs an informational message.'),
('src/main/java/de/technikteam/listener/SessionListener.java', '1.  **File Overview & Purpose**\n\n    This is a Jakarta EE lifecycle listener that monitors the creation and destruction of `HttpSession` objects. Its purpose is to keep the `SessionManager`''s central registry of active sessions up-to-date.\n\n2.  **Architectural Role**\n\n    This is an infrastructure component in the **Web/Controller Tier**. It provides the mechanism for the `SessionManager` to track all active user sessions across the application.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.http.HttpSessionListener`)**: The interface it implements to receive session lifecycle events.\n    *   `SessionManager`: The singleton class that this listener updates.\n\n4.  **In-Depth Breakdown**\n\n    *   **`sessionCreated(HttpSessionEvent se)`**\n        *   **Method Signature:** `public void sessionCreated(HttpSessionEvent se)`\n        *   **Purpose:** This method is called by the servlet container immediately after a new session is created.\n        *   **Logic:** It retrieves the new `HttpSession` from the event object and passes it to `SessionManager.addSession()` to add it to the central registry.\n        *   **Side Effects:** Adds a session to the `SessionManager`''s concurrent map.\n\n    *   **`sessionDestroyed(HttpSessionEvent se)`**\n        *   **Method Signature:** `public void sessionDestroyed(HttpSessionEvent se)`\n        *   **Purpose:** This method is called by the servlet container just before a session is invalidated (either due to timeout or an explicit `invalidate()` call).\n        *   **Logic:** It retrieves the `HttpSession` being destroyed and passes it to `SessionManager.removeSession()` to remove it from the central registry.\n        *   **Side Effects:** Removes a session from the `SessionManager`''s concurrent map.'),
('src/main/java/de/technikteam/model/Achievement.java', '1.  **File Overview & Purpose**\n\n    This is a Plain Old Java Object (POJO) that serves as the data model for an achievement. It represents a record from the `achievements` table and includes fields for its programmatic key, user-facing name, description, and associated FontAwesome icon. A transient field, `earnedAt`, is used to store when a specific user earned the achievement.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer achievement data between the `AchievementDAO`, `AchievementService`, and the servlets/JSPs.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDateTime`: Used for the `earnedAt` field.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key.\n        *   `achievementKey`: A unique, immutable string identifier used programmatically to grant achievements (e.g., \"EVENT_PARTICIPANT_5\").\n        *   `name`: The user-visible name of the achievement (e.g., \"Erfahrener Techniker\").\n        *   `description`: A user-visible description of how to earn the achievement.\n        *   `iconClass`: The FontAwesome CSS class for the achievement''s icon (e.g., \"fa-star\").\n        *   `earnedAt`: A transient field populated when fetching achievements for a specific user, indicating when they received it.\n    *   **`getFormattedEarnedAt()`**: A convenience method that uses the `DateFormatter` utility to provide a display-ready date string for the JSP views.\n    *   **Getters and Setters**: Standard boilerplate methods for accessing and modifying the object''s properties.'),
('src/main/java/de/technikteam/model/AdminLog.java', '1.  **File Overview & Purpose**\n\n    This is a POJO representing a single audit log entry from the `admin_logs` table. It models an administrative action, capturing who performed it, what they did, when they did it, and any relevant details.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It''s created by the `AdminLogService` to be persisted by the `AdminLogDAO`, and it''s retrieved by the `AdminLogDAO` to be displayed in the `admin_log.jsp` view.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `DateFormatter`: Used for the `getFormattedActionTimestamp()` convenience method.\n    *   `java.time.LocalDateTime`: Used for the `actionTimestamp` field.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the log entry.\n        *   `adminUsername`: The username of the administrator who performed the action.\n        *   `actionType`: A short, programmatic string identifying the type of action (e.g., \"CREATE_USER\", \"DELETE_EVENT\").\n        *   `details`: A human-readable text description of the action.\n        *   `actionTimestamp`: The exact date and time the action occurred.\n    *   **`getFormattedActionTimestamp()`**: A view-helper method that provides a pre-formatted string for the timestamp, suitable for direct use in JSPs.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/ApiResponse.java', '1.  **File Overview & Purpose**\n\n    This is a standard Data Transfer Object (DTO) used to create consistent JSON responses for all API endpoints. It enforces a uniform structure containing a success status, a human-readable message, and an optional data payload, which simplifies client-side handling of AJAX requests.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**, but its primary use is within the **Web/Controller Tier**. Servlets and Action classes create instances of `ApiResponse` to structure their JSON output before serialization with Gson.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `success` (boolean): `true` if the operation was successful, `false` otherwise.\n        *   `message` (String): A user-friendly message describing the outcome of the operation (e.g., \"User successfully created.\", \"Invalid password.\").\n        *   `data` (Object): An optional payload containing any relevant data to be sent back to the client (e.g., the newly created User object, a list of items).\n    *   **Static Factory Methods (`success`, `error`)**:\n        *   **Purpose:** These provide a convenient and readable way to construct `ApiResponse` objects without needing to call the constructor directly.\n        *   **Examples:**\n            *   `ApiResponse.success(\"Operation complete.\")`\n            *   `ApiResponse.error(\"Failed to find item.\")`\n            *   `ApiResponse.success(\"User found.\", userObject)'),
('src/main/java/de/technikteam/model/Attachment.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a file attachment record from the `attachments` table. It models a polymorphic relationship, linking a physical file to a parent entity (which can be either an ''EVENT'' or a ''MEETING'') and defines the visibility of the attachment based on user roles.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It''s used to transfer attachment metadata between the `AttachmentDAO`, services, and servlets.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDateTime`: For the `uploadedAt` timestamp.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the attachment record.\n        *   `parentType`: An enum-like string (`\"EVENT\"` or `\"MEETING\"`) indicating the type of entity this attachment belongs to.\n        *   `parentId`: The foreign key ID of the parent entity (e.g., the `event.id`).\n        *   `filename`: The original, user-facing name of the file.\n        *   `filepath`: The unique, sanitized path of the file on the server''s filesystem.\n        *   `uploadedAt`: The timestamp of when the file was uploaded.\n        *   `requiredRole`: An enum-like string (`\"NUTZER\"` or `\"ADMIN\"`) that determines the minimum role required to view and download the file.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/Course.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a \"course template\" from the `courses` table. It defines the general properties of a type of training or qualification, such as \"Grundlehrgang Tontechnik\", but does not represent a specific, schedulable event.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Model Tier**. It is used to transfer data about course templates between the `CourseDAO` and the `AdminCourseServlet` for management purposes.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the course.\n        *   `name`: The full, user-facing name of the course (e.g., \"Grundlehrgang Tontechnik\").\n        *   `abbreviation`: A short abbreviation (e.g., \"TON-GL\") used for display in compact views like the Qualification Matrix.\n        *   `description`: A general description of the course content and goals.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/DashboardDataDTO.java', '1.  **File Overview & Purpose**\n\n    This is a Data Transfer Object (DTO) designed to aggregate all the necessary information for rendering the dynamic widgets on the admin dashboard. It bundles data from multiple sources into a single object, simplifying the data retrieval process in the `AdminDashboardService` and its delivery to the `AdminDashboardApiServlet`.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Model Tier**. It acts as a data container, facilitating communication between the **Service Tier** (`AdminDashboardService`) and the **Web/Controller Tier** (`AdminDashboardApiServlet`).\n\n3.  **Key Dependencies & Libraries**\n\n    *   `Event`, `StorageItem`, `AdminLog`: The model classes for the data it contains.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `upcomingEvents` (List<Event>): A list of the next few upcoming events.\n        *   `lowStockItems` (List<StorageItem>): A list of inventory items whose available quantity is below a certain threshold.\n        *   `recentLogs` (List<AdminLog>): A list of the most recent administrative actions.\n        *   `eventTrendData` (List<Map<String, Object>>): Time-series data for the event trend chart, with each map representing a month and its event count.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/Event.java', '1.  **File Overview & Purpose**\n\n    This is a comprehensive model representing a single event from the `events` table. It contains not only the core event data but also serves as an aggregator for all related information, such as assigned users, tasks, skill requirements, and reserved materials. It also includes transient fields for UI logic, like `isUserQualified`.\n\n2.  **Architectural Role**\n\n    This class is a central part of the **Model Tier**. It''s heavily used across all tiers: created and populated by the `EventDAO`, manipulated in the `EventService`, and passed to JSPs in the **View Tier** for detailed display.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `DateFormatter`: Used for convenience methods that provide display-ready date strings.\n    *   `User`, `SkillRequirement`, `EventTask`, etc.: Other model classes that this class aggregates.\n\n4.  **In-Depth Breakdown**\n\n    *   **Core Fields:**\n        *   `id`, `name`, `eventDateTime`, `endDateTime`, `description`, `location`, `status`, `leaderUserId`: These map directly to columns in the `events` table.\n    *   **Aggregated Lists:**\n        *   `skillRequirements`, `assignedAttendees`, `eventTasks`, `chatMessages`, `attachments`, `reservedItems`, `customFields`: These are lists of related objects, populated by the `EventDAO` or `EventDetailsServlet` when a detailed view of the event is required. They are \"transient\" in the sense that they are not columns in the `events` table itself.\n    *   **Transient UI Fields:**\n        *   `userAttendanceStatus`: Stores the current user''s specific status for this event (e.g., \"ANGEMELDET\", \"ZUGEWIESEN\").\n        *   `isUserQualified`: A boolean flag indicating if the current user meets the skill requirements for this event.\n    *   **Convenience Methods:**\n        *   `getFormattedEventDateTime`, `getFormattedEventDateTimeRange`: Use the `DateFormatter` to provide JSP-ready strings for event times, encapsulating the formatting logic within the model.');
COMMIT;