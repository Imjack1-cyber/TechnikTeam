-- This script documents the files changed or added to implement full CRUD functionality for the wiki.
INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/technikteam/servlet/admin/api/AdminWikiApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a JSON API endpoint for the administrative wiki feature. Its primary responsibility is to serve the hierarchical structure of the wiki documentation (the file tree) as a JSON object. This data is then consumed by the frontend to dynamically render the navigation sidebar.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It acts as the data source for the `admin_wiki.js` script. It delegates the complex task of building the tree structure to the `WikiService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `WikiService`.\n    *   `WikiService`: The service that contains the cached, pre-built data structure of the wiki tree.\n    *   **Gson**: Used to serialize the tree data into a JSON object.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the wiki''s tree data.\n        *   **Logic:**\n            1.  **Authorization:** It ensures the requesting user has `ACCESS_ADMIN_PANEL` permission.\n            2.  **Service Call:** It calls `wikiService.getWikiTreeAsData()` to get the pre-built `Map` representing the file tree.\n            3.  **JSON Response:** It serializes this map into a JSON string and writes it to the response.'),
('src/main/java/de/technikteam/servlet/admin/action/CreateWikiAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for creating a new wiki documentation page. It receives a file path and initial content from an admin, creates a new entry in the database, and returns the newly created entry.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the server-side endpoint for the \"New Page\" modal in the wiki interface.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `WikiDAO` and `AdminLogService`.\n    *   `WikiDAO`: The DAO used to insert the new record into the `wiki_documentation` table.\n    *   `AdminLogService`: To create an audit trail for the new page creation.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** The main execution method for the create wiki page action.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the user has `ACCESS_ADMIN_PANEL` permission.\n            2.  **Parameter Validation:** Retrieves the `filePath` and `content` from the request and ensures the path is not empty.\n            3.  **Database Insert:** Creates a new `WikiEntry` object and calls `wikiDAO.createWikiEntry()` to save it.\n            4.  **Logging & Response:** If the creation is successful, it logs the action and returns an `ApiResponse.success` containing the newly created `WikiEntry` object (now with its ID). If it fails (likely due to a duplicate file path), it returns an `ApiResponse.error`.'),
('src/main/java/de/technikteam/servlet/admin/action/DeleteWikiAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for deleting a wiki documentation page. It receives the ID of the wiki entry to be deleted, removes it from the database, and logs the action.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the server-side endpoint for the \"Delete\" button in the wiki interface.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `WikiDAO` and `AdminLogService`.\n    *   `WikiDAO`: The DAO used to delete the record from the `wiki_documentation` table.\n    *   `AdminLogService`: To create an audit trail for the deletion.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** The main execution method for the delete wiki page action.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the user has `ACCESS_ADMIN_PANEL` permission.\n            2.  **Data Retrieval:** It first fetches the `WikiEntry` to be deleted. This is important for logging the file path of the deleted entry.\n            3.  **Database Deletion:** It calls `wikiDAO.deleteWikiEntry()` with the provided ID.\n            4.  **Logging & Response:** If the deletion is successful, it logs the action and returns an `ApiResponse.success`. Otherwise, it returns an `ApiResponse.error`.'),
('src/main/java/de/technikteam/servlet/admin/action/GetWikiContentAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class is a simple data retrieval command. Its sole purpose is to fetch the full content and metadata of a single wiki entry from the database and return it as the data payload in an `ApiResponse`.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It serves as the API endpoint for the client-side JavaScript (`admin_wiki.js`) to populate the content pane when a user clicks on a file in the navigation tree.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `WikiDAO`.\n    *   `WikiDAO`: The DAO used to retrieve the wiki entry by its ID.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Fetches and returns the details of one wiki entry.\n        *   **Logic:**\n            1.  **Authorization:** Ensures the user has `ACCESS_ADMIN_PANEL` permission.\n            2.  It parses the `id` from the request parameters.\n            3.  It calls `wikiDAO.getWikiEntryById()`.\n            4.  If an entry is found, it returns an `ApiResponse.success` with the `WikiEntry` object as the data payload.\n            5.  If no entry is found, it returns an `ApiResponse.error`.');

-- This script updates the documentation for files modified or created to implement full wiki CRUD functionality.
INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/technikteam/dao/WikiDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO is responsible for all database interactions with the `wiki_documentation` table. It provides full CRUD (Create, Read, Update, Delete) operations for managing the content of the technical documentation wiki pages.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `WikiService` to load the documentation into its cache at startup, and by the various `Wiki` action classes to display and save changes to the wiki content.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `WikiEntry` (Model): The data model object that this DAO creates and populates.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getWikiEntryById(int id)`**: Retrieves a single wiki page by its primary key.\n    *   **`getAllWikiEntries()`**: Fetches all wiki pages from the database, ordered by their file path. This is used by the `WikiService` to populate its initial cache.\n    *   **`updateWikiContent(int id, String content)`**: Updates the `content` field for a specific wiki entry.\n    *   **`createWikiEntry(WikiEntry entry)`**: Inserts a new documentation record into the database and returns the created object with its new ID.\n    *   **`deleteWikiEntry(int id)`**: Deletes a wiki documentation record from the database by its primary key.'),
('src/main/java/de/technikteam/service/WikiService.java', '1.  **File Overview & Purpose**\n\n    This service class acts as the business logic and data preparation layer for the technical documentation wiki. It is responsible for fetching all wiki entries from the `WikiDAO` at startup and building a hierarchical, nested `Map` that represents the project''s file tree. This data structure is then serialized to JSON by the `AdminWikiApiServlet`.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Service Tier**. It is a singleton that is initialized once at application startup. It serves as a facade for the `AdminWikiApiServlet`, providing the complete wiki structure as a data object, abstracting away the details of how the tree is constructed.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `WikiDAO`.\n    *   `WikiDAO`: Used to fetch all wiki entries from the database during initialization.\n\n4.  **In-Depth Breakdown**\n\n    *   **`initialize()`**: Called by the constructor. It triggers the `buildWikiTreeData()` method to generate and cache the tree structure in memory.\n    *   **`buildWikiTreeData()`**: The core logic of the service. It fetches all `WikiEntry` objects, splits their `filePath` strings by the ''/'' delimiter, and iteratively builds a nested map structure. Each key in the map is a directory or file name, and the final value for a file is the `WikiEntry` object itself.\n    *   **`getWikiTreeAsData()`**: A simple getter that returns the pre-generated and cached `Map` data structure to the API servlet.'),
('src/main/java/de/technikteam/servlet/admin/AdminWikiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves the main index page for the technical documentation wiki (`admin_wiki_index.jsp`). Its sole responsibility is to perform an authorization check and then forward the request to the JSP file. All dynamic content, such as the navigation tree and page content, is loaded asynchronously by the client-side JavaScript.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It is the main entry point for the wiki feature but is intentionally lightweight, acting only as a gatekeeper and view dispatcher.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This servlet no longer has direct dependencies as all data handling is done via API calls from the client.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for `/admin/wiki`.\n        *   **Logic:**\n            1.  **Authorization:** It performs a strict check to ensure only users with the master `ACCESS_ADMIN_PANEL` permission can access the wiki.\n            2.  **Forwarding:** It forwards the request directly to `admin_wiki_index.jsp`, without setting any data attributes.'),
('src/main/java/de/technikteam/servlet/admin/action/CreateWikiAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for creating a new wiki documentation page. It receives a file path and initial content from an admin, creates a new entry in the database, and returns the newly created entry.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the server-side endpoint for the \"New Page\" modal in the wiki interface.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `WikiDAO` and `AdminLogService`.\n    *   `WikiDAO`: The DAO used to insert the new record into the `wiki_documentation` table.\n    *   `AdminLogService`: To create an audit trail for the new page creation.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** The main execution method for the create wiki page action.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the user has `ACCESS_ADMIN_PANEL` permission.\n            2.  **Parameter Validation:** Retrieves the `filePath` and `content` from the request and ensures the path is not empty.\n            3.  **Database Insert:** Creates a new `WikiEntry` object and calls `wikiDAO.createWikiEntry()` to save it.\n            4.  **Logging & Response:** If the creation is successful, it logs the action and returns an `ApiResponse.success` containing the newly created `WikiEntry` object (now with its ID). If it fails (likely due to a duplicate file path), it returns an `ApiResponse.error`.'),
('src/main/java/de/technikteam/servlet/admin/action/DeleteWikiAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for deleting a wiki documentation page. It receives the ID of the wiki entry to be deleted, removes it from the database, and logs the action.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the server-side endpoint for the \"Delete\" button in the wiki interface.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `WikiDAO` and `AdminLogService`.\n    *   `WikiDAO`: The DAO used to delete the record from the `wiki_documentation` table.\n    *   `AdminLogService`: To create an audit trail for the deletion.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** The main execution method for the delete wiki page action.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the user has `ACCESS_ADMIN_PANEL` permission.\n            2.  **Data Retrieval:** It first fetches the `WikiEntry` to be deleted. This is important for logging the file path of the deleted entry.\n            3.  **Database Deletion:** It calls `wikiDAO.deleteWikiEntry()` with the provided ID.\n            4.  **Logging & Response:** If the deletion is successful, it logs the action and returns an `ApiResponse.success`. Otherwise, it returns an `ApiResponse.error`.'),
('src/main/java/de/technikteam/servlet/admin/action/GetWikiContentAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class is a simple data retrieval command. Its sole purpose is to fetch the full content and metadata of a single wiki entry from the database and return it as the data payload in an `ApiResponse`.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It serves as the API endpoint for the client-side JavaScript (`admin_wiki.js`) to populate the content pane when a user clicks on a file in the navigation tree.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `WikiDAO`.\n    *   `WikiDAO`: The DAO used to retrieve the wiki entry by its ID.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Fetches and returns the details of one wiki entry.\n        *   **Logic:**\n            1.  **Authorization:** Ensures the user has `ACCESS_ADMIN_PANEL` permission.\n            2.  It parses the `id` from the request parameters.\n            3.  It calls `wikiDAO.getWikiEntryById()`.\n            4.  If an entry is found, it returns an `ApiResponse.success` with the `WikiEntry` object as the data payload.\n            5.  If no entry is found, it returns an `ApiResponse.error`.')
ON DUPLICATE KEY UPDATE content=VALUES(content);

