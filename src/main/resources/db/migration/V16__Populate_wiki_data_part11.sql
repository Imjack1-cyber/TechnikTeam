-- Flyway migration V16, Part 11

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/technikteam/servlet/api/EventChatApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a JSON API endpoint for fetching the chat history of a specific event. It is called by the client-side `eventDetails.js` script when a user opens an event details page to populate the chat box with previous messages.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It acts as the data source for the initial state of the event chat. It interacts directly with the `EventChatDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventChatDAO`.\n    *   `EventChatDAO`: The DAO used to retrieve the list of messages for an event.\n    *   **Gson**: Used to serialize the list of `EventChatMessage` objects into a JSON array.\n    *   `LocalDateTimeAdapter`: A custom adapter required for correct JSON serialization of `LocalDateTime` objects.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for an event''s chat history.\n        *   **Logic:**\n            1.  **Parameter Validation:** It expects an `eventId` parameter and returns a 400 Bad Request error if it is missing or invalid.\n            2.  **Data Fetching:** It calls `chatDAO.getMessagesForEvent(eventId)` to get the complete, ordered chat history.\n            3.  **JSON Response:** It serializes the returned list into a JSON string and writes it to the response.'),
('src/main/java/de/technikteam/servlet/api/EventCustomFieldsApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a public JSON API endpoint to fetch the custom sign-up fields for a specific event. It is called by the client-side `events.js` script when a user clicks the \"Anmelden\" (Sign Up) button to dynamically build the sign-up modal form.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is a public-facing API, meaning it can be accessed without full admin rights, but the user must still be authenticated (as enforced by the `AuthenticationFilter`).\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventCustomFieldDAO`.\n    *   `EventCustomFieldDAO`: The DAO used to retrieve the custom field definitions for an event.\n    *   **Gson**: Used to serialize the list of `EventCustomField` objects into a JSON array.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for an event''s custom sign-up fields.\n        *   **Logic:**\n            1.  **Parameter Validation:** It requires an `eventId` parameter.\n            2.  **Data Fetching:** It calls `customFieldDAO.getCustomFieldsForEvent(eventId)` to get the list of field definitions.\n            3.  **JSON Response:** It serializes the returned list into a JSON string and writes it to the response.'),
('src/main/java/de/technikteam/servlet/api/MarkdownApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is a dedicated endpoint for saving content from the real-time Markdown editor. It receives the updated content and file ID, validates the user''s permission, and persists the changes to the physical file on the server.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It handles state-changing POST requests from the `admin_editor.js` script. It interacts with the `FileDAO` to write to the file system and update the database record.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FileDAO` and `AdminLogService`.\n    *   `FileDAO`: Used to get the file''s path, update its physical content, and \"touch\" its database record to update the timestamp.\n    *   `AdminLogService`: To create an audit trail of the file modification.\n    *   `CSRFUtil`: For security validation.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request to save Markdown content.\n        *   **Logic:**\n            1.  **Security:** It performs authentication, authorization (`FILE_UPDATE` permission), and CSRF token validation.\n            2.  **Parameter Validation:** It retrieves the `fileId` and `content` from the request.\n            3.  **Data Retrieval:** It fetches the `File` object from the database using the `fileId` to get its physical `filepath`.\n            4.  **Persistence:**\n                *   It calls `fileDAO.updateFileContent()` to overwrite the file on disk with the new content.\n                *   It calls `fileDAO.touchFileRecord()` to update the `uploaded_at` timestamp in the database, indicating a modification.\n            5.  **Logging & Feedback:** It logs the update action to the admin log and sets a success message in the session.\n            6.  **Redirect:** It redirects the user back to the editor page for the same file.'),
('src/main/java/de/technikteam/servlet/api/StorageHistoryApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a JSON API endpoint for fetching the transaction history of a specific storage item. It is used by the `storage_item_details.jsp` page to dynamically load and display the log of check-ins and check-outs for an item.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It responds to AJAX requests from the client-side. It interacts directly with the `StorageLogDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `StorageLogDAO`.\n    *   `StorageLogDAO`: The DAO used to retrieve the transaction history for an item.\n    *   **Gson**: Used to serialize the list of `StorageLogEntry` objects into a JSON array.\n    *   `LocalDateTimeAdapter`: A custom adapter required for correct JSON serialization of `LocalDateTime` objects.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for an item''s history.\n        *   **Logic:**\n            1.  **Parameter Validation:** It expects an `itemId` parameter and returns a 400 Bad Request error if it''s missing or invalid.\n            2.  **Data Fetching:** It calls `logDAO.getHistoryForItem(itemId)` to get the complete transaction log for the specified item.\n            3.  **JSON Response:** It serializes the returned list into a JSON string and writes it to the response.'),
('src/main/java/de/technikteam/servlet/api/SystemStatsApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a JSON API endpoint that exposes live system statistics of the server. It is designed to be polled by the administrative system status page to create a real-time monitoring dashboard.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is the data source for the `admin_system.js` script. It delegates the task of collecting system metrics to the `SystemInfoService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `SystemInfoService`.\n    *   `SystemInfoService`: The service that contains the logic for gathering OS-level statistics.\n    *   **Gson**: Used to serialize the `SystemStatsDTO` into a JSON object.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for system statistics.\n        *   **Logic:**\n            1.  It calls `systemInfoService.getSystemStats()` to get a fresh snapshot of the server''s CPU, RAM, disk, and other metrics.\n            2.  It serializes the resulting `SystemStatsDTO` object into a JSON string.\n            3.  It sets the response content type to `application/json` and writes the JSON string to the response.'),
('src/main/java/de/technikteam/servlet/api/UserPreferencesApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is a dedicated API endpoint for saving user-specific preferences. Currently, its only function is to handle the user''s choice of theme (light/dark) and persist it to the database.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It handles asynchronous POST requests from the `main.js` script, which are triggered when the user clicks the theme toggle switch. It interacts directly with the `UserDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserDAO`.\n    *   `UserDAO`: Used to update the theme preference in the `users` table.\n    *   `CSRFUtil`: For security validation.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request to update the user''s theme.\n        *   **Logic:**\n            1.  **Security & Authentication:** It ensures a user is logged in and validates the CSRF token.\n            2.  **Parameter Validation:** It retrieves the `theme` parameter and validates it against a `Set` of allowed values (`\"light\"`, `\"dark\"`) to prevent arbitrary data being saved.\n            3.  **Database Update:** It calls `userDAO.updateUserTheme()` to persist the new theme preference.\n            4.  **Session Update:** If the database update is successful, it also updates the `theme` property of the `User` object in the current session. This ensures that subsequent page loads will render with the correct theme without needing a new database query.\n            5.  **Response:** It returns an HTTP 200 OK status on success or an appropriate error code on failure.'),
('src/main/java/de/technikteam/servlet/api/passkey/AuthenticationFinishServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is the server-side endpoint for completing a WebAuthn/Passkey authentication ceremony. It receives the credential assertion from the browser, validates it, and if successful, establishes a new user session.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It works in tandem with `AuthenticationStartServlet` and the `passkey_auth.js` script to handle passwordless logins. It delegates the complex validation logic to the `PasskeyService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `PasskeyService`.\n    *   `PasskeyService`: The service that performs the (simulated) cryptographic verification of the passkey assertion.\n    *   **Gson**: Used to serialize the `ApiResponse`.\n    *   `CSRFUtil`, `NavigationRegistry`: For setting up the user session upon successful login.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request containing the WebAuthn credential from the client.\n        *   **Logic:**\n            1.  It reads the JSON payload from the request body.\n            2.  It calls `passkeyService.finishAuthentication()` with the payload.\n            3.  **Success Path:** If the service returns a `User` object, the authentication was successful.\n                *   It establishes a new, clean session for the user.\n                *   It stores the `User` object, a new CSRF token, and the user''s navigation items in the session.\n                *   It returns an `ApiResponse.success` with the user object as the data payload.\n            4.  **Failure Path:** If the service returns `null`, the authentication failed. It returns an `ApiResponse.error` with an HTTP 401 Unauthorized status.'),
('src/main/java/de/technikteam/servlet/api/passkey/AuthenticationStartServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is the server-side endpoint for initiating a WebAuthn/Passkey authentication ceremony. It generates a cryptographic challenge and the necessary options for the browser''s `navigator.credentials.get()` API call.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is the first step in the passkey login flow, called via AJAX from `passkey_auth.js` when the user clicks the \"Login with Passkey\" button. It delegates the logic to the `PasskeyService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `PasskeyService`.\n    *   `PasskeyService`: The service responsible for generating the challenge and options.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request to start the authentication process.\n        *   **Logic:**\n            1.  It retrieves the `username` from the request.\n            2.  It calls `passkeyService.startAuthentication(username)`. The service generates a challenge (and in a real implementation, would store it in the session) and constructs the `PublicKeyCredentialRequestOptions` JSON.\n            3.  It sets the response content type to `application/json` and writes the JSON options string back to the client.'),
('src/main/java/de/technikteam/servlet/api/passkey/RegistrationFinishServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is the server-side endpoint for completing a WebAuthn/Passkey registration ceremony. It receives the new public key credential from the browser, validates it, and saves it to the database, associating it with the logged-in user.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is called via AJAX from `passkey_auth.js` after the user has successfully created a new passkey on their device. It delegates the validation and persistence logic to the `PasskeyService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `PasskeyService`.\n    *   `PasskeyService`: The service that performs the (simulated) validation and saves the new credential via the `PasskeyDAO`.\n    *   **Gson**: Used to serialize the `ApiResponse`.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request containing the new credential data.\n        *   **Logic:**\n            1.  **Authentication:** It ensures that a user is currently logged into a session before allowing them to register a new device.\n            2.  It retrieves the user-provided `deviceName` from the URL parameters and the credential data (JSON) from the request body.\n            3.  It calls `passkeyService.finishRegistration()` with the user''s ID, the credential data, and the device name.\n            4.  Based on the boolean result from the service, it returns either an `ApiResponse.success` or an `ApiResponse.error` to the client.'),
('src/main/java/de/technikteam/servlet/api/passkey/RegistrationStartServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is the server-side endpoint for initiating a WebAuthn/Passkey registration ceremony. For an already authenticated user, it generates a cryptographic challenge and the necessary options for the browser''s `navigator.credentials.create()` API call.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is the first step in the \"add a new device\" flow, called via AJAX from `passkey_auth.js` when a user clicks the \"Register New Device\" button on their profile page. It delegates the logic to the `PasskeyService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `PasskeyService`.\n    *   `PasskeyService`: The service responsible for generating the challenge and options for registration.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the GET request to start the registration process.\n        *   **Logic:**\n            1.  **Authentication:** It retrieves the `User` object from the session to ensure only a logged-in user can register a new device.\n            2.  It calls `passkeyService.startRegistration(user)`. The service generates a challenge (which, in a real implementation, would be stored in the session for later verification) and constructs the `PublicKeyCredentialCreationOptions` JSON.\n            3.  It sets the response content type to `application/json` and writes the JSON options string back to the client.');
COMMIT;