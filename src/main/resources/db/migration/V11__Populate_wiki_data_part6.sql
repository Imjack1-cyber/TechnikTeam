-- Flyway migration V11, Part 6

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/technikteam/model/EventAttendance.java', '1.  **File Overview & Purpose**\n\n    This POJO models a single record from the `event_attendance` table. It represents a user''s sign-up status for a specific event, which is distinct from their final assignment to the event team.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It''s used to transfer data about user sign-ups between the `EventDAO` and servlets that need to check or display this information.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `eventId`: Foreign key to the `events` table.\n        *   `userId`: Foreign key to the `users` table.\n        *   `username`: A transient field, populated from a JOIN, for display purposes.\n        *   `signupStatus`: An enum-like string (`\"ANGEMELDET\"` or `\"ABGEMELDET\"`) representing the user''s voluntary status.\n        *   `commitmentStatus`: An enum-like string (`\"BESTÄTIGT\"`, `\"OFFEN\"`, etc.) that an admin could potentially set, though this feature might not be fully implemented.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/EventChatMessage.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a single message from the `event_chat_messages` table. It contains all the data for a chat message, including the content, sender information, timestamps, and state flags for edits and deletions.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It''s created and managed by the `EventChatDAO` and serialized to JSON by the `EventChatSocket` for real-time communication with the client-side chat interface.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDateTime` and `DateTimeFormatter`: Used for handling and formatting timestamps.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`, `eventId`, `userId`, `username`, `messageText`, `sentAt`: Core message data.\n        *   `edited`: A boolean flag that is set to `true` if the message content has been updated.\n        *   `isDeleted`: A boolean flag for soft-deletes.\n        *   `deletedByUserId`, `deletedByUsername`, `deletedAt`: Fields to track who performed a soft delete and when.\n        *   `chatColor`: The sender''s preferred chat color, fetched via a JOIN in the DAO.\n    *   **Formatting Methods (`getFormattedSentAt`, `getFormattedDeletedAt`)**: Convenience methods to provide display-ready time strings for the UI.'),
('src/main/java/de/technikteam/model/EventCustomField.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a custom field definition for an event''s sign-up form, corresponding to a record in the `event_custom_fields` table. It defines the properties of a question asked to users during sign-up, such as its name, type (e.g., text, boolean), and whether it''s required.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer data about custom field definitions between the `EventCustomFieldDAO`, `EventService`, and the `EventCustomFieldsApiServlet` which provides this data to the frontend.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the custom field.\n        *   `eventId`: A foreign key linking this field to a specific event.\n        *   `fieldName`: The question or label for the field (e.g., \"T-Shirt Größe\").\n        *   `fieldType`: An enum-like string (`\"TEXT\"`, `\"BOOLEAN\"`, etc.) that determines the type of input rendered on the frontend.\n        *   `isRequired`: A boolean flag indicating if the user must provide an answer to sign up.\n        *   `fieldOptions`: A string (potentially JSON) to store options for field types like ''DROPDOWN'' or ''CHECKBOX_GROUP''.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/EventCustomFieldResponse.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a user''s response to a specific custom field for an event. It corresponds to a record in the `event_custom_field_responses` table, linking a user, a custom field, and their provided answer.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is created by the `EventActionServlet` when a user submits their sign-up form and is passed to the `EventCustomFieldDAO` for persistence.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the response.\n        *   `fieldId`: A foreign key linking this response to a specific `EventCustomField`.\n        *   `userId`: A foreign key linking this response to the user who submitted it.\n        *   `responseValue`: The user''s answer, stored as a string.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/EventTask.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a single task associated with an event, corresponding to a record in the `event_tasks` table. It contains the task''s description and status, and also serves as an aggregator for related data like assigned users, required items, and kits.\n\n2.  **Architectural Role**\n\n    This class is a central part of the **Model Tier**. It is used to transfer detailed task information between the `EventTaskDAO`, the `EventDetailsServlet`, and the JSP view.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `User`, `StorageItem`, `InventoryKit`: Model classes that this class aggregates in lists.\n\n4.  **In-Depth Breakdown**\n\n    *   **Core Fields:**\n        *   `id`, `eventId`, `description`, `details`, `status`, `displayOrder`, `requiredPersons`: These map directly to columns in the `event_tasks` table.\n    *   **Aggregated Lists:**\n        *   `assignedUsers`: A list of `User` objects directly assigned to this task.\n        *   `requiredItems`: A list of `StorageItem` objects needed for this task.\n        *   `requiredKits`: A list of `InventoryKit` objects needed for this task.\n    *   **Transient UI Fields:**\n        *   `eventName`: The name of the parent event, populated for display on the user dashboard.\n        *   `assignedUsernames`: A transient string field, which is not used. The getter method provides the same functionality dynamically.\n    *   **Convenience Methods:**\n        *   `getAssignedUsernames()`: A view-helper method that generates a comma-separated string of assigned usernames from the `assignedUsers` list, providing a display-ready value for JSPs.'),
('src/main/java/de/technikteam/model/FeedbackForm.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a feedback form, corresponding to a record in the `feedback_forms` table. It acts as a container for feedback responses related to a specific event.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is created and retrieved by the `EventFeedbackDAO` and used by the `FeedbackServlet` to manage the event feedback process.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDateTime`: For the `createdAt` timestamp.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the feedback form.\n        *   `eventId`: A foreign key linking this form to a specific `Event`.\n        *   `title`: The title of the feedback form, typically including the event name.\n        *   `createdAt`: The timestamp of when the form record was created.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/FeedbackResponse.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a user''s submitted feedback for a specific event, corresponding to a record in the `feedback_responses` table. It captures a user''s rating and textual comments for a given feedback form.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is created in the `FeedbackServlet` with data from a user''s form submission and is passed to the `EventFeedbackDAO` to be saved to the database.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDateTime`: For the `submittedAt` timestamp.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the response.\n        *   `formId`: A foreign key linking this response to a `FeedbackForm`.\n        *   `userId`: A foreign key linking this response to the submitting `User`.\n        *   `rating`: An integer representing the user''s rating (e.g., 1-5 stars).\n        *   `comments`: The user''s textual feedback or suggestions.\n        *   `submittedAt`: The timestamp of when the feedback was submitted.\n        *   `username`: A transient field, populated from a JOIN, for display purposes.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/FeedbackSubmission.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a general feedback submission (e.g., bug report, feature request) from a user, corresponding to a record in the `feedback_submissions` table. It includes details about the submission, its current status in the workflow, and its display order on the admin Kanban board.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer feedback data between the `FeedbackSubmissionDAO` and the servlets responsible for handling feedback (`FeedbackServlet`, `MyFeedbackServlet`, `AdminFeedbackServlet`).\n\n3.  **Key Dependencies & Libraries**\n\n    *   `DateFormatter`: Used for the `getFormattedSubmittedAt()` convenience method.\n    *   `java.time.LocalDateTime`: Used for the `submittedAt` field.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`, `userId`, `subject`, `content`, `submittedAt`: Core data of the submission.\n        *   `username`: Transient field for the submitter''s name.\n        *   `displayTitle`: An optional, admin-editable title to clarify the subject.\n        *   `status`: An enum-like string (`\"NEW\"`, `\"VIEWED\"`, `\"PLANNED\"`, etc.) representing its stage in the Kanban workflow.\n        *   `displayOrder`: An integer used to maintain the order of cards within a status column on the Kanban board.\n    *   **`getFormattedSubmittedAt()`**: A view-helper method providing a pre-formatted string for the submission timestamp.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/File.java', '1.  **File Overview & Purpose**\n\n    This POJO represents the metadata for a single file stored in the system, corresponding to a record in the `files` table. It holds information about the file''s name, its physical location on the server, its category, and access restrictions.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It''s used to transfer file metadata between the `FileDAO` and various servlets that display or manage files.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `DateFormatter`: Used for the `getFormattedUploadedAt()` convenience method.\n    *   `java.time.LocalDateTime`: Used for the `uploadedAt` field.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`, `filename`, `filepath`, `categoryId`, `uploadedAt`: Core metadata mapping to table columns.\n        *   `categoryName`: A transient field, populated by a JOIN, for easy display in views.\n        *   `requiredRole`: An enum-like string (`\"NUTZER\"` or `\"ADMIN\"`) to control access.\n        *   `content`: A transient field used to hold the file''s text content when it is being read for the Markdown editor.\n    *   **`getFormattedUploadedAt()`**: A view-helper method that provides a display-ready timestamp.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/technikteam/model/FileCategory.java', '1.  **File Overview & Purpose**\n\n    This is a simple POJO representing a category for organizing files, corresponding to a record in the `file_categories` table. It provides a way to group related documents in the UI.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used by the `FileDAO` and passed to the `AdminFileManagementServlet` to display and manage file categories.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the category.\n        *   `name`: The user-visible name of the category.\n    *   **Getters and Setters**: Standard methods for property access.');
COMMIT;