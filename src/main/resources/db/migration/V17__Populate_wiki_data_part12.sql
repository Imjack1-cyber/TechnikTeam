-- Flyway migration V17, Part 12

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/technikteam/servlet/http/SessionManager.java', '1.  **File Overview & Purpose**\n\n    This is a utility class that provides a centralized, static registry of all active `HttpSession` objects in the application. Its primary function is to allow services to find and invalidate all sessions belonging to a specific user, which is a crucial security feature after sensitive operations like a profile change approval.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting **Infrastructure/Utility** class that operates within the **Web/Controller Tier**. It is populated by the `SessionListener` and used by `Action` classes like `ApproveChangeAction`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.http.HttpSession`)**: The object type it manages.\n    *   `java.util.concurrent.ConcurrentHashMap`: Used to provide a thread-safe map for storing sessions.\n\n4.  **In-Depth Breakdown**\n\n    *   **`SESSIONS` (static Map)**: A `ConcurrentHashMap` where the key is the session ID and the value is the `HttpSession` object. This map is the central registry.\n    *   **`addSession(HttpSession session)`**: A static method called by `SessionListener` when a new session is created. It adds the session to the map.\n    *   **`removeSession(HttpSession session)`**: A static method called by `SessionListener` when a session is destroyed. It removes the session from the map.\n    *   **`invalidateSessionsForUser(int userId)`**:\n        *   **Method Signature:** `public static void invalidateSessionsForUser(int userId)`\n        *   **Purpose:** The main functional method of the class. It finds all active sessions belonging to a specific user and invalidates them.\n        *   **Logic:** It iterates through the values of the `SESSIONS` map. For each session, it safely retrieves the `User` object, checks if the user''s ID matches the target `userId`, and if so, calls `session.invalidate()`. It includes error handling for already invalidated sessions.'),
('src/main/java/de/technikteam/servlet/CalendarServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is responsible for rendering the main calendar page (`/kalender`). It fetches all upcoming events and meetings and prepares several data structures to support different views: a full-grid monthly/weekly calendar for desktop and a simple chronological list for mobile devices.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It gathers data from the `EventDAO` and `MeetingDAO`, performs date-based calculations and groupings, and forwards the prepared data to the `calendar.jsp` view for rendering.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO` and `MeetingDAO`.\n    *   `EventDAO`, `MeetingDAO`: DAOs used to fetch calendar entries.\n    *   `java.time` API: Extensively used for date calculations, such as determining the current month, previous/next months, and the days of the week.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the calendar page.\n        *   **Logic:**\n            1.  **Date Calculation:** Determines the current month and year to display, allowing for navigation via URL parameters (`?year=...&month=...`).\n            2.  **Data Fetching:** Calls the DAOs to get lists of all upcoming `Event` and `Meeting` objects.\n            3.  **Data Aggregation:** Creates a unified list of all calendar entries and then groups them into a `Map<LocalDate, List<Map<String, Object>>>`, which is used by the JSP to place entries on the correct days in the monthly view grid.\n            4.  **Monthly View Data:** Calculates the `startDayOfWeekOffset` (how many empty cells to show before the 1st of the month) and the total `daysInMonth`.\n            5.  **Weekly View Data:** Calculates the start date of the current week and creates a list of maps, with each map representing a day of the week.\n            6.  **Mobile View Data:** Calls the `prepareMobileList` helper method to create a single, sorted chronological list for the mobile view.\n            7.  **Forwarding:** Sets all calculated data as request attributes and forwards the request to `calendar.jsp`.\n\n    *   **`prepareMobileList(...)`**: A private helper method that transforms the `Event` and `Meeting` objects into a unified list of maps, each containing display-ready information like the formatted day, month abbreviation, and a unique URL. It then sorts this list chronologically.'),
('src/main/java/de/technikteam/servlet/DownloadServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet handles secure file downloads for both general files (from `files` table) and specific attachments (from `attachments` table). It validates that the user is authenticated and authorized to access the requested file, protects against path traversal attacks, and serves the physical file with the correct headers.\n\n2.  **Architectural Role**\n\n    This class is a critical component of the **Web/Controller Tier**. It acts as a secure gateway between a user''s download request and the physical files stored on the server''s filesystem. It interacts with multiple DAOs to perform authorization checks.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FileDAO`, `EventDAO`, `MeetingDAO`, `AttachmentDAO`, and `ConfigurationService`.\n    *   DAOs: Used to fetch file metadata and perform authorization checks (e.g., is the user associated with the event the attachment belongs to?).\n    *   `ConfigurationService`: Provides the base path to the file upload directory.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**:\n        *   **Purpose:** Handles a GET request for a file download.\n        *   **Logic:**\n            1.  **Authentication:** Ensures a user is logged in.\n            2.  **Parameter Validation:** Checks for a valid `id` parameter.\n            3.  **Data Retrieval:** It first tries to find the ID in the `attachments` table. If not found, it checks the `files` table. This allows a single download endpoint for both types of files.\n            4.  **Authorization:** It calls `isUserAuthorizedForAttachment` or checks the `required_role` on the `File` object to determine if the user has permission to download the file. Admins are always authorized.\n            5.  **File Serving:** If all checks pass, it calls the `serveFile` helper method.\n            6.  **Error Handling:** Sends appropriate HTTP error codes (400, 401, 403, 404) for various failure scenarios.\n\n    *   **`isUserAuthorizedForAttachment(...)`**: A private helper that encapsulates the logic for checking if a non-admin user can access an attachment. The user must be associated with the parent event or meeting.\n\n    *   **`serveFile(...)`**:\n        *   **Purpose:** The core file-serving logic.\n        *   **Logic:**\n            1.  **Path Traversal Protection:** It constructs the full, canonical path to the requested file and ensures that this path is still within the configured upload directory. This is a critical security measure to prevent users from requesting files outside the intended folder (e.g., `?file=../../../../some/system/file`).\n            2.  **File Existence Check:** Verifies that the requested file exists and is a regular file.\n            3.  **Set Headers:** It sets the `Content-Type` to `application/octet-stream` to force a download prompt, sets the `Content-Length`, and sets the `Content-Disposition` header with a properly URL-encoded filename.\n            4.  **Streaming:** It opens a `FileInputStream` to the physical file and streams its bytes to the `HttpServletResponse`''s `OutputStream`.'),
('src/main/java/de/technikteam/servlet/EventActionServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet handles user actions related to events, such as signing up or signing off. It processes POST requests from the public events page (`events.jsp`) and updates the user''s attendance status in the database.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as a controller for user-initiated event actions. It interacts with the `EventDAO` and `EventCustomFieldDAO` for data persistence and the `EventService` for more complex business logic.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO`, `EventCustomFieldDAO`, and `EventService`.\n    *   `EventDAO`: Used for simple sign-up and sign-off operations.\n    *   `EventCustomFieldDAO`: Used to save user responses to any custom fields on the sign-up form.\n    *   `EventService`: Used for the special case of signing off from a running event, which involves sending a notification.\n    *   `CSRFUtil`: Used to validate the CSRF token on every POST request.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**:\n        *   **Purpose:** The main method that handles all POST requests.\n        *   **Logic:**\n            1.  **Security:** Validates the CSRF token.\n            2.  **Parameter Validation:** Ensures a user is logged in and that `action` and `eventId` parameters are present.\n            3.  **Action Routing:** It uses a `switch` statement on the `action` parameter to delegate to the appropriate handler method.\n            *   `\"signup\"`: Calls `eventDAO.signUpForEvent` and then iterates through any custom field parameters from the request, saving each response via `customFieldDAO.saveResponse`.\n            *   `\"signoff\"`: Calls `eventDAO.signOffFromEvent` for a simple sign-off.\n            *   `\"signOffWithReason\"`: This special case is for events that are already running. It retrieves the reason from the request and calls `eventService.signOffUserFromRunningEvent`, which handles both the database update and sending a notification to the event leader.\n            4.  **Feedback & Redirect:** Sets a success or error message in the session and redirects the user back to the main events page.'),
('src/main/java/de/technikteam/servlet/EventDetailsServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is responsible for preparing and displaying the detailed view of a single event. It fetches the core event data and aggregates all related information, such as assigned team members, tasks, attachments, and chat messages, before forwarding the data to the `eventDetails.jsp` page for rendering.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as the controller for the event details page. It coordinates multiple DAOs to assemble a complete, aggregated view of an event.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects all necessary DAOs (`EventDAO`, `EventTaskDAO`, `EventChatDAO`, etc.).\n    *   **DAOs**: Each DAO is used to fetch a specific piece of related data (e.g., `taskDAO.getTasksForEvent`, `attachmentDAO.getAttachmentsForParent`).\n    *   **Gson**: Used to serialize various data lists (like users, items, kits) into JSON for use by the client-side JavaScript on the page.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**:\n        *   **Purpose:** Handles GET requests for the event details page.\n        *   **Logic:**\n            1.  **Authentication & Parameter Validation:** Ensures a user is logged in and that a valid `id` parameter is provided.\n            2.  **Fetch Core Event:** Retrieves the main `Event` object using `eventDAO.getEventById`.\n            3.  **Authorization:** Performs a crucial authorization check. A user can only view the details if they are a global admin, the event leader, or are associated with the event (either signed up or assigned). If the check fails, it sends an HTTP 403 (Forbidden) error.\n            4.  **Data Aggregation:** If authorized, it proceeds to fetch all related data from the various DAOs and sets it on the `event` model object. This includes attachments (filtered by the user''s role), skill requirements, reserved items, assigned attendees, and tasks.\n            5.  **Chat History:** If the event''s status is \"LAUFEND\", it fetches the chat history from `chatDAO`.\n            6.  **JSON Serialization:** It serializes data needed for client-side modals (like the list of assigned users and all available items/kits for the task editor) into JSON strings and places them in request attributes.\n            7.  **Forwarding:** It sets the fully populated `event` object as a request attribute and forwards to `eventDetails.jsp`.'),
('src/main/java/de/technikteam/servlet/EventServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves the main \"Veranstaltungen\" (Events) page. Its primary role is to fetch a list of all upcoming and active events, determine the current user''s qualification and sign-up status for each, and then pass this enriched data to the `events.jsp` view for rendering.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as the controller for the public event listing. It interacts with the `EventDAO` to retrieve data and applies business logic to determine user-specific states for each event.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO`.\n    *   `EventDAO`: Used to fetch all upcoming events and the specific events a user is qualified for.\n    *   `User` (Model): The logged-in user object, retrieved from the session.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the main events page.\n        *   **Logic:**\n            1.  **Authentication:** Ensures a user is logged in.\n            2.  **Fetch All Events:** It retrieves a list of *all* active and upcoming events via `eventDAO.getAllActiveAndUpcomingEvents()`.\n            3.  **Fetch Qualified Events:** It makes a second, more complex call to `eventDAO.getUpcomingEventsForUser()`. This method returns only the events for which the current user meets the skill requirements and also includes their current sign-up status (`ANGEMELDET`, `ABGEMELDET`, or `OFFEN`).\n            4.  **Data Enrichment:** It iterates through the list of all events. For each event, it checks if its ID is present in the list of qualified events.\n                *   If it is, it sets the `isUserQualified` flag to `true` and copies the `userAttendanceStatus` to the event object.\n                *   If it is not, `isUserQualified` remains `false` (its default), which will cause the \"Anmelden\" button to be disabled in the JSP.\n            5.  **Forwarding:** It sets the final, enriched list of all upcoming events as a request attribute and forwards to `events.jsp`.'),
('src/main/java/de/technikteam/servlet/FeedbackServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet handles all user interactions with the feedback system. It serves two distinct purposes based on the `action` parameter: displaying the general feedback form and handling its submission, as well as managing the event-specific feedback workflow.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as a controller for both general and event-specific feedback. It interacts with the `FeedbackSubmissionDAO` for general feedback and the `EventFeedbackDAO` for event-specific feedback.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects `EventFeedbackDAO`, `FeedbackSubmissionDAO`, and `EventDAO`.\n    *   `FeedbackSubmissionDAO`: For creating general feedback entries.\n    *   `EventFeedbackDAO`: For creating event feedback forms and saving responses.\n    *   `EventDAO`: To get event details when creating an event feedback form.\n    *   `CSRFUtil`: For security validation on all POST requests.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(...)`**:\n        *   **Purpose:** Renders the appropriate feedback form.\n        *   **Logic:** It checks the `action` parameter.\n            *   If `action=submitEventFeedback`, it calls `showSubmitEventFeedbackForm()` to display the star rating form for a specific event.\n            *   Otherwise, it forwards to the `feedback.jsp` page for general feedback.\n\n    *   **`doPost(...)`**:\n        *   **Purpose:** Handles the submission of feedback forms.\n        *   **Logic:** After validating the CSRF token, it routes based on the `action` parameter.\n            *   `\"submitGeneralFeedback\"`: Calls `handleGeneralFeedback()`.\n            *   `\"submitEventFeedbackResponse\"`: Calls `handleEventFeedbackResponse()`.\n\n    *   **`handleGeneralFeedback(...)`**:\n        *   **Purpose:** Validates and saves a general feedback submission.\n        *   **Logic:** It retrieves the subject and content from the request, performs validation, creates a `FeedbackSubmission` object, and saves it using `submissionDAO`. It sets appropriate session messages and redirects.\n\n    *   **`handleEventFeedbackResponse(...)`**:\n        *   **Purpose:** Saves a user''s response to an event feedback form.\n        *   **Logic:** It parses the form ID, rating, and comments, creates a `FeedbackResponse` object, and saves it using `eventFeedbackDAO`. It then redirects the user to their profile page.\n\n    *   **`showSubmitEventFeedbackForm(...)`**:\n        *   **Purpose:** Prepares the data for the event-specific feedback form.\n        *   **Logic:**\n            1.  It retrieves the `Event` object.\n            2.  It checks if a `FeedbackForm` already exists for this event using `eventFeedbackDAO`. If not, it creates one.\n            3.  It checks if the user has already submitted feedback for this form. If so, it redirects them to their profile with an info message.\n            4.  Otherwise, it sets the `event` and `form` objects as request attributes and forwards to `feedback_form.jsp`.'),
('src/main/java/de/technikteam/servlet/FileServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is responsible for displaying the public-facing \"Dateien & Dokumente\" page. It fetches the list of files and categories that the currently logged-in user is authorized to see and forwards this data to the `dateien.jsp` view for rendering.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as the controller for the public file listing page. It interacts directly with the `FileDAO` to retrieve data.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FileDAO`.\n    *   `FileDAO`: The DAO used to fetch the list of files, grouped by category.\n    *   `User` (Model): The user object from the session, used to determine which files should be visible.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the `/dateien` page.\n        *   **Logic:**\n            1.  Retrieves the `User` object from the session.\n            2.  Calls `fileDAO.getAllFilesGroupedByCategory(user)`. This DAO method contains the authorization logic to filter out admin-only files if the user is not an admin.\n            3.  Sets the resulting map of grouped files as a request attribute named `fileData`.\n            4.  Forwards the request to `views/public/dateien.jsp`.'),
('src/main/java/de/technikteam/servlet/HomeServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves as the controller for the user''s main dashboard or home page. It is responsible for fetching personalized data for the logged-in user, such as their upcoming assigned events, their open tasks, and other general upcoming events they might be interested in.\n\n2.  **Architectural Role**\n\n    This class is a key component of the **Web/Controller Tier**. It acts as the entry point for the user after logging in. It interacts with the `EventDAO` and `EventTaskDAO` to aggregate the data needed for the dashboard widgets.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO` and `EventTaskDAO`.\n    *   `EventDAO`: Used to fetch the user''s assigned events and general upcoming events.\n    *   `EventTaskDAO`: Used to fetch the user''s open tasks across all events.\n    *   `User` (Model): The user object from the session, whose ID is used in the DAO queries.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the `/home` page.\n        *   **Logic:**\n            1.  **Authentication Check:** A crucial defensive check ensures that a `User` object exists in the session. If not, it redirects to the login page.\n            2.  **Data Fetching:** It makes three separate calls to the DAOs:\n                *   `eventDAO.getAssignedEventsForUser()`: Gets the top 5 events the user is *assigned* to.\n                *   `eventTaskDAO.getOpenTasksForUser()`: Gets all open tasks assigned to the user.\n                *   `eventDAO.getUpcomingEventsForUser()`: Gets the top 5 general upcoming events for which the user is qualified but not necessarily assigned.\n            3.  **Forwarding:** It sets the three lists of data as request attributes (`assignedEvents`, `openTasks`, `upcomingEvents`) and forwards the request to `views/public/home.jsp`.');
COMMIT;