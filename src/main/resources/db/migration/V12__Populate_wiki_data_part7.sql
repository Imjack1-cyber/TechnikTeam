-- Flyway migration V12, Part 7

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/model/InventoryKit.java', '1.  **File Overview & Purpose**\n\n    This POJO represents an \"inventory kit\" or a \"case,\" corresponding to a record in the `inventory_kits` table. A kit is a conceptual container that groups a predefined list of `StorageItem`s together, such as \"Audio Kit A\" or \"Lighting Case 1\".\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer data about kits between the `InventoryKitDAO` and the `AdminKitServlet` for management, and the `PackKitServlet` for displaying packing lists.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `InventoryKitItem`: The model class representing the items contained within this kit.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the kit.\n        *   `name`: The user-facing name of the kit (e.g., \"Mics and Stands\").\n        *   `description`: A brief description of the kit''s purpose.\n        *   `location`: The physical storage location of the assembled kit (e.g., \"Lager, Schrank 3\").\n        *   `items` (List<InventoryKitItem>): A list of the items and their quantities that belong to this kit. This is populated by a JOIN query in the DAO.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/InventoryKitItem.java', '1.  **File Overview & Purpose**\n\n    This POJO represents an entry in the `inventory_kit_items` junction table. It defines the relationship between an `InventoryKit` and a `StorageItem`, specifying the quantity of that item that belongs in the kit.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is primarily used within the `InventoryKit` model to represent the contents of a kit.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `kitId`: Foreign key to the `inventory_kits` table.\n        *   `itemId`: Foreign key to the `storage_items` table.\n        *   `quantity`: The number of this specific item that should be in the kit.\n        *   `itemName`: A transient field, populated from a JOIN in the DAO, to display the item''s name without needing to fetch the full `StorageItem` object.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/MaintenanceLogEntry.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a single record from the `maintenance_log` table. It captures the history of maintenance actions performed on a specific `StorageItem`, including repairs, marking for maintenance, and associated notes or costs.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is created by servlets like `AdminStorageServlet` to be persisted by the `MaintenanceLogDAO`, and is retrieved to be displayed on the `storage_item_details.jsp` page.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `DateFormatter`: Used for the `getFormattedLogDate()` convenience method.\n    *   `java.time.LocalDateTime`: Used for the `logDate` field.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the log entry.\n        *   `itemId`: Foreign key to the `storage_items` table.\n        *   `userId`: Foreign key to the `users` table, indicating who performed the action.\n        *   `logDate`: The timestamp of the maintenance action.\n        *   `action`: A string describing the action (e.g., \"Marked for Maintenance\", \"Returned to Service\").\n        *   `notes`: Free-text notes from the user about the action.\n        *   `cost`: The cost associated with the maintenance, if any.\n        *   `username`: A transient field, populated by a JOIN, for displaying the user''s name.\n    *   **`getFormattedLogDate()`**: A view-helper method to provide a pre-formatted timestamp string.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/Meeting.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a specific, schedulable session or \"meeting\" for a course, corresponding to a record in the `meetings` table. Unlike a `Course` which is a template, a `Meeting` has a concrete date, time, and location.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer data about scheduled meetings between the `MeetingDAO`, various servlets (e.g., `MeetingServlet`, `AdminMeetingServlet`), and the JSP views.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `DateFormatter`: Used for convenience methods that provide display-ready date and time strings.\n    *   `java.time.LocalDateTime`: Used for the meeting''s start and end times.\n\n4.  **In-Depth Breakdown**\n\n    *   **Core Fields:**\n        *   `id`, `courseId`, `name`, `meetingDateTime`, `endDateTime`, `leaderUserId`, `description`, `location`: These map directly to columns in the `meetings` table.\n    *   **Transient UI Fields:**\n        *   `parentCourseName`: The name of the `Course` this meeting belongs to, populated by a JOIN.\n        *   `leaderUsername`: The name of the user leading the meeting, populated by a JOIN.\n        *   `userAttendanceStatus`: Stores the current logged-in user''s sign-up status for this meeting (`ANGEMELDET`, `ABGEMELDET`, `OFFEN`).\n    *   **Convenience Methods (`getFormatted...`)**: These methods use the `DateFormatter` to provide JSP-ready strings for the meeting''s date and time range, encapsulating formatting logic.'),
('src/main/java/de/model/MeetingAttendance.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a user''s attendance record for a specific meeting, corresponding to a row in the `meeting_attendance` table. It tracks whether a user was present and allows for optional administrative remarks.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer attendance data between the `MeetingAttendanceDAO` and the servlets that manage and display this information, most notably the `MatrixServlet`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `userId`: Foreign key to the `users` table.\n        *   `meetingId`: Foreign key to the `meetings` table.\n        *   `attended`: A boolean flag indicating if the user was present (`true`) or not (`false`).\n        *   `remarks`: An optional string for administrative notes, such as \"excused absence\".\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/NavigationItem.java', '1.  **File Overview & Purpose**\n\n    This is a simple, immutable POJO used to represent a single link in the application''s sidebar navigation. It holds all the necessary data to render a navigation item, including its label, URL, icon, and the permission required to view it.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. Instances of this class are created and managed exclusively by the `NavigationRegistry` utility and are stored in the user''s session to be rendered by the `main_header.jspf` fragment on every page.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields (all `final`):**\n        *   `label`: The user-visible text of the link (e.g., \"Dashboard\").\n        *   `url`: The relative URL for the link (e.g., \"/home\").\n        *   `icon`: The FontAwesome CSS class for the link''s icon (e.g., \"fa-home\").\n        *   `requiredPermission`: The permission key (from the `Permissions` class) that a user must have to see this link. A `null` value indicates the link is visible to all authenticated users.\n    *   **Constructor and Getters**: A standard constructor to initialize the final fields and getters to access their values. There are no setters, making the object immutable.'),
('src/main/java/de/model/ParticipationHistory.java', '1.  **File Overview & Purpose**\n\n    This is a Data Transfer Object (DTO) designed specifically for reporting purposes. It aggregates data from multiple tables (`users`, `events`, `event_attendance`, `event_assignments`) to create a flattened view of a user''s participation in an event. It does not map to a single database table.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Model Tier**. It is used by the `ReportDAO` to structure the results of complex analytical queries and is then passed to the `AdminReportServlet` for display or export.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDateTime`: For the `eventDate` field.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `username`: The name of the user.\n        *   `eventName`: The name of the event.\n        *   `eventDate`: The date and time of the event.\n        *   `status`: The user''s status for that event (e.g., \"ZUGEWIESEN\", \"ANGEMELDET\").\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/PasskeyCredential.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a WebAuthn/Passkey credential stored in the `user_passkeys` table. It holds all the necessary information for a user to perform a passwordless login, including the public key, credential ID, and a signature counter for security.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer credential data between the `PasskeyDAO` and the `PasskeyService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDateTime`: For the `createdAt` timestamp.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The internal primary key in the database.\n        *   `userId`: Foreign key linking the credential to a `User`.\n        *   `name`: A user-provided name for the device (e.g., \"My Laptop\").\n        *   `userHandle`: A unique identifier for the user, provided during registration.\n        *   `credentialId`: The globally unique, URL-safe Base64 encoded ID for this credential.\n        *   `publicKey`: The user''s public key, encoded as a string.\n        *   `signatureCount`: A counter that is incremented on each successful authentication to help prevent credential cloning.\n        *   `createdAt`: The timestamp of when the credential was registered.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/Permission.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a single, defined permission from the `permissions` table. It models a granular action that can be assigned to a user, providing a structured object containing the permission''s unique key and a human-readable description.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used by the `PermissionDAO` to represent permission data retrieved from the database and is passed to the `AdminUserServlet` to populate the permissions checklist in the user editing modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the permission.\n        *   `permissionKey`: The unique string identifier for the permission (e.g., \"USER_CREATE\"). This key is used for programmatic checks.\n        *   `description`: A user-friendly description of what the permission allows (e.g., \"Kann neue Benutzer anlegen.\").\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/ProfileChangeRequest.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a user''s request to modify their own profile data, corresponding to a record in the `profile_change_requests` table. It captures who made the request, what changes they requested (as a JSON string), its current status, and who reviewed it.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer request data between the `ProfileChangeRequestDAO` and the servlets that handle the request workflow (`ProfileServlet` for creation, `AdminChangeRequestServlet` for review).\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDateTime`: For the `requestedAt` and `reviewedAt` timestamps.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the request.\n        *   `userId`: Foreign key of the user who made the request.\n        *   `username`: Transient field for the requester''s name, for display in the admin UI.\n        *   `requestedChanges`: A JSON string containing a map of the fields to be changed and their new values (e.g., `{\"email\":\"new@email.com\", \"className\":\"11a\"}`).\n        *   `status`: An enum-like string (`\"PENDING\"`, `\"APPROVED\"`, `\"DENIED\"`) indicating the state of the request.\n        *   `requestedAt`: Timestamp of when the request was submitted.\n        *   `reviewedByAdminId`: Foreign key of the admin who reviewed the request.\n        *   `reviewedByAdminName`: Transient field for the admin''s name.\n        *   `reviewedAt`: Timestamp of when the request was reviewed.\n    *   **Getters and Setters**: Standard methods for property access.');
COMMIT;