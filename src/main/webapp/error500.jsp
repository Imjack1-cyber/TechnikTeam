<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<%--
  error500.jsp - REDESIGNED & INTERACTIVE
  
  A creative "Internal Server Error" page featuring a simulated diagnostic tool with a realistic typing effect.
--%>

<c:import url="/WEB-INF/jspf/header.jspf">
	<c:param name="pageTitle" value="500 - Interner Fehler" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--danger-color);">500</h1>
	<h2>Systemfehler im Hauptrechner</h2>
	<p class="error-message-text">Ein unerwarteter Fehler ist
		aufgetreten und unser System ist ins Stolpern geraten. Starten Sie die
		automatische Systemdiagnose, um den Fehler zu analysieren.</p>

	<!-- Interactive Diagnostic Tool -->
	<div class="diagnostic-container">
		<button id="diagnostic-btn" class="btn btn-warning">
			<i class="fas fa-tasks"></i> Diagnose starten
		</button>
		<div id="diagnostic-output" class="diagnostic-console">
			<!-- Terminal content will be generated by script -->
		</div>
	</div>

	<a href="${pageContext.request.contextPath}/home"
		class="btn btn-primary" style="margin-top: 1.5rem;"> <i
		class="fas fa-home"></i> Flucht zur Startseite
	</a>
</div>

<%-- Hidden Debug Info --%>
<!--
    Exception Details: Request URI: ${pageContext.errorData.requestURI}, Servlet: ${pageContext.errorData.servletName}, Exception: ${pageContext.exception.message}
-->

<style>
.error-page-container {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	min-height: 70vh;
	padding: 2rem;
}

.error-code {
	font-size: 5rem;
	font-weight: 800;
	line-height: 1;
	margin: 0;
}

.error-page-container h2 {
	font-size: 1.75rem;
	border: none;
	margin-top: 0;
	margin-bottom: 1.5rem;
}

.error-message-text {
	max-width: 600px;
	font-size: 1.1rem;
	line-height: 1.6;
}

.diagnostic-container {
	width: 100%;
	max-width: 600px;
	margin-top: 2rem;
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	padding: 1rem;
	background: var(--bg-color);
}

.diagnostic-console {
	font-family: monospace;
	text-align: left;
	height: 220px;
	overflow-y: auto;
	background-color: #000;
	color: #0f0;
	padding: 1rem;
	margin-top: 1rem;
	border-radius: 4px;
	border: 1px solid #333;
}

.diagnostic-console p {
	margin: 0;
	white-space: pre-wrap;
}

.diagnostic-console .fail {
	color: #ff4d4d;
}

.diagnostic-console .warn {
	color: #f0b72f;
}

.diagnostic-console .ok {
	color: #56d364;
}

.diagnostic-console .info {
	color: #79c0ff;
}

.cursor {
	display: inline-block;
	width: 0.6em;
	background-color: #0f0;
	animation: blink 1s step-end infinite;
}

@
keyframes blink { 50% {
	background-color: transparent;
}
}
</style>

<c:import url="/WEB-INF/jspf/footer.jspf" />

<script>
document.addEventListener('DOMContentLoaded', () => {
    const diagBtn = document.getElementById('diagnostic-btn');
    const output = document.getElementById('diagnostic-output');

    const steps = [
        { text: 'Initialisiere Diagnose-Protokoll...', type: 'info', icon: 'fas fa-cogs' },
        { text: 'Prüfe Speicher-Integrität...', type: 'info', icon: 'fas fa-memory' },
        { text: '[OK] RAM Module antworten.', type: 'ok', icon: 'fas fa-check-circle' },
        { text: 'Verbinde mit Kernel...', type: 'info', icon: 'fas fa-project-diagram' },
        { text: '[WARN] Kernel antwortet langsam. Kaffee-Level kritisch.', type: 'warn', icon: 'fas fa-exclamation-triangle' },
        { text: 'Lade KI-Logikmodule...', type: 'info', icon: 'fas fa-brain' },
        { text: '[FAIL] Logikmodul "Hamster im Laufrad" hat die Arbeit niedergelegt.', type: 'fail', icon: 'fas fa-times-circle' },
        { text: 'Versuche Workaround: Mehr Glitzer-Effekte laden...', type: 'warn', icon: 'fas fa-magic' },
        { text: '[FAIL] Glitzer-Puffer übergelaufen.', type: 'fail', icon: 'fas fa-times-circle' },
        { text: '--------------------------------', type: 'info', icon: '' },
        { text: 'Diagnose abgeschlossen. Fehler gefunden.', type: 'fail', icon: 'fas fa-skull-crossbones' }
    ];

    let isRunning = false;
    
    // Function to simulate typing text into an element
    async function typeText(element, text, delay = 20) {
        for (let i = 0; i < text.length; i++) {
            element.innerHTML += text.charAt(i);
            output.scrollTop = output.scrollHeight;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }

    diagBtn.addEventListener('click', async () => {
        if (isRunning) return;
        
        isRunning = true;
        diagBtn.disabled = true;
        diagBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Diagnose läuft...';
        output.innerHTML = ''; // Clear previous output

        for (const step of steps) {
            const line = document.createElement('p');
            line.className = step.type;
            const iconHtml = step.icon ? `<i class="${step.icon}" style="margin-right: 8px;"></i>` : '';
            line.innerHTML = `${iconHtml}`;
            output.appendChild(line);
            
            // Type out the text for the current line
            await typeText(line, step.text);

            await new Promise(resolve => setTimeout(resolve, 300)); // Pause between lines
        }
        
        // Add final cursor
        const finalLine = document.createElement('p');
        finalLine.innerHTML = '> <span class="cursor"> </span>';
        output.appendChild(finalLine);
        output.scrollTop = output.scrollHeight;

        diagBtn.disabled = false;
        diagBtn.innerHTML = '<i class="fas fa-tasks"></i> Diagnose erneut starten';
        isRunning = false;
    });
});
</script>