<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<%--
  error404.jsp - REDESIGNED & INTERACTIVE
  
  A creative "Page Not Found" page featuring an interactive "lost file" terminal simulation.
--%>

<c:import url="/WEB-INF/jspf/header.jspf">
	<c:param name="pageTitle" value="404 - Seite nicht gefunden" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code">404</h1>
	<h2>Ressource nicht gefunden</h2>
	<p class="error-message-text">
		Sie haben sich im Dateisystem verirrt. Die angeforderte Ressource
		wurde nicht gefunden. <br>Das Systemprotokoll unten zeigt weitere
		Details.
	</p>

	<!-- Interactive Terminal -->
	<div class="terminal-window">
		<div class="terminal-header">
			<div class="terminal-buttons">
				<span class="term-btn close"></span> <span class="term-btn min"></span>
				<span class="term-btn max"></span>
			</div>
			<span>bash -- technik-team</span>
		</div>
		<div id="terminal-body">
			<!-- Terminal content is generated by script -->
		</div>
	</div>

	<div id="home-link-container"
		style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
		<a href="${pageContext.request.contextPath}/home"
			class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
			Startseite
		</a>
	</div>
</div>

<style>
.error-page-container {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	min-height: 70vh;
	padding: 2rem;
}

.error-code {
	font-size: 5rem;
	font-weight: 800;
	line-height: 1;
	color: var(--text-muted-color);
	margin: 0;
}

.error-page-container h2 {
	font-size: 1.75rem;
	border: none;
	margin-top: 0;
	margin-bottom: 1.5rem;
}

.error-message-text {
	max-width: 600px;
	font-size: 1.1rem;
	line-height: 1.6;
	margin-bottom: 2rem;
}

.terminal-window {
	width: 100%;
	max-width: 650px;
	background: #000;
	border-radius: 8px;
	box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
	font-family: monospace, monospace;
}

.terminal-header {
	background: #333;
	padding: 8px;
	border-top-left-radius: 8px;
	border-top-right-radius: 8px;
	display: flex;
	align-items: center;
	color: #ccc;
	font-size: 0.9em;
}

.terminal-buttons {
	display: flex;
	gap: 6px;
	margin-right: 12px;
}

.term-btn {
	display: block;
	width: 12px;
	height: 12px;
	border-radius: 50%;
}

.term-btn.close {
	background: #ff5f56;
}

.term-btn.min {
	background: #ffbd2e;
}

.term-btn.max {
	background: #27c93f;
}

#terminal-body {
	padding: 1rem;
	height: 200px;
	overflow-y: auto;
	text-align: left;
}

#terminal-body p {
	margin: 0;
	white-space: pre-wrap;
	word-break: break-all;
}

#terminal-body .prompt {
	color: #56d364;
} /* Green */
#terminal-body .command {
	color: #fff;
}

#terminal-body .error {
	color: #f87171;
} /* Red */
#terminal-body .info {
	color: #79c0ff;
} /* Blue */
#terminal-body .link {
	color: #56d364;
	text-decoration: underline;
}

.cursor {
	display: inline-block;
	width: 0.6em;
	background-color: #fff;
	animation: blink 1s step-end infinite;
}

@
keyframes blink { 50% {
	background-color: transparent;
}
}
</style>

<c:import url="/WEB-INF/jspf/footer.jspf" />

<script>
document.addEventListener('DOMContentLoaded', () => {
    const terminalBody = document.getElementById('terminal-body');
    const homeLinkContainer = document.getElementById('home-link-container');
    const requestUri = "${fn:escapeXml(pageContext.errorData.requestURI)}";

    let currentLine;

    // Helper function to simulate typing text
    async function type(text, element, delay = 50) {
        for (const char of text) {
            element.innerHTML += char;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }

    // Main animation sequence
    async function runSequence() {
        // Line 1: Show prompt and type command
        currentLine = document.createElement('p');
        terminalBody.appendChild(currentLine);
        await type('<span class="prompt">user@technik-team:~$</span> ', currentLine, 20);
        await type(`<span class="command">ls -l ${requestUri}</span>`, currentLine, 40);
        await new Promise(resolve => setTimeout(resolve, 500)); // Pause after command

        // Line 2: Show error message
        currentLine = document.createElement('p');
        currentLine.className = 'error';
        terminalBody.appendChild(currentLine);
        await type(`ls: cannot access '${requestUri}': No such file or directory`, currentLine, 15);
        await new Promise(resolve => setTimeout(resolve, 800)); // Pause after error

        // Line 3: Show helpful hint
        currentLine = document.createElement('p');
        currentLine.className = 'info';
        terminalBody.appendChild(currentLine);
        await type("Tipp: Kehren Sie mit dem folgenden Befehl zur Startseite zurück:", currentLine, 25);
        
        // Line 4: The actionable "command"
        currentLine = document.createElement('p');
        terminalBody.appendChild(currentLine);
        await type('<span class="prompt">user@technik-team:~$</span> ', currentLine, 20);
        
        const homeLink = document.createElement('a');
        homeLink.href = "${pageContext.request.contextPath}/home";
        homeLink.className = 'link';
        currentLine.appendChild(homeLink);
        await type('cd /home', homeLink, 80);
        
        // Add final blinking cursor
        currentLine.innerHTML += ' <span class="cursor"> </span>';

        // Reveal the main "home" button
        homeLinkContainer.style.opacity = '1';
    }

    runSequence();
});
</script>