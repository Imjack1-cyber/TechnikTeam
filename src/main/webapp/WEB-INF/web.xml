<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"
	version="5.0">

	<display-name>TechnikTeam Web Application</display-name>

	<listener>
		<listener-class>de.technikteam.listener.ApplicationInitializerListener</listener-class>
	</listener>
	<listener>
		<listener-class>de.technikteam.config.GuiceConfig</listener-class>
	</listener>
	<listener>
		<listener-class>de.technikteam.listener.AppContextListener</listener-class>
	</listener>
	<listener>
		<listener-class>de.technikteam.listener.SessionListener</listener-class>
	</listener>

	<filter>
		<filter-name>guiceFilter</filter-name>
		<filter-class>com.google.inject.servlet.GuiceFilter</filter-class>
		<async-supported>true</async-supported>
	</filter>
	<filter-mapping>
		<filter-name>guiceFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<session-config>
		<session-timeout>30</session-timeout>
		<cookie-config>
			<http-only>true</http-only>
			<!-- In production, this should be set to true and served over HTTPS -->
			<secure>false</secure>
		</cookie-config>
	</session-config>

	<welcome-file-list>
		<welcome-file>/</welcome-file>
	</welcome-file-list>

	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<url-pattern>*.jspf</url-pattern>
			<el-ignored>false</el-ignored>
		</jsp-property-group>
	</jsp-config>

	<!-- - The error-page for 404 is a critical part of the Single Page Application 
		(SPA) functionality. - When a user directly navigates to a deep link (e.g., 
		/veranstaltungen/details/123), the server - won't find a corresponding file 
		or servlet and would normally return a 404 error. - This directive intercepts 
		that 404 and instead serves the root index.html file. - The React Router 
		running in the browser then reads the URL and correctly displays the - corresponding 
		client-side route. This allows for clean URLs and proper browser history. 
		- This should NOT interfere with API 404s (e.g., /api/v1/nonexistent), as 
		those are handled by - the application's servlets which send a 404 response 
		directly, bypassing this container-level rule. -->
	<error-page>
		<error-code>404</error-code>
		<location>/index.html</location>
	</error-page>

	<!-- Standard error pages for legacy JSP views or unhandled server errors. -->
	<error-page>
		<error-code>400</error-code>
		<location>/views/error/error400.jsp</location>
	</error-page>
	<error-page>
		<error-code>401</error-code>
		<location>/views/error/error401.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/views/error/error403.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/views/error/error500.jsp</location>
	</error-page>
	<error-page>
		<error-code>503</error-code>
		<location>/views/error/error503.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/views/error/error500.jsp</location>
	</error-page>
</web-app>