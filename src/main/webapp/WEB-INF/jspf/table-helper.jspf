<%--
  table-helper.jspf
  
  This JSP fragment contains a reusable JavaScript block for adding client-side
  filtering and sorting functionality to any HTML table. It is intended to be
  included on pages that need this feature.
  
  To use this, the page must have:
  1. An input with id="table-filter".
  2. A table with class="searchable-table" for filtering.
  3. A table with class="sortable-table" for sorting.
  4. Table headers (<th>) inside the sortable table should have the class="sortable"
     and a "data-sort-type" attribute ('string' or 'number').
--%>
<style>
.table-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
}
.table-controls .form-group {
    min-width: 250px;
}
</style>
<script>
document.addEventListener('DOMContentLoaded', () => {
    
    // --- TABLE FILTERING LOGIC ---
    const filterInput = document.getElementById('table-filter');
    const searchableLists = document.querySelectorAll('.searchable-list');
    const searchableTables = document.querySelectorAll('.searchable-table');

    if (filterInput) {
        filterInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            
            // Filter mobile card lists
            searchableLists.forEach(list => {
                const items = list.querySelectorAll('[data-searchable-content]');
                items.forEach(item => {
                    const content = item.dataset.searchableContent.toLowerCase();
                    item.style.display = content.includes(searchTerm) ? '' : 'none';
                });
            });

            // Filter desktop tables
            searchableTables.forEach(table => {
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const content = row.textContent.toLowerCase();
                    row.style.display = content.includes(searchTerm) ? '' : 'none';
                });
            });
        });
    }

    // --- TABLE SORTING LOGIC ---
    document.querySelectorAll('.sortable-table').forEach(table => {
        const headers = table.querySelectorAll('th.sortable');
        const tbody = table.querySelector('tbody');

        headers.forEach((header, index) => {
            header.addEventListener('click', () => {
                const rows = Array.from(tbody.querySelectorAll('tr'));
                const isAscending = !header.classList.contains('sorted-asc');
                const sortType = header.dataset.sortType || 'string';

                // Reset other headers
                headers.forEach(h => {
                    h.classList.remove('sorted-asc', 'sorted-desc');
                });
                
                header.classList.toggle('sorted-asc', isAscending);
                header.classList.toggle('sorted-desc', !isAscending);

                rows.sort((a, b) => {
                    let valA = a.children[index].textContent.trim();
                    let valB = b.children[index].textContent.trim();
                    
                    if (sortType === 'number') {
                        valA = parseFloat(valA) || 0;
                        valB = parseFloat(valB) || 0;
                    }

                    if (valA < valB) {
                        return isAscending ? -1 : 1;
                    }
                    if (valA > valB) {
                        return isAscending ? 1 : -1;
                    }
                    return 0;
                });

                tbody.append(...rows);
            });
        });
    });
});
</script>