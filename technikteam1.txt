
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\SystemStatsApiServlet.java
========================================================================

package de.technikteam.servlet.api;

import com.google.gson.Gson;
import de.technikteam.model.SystemStatsDTO;
import de.technikteam.service.SystemInfoService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Provides system statistics as a JSON API endpoint. This servlet is protected
 * by the AdminFilter.
 */
@WebServlet("/api/admin/system-stats")
public class SystemStatsApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private SystemInfoService systemInfoService;
	private Gson gson;

	@Override
	public void init() throws ServletException {
		systemInfoService = new SystemInfoService();
		gson = new Gson();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		SystemStatsDTO stats = systemInfoService.getSystemStats();
		String jsonResponse = gson.toJson(stats);

		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(jsonResponse);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\UserPreferencesApiServlet.java
========================================================================

package de.technikteam.servlet.api;

import de.technikteam.dao.UserDAO;
import de.technikteam.model.User;
import de.technikteam.util.CSRFUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.Set;

@WebServlet("/api/user/preferences")
public class UserPreferencesApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(UserPreferencesApiServlet.class);
	private static final Set<String> VALID_THEMES = Set.of("light", "dark");
	private UserDAO userDAO;

	@Override
	public void init() {
		userDAO = new UserDAO();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession(false);
		if (session == null || session.getAttribute("user") == null) {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "User not authenticated.");
			return;
		}

		if (!CSRFUtil.isTokenValid(request)) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF Token.");
			return;
		}

		User user = (User) session.getAttribute("user");
		String theme = request.getParameter("theme");

		if (theme == null || !VALID_THEMES.contains(theme)) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid theme value.");
			return;
		}

		if (userDAO.updateUserTheme(user.getId(), theme)) {
			user.setTheme(theme);
			session.setAttribute("user", user); // Update user object in session
			logger.info("Updated theme for user '{}' to '{}'.", user.getUsername(), theme);
			response.setStatus(HttpServletResponse.SC_OK);
		} else {
			logger.error("Failed to update theme for user '{}' in database.", user.getUsername());
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Could not save theme preference.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\CSRFUtil.java
========================================================================

package de.technikteam.util;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.security.SecureRandom;
import java.util.Base64;
import java.util.Objects;

/**
 * A utility class for Cross-Site Request Forgery (CSRF) protection. It provides
 * methods to generate, store, and validate session-bound tokens.
 */
public final class CSRFUtil {

	private static final Logger logger = LogManager.getLogger(CSRFUtil.class);
	private static final String CSRF_TOKEN_SESSION_ATTR = "csrfToken";
	private static final String CSRF_TOKEN_PARAM_NAME = "csrfToken";

	/**
	 * Private constructor to prevent instantiation of this utility class.
	 */
	private CSRFUtil() {
	}

	/**
	 * Generates a new, cryptographically secure random token and stores it in the
	 * user's session. This should be called after a successful login or when a new
	 * session is created.
	 *
	 * @param session The HttpSession to store the token in.
	 */
	public static void storeToken(HttpSession session) {
		if (session != null) {
			String token = generateToken();
			session.setAttribute(CSRF_TOKEN_SESSION_ATTR, token);
			logger.trace("Stored new CSRF token in session {}", session.getId());
		}
	}

	/**
	 * Generates a new, cryptographically secure random token.
	 *
	 * @return A Base64-encoded random token string.
	 */
	private static String generateToken() {
		SecureRandom random = new SecureRandom();
		byte[] tokenBytes = new byte[32];
		random.nextBytes(tokenBytes);
		return Base64.getUrlEncoder().withoutPadding().encodeToString(tokenBytes);
	}

	/**
	 * Validates the CSRF token from a request parameter against the one stored in
	 * the session. This method should be called at the beginning of any
	 * state-changing POST/PUT/DELETE request handler.
	 *
	 * @param request The HttpServletRequest containing the token.
	 * @return true if the token is valid and matches the session token, false
	 *         otherwise.
	 */
	public static boolean isTokenValid(HttpServletRequest request) {
		HttpSession session = request.getSession(false);
		String requestToken = request.getParameter(CSRF_TOKEN_PARAM_NAME);
		return isTokenValid(session, requestToken);
	}

	/**
	 * Validates a given request token against the one stored in the session. This
	 * is a helper method, useful for multipart requests where the token is
	 * extracted manually.
	 *
	 * @param session      The current HttpSession.
	 * @param requestToken The token submitted with the request.
	 * @return true if the token is valid and matches the session token, false
	 *         otherwise.
	 */
	public static boolean isTokenValid(HttpSession session, String requestToken) {
		if (session == null) {
			logger.warn("CSRF check failed: No session exists.");
			return false;
		}

		String sessionToken = (String) session.getAttribute(CSRF_TOKEN_SESSION_ATTR);

		if (sessionToken == null || requestToken == null || requestToken.isEmpty()) {
			logger.warn(
					"CSRF check failed: Session or request token is missing. Session-Token-Present: {}, Request-Token-Present: {}",
					sessionToken != null, requestToken != null && !requestToken.isEmpty());
			return false;
		}

		boolean isValid = Objects.equals(sessionToken, requestToken);
		if (!isValid) {
			logger.warn("CSRF token mismatch! Session: [{}], Request: [{}]", sessionToken, requestToken);
		}

		return isValid;
	}

	/**
	 * Returns the HTML hidden input field for the CSRF token. This can be used in
	 * JSPs to easily include the token in forms.
	 *
	 * @param session The current HttpSession.
	 * @return An HTML string for the hidden input field.
	 */
	public static String getCsrfInputField(HttpSession session) {
		if (session != null) {
			String token = (String) session.getAttribute(CSRF_TOKEN_SESSION_ATTR);
			if (token != null) {
				return "<input type=\"hidden\" name=\"" + CSRF_TOKEN_PARAM_NAME + "\" value=\"" + token + "\">";
			}
		}
		return "";
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\DaoUtils.java
========================================================================

package de.technikteam.util;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

/**
 * A utility class providing common helper methods for Data Access Objects
 * (DAOs).
 */
public final class DaoUtils {

	/**
	 * Private constructor to prevent instantiation of this utility class.
	 */
	private DaoUtils() {
	}

	/**
	 * Checks if a ResultSet contains a column with the given name. This check is
	 * case-insensitive. It is useful for handling optional columns from complex
	 * JOINs without causing a SQLException.
	 *
	 * @param rs         The ResultSet to check.
	 * @param columnName The name of the column to look for.
	 * @return true if the column exists in the ResultSet metadata, false otherwise.
	 * @throws SQLException If a database access error occurs while retrieving
	 *                      metadata.
	 */
	public static boolean hasColumn(ResultSet rs, String columnName) throws SQLException {
		ResultSetMetaData rsmd = rs.getMetaData();
		int columnCount = rsmd.getColumnCount();
		for (int i = 1; i <= columnCount; i++) {
			if (columnName.equalsIgnoreCase(rsmd.getColumnName(i))) {
				return true;
			}
		}
		return false;
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\NavigationRegistry.java
========================================================================

package de.technikteam.util;

import de.technikteam.model.NavigationItem;
import de.technikteam.model.User;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * A central registry for all navigation items in the application. This class
 * provides a single source of truth for the sidebar links and their required
 * permissions, ensuring consistency and simplifying access control logic.
 */
public final class NavigationRegistry {

	private static final List<NavigationItem> ALL_ITEMS = new ArrayList<>();

	// Defines all possible navigation links, their icons, and the permission
	// required to see them.
	// A null permission means the link is public to all authenticated users.
	static {
		// User Section
		ALL_ITEMS.add(new NavigationItem("Dashboard", "/home", "fa-home", null));
		ALL_ITEMS.add(new NavigationItem("Lehrgänge", "/lehrgaenge", "fa-graduation-cap", null));
		ALL_ITEMS.add(new NavigationItem("Veranstaltungen", "/veranstaltungen", "fa-calendar-check", null));
		ALL_ITEMS.add(new NavigationItem("Lager", "/lager", "fa-boxes", null));
		ALL_ITEMS.add(new NavigationItem("Dateien", "/dateien", "fa-folder-open", null));
		ALL_ITEMS.add(new NavigationItem("Kalender", "/kalender", "fa-calendar-alt", null));

		// Admin Section
		ALL_ITEMS.add(new NavigationItem("Admin Dashboard", "/admin/dashboard", "fa-tachometer-alt",
				"ADMIN_DASHBOARD_ACCESS"));
		ALL_ITEMS.add(new NavigationItem("Benutzer", "/admin/mitglieder", "fa-users-cog", "USER_READ"));
		ALL_ITEMS.add(new NavigationItem("Events", "/admin/veranstaltungen", "fa-calendar-plus", "EVENT_READ"));
		ALL_ITEMS.add(new NavigationItem("Lager", "/admin/lager", "fa-warehouse", "STORAGE_READ"));
		ALL_ITEMS.add(new NavigationItem("Dateien", "/admin/dateien", "fa-file-upload", "FILE_MANAGE"));
		ALL_ITEMS.add(new NavigationItem("Lehrgangs-Vorlagen", "/admin/lehrgaenge", "fa-book", "COURSE_READ"));
		ALL_ITEMS.add(new NavigationItem("Kit-Verwaltung", "/admin/kits", "fa-box-open", "KIT_READ"));
		ALL_ITEMS.add(new NavigationItem("Abzeichen", "/admin/achievements", "fa-award", "ACHIEVEMENT_VIEW"));
		ALL_ITEMS.add(new NavigationItem("Defekte Artikel", "/admin/defekte", "fa-wrench", "STORAGE_READ"));
		ALL_ITEMS.add(new NavigationItem("Quali-Matrix", "/admin/matrix", "fa-th-list", "QUALIFICATION_READ"));
		ALL_ITEMS.add(new NavigationItem("Berichte", "/admin/berichte", "fa-chart-pie", "REPORT_READ"));
		ALL_ITEMS.add(new NavigationItem("Aktions-Log", "/admin/log", "fa-clipboard-list", "LOG_READ"));
		ALL_ITEMS.add(new NavigationItem("System", "/admin/system", "fa-server", "SYSTEM_READ"));
	}

	private NavigationRegistry() {
		// Private constructor to prevent instantiation.
	}

	/**
	 * Builds a filtered list of navigation items based on the user's permissions.
	 *
	 * @param user The current user.
	 * @return A list of NavigationItem objects the user is allowed to see.
	 */
	public static List<NavigationItem> getNavigationItemsForUser(User user) {
		if (user == null || user.getPermissions() == null) {
			return new ArrayList<>();
		}

		final Set<String> userPermissions = user.getPermissions();

		return ALL_ITEMS.stream().filter(item -> {
			final String requiredPerm = item.getRequiredPermission();

			// Public items are always visible
			if (requiredPerm == null) {
				return true;
			}

			// Super-admins see all admin items
			if (userPermissions.contains("ACCESS_ADMIN_PANEL")) {
				return true;
			}

			// Special case: The "Admin Dashboard" link is visible if the user has *any*
			// admin-level access.
			if ("ADMIN_DASHBOARD_ACCESS".equals(requiredPerm)) {
				return user.hasAdminAccess();
			}

			// Special case: The "Abzeichen" link is visible if user can perform any
			// achievement action.
			if ("ACHIEVEMENT_VIEW".equals(requiredPerm)) {
				return userPermissions.contains("ACHIEVEMENT_CREATE") || userPermissions.contains("ACHIEVEMENT_UPDATE")
						|| userPermissions.contains("ACHIEVEMENT_DELETE");
			}

			// Standard permission check for all other items
			return userPermissions.contains(requiredPerm);
		}).collect(Collectors.toList());
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\ChatSessionManager.java
========================================================================

package de.technikteam.websocket;

import jakarta.websocket.Session;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;

/**
 * Manages WebSocket sessions for event-specific chat rooms using a thread-safe
 * Singleton pattern. It maps event IDs to a set of active sessions, allowing
 * for targeted broadcasting of messages.
 */
public final class ChatSessionManager {
	private static final Logger logger = LogManager.getLogger(ChatSessionManager.class);
	private static final ChatSessionManager INSTANCE = new ChatSessionManager();

	// A map where the key is the event ID and the value is a thread-safe set of
	// sessions for that event.
	private final Map<String, Set<Session>> sessionsByEvent = new ConcurrentHashMap<>();

	private ChatSessionManager() {
	}

	/**
	 * Gets the singleton instance of the ChatSessionManager.
	 *
	 * @return The single instance of this class.
	 */
	public static ChatSessionManager getInstance() {
		return INSTANCE;
	}

	/**
	 * Adds a new WebSocket session to a specific event chat room.
	 *
	 * @param eventId The ID of the event chat room.
	 * @param session The WebSocket session to add.
	 */
	public void addSession(String eventId, Session session) {
		sessionsByEvent.computeIfAbsent(eventId, k -> new CopyOnWriteArraySet<>()).add(session);
		logger.info("Session {} registered for event chat [{}].", session.getId(), eventId);
	}

	/**
	 * Removes a WebSocket session from an event chat room. If the room becomes
	 * empty, it is removed from the map to conserve memory.
	 *
	 * @param eventId The ID of the event chat room.
	 * @param session The WebSocket session to remove.
	 */
	public void removeSession(String eventId, Session session) {
		Set<Session> sessions = sessionsByEvent.get(eventId);
		if (sessions != null) {
			sessions.remove(session);
			logger.info("Session {} removed from event chat [{}].", session.getId(), eventId);
			if (sessions.isEmpty()) {
				sessionsByEvent.remove(eventId);
				logger.info("Event chat room [{}] is now empty and has been removed.", eventId);
			}
		}
	}

	/**
	 * Broadcasts a message to all open sessions in a specific event chat room.
	 *
	 * @param eventId The ID of the event chat room.
	 * @param message The message to broadcast.
	 */
	public void broadcast(String eventId, String message) {
		Set<Session> sessions = sessionsByEvent.get(eventId);
		if (sessions != null) {
			logger.debug("Broadcasting to {} sessions in event chat [{}].", sessions.size(), eventId);
			for (Session session : sessions) {
				if (session.isOpen()) {
					try {
						session.getBasicRemote().sendText(message);
					} catch (IOException e) {
						logger.error("Error broadcasting to session {}:", session.getId(), e);
						// Consider removing the session here if an error occurs
					}
				}
			}
		}
	}

	/**
	 * Broadcasts a message to all open sessions in an event chat room, except for
	 * the originating session.
	 *
	 * @param eventId        The ID of the event chat room.
	 * @param message        The message to broadcast.
	 * @param excludeSession The session to exclude from the broadcast.
	 */
	public void broadcastExcept(String eventId, String message, Session excludeSession) {
		Set<Session> sessions = sessionsByEvent.get(eventId);
		if (sessions != null) {
			for (Session session : sessions) {
				if (session.isOpen() && !session.getId().equals(excludeSession.getId())) {
					try {
						session.getBasicRemote().sendText(message);
					} catch (IOException e) {
						logger.error("Error broadcasting (except self) to session {}:", session.getId(), e);
					}
				}
			}
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\DocumentEditorSocket.java
========================================================================

package de.technikteam.websocket;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import de.technikteam.dao.FileDAO;
import de.technikteam.model.User;
import jakarta.websocket.*;
import jakarta.websocket.server.PathParam;
import jakarta.websocket.server.ServerEndpoint;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.Map;

/**
 * WebSocket endpoint for real-time collaborative document editing. This version
 * uses a full-text synchronization model.
 */
@ServerEndpoint(value = "/ws/editor/{fileId}", configurator = GetHttpSessionConfigurator.class)
public class DocumentEditorSocket {

	private static final Logger logger = LogManager.getLogger(DocumentEditorSocket.class);
	private static final FileDAO fileDAO = new FileDAO();
	private static final Gson gson = new Gson();

	@OnOpen
	public void onOpen(Session session, @PathParam("fileId") String fileId, EndpointConfig config) throws IOException {
		User user = (User) config.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);

		if (user == null || (!user.getPermissions().contains("FILE_UPDATE")
				&& !user.getPermissions().contains("ACCESS_ADMIN_PANEL"))) {
			logger.warn("Unauthorized WebSocket connection attempt for editor on file ID {}. User: {}", fileId,
					user != null ? user.getUsername() : "GUEST");
			session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, "Permission denied."));
			return;
		}

		session.getUserProperties().put(GetHttpSessionConfigurator.USER_PROPERTY_KEY, user);
		DocumentSessionManager.getInstance().addSession(fileId, session);
	}

	@OnMessage
	public void onMessage(Session session, String message, @PathParam("fileId") String fileId) {
		User user = (User) session.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);
		if (user == null)
			return;

		try {
			Map<String, String> messageMap = gson.fromJson(message, Map.class);
			String type = messageMap.get("type");
			String content = messageMap.get("payload");

			if ("content_update".equals(type)) {
				handleContentUpdate(session, fileId, content);
			}
		} catch (JsonSyntaxException e) {
			logger.error("Invalid JSON received from user '{}' for file ID {}: {}", user.getUsername(), fileId, message,
					e);
		}
	}

	private void handleContentUpdate(Session originSession, String fileIdStr, String content) {
		try {
			int fileId = Integer.parseInt(fileIdStr);
			de.technikteam.model.File dbFile = fileDAO.getFileById(fileId);

			if (dbFile != null) {
				// Persist the changes to the disk
				if (fileDAO.updateFileContent(dbFile.getFilepath(), content)) {
					fileDAO.touchFileRecord(fileId); // Update timestamp

					// Broadcast the full content to other connected clients
					Map<String, String> broadcastPayload = Map.of("type", "content_update", "payload", content);
					DocumentSessionManager.getInstance().broadcastExcept(fileIdStr, gson.toJson(broadcastPayload),
							originSession);
				} else {
					logger.error("Failed to save file content to disk for file ID: {}", fileIdStr);
				}
			} else {
				logger.warn("Received content update for non-existent file ID: {}", fileIdStr);
			}
		} catch (NumberFormatException e) {
			logger.error("Invalid fileId '{}' received in WebSocket message.", fileIdStr);
		}
	}

	@OnClose
	public void onClose(Session session, @PathParam("fileId") String fileId) {
		User user = (User) session.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);
		String username = (user != null) ? user.getUsername() : "[unauthenticated]";
		logger.info("Editor WebSocket session for user '{}' on file {} closed.", username, fileId);
		DocumentSessionManager.getInstance().removeSession(fileId, session);
	}

	@OnError
	public void onError(Session session, Throwable throwable, @PathParam("fileId") String fileId) {
		logger.error("WebSocket ERROR in editor for file [{}], session [{}]:", fileId, session.getId(), throwable);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\DocumentSessionManager.java
========================================================================

package de.technikteam.websocket;

import jakarta.websocket.Session;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;

/**
 * Manages WebSocket sessions for document-specific editing rooms using a
 * thread-safe Singleton pattern. It maps file IDs to a set of active sessions,
 * allowing for targeted broadcasting of document updates.
 */
public final class DocumentSessionManager {
	private static final Logger logger = LogManager.getLogger(DocumentSessionManager.class);
	private static final DocumentSessionManager INSTANCE = new DocumentSessionManager();

	// A map where the key is the file ID and the value is a thread-safe set of
	// sessions for that document.
	private final Map<String, Set<Session>> sessionsByFile = new ConcurrentHashMap<>();

	private DocumentSessionManager() {
	}

	public static DocumentSessionManager getInstance() {
		return INSTANCE;
	}

	public void addSession(String fileId, Session session) {
		sessionsByFile.computeIfAbsent(fileId, k -> new CopyOnWriteArraySet<>()).add(session);
		logger.info("Editor session {} registered for file [{}].", session.getId(), fileId);
	}

	public void removeSession(String fileId, Session session) {
		Set<Session> sessions = sessionsByFile.get(fileId);
		if (sessions != null) {
			sessions.remove(session);
			logger.info("Editor session {} removed from file [{}].", session.getId(), fileId);
			if (sessions.isEmpty()) {
				sessionsByFile.remove(fileId);
				logger.info("Editing room for file [{}] is now empty and has been removed.", fileId);
			}
		}
	}

	public int getSessionsCount(String fileId) {
		Set<Session> sessions = sessionsByFile.get(fileId);
		return sessions != null ? sessions.size() : 0;
	}

	public void broadcastExcept(String fileId, String message, Session excludeSession) {
		Set<Session> sessions = sessionsByFile.get(fileId);
		if (sessions != null) {
			for (Session session : sessions) {
				if (session.isOpen() && !session.getId().equals(excludeSession.getId())) {
					try {
						session.getBasicRemote().sendText(message);
					} catch (IOException e) {
						logger.error("Error broadcasting document update to session {}:", session.getId(), e);
					}
				}
			}
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\EventChatSocket.java
========================================================================

package de.technikteam.websocket;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.EventChatDAO;
import de.technikteam.dao.EventDAO;
import de.technikteam.dao.FileDAO;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.Event;
import de.technikteam.model.EventChatMessage;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.service.NotificationService;
import jakarta.websocket.*;
import jakarta.websocket.server.PathParam;
import jakarta.websocket.server.ServerEndpoint;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * WebSocket endpoint for real-time event chats. Handles new messages, edits,
 * deletions, and document collaboration updates.
 */
@ServerEndpoint(value = "/ws/chat/{eventId}", configurator = GetHttpSessionConfigurator.class)
public class EventChatSocket {

	private static final Logger logger = LogManager.getLogger(EventChatSocket.class);
	private static final EventChatDAO chatDAO = new EventChatDAO();
	private static final EventDAO eventDAO = new EventDAO();
	private static final UserDAO userDAO = new UserDAO();
	private static final FileDAO fileDAO = new FileDAO();
	private static final Gson gson = new GsonBuilder()
			.registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	private static final Pattern MENTION_PATTERN = Pattern.compile("@(\\w+)");

	@OnOpen
	public void onOpen(Session session, @PathParam("eventId") String eventId, EndpointConfig config)
			throws IOException {
		User user = (User) config.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);

		// Security: Immediately close the connection if no authenticated user is found.
		if (user == null) {
			logger.warn("Unauthenticated attempt to open WebSocket. Closing session.");
			session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, "Authentication required."));
			return;
		}

		session.getUserProperties().put(GetHttpSessionConfigurator.USER_PROPERTY_KEY, user);
		ChatSessionManager.getInstance().addSession(eventId, session);
	}

	@OnMessage
	public void onMessage(Session session, String message, @PathParam("eventId") String eventId) {
		User user = (User) session.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);
		if (user == null)
			return; // Should not happen due to onOpen check, but as a safeguard.

		try {
			Map<String, Object> messageMap = gson.fromJson(message, Map.class);
			String type = (String) messageMap.get("type");
			@SuppressWarnings("unchecked")
			Map<String, Object> payload = (Map<String, Object>) messageMap.get("payload");

			switch (type) {
			case "new_message":
				handleNewMessage(user, eventId, payload);
				break;
			case "update_message":
				handleUpdateMessage(user, eventId, payload);
				break;
			case "delete_message":
				handleDeleteMessage(user, eventId, payload);
				break;
			case "doc_update":
				handleDocUpdate(session, eventId, payload);
				break;
			default:
				logger.warn("Unknown WebSocket message type received: {}", type);
			}
		} catch (JsonSyntaxException e) {
			logger.error("Error processing message from user '{}'. Invalid JSON format.", user.getUsername(), e);
		}
	}

	/**
	 * Handles real-time updates for a shared document.
	 */
	private void handleDocUpdate(Session originSession, String eventId, Map<String, Object> payload) {
		// A special "event ID" of "0" is used for the global document to avoid
		// conflicts.
		if ("0".equals(eventId)) {
			String content = (String) payload.get("content");
			fileDAO.updateDocumentContent("realtime_notes", content);

			// Broadcast to other clients in the same "document room", excluding the sender.
			Map<String, Object> broadcastPayload = Map.of("type", "doc_update", "payload", payload);
			ChatSessionManager.getInstance().broadcastExcept(eventId, gson.toJson(broadcastPayload), originSession);
		}
	}

	/**
	 * Handles a new chat message, saves it, and broadcasts it to the room.
	 */
	private void handleNewMessage(User user, String eventId, Map<String, Object> payload) {
		String messageText = (String) payload.get("messageText");
		EventChatMessage newMessage = new EventChatMessage();
		newMessage.setEventId(Integer.parseInt(eventId));
		newMessage.setUserId(user.getId());
		newMessage.setUsername(user.getUsername());
		newMessage.setMessageText(messageText);

		EventChatMessage savedMessage = chatDAO.postMessage(newMessage);
		if (savedMessage == null) {
			logger.error("Failed to save new chat message for user {} in event {}", user.getId(), eventId);
			return;
		}

		Map<String, Object> broadcastPayload = Map.of("type", "new_message", "payload", savedMessage);
		ChatSessionManager.getInstance().broadcast(eventId, gson.toJson(broadcastPayload));

		handleMentions(user, savedMessage);
	}

	/**
	 * Parses a message for @mentions and sends notifications.
	 */
	private void handleMentions(User sender, EventChatMessage message) {
		Event event = eventDAO.getEventById(message.getEventId());
		if (event == null)
			return;

		Matcher matcher = MENTION_PATTERN.matcher(message.getMessageText());
		while (matcher.find()) {
			String mentionedUsername = matcher.group(1);
			User mentionedUser = userDAO.getUserByUsername(mentionedUsername);
			if (mentionedUser != null && mentionedUser.getId() != sender.getId()) {
				String notificationMessage = String.format("%s hat Sie im Chat für '%s' erwähnt.", sender.getUsername(),
						event.getName());
				Map<String, Object> notificationPayload = Map.of("type", "mention", "payload",
						Map.of("message", notificationMessage, "url", "/veranstaltungen/details?id=" + event.getId()));
				NotificationService.getInstance().sendNotificationToUser(mentionedUser.getId(), notificationPayload);
				logger.info("Sent @mention notification from {} to {} for event chat {}.", sender.getUsername(),
						mentionedUsername, message.getEventId());
			}
		}
	}

	/**
	 * Handles a request to delete a message, checking permissions before doing so.
	 */
	private void handleDeleteMessage(User user, String eventId, Map<String, Object> payload) {
		int messageId = ((Double) payload.get("messageId")).intValue();

		Event event = eventDAO.getEventById(Integer.parseInt(eventId));
		boolean isEventLeader = event != null && event.getLeaderUserId() == user.getId();
		boolean canDeleteAsAdmin = user.getPermissions().contains("ACCESS_ADMIN_PANEL") || isEventLeader;

		if (chatDAO.deleteMessage(messageId, user.getId(), canDeleteAsAdmin)) {
			int originalUserId = ((Double) payload.get("originalUserId")).intValue();
			if (canDeleteAsAdmin && user.getId() != originalUserId) {
				String logDetails = String.format(
						"User '%s' deleted a chat message (ID: %d) in event chat for event '%s' (ID: %s).",
						user.getUsername(), messageId, event.getName(), eventId);
				AdminLogService.log(user.getUsername(), "DELETE_CHAT_MESSAGE", logDetails);
			}

			Map<String, Object> broadcastPayload = Map.of("type", "message_soft_deleted", "payload",
					Map.of("messageId", messageId, "originalUsername", payload.get("originalUsername"),
							"deletedByUsername", user.getUsername()));
			ChatSessionManager.getInstance().broadcast(eventId, gson.toJson(broadcastPayload));
		} else {
			logger.warn("User {} failed to delete message {} in event {}. Permission was likely denied.",
					user.getUsername(), messageId, eventId);
		}
	}

	/**
	 * Handles a request to update a message's text, checking ownership.
	 */
	private void handleUpdateMessage(User user, String eventId, Map<String, Object> payload) {
		int messageId = ((Double) payload.get("messageId")).intValue();
		String newText = (String) payload.get("newText");

		if (chatDAO.updateMessage(messageId, user.getId(), newText)) {
			Map<String, Object> broadcastPayload = Map.of("type", "message_updated", "payload",
					Map.of("messageId", messageId, "newText", newText));
			ChatSessionManager.getInstance().broadcast(eventId, gson.toJson(broadcastPayload));
		} else {
			logger.warn("User {} failed to update message {}. Not the owner or message deleted.", user.getUsername(),
					messageId);
		}
	}

	@OnClose
	public void onClose(Session session, CloseReason reason, @PathParam("eventId") String eventId) {
		User user = (User) session.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);
		String username = (user != null) ? user.getUsername() : "[unauthenticated]";
		logger.info("WebSocket session for user '{}' closed. Reason: {}", username, reason.getReasonPhrase());
		ChatSessionManager.getInstance().removeSession(eventId, session);
	}

	@OnError
	public void onError(Session session, Throwable throwable, @PathParam("eventId") String eventId) {
		logger.error("WebSocket ERROR in event [{}], session [{}]:", eventId, session.getId(), throwable);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\GetHttpSessionConfigurator.java
========================================================================

package de.technikteam.websocket;

import de.technikteam.model.User;
import jakarta.servlet.http.HttpSession;
import jakarta.websocket.HandshakeResponse;
import jakarta.websocket.server.HandshakeRequest;
import jakarta.websocket.server.ServerEndpointConfig;

/**
 * A custom WebSocket configurator that intercepts the WebSocket handshake
 * process. Its primary purpose is to retrieve the authenticated User object
 * from the HttpSession and make it available to the WebSocket endpoint's
 * session properties. This is a standard pattern for securing WebSocket
 * connections.
 */
public class GetHttpSessionConfigurator extends ServerEndpointConfig.Configurator {

	public static final String USER_PROPERTY_KEY = "user";

	@Override
	public void modifyHandshake(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response) {
		HttpSession httpSession = (HttpSession) request.getHttpSession();
		if (httpSession != null) {
			User user = (User) httpSession.getAttribute(USER_PROPERTY_KEY);
			if (user != null) {
				// Put the authenticated User object into the WebSocket session's user
				// properties.
				sec.getUserProperties().put(USER_PROPERTY_KEY, user);
			}
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\css\style.css
========================================================================

/* =================================================================== */
/*  TECHNIKTEAM DESIGN V3 (Component-Based & Modern)                   */
/* =================================================================== */

/* --- 1. THEME & COLOR PALETTE --- */
:root {
	--primary-color: #007bff;
	--primary-color-hover: #0056b3;
	--primary-color-light: rgba(0, 123, 255, 0.1);
	--bg-color: #f8f9fa;
	--surface-color: #ffffff;
	--text-color: #212529;
	--heading-color: #002B5B; /* Dark, rich blue for headings */
	--text-muted-color: #6c757d;
	--border-color: #dee2e6;
	--success-color: #28a745;
	--danger-color: #dc3545;
	--warning-color: #ffc107;
	--info-color: #0dcaf0;
	--shadow-sm: 0 1px 2px 0 rgb(0 0 0/ 0.05);
	--shadow-md: 0 4px 6px -1px rgb(0 0 0/ 0.1), 0 2px 4px -2px
		rgb(0 0 0/ 0.1);
	--shadow-lg: 0 10px 15px -3px rgb(0 0 0/ 0.1), 0 4px 6px -4px
		rgb(0 0 0/ 0.1);
	--sidebar-width: 260px;
	--header-height: 64px;
	--border-radius: 8px;
	--sidebar-bg: var(--surface-color);
	--sidebar-border: var(--border-color);
	--sidebar-text-color: #343a40;
	--sidebar-text-muted: #6c757d;
	--sidebar-icon-color: #6c757d;
	--sidebar-hover-bg: #e9ecef;
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
	--sidebar-active-text: var(--primary-color);
	--sidebar-active-icon: var(--primary-color);
}

[data-theme="dark"] {
	--primary-color: #58a6ff;
	--primary-color-hover: #80b6ff;
	--primary-color-light: rgba(88, 166, 255, 0.15);
	--bg-color: #0d1117;
	--surface-color: #161b22;
	--text-color: #c9d1d9;
	--heading-color: var(--primary-color);
	/* Vibrant blue for dark mode headings */
	--text-muted-color: #8b949e;
	--border-color: #30363d;
	--success-color: #56d364;
	--danger-color: #f87171;
	--warning-color: #f0b72f;
	--info-color: #67d4ed;
	--sidebar-bg: #161b22;
	--sidebar-border: #30363d;
	--sidebar-text-color: #c9d1d9;
	--sidebar-text-muted: #8b949e;
	--sidebar-icon-color: #8b949e;
	--sidebar-hover-bg: #21262d;
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
	--sidebar-active-text: var(--primary-color);
	--sidebar-active-icon: var(--primary-color);
}

/* --- 2. BASE & TYPOGRAPHY --- */
*, *::before, *::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

html {
	scroll-behavior: smooth;
}

body {
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
		"Helvetica Neue", Arial, sans-serif;
	background-color: var(--bg-color);
	color: var(--text-color);
	line-height: 1.6;
	transition: background-color 0.3s, color 0.3s;
}

h1, h2, h3, h4 {
	color: var(--heading-color);
	line-height: 1.3;
}

h1 {
	font-size: clamp(1.8rem, 5vw, 2.2rem);
	font-weight: 700;
	margin-bottom: 1rem;
}

h2 {
	font-size: clamp(1.2rem, 4vw, 1.5rem);
	margin-bottom: 1.25rem;
	padding-bottom: 0.75rem;
	border-bottom: 1px solid var(--border-color);
	font-weight: 600;
}

h3 {
	font-size: 1.25rem;
	margin-bottom: 1rem;
	font-weight: 600;
}

a {
	color: var(--primary-color);
	text-decoration: none;
	transition: color 0.2s;
}

a:hover {
	text-decoration: underline;
	color: var(--primary-color-hover);
}

.text-success {
	color: var(--success-color) !important;
}

.text-danger {
	color: var(--danger-color) !important;
}

/* --- 3. LAYOUT & CONTAINERS --- */
.main-content-wrapper {
	transition: margin-left 0.3s ease-in-out;
}

.main-content {
	padding: 1.5rem;
	max-width: 1600px;
	margin-left: auto;
	margin-right: auto;
}

.card {
	background: var(--surface-color);
	border-radius: var(--border-radius);
	padding: 1.5rem;
	margin-bottom: 1.5rem;
	box-shadow: var(--shadow-sm);
	border: 1px solid var(--border-color);
	transition: all .3s;
}

.card:hover {
	box-shadow: var(--shadow-md);
}

.card-title {
	border: none;
	padding: 0;
	margin-bottom: 1rem;
}

.dashboard-grid, .responsive-dashboard-grid {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	gap: 1.5rem;
}

@media (max-width: 767.98px) {
    .responsive-dashboard-grid {
        grid-template-columns: 1fr;
    }
}


/* --- 4. NAVIGATION --- */
.sidebar {
	position: fixed;
	top: 0;
	left: calc(-1 * var(--sidebar-width));
	width: var(--sidebar-width);
	height: 100%;
	background: var(--sidebar-bg);
	border-right: 1px solid var(--sidebar-border);
	z-index: 1010;
	transition: left 0.3s ease-in-out, background-color 0.3s, border-color
		0.3s;
	display: flex;
	flex-direction: column;
}

body.nav-open .sidebar {
	left: 0;
	box-shadow: var(--shadow-md);
}

.sidebar-header {
	display: flex;
	align-items: center;
	gap: 0.75rem;
	padding: 0 1.5rem;
	height: var(--header-height);
	flex-shrink: 0;
}

.sidebar-header .logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--heading-color);
	text-decoration: none;
}

.sidebar-header .logo i {
	color: var(--primary-color);
}

.sidebar-nav {
	list-style: none;
	flex-grow: 1;
	overflow-y: auto;
	padding: 0.5rem 0;
}

.sidebar-nav a {
	display: flex;
	align-items: center;
	gap: 1rem;
	padding: 0.9rem 1.5rem;
	color: var(--sidebar-text-muted);
	font-weight: 500;
	transition: all 0.2s;
	border-left: 4px solid transparent;
	white-space: nowrap;
	text-decoration: none;
}

.sidebar-nav a i.fa-fw {
	width: 20px;
	text-align: center;
	color: var(--sidebar-icon-color);
	transition: color 0.2s;
}

.sidebar-nav a:hover {
	color: var(--text-color);
	background-color: var(--sidebar-hover-bg);
}

.sidebar-nav a:hover i.fa-fw {
	color: var(--primary-color);
}

.sidebar-nav a.active-nav-link {
	color: var(--sidebar-active-text);
	font-weight: 600;
	border-left-color: var(--sidebar-active-border);
	background-color: var(--sidebar-active-bg);
}

.sidebar-nav a.active-nav-link i.fa-fw {
	color: var(--sidebar-active-icon);
}

.sidebar-nav .nav-section-title {
	padding: 1.5rem 1.5rem 0.5rem;
	font-size: 0.8rem;
	font-weight: 600;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	color: var(--text-muted-color);
}

.user-actions {
	padding: 1rem 1.5rem;
	border-top: 1px solid var(--sidebar-border);
	flex-shrink: 0;
}

.user-info {
	font-weight: 500;
	margin-bottom: 1rem;
	font-size: 0.9rem;
	color: var(--text-muted-color);
}

.user-info strong {
	color: var(--text-color);
}

.mobile-header {
	display: flex;
	align-items: center;
	justify-content: space-between;
	height: var(--header-height);
	background-color: var(--surface-color);
	padding: 0 1rem;
	position: sticky;
	top: 0;
	z-index: 1000;
	border-bottom: 1px solid var(--border-color);
}

.mobile-header-right {
    display: flex;
    align-items: center;
    gap: 1rem;
}


.mobile-nav-toggle {
	background: none;
	border: none;
	cursor: pointer;
	padding: 0.5rem;
	z-index: 1020;
}

.mobile-nav-toggle .line {
	width: 25px;
	height: 3px;
	background-color: var(--text-color);
	margin: 5px 0;
	border-radius: 3px;
	transition: all 0.3s;
}

body.nav-open .mobile-nav-toggle .line-1 {
	transform: rotate(45deg) translate(5px, 6px);
}

body.nav-open .mobile-nav-toggle .line-2 {
	opacity: 0;
}

body.nav-open .mobile-nav-toggle .line-3 {
	transform: rotate(-45deg) translate(5px, -6px);
}

.mobile-logo {
	font-weight: 600;
	font-size: 1.2rem;
	color: var(--heading-color);
	text-decoration: none;
}

.page-overlay {
	display: none;
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: rgba(0, 0, 0, 0.5);
	z-index: 1005;
}

body.nav-open .page-overlay {
	display: block;
}

@media ( min-width : 992px) {
	.mobile-header, .page-overlay {
		display: none !important;
	}
	.sidebar {
		left: 0;
	}
	.main-content-wrapper {
		margin-left: var(--sidebar-width);
	}
	.sidebar .mobile-only {
        display: none !important;
    }
}

@media ( max-width : 991.98px) {
    .sidebar .desktop-only {
        display: none !important;
    }
}

/* --- 5. COMPONENTS --- */

/* Buttons */
.btn {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	gap: 0.5rem;
	padding: 0.6rem 1.2rem;
	background-color: var(--primary-color);
	color: #fff;
	border: 1px solid transparent;
	border-radius: 6px;
	cursor: pointer;
	font-weight: 500;
	transition: all 0.2s;
	text-align: center;
	text-decoration: none;
}

.btn:hover {
	background-color: var(--primary-color-hover);
	color: #fff;
	text-decoration: none;
	transform: translateY(-1px);
}

.btn:disabled {
	background-color: var(--text-muted-color);
	cursor: not-allowed;
	transform: none;
	opacity: 0.65;
}

.btn.btn-danger {
	background-color: var(--danger-color);
}

.btn.btn-danger-outline {
	background-color: transparent;
	border-color: var(--danger-color);
	color: var(--danger-color);
}

.btn.btn-danger-outline:hover {
	background-color: var(--danger-color);
	color: #fff;
}

.btn.btn-success {
	background-color: var(--success-color);
}

.btn.btn-secondary {
	background-color: var(--text-muted-color);
}

.btn-small {
	padding: 0.4rem 0.8rem;
	font-size: 0.875rem;
}

/* Messages & Banners */
.success-message, .error-message, .info-message, .password-reset-alert {
	padding: 1rem;
	margin-bottom: 1.5rem;
	border-radius: var(--border-radius);
	font-weight: 500;
	display: flex;
	align-items: center;
	gap: 0.75rem;
	color: #fff;
}

.success-message {
	background-color: var(--success-color);
}

.error-message {
	background-color: var(--danger-color);
}

.info-message, .password-reset-alert {
	background-color: var(--info-color);
	color: #000;
}

.password-reset-alert strong {
	cursor: pointer;
	text-decoration: underline;
}

/* Forms & Inputs */
.form-group {
	margin-bottom: 1.25rem;
}

.form-group label {
	display: block;
	margin-bottom: 0.5rem;
	font-weight: 500;
	color: var(--text-muted-color);
}

.form-group input, .form-group select, .form-group textarea {
	width: 100%;
	padding: 0.75rem;
	border: 1px solid var(--border-color);
	border-radius: 6px;
	background-color: var(--surface-color);
	color: var(--text-color);
	font-size: 1rem;
	transition: border-color 0.2s, box-shadow 0.2s;
}

[data-theme="dark"] .form-group textarea,
[data-theme="dark"] #editor {
    color: var(--text-color);
    background-color: var(--surface-color);
}

.form-group input:focus, .form-group select:focus, .form-group textarea:focus
	{
	outline: none;
	border-color: var(--primary-color);
	box-shadow: 0 0 0 3px var(--primary-color-light);
}

.form-group input[type="file"] {
	background-color: var(--bg-color);
}

.password-input-wrapper {
	position: relative;
	display: flex;
	align-items: center;
}

.password-input-wrapper input {
	padding-right: 40px; /* Make space for the icon */
}

.password-toggle-icon {
	position: absolute;
	right: 0;
	top: 0;
	height: 100%;
	width: 40px;
	display: flex;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	color: var(--text-muted-color);
}


.file-size-warning {
	color: var(--danger-color);
	display: none;
	font-size: 0.875rem;
	margin-top: 0.5rem;
}

/* Modals */
.modal-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgba(0, 0, 0, 0.6);
	display: none;
	justify-content: center;
	align-items: center;
	z-index: 2000;
}

.modal-overlay.active {
	display: flex;
}

.modal-content {
	background-color: var(--surface-color);
	padding: 2rem;
	border-radius: var(--border-radius);
	width: 90%;
	max-width: 600px;
	max-height: 90vh;
	overflow-y: auto;
	position: relative;
	box-shadow: var(--shadow-lg);
}

.modal-close-btn {
	position: absolute;
	top: 1rem;
	right: 1rem;
	background: none;
	border: none;
	font-size: 1.5rem;
	cursor: pointer;
	color: var(--text-muted-color);
}

.modal-tabs {
	display: flex;
	border-bottom: 1px solid var(--border-color);
	margin-bottom: 1.5rem;
}

.modal-tab-button {
	padding: 0.75rem 1rem;
	border: none;
	background: none;
	cursor: pointer;
	font-size: 1rem;
	font-weight: 500;
	color: var(--text-muted-color);
	border-bottom: 3px solid transparent;
	transition: all 0.2s;
}

.modal-tab-button.active {
	color: var(--primary-color);
	border-bottom-color: var(--primary-color);
}

.modal-tab-content {
	display: none;
}

.modal-tab-content.active {
	display: block;
}

.dynamic-row {
	display: flex;
	gap: 0.5rem;
	align-items: center;
	margin-bottom: 0.5rem;
	flex-wrap: wrap; /* Allow wrapping on small screens */
}

.dynamic-row .form-group {
	flex-grow: 1;
	margin-bottom: 0;
}

.dynamic-row .btn-small {
	flex-shrink: 0;
}

/* --- 6. TABLES & RESPONSIVE LISTS --- */
.table-wrapper {
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	overflow-x: auto;
	background-color: var(--surface-color);
}

.data-table {
	width: 100%;
	border-collapse: collapse;
}

.data-table th, .data-table td {
	padding: 1rem;
	text-align: left;
	border-bottom: 1px solid var(--border-color);
	white-space: nowrap;
	vertical-align: middle;
}

.data-table thead th {
	font-size: 0.8rem;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	color: var(--text-muted-color);
	background-color: var(--bg-color);
}

.data-table tbody tr:hover {
	background-color: var(--bg-color);
}

.mobile-card-list {
	display: flex;
	flex-direction: column;
	gap: 1rem;
}

.list-item-card {
	background-color: var(--surface-color);
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	padding: 1rem;
	box-shadow: var(--shadow-sm);
}

.list-item-card .card-title {
	margin-bottom: 0.5rem;
	font-size: 1.1rem;
	border-bottom: none;
	padding-bottom: 0;
}

.card-row {
	display: flex;
	justify-content: space-between;
	align-items: center;
	font-size: 0.9rem;
	padding: 0.4rem 0;
	border-bottom: 1px solid var(--border-color);
}

.card-row:last-of-type {
	border-bottom: none;
}

.card-actions {
	margin-top: 1rem;
	padding-top: 1rem;
	border-top: 1px solid var(--border-color);
	display: flex;
	flex-wrap: wrap;
	gap: 0.5rem;
}

.desktop-table-wrapper {
	display: none;
}

@media ( min-width : 992px) {
	.mobile-card-list {
		display: none !important;
	}
	.desktop-table-wrapper {
		display: block !important;
	}
}

/* --- 7. UTILITY & PAGE-SPECIFIC --- */

/* Login Page */
.login-page-container {
	display: flex;
	align-items: center;
	justify-content: center;
	width: 100%;
	min-height: 100vh;
	padding: 1rem;
	background: var(--bg-color);
}

.login-box {
	width: 100%;
	max-width: 400px;
	padding: 2.5rem;
	background-color: var(--surface-color);
	border-radius: var(--border-radius);
	box-shadow: var(--shadow-md);
}

/* Table Controls */
.table-controls {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	align-items: center;
	gap: 1rem;
	margin-bottom: 1.5rem;
}

/* Status Badges */
.status-badge {
	padding: 0.25em 0.6em;
	font-size: 0.8rem;
	font-weight: 600;
	border-radius: 20px;
	text-transform: uppercase;
}

.status-ok {
	background-color: var(--success-color);
	color: #fff;
}

.status-warn {
	background-color: var(--warning-color);
	color: #000;
}

.status-danger {
	background-color: var(--danger-color);
	color: #fff;
}

.status-info {
	background-color: var(--text-muted-color);
	color: #fff;
}

/* Details List (for User/Event Details) */
.details-list {
	list-style-type: none;
	padding-left: 0;
}

.details-list li {
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	align-items: center;
	gap: 0.5rem;
}

@media (max-width: 576px) {
    .details-list li {
        flex-direction: column;
        align-items: flex-start;
    }
}

.details-list li:last-child {
	border-bottom: none;
}

.details-subtitle {
	font-size: 1.1rem;
	color: var(--text-muted-color);
	margin-bottom: 1.5rem;
}

/* Star Rating (for Feedback Form) */
.star-rating {
	display: flex;
	flex-direction: row-reverse;
	justify-content: flex-end;
	font-size: 2em;
}

.star-rating input {
	display: none;
}

.star-rating label {
	color: #ccc;
	cursor: pointer;
	transition: color 0.2s;
}

.star-rating label:before {
	content: '★';
}

.star-rating input:checked ~ label, .star-rating:not(:checked)>label:hover,
	.star-rating:not(:checked)>label:hover ~ label {
	color: #ffc107;
}

/* File Manager (admin_files.jsp) */
.file-manager-layout {
	display: grid;
	gap: 1.5rem;
	grid-template-columns: 1fr;
}

@media ( min-width : 992px) {
	.file-manager-layout {
		grid-template-columns: 300px 1fr;
	}
}

.category-list {
	list-style: none;
	padding: 0;
}

.category-list li {
	padding: 0.75rem;
	cursor: pointer;
	border-radius: 6px;
	transition: background-color 0.2s;
	display: flex;
	align-items: center;
	gap: 0.75rem;
}

.category-list li.active {
	background-color: var(--primary-color-light);
	font-weight: 600;
	color: var(--primary-color);
}

.category-list li:hover:not(.active) {
	background-color: var(--bg-color);
}

.file-list {
	list-style: none;
	padding: 0;
}

.file-list li {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
}

.file-list li:last-child {
	border-bottom: none;
}

.file-info {
	flex-grow: 1;
}

.file-info .file-meta {
	display: block;
	font-size: 0.8rem;
	color: var(--text-muted-color);
}

.category-actions-grid {
	display: grid;
	grid-template-columns: 1fr;
	gap: 1.5rem;
}

@media ( min-width : 768px) {
	.category-actions-grid {
		grid-template-columns: 1fr 1fr;
	}
}

/* QR Action Page */
.qr-action-body {
	display: flex;
	justify-content: center;
	align-items: center;
	min-height: 100vh;
	background-color: var(--bg-color);
}

.qr-action-container {
	text-align: center;
	width: 90%;
	max-width: 400px;
}

.qr-action-item-name {
	font-size: 1.5rem;
	font-weight: bold;
	margin-bottom: 2rem;
}

.qr-action-buttons {
	display: grid;
	grid-template-columns: 1fr;
	gap: 1rem;
}

.qr-action-btn {
	font-size: 1.2rem;
	padding: 1.5rem;
}

/* Lightbox */
.lightbox-overlay {
	display: none;
	position: fixed;
	z-index: 3000;
	padding: 1rem;
	justify-content: center;
	align-items: center;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
	overflow: auto;
	background-color: rgba(0, 0, 0, 0.8);
}

.lightbox-content {
	margin: auto;
	display: block;
	width: auto;
	height: auto;
	max-width: 90vw;
	max-height: 90vh;
}

.lightbox-close {
	position: absolute;
	top: 15px;
	right: 35px;
	color: #f1f1f1;
	font-size: 40px;
	font-weight: bold;
	transition: 0.3s;
}

.lightbox-close:hover, .lightbox-close:focus {
	color: #bbb;
	text-decoration: none;
	cursor: pointer;
}

/* Matrix Table */
.data-table .sticky-header {
	position: sticky;
	top: 0;
	z-index: 10;
}

.data-table .sticky-col {
	position: sticky;
	left: 0;
	background-color: var(--surface-color);
	z-index: 5;
}

.data-table .qual-cell[data-attended="true"] {
	color: var(--success-color);
}

.horizontal-scroll-hint {
    display: none;
    text-align: center;
    padding: 0.5rem;
    background-color: var(--warning-color);
    color: #000;
    font-weight: 500;
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
}

@media (max-width: 768px) {
    .horizontal-scroll-hint {
        display: block;
    }
}

/* Progress Bars (System Page) */
.progress-bar-container {
	width: 100%;
	background-color: var(--border-color);
	border-radius: 8px;
	overflow: hidden;
	height: 25px;
}

.progress-bar {
	height: 100%;
	background-color: var(--primary-color);
	transition: width 0.5s ease-in-out;
}

.progress-text {
	text-align: center;
	font-weight: 500;
	margin-top: 0.5rem;
}

/* NEW: Storage Page Redesign Styles */
.item-name-cell {
	display: flex;
	align-items: center;
	gap: 0.75rem;
}

.camera-btn {
	background: transparent;
	border: 1px solid var(--border-color);
	color: var(--text-muted-color);
	padding: 0.2rem 0.5rem;
	line-height: 1;
	border-radius: 4px;
}

.camera-btn:hover {
	background: var(--bg-color);
	color: var(--primary-color);
	border-color: var(--primary-color);
}

.inventory-details, .item-status-details {
	display: block;
	font-size: 0.85rem;
	color: var(--text-muted-color);
}

.kit-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    flex-wrap: wrap; /* Allow wrapping on mobile */
    gap: 1rem;
}

/* Custom Calendar List */
.termin-list {
    list-style: none;
    padding: 0;
}
.termin-item-link {
    text-decoration: none;
    color: inherit;
    display: block;
}
.termin-item {
    display: flex;
    align-items: center;
    padding: 1rem;
    background-color: var(--surface-color);
    border-bottom: 1px solid var(--border-color);
    transition: background-color 0.2s;
}
.termin-item:hover {
    background-color: var(--bg-color);
}
.termin-list li:first-child {
    border-top: 1px solid var(--border-color);
}
.termin-month-header {
    margin-top: 2rem;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-muted-color);
    border: none;
    padding: 0;
}
.termin-date {
    flex-shrink: 0;
    text-align: center;
    margin-right: 1.5rem;
    width: 60px;
}
.termin-date-day {
    font-size: 1.8rem;
    font-weight: 600;
    display: block;
    line-height: 1;
    color: var(--primary-color);
}
.termin-date-month {
    font-size: 0.9rem;
    text-transform: uppercase;
    font-weight: 500;
    display: block;
    color: var(--text-muted-color);
}
.termin-details {
    flex-grow: 1;
}
.termin-title {
    font-weight: 600;
    display: block;
    margin-bottom: 0.25rem;
}
.termin-type-event {
    background-color: var(--danger-color);
    color: white;
}
.termin-type-lehrgang {
    background-color: var(--primary-color);
    color: white;
}
.termin-arrow {
    color: var(--text-muted-color);
    margin-left: 1rem;
}

.mobile-list-view { display: block; }
.desktop-calendar-view { display: none; }

@media (min-width: 992px) {
    .mobile-list-view { display: none; }
    .desktop-calendar-view { display: block; }
}

.fc .fc-button-primary {
    background-color: var(--primary-color);
    border-color: var(--primary-color);
}

.fc .fc-button-primary:not(:disabled).fc-button-active,
.fc .fc-button-primary:not(:disabled):active {
    background-color: var(--primary-color-hover);
    border-color: var(--primary-color-hover);
}


/* --- 8. ERROR PAGES --- */
.error-page-container {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	min-height: 70vh;
	padding: 2rem;
}

.error-code {
	font-size: 5rem;
	font-weight: 800;
	line-height: 1;
	margin: 0;
	color: var(--text-muted-color);
}

.error-page-container h2 {
	font-size: 1.75rem;
	border: none;
	margin: 0 0 1.5rem 0;
}

.error-message-text {
	max-width: 600px;
	font-size: 1.1rem;
	line-height: 1.6;
	margin-bottom: 2rem;
}

/* --- 9. KEYFRAME ANIMATIONS --- */
@keyframes blink { 50% {
	background-color: transparent;
}

}

/* =================================================================== */
/*  10. CHAT INTERFACE (Combined & Final)                              */
/* =================================================================== */
.chat-message-container {
	display: flex;
	align-items: center;
	margin-bottom: 0.75rem;
	position: relative;
	max-width: 90%; /* Prevent bubbles from taking the full width */
	align-self: flex-start; /* Default alignment for others' messages */
}

.chat-message-container.current-user {
	align-self: flex-end;
}

.chat-bubble {
	padding: 0.6rem 0.9rem;
	border-radius: 18px;
	word-wrap: break-word;
	border: 1px solid transparent;
}

.chat-bubble.current-user-bubble {
	background-color: var(--primary-color) !important;
	color: #fff !important;
	border-color: var(--primary-color) !important;
}

.chat-username {
	display: block;
	font-size: 0.8rem;
	font-weight: 700;
	margin-bottom: 0.2rem;
}

.chat-text {
	display: block;
	font-size: 1rem;
	line-height: 1.4;
}

.chat-timestamp {
	display: block;
	font-size: 0.75rem;
	margin-top: 0.3rem;
	text-align: right;
}

.chat-edited-marker {
	font-size: 0.7em;
	font-style: italic;
	color: inherit;
}

.chat-options {
	opacity: 0;
	transition: opacity 0.2s;
	display: flex;
	gap: 0.25rem;
	background-color: var(--surface-color);
	padding: 0.25rem;
	border-radius: 20px;
	box-shadow: var(--shadow-md);
	margin: 0 0.5rem;
}

.chat-message-container:hover .chat-options {
	opacity: 1;
}

.chat-message-container {
	flex-direction: row;
}

.chat-message-container.current-user {
	flex-direction: row-reverse;
}

.chat-option-btn {
	background: none;
	border: none;
	cursor: pointer;
	color: var(--text-muted-color);
	width: 28px;
	height: 28px;
	border-radius: 50%;
	display: flex;
	align-items: center;
	justify-content: center;
}

.chat-option-btn:hover {
	background-color: var(--bg-color);
	color: var(--text-color);
}

.chat-edit-input {
	width: 100%;
	padding: 0.2rem 0.4rem;
	border: 1px solid var(--primary-color);
	border-radius: 4px;
	background: var(--surface-color);
	color: var(--text-color);
	font-family: inherit;
	font-size: 1rem;
}

.chat-bubble.deleted {
	font-style: italic;
	opacity: 0.7;
}

.chat-deleted-info {
	font-size: 0.9em;
}

#chat-box {
	display: flex;
	flex-direction: column;
}

/* =================================================================== */
/*  11. SIDEBAR CONTROLS & EDITOR STYLES                               */
/* =================================================================== */
.sidebar-controls {
	display: flex;
	justify-content: space-between;
	align-items: center;
	gap: 1rem;
	margin-bottom: 1rem;
}

.sidebar-controls .btn {
	flex-grow: 1;
}

/* Theme Switcher Styles */
.theme-switcher {
	display: flex;
	align-items: center;
	gap: 0.5rem;
	color: var(--text-muted-color);
}

.theme-switcher .switch {
	position: relative;
	display: inline-block;
	width: 44px;
	height: 24px;
}

.theme-switcher .switch input {
	opacity: 0;
	width: 0;
	height: 0;
}

.theme-switcher .slider {
	position: absolute;
	cursor: pointer;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: #ccc;
	transition: .4s;
	border-radius: 24px;
}

.theme-switcher .slider:before {
	position: absolute;
	content: "";
	height: 18px;
	width: 18px;
	left: 3px;
	bottom: 3px;
	background-color: white;
	transition: .4s;
	border-radius: 50%;
}

.theme-switcher input:checked+.slider {
	background-color: var(--primary-color);
}

.theme-switcher input:checked+.slider:before {
	transform: translateX(20px);
}

/* Mode Switcher Styles (for editor) */
.mode-switcher {
	display: flex;
	align-items: center;
	gap: 0.5rem;
	color: var(--text-muted-color);
}

.mode-switcher .switch {
	position: relative;
	display: inline-block;
	width: 44px;
	height: 24px;
}

.mode-switcher .switch input {
	opacity: 0;
	width: 0;
	height: 0;
}

.mode-switcher .slider {
	position: absolute;
	cursor: pointer;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: #ccc;
	transition: .4s;
	border-radius: 24px;
}

.mode-switcher .slider:before {
	position: absolute;
	content: "";
	height: 18px;
	width: 18px;
	left: 3px;
	bottom: 3px;
	background-color: white;
	transition: .4s;
	border-radius: 50%;
}

.mode-switcher input:checked+.slider {
	background-color: var(--primary-color);
}

.mode-switcher input:checked+.slider:before {
	transform: translateX(20px);
}

/* Editor Specific Styles */
#editor-page-wrapper {
    /* Make the wrapper take up all available vertical space */
    height: calc(100vh - var(--header-height)); /* Account for mobile header */
    display: flex;
    flex-direction: column;
}

@media (min-width: 992px) {
	#editor-page-wrapper {
		/* On desktop, the main header is gone, so just 100vh */
		height: 100vh;
	}
}

#editor-page-wrapper .main-content {
    flex-grow: 1; /* Allow main-content to fill remaining height */
    padding: 1rem; /* Consistent padding on all sides */
    max-width: none; /* Remove max-width constraint for full flexibility */
    margin: 0; /* Remove auto margins to allow full width */
    display: flex;
    flex-direction: column;
    min-height: 0; /* Important for flex container to properly shrink children */
}

#editor-page-container {
    display: flex;
    flex-direction: column;
    flex-grow: 1; /* Make it fill the remaining space */
    min-height: 0; /* Crucial for nested flex items */
}

.editor-header {
	flex-shrink: 0;
	margin-bottom: 1rem;
}
.editor-header h1 {
	margin-bottom: 0;
    font-size: 1.5rem;
}
.editor-controls {
	display: flex;
	align-items: center;
	gap: 1rem;
	flex-wrap: wrap;
}
.editor-container { /* This is the flex container for editor/preview panes */
	display: flex;
	flex-direction: column; /* Stack vertically on mobile */
	gap: 1.5rem; /* Space between panes */
    flex-grow: 1; /* Allow this container to fill available height */
    min-height: 0; /* Crucial for flex item inside a flex column */
	padding: 1.5rem; /* Padding *inside* the card, around the panes */
    margin: 0; /* Remove external margins */
    border: 1px solid var(--border-color);
    box-shadow: var(--shadow-sm);
    background: var(--surface-color);
    border-radius: var(--border-radius);
}

#editor, #markdown-preview {
	flex-grow: 1; /* Allow the element to grow and fill the flex container */
	width: 100%; /* Ensure it takes full width in mobile stack */
	border: none; /* Border is now on .editor-container */
	padding: 0; /* Padding is now on .editor-container */
	background: transparent; /* Background is now on .editor-container */
    overflow-y: auto; /* Internal scrolling within each pane */
    
    /* Unified typography for WYSIWYG feel */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
	font-size: 1rem;
	line-height: 1.6;
    color: var(--text-color);
}

#editor {
	resize: none; /* Disable manual resizing */
}

@media (min-width: 992px) {
	.editor-container {
		flex-direction: row; /* Desktop: side-by-side */
	}
	#editor, #markdown-preview {
		flex-basis: 50%; /* Distribute space evenly */
	}
}


/* =================================================================== */
/*  12. MARKDOWN STYLES                                                */
/* =================================================================== */
.markdown-content h1, .markdown-content h2, .markdown-content h3,
.markdown-content h4, .markdown-content h5, .markdown-content h6 {
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    font-weight: 600;
    border: none;
    padding: 0;
}
.markdown-content p {
    margin-bottom: 1rem;
}
.markdown-content ul, .markdown-content ol {
    padding-left: 2rem;
    margin-bottom: 1rem;
}
.markdown-content blockquote {
    padding: 0.5rem 1rem;
    margin: 0 0 1rem;
    font-size: 1rem;
    border-left: 0.25rem solid var(--border-color);
    background-color: var(--bg-color);
    color: var(--text-muted-color);
}
.markdown-content blockquote > :first-child {
    margin-top: 0;
}
.markdown-content blockquote > :last-child {
    margin-bottom: 0;
}
.markdown-content code {
    padding: .2em .4em;
    margin: 0;
    font-size: 85%;
    background-color: var(--primary-color-light);
    border-radius: 6px;
    font-family: monospace;
}
.markdown-content pre {
    padding: 1rem;
    overflow: auto;
    font-size: 85%;
    line-height: 1.45;
    background-color: var(--bg-color);
    border-radius: 6px;
    margin-bottom: 1rem;
}
.markdown-content pre code {
    padding: 0;
    margin: 0;
    font-size: 100%;
    background-color: transparent;
    border-radius: 0;
}
.markdown-content table {
    width: 100%;
    margin-bottom: 1rem;
    border-collapse: collapse;
    display: block;
    overflow-x: auto;
}
.markdown-content th, .markdown-content td {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
}
.markdown-content thead {
    background-color: var(--bg-color);
}
.markdown-content img {
    max-width: 100%;
    height: auto;
}

/* =================================================================== */
/*  13. PRINT STYLES                                                   */
/* =================================================================== */
@media print {
	.sidebar, .mobile-header, .no-print {
		display: none !important;
	}
	.main-content-wrapper, .main-content {
		margin-left: 0 !important;
		padding: 0 !important;
	}
	body {
		background-color: #fff;
		color: #000;
	}
	.card {
		box-shadow: none;
		border: 1px solid #ccc;
		page-break-inside: avoid;
	}
	a {
		text-decoration: none;
		color: #000;
	}
	h1, h2, h3 {
		color: #000;
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\main.js
========================================================================

/**
 * Main JavaScript file for the TechnikTeam application.
 * This file is included on every page and handles global user interface logic.
 */
document.addEventListener('DOMContentLoaded', () => {

	const contextPath = document.body.dataset.contextPath || '';
	const currentPage = document.body.dataset.page || '';

	// --- MOBILE NAVIGATION ---
	const navToggle = document.querySelector('.mobile-nav-toggle');
	const pageOverlay = document.querySelector('.page-overlay');
	if (navToggle) {
		navToggle.addEventListener('click', (event) => {
			event.stopPropagation();
			document.body.classList.toggle('nav-open');
		});
	}
	if (pageOverlay) {
		pageOverlay.addEventListener('click', () => {
			document.body.classList.remove('nav-open');
		});
	}

	// --- ACTIVE NAV LINK HIGHLIGHTING ---
	const currentPath = window.location.pathname;
	document.querySelectorAll('.sidebar-nav a').forEach(link => {
		const linkPath = link.getAttribute('href');
		if (linkPath === currentPath) {
			link.classList.add('active-nav-link');
		} else if (currentPath.startsWith(linkPath) && linkPath !== `${contextPath}/home`) {
			// Make parent links active, e.g., /admin/lehrgaenge for /admin/meetings
			link.classList.add('active-nav-link');
		}
	});


	// --- THEME SWITCHER (SYNCED) ---
	const themeSwitches = document.querySelectorAll('.theme-switcher input[type="checkbox"]');
	const currentTheme = document.documentElement.dataset.theme || localStorage.getItem('theme') || 'light';
	document.documentElement.setAttribute('data-theme', currentTheme);

	const updateSwitches = (isDark) => {
		themeSwitches.forEach(sw => {
			sw.checked = isDark;
		});
	};

	updateSwitches(currentTheme === 'dark');

	themeSwitches.forEach(sw => {
		sw.addEventListener('change', (event) => {
			const newTheme = event.target.checked ? 'dark' : 'light';
			document.documentElement.setAttribute('data-theme', newTheme);
			localStorage.setItem('theme', newTheme);
			updateSwitches(event.target.checked);

			// Persist to server
			const csrfToken = document.body.dataset.csrfToken;
			const formData = new URLSearchParams();
			formData.append('theme', newTheme);
			if (csrfToken) {
				formData.append('csrfToken', csrfToken);
			}

			fetch(`${contextPath}/api/user/preferences`, {
				method: 'POST',
				body: formData
			}).catch(err => console.error("Failed to sync theme with server:", err));
		});
	});

	// --- GLOBAL CONFIRMATION MODAL ---
	const confirmationModalElement = document.createElement('div');
	confirmationModalElement.className = 'modal-overlay';
	confirmationModalElement.id = 'confirmation-modal';
	confirmationModalElement.innerHTML = `
        <div class="modal-content" style="max-width: 450px;">
            <h3 id="confirmation-title">Bestätigung erforderlich</h3>
            <p id="confirmation-message" style="margin: 1.5rem 0; font-size: 1.1rem;"></p>
            <div style="display: flex; justify-content: flex-end; gap: 1rem;">
                <button id="confirmation-btn-cancel" class="btn" style="background-color: var(--text-muted-color);">Abbrechen</button>
                <button id="confirmation-btn-confirm" class="btn btn-danger">Bestätigen</button>
            </div>
        </div>`;
	document.body.appendChild(confirmationModalElement);

	const messageElement = document.getElementById('confirmation-message');
	const confirmBtn = document.getElementById('confirmation-btn-confirm');
	const cancelBtn = document.getElementById('confirmation-btn-cancel');

	let onConfirmCallback = null;

	window.showConfirmationModal = (message, onConfirm) => {
		messageElement.textContent = message;
		onConfirmCallback = onConfirm;
		confirmationModalElement.classList.add('active');
	};

	const closeConfirmModal = () => {
		confirmationModalElement.classList.remove('active');
		onConfirmCallback = null;
	};

	confirmBtn.addEventListener('click', () => {
		if (typeof onConfirmCallback === 'function') onConfirmCallback();
		closeConfirmModal();
	});

	cancelBtn.addEventListener('click', closeConfirmModal);
	confirmationModalElement.addEventListener('click', (e) => {
		if (e.target === confirmationModalElement) closeConfirmModal();
	});

	const logoutLink = document.getElementById('logout-link');
	if (logoutLink) {
		logoutLink.addEventListener('click', (event) => {
			event.preventDefault();
			showConfirmationModal(
				'Möchten Sie sich wirklich ausloggen?',
				() => { window.location.href = logoutLink.href; }
			);
		});
	}

	// --- SERVER-SENT EVENTS (SSE) NOTIFICATIONS ---
	// Only connect if the user is logged in AND not on the editor page
	if (document.body.dataset.isLoggedIn === 'true' && window.EventSource && currentPage !== 'editor') {
		const eventSource = new EventSource(`${contextPath}/notifications`);
		eventSource.onopen = () => console.log("SSE connection established.");
		eventSource.onmessage = (event) => {
			try {
				const data = JSON.parse(event.data);
				console.log("SSE data received:", data);
				showBrowserNotification(data.payload);

			} catch (e) {
				console.log("SSE (plain text) message received:", event.data);
				showBrowserNotification({ message: event.data });
			}
		};
		eventSource.onerror = (err) => {
			console.error("SSE connection error.", err);
			eventSource.close();
		};
	}

	function showBrowserNotification(payload) {
		const message = payload.message || 'Neue Benachrichtigung';
		const url = payload.url;

		if (!("Notification" in window)) {
			console.warn("This browser does not support desktop notifications.");
			return;
		}

		const showNotification = () => {
			const notification = new Notification("Technik Team Update", {
				body: message,
				icon: `${contextPath}/images/favicon.ico`
			});

			if (url) {
				notification.onclick = (event) => {
					event.preventDefault();
					window.open(contextPath + url, '_blank');
				};
			}
		};

		if (Notification.permission === "granted") {
			showNotification();
		} else if (Notification.permission !== "denied") {
			Notification.requestPermission().then((permission) => {
				if (permission === "granted") {
					showNotification();
				}
			});
		}
	}


	// --- GLOBAL MARKDOWN RENDERER ---
	window.renderMarkdown = (element) => {
		if (!element || typeof marked === 'undefined') return;
		// Use marked's sanitizer to prevent XSS
		const sanitizedHtml = marked.parse(element.textContent || '', { sanitize: true });
		element.innerHTML = sanitizedHtml;
	};

	// Auto-render elements with the .markdown-content class
	document.querySelectorAll('.markdown-content').forEach(window.renderMarkdown);

});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_achievements.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const modal = document.getElementById('achievement-modal');
	if (!modal) return;

	const form = document.getElementById('achievement-modal-form');
	const title = document.getElementById('achievement-modal-title');
	const actionInput = document.getElementById('achievement-modal-action');
	const idInput = document.getElementById('achievement-modal-id');
	const nameInput = document.getElementById('name-modal');
	const iconInput = document.getElementById('icon-modal');
	const descInput = document.getElementById('description-modal');
	const closeModalBtn = modal.querySelector('.modal-close-btn');

	// --- Key Builder Elements for Creating New Achievements ---
	const keyBuilderGroup = document.getElementById('key-builder-group');
	const keyTypeSelect = document.getElementById('key-type-select');
	const keySubtypeGroups = document.querySelectorAll('.key-subtype-group');
	const keyNumberGroup = document.getElementById('key-number-group');
	const keyValueInput = document.getElementById('key-value-input');
	const keyCourseGroup = document.getElementById('key-course-group');
	const keyCourseSelect = document.getElementById('key-course-select');
	const keyPreview = document.getElementById('generated-key-preview');
	const hiddenKeyInput = document.getElementById('achievement-key-hidden');

	/**
	 * Dynamically builds the programmatic key for the achievement based on user selections.
	 * This ensures a consistent key format.
	 */
	const updateKey = () => {
		const type = keyTypeSelect.value;
		let generatedKey = '';

		// Hide all subtype groups initially for a clean slate
		keySubtypeGroups.forEach(group => group.style.display = 'none');

		if (type === 'EVENT_PARTICIPANT' || type === 'EVENT_LEADER') {
			keyNumberGroup.style.display = 'block';
			const value = keyValueInput.value || '1';
			generatedKey = `${type}_${value}`;
		} else if (type === 'QUALIFICATION') {
			keyCourseGroup.style.display = 'block';
			const value = keyCourseSelect.value;
			if (value) {
				generatedKey = `${type}_${value}`;
			}
		}

		keyPreview.textContent = generatedKey || '-- Bitte eine Art wählen --';
		hiddenKeyInput.value = generatedKey;
	};

	keyTypeSelect.addEventListener('change', updateKey);
	keyValueInput.addEventListener('input', updateKey);
	keyCourseSelect.addEventListener('change', updateKey);

	const closeModal = () => modal.classList.remove('active');
	const openModal = () => modal.classList.add('active');

	// --- Event Listeners for Buttons ---
	document.getElementById('new-achievement-btn').addEventListener('click', () => {
		form.reset();
		title.textContent = 'Neuen Erfolg anlegen';
		actionInput.value = 'create';
		idInput.value = '';
		keyBuilderGroup.style.display = 'block'; // Show key builder for new achievements
		updateKey(); // Initialize/reset the key builder state
		openModal();
	});

	document.querySelectorAll('.edit-achievement-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const id = btn.dataset.id;
			try {
				const response = await fetch(`${contextPath}/admin/achievements?action=getAchievementData&id=${id}`);
				if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
				const data = await response.json();

				form.reset();
				title.textContent = 'Erfolg bearbeiten';
				actionInput.value = 'update';
				idInput.value = data.id;
				nameInput.value = data.name || '';
				iconInput.value = data.iconClass || 'fa-award';
				descInput.value = data.description || '';
				keyBuilderGroup.style.display = 'none'; // Hide key builder on edit, as the key is immutable

				openModal();
			} catch (error) {
				console.error('Failed to open edit modal:', error);
				alert("Fehler: Die Daten für diesen Erfolg konnten nicht geladen werden.");
			}
		});
	});

	// --- Confirmation for Delete Forms ---
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	// --- Modal Closing Listeners ---
	if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
	modal.addEventListener('click', (e) => {
		if (e.target === modal) closeModal();
	});
	document.addEventListener('keydown', (e) => {
		if (e.key === 'Escape' && modal.classList.contains('active')) closeModal();
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_course_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	// --- Confirmation for Delete Forms ---
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	// --- Edit/Create Modal Logic ---
	const courseModal = document.getElementById('course-modal');
	if (courseModal) {
		const form = document.getElementById('course-modal-form');
		const title = document.getElementById('course-modal-title');
		const actionInput = document.getElementById('course-modal-action');
		const idInput = document.getElementById('course-modal-id');
		const nameInput = document.getElementById('name-modal');
		const abbrInput = document.getElementById('abbreviation-modal');
		const descInput = document.getElementById('description-modal');
		const closeModalBtn = courseModal.querySelector('.modal-close-btn');

		const closeModal = () => courseModal.classList.remove('active');

		const openCreateModal = () => {
			form.reset();
			title.textContent = "Neue Lehrgangs-Vorlage anlegen";
			actionInput.value = "create";
			idInput.value = "";
			courseModal.classList.add('active');
		};

		const openEditModal = async (btn) => {
			form.reset();
			title.textContent = "Lehrgangs-Vorlage bearbeiten";
			actionInput.value = "update";
			const courseId = btn.dataset.id;
			idInput.value = courseId;

			try {
				const response = await fetch(`${contextPath}/admin/lehrgaenge?action=getCourseData&id=${courseId}`);
				if (!response.ok) throw new Error('Could not fetch course data');
				const data = await response.json();

				nameInput.value = data.name || '';
				abbrInput.value = data.abbreviation || '';
				descInput.value = data.description || '';

				courseModal.classList.add('active');
			} catch (error) {
				console.error("Failed to open edit modal:", error);
				alert("Fehler beim Laden der Vorlagen-Daten.");
			}
		};

		const newCourseBtn = document.getElementById('new-course-btn');
		if (newCourseBtn) {
			newCourseBtn.addEventListener('click', openCreateModal);
		}

		document.querySelectorAll('.edit-course-btn').forEach(btn => {
			btn.addEventListener('click', (e) => openEditModal(e.currentTarget));
		});

		if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
		courseModal.addEventListener('click', (e) => {
			if (e.target === courseModal) closeModal();
		});
	}

	// --- Grant Qualifications Modal Logic ---
	const grantQualsModal = document.getElementById('grant-quals-modal');
	if (grantQualsModal) {
		const modalTitle = document.getElementById('grant-quals-modal-title');
		const courseIdInput = document.getElementById('grant-quals-course-id');
		const closeBtn = grantQualsModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.grant-quals-btn').forEach(btn => {
			btn.addEventListener('click', (e) => {
				const button = e.currentTarget;
				modalTitle.textContent = `Qualifikationen für "${button.dataset.courseName}" vergeben`;
				courseIdInput.value = button.dataset.courseId;
				grantQualsModal.classList.add('active');
			});
		});

		if (closeBtn) closeBtn.addEventListener('click', () => grantQualsModal.classList.remove('active'));
		grantQualsModal.addEventListener('click', (e) => {
			if (e.target === grantQualsModal) grantQualsModal.classList.remove('active');
		});
	}

	// --- Global Escape Key Listener for Modals ---
	document.addEventListener('keydown', (e) => {
		if (e.key === 'Escape') {
			if (courseModal?.classList.contains('active')) courseModal.classList.remove('active');
			if (grantQualsModal?.classList.contains('active')) grantQualsModal.classList.remove('active');
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_defect_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const defectModal = document.getElementById('defect-modal');
	if (!defectModal) return;

	const modalTitle = document.getElementById('defect-modal-title');
	const itemIdInput = document.getElementById('defect-item-id');
	const defectQtyInput = document.getElementById('defective_quantity');
	const reasonInput = document.getElementById('defect_reason');
	const closeModalBtn = defectModal.querySelector('.modal-close-btn');

	/**
	 * Attaches an event listener to all "Status bearbeiten" buttons to open the defect modal.
	 */
	document.querySelectorAll('.defect-modal-btn').forEach(btn => {
		btn.addEventListener('click', () => {
			// Populate the modal with data from the clicked button's data attributes
			modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
			itemIdInput.value = btn.dataset.itemId;
			defectQtyInput.value = btn.dataset.currentDefectQty;
			defectQtyInput.max = btn.dataset.maxQty; // Set max value to prevent invalid input
			reasonInput.value = btn.dataset.currentReason;
			defectModal.classList.add('active');
		});
	});

	const closeModal = () => defectModal.classList.remove('active');

	// --- Modal Closing Listeners ---
	if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
	defectModal.addEventListener('click', (e) => {
		if (e.target === defectModal) closeModal();
	});
	document.addEventListener('keydown', (e) => {
		if (e.key === "Escape" && defectModal.classList.contains('active')) closeModal();
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_editor.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const editorContainer = document.getElementById('editor-page-container');
	if (!editorContainer) return;

	const fileId = editorContainer.dataset.fileId;
	const editor = document.getElementById('editor');
	const preview = document.getElementById('markdown-preview');
	const toggle = document.getElementById('mode-toggle');
	const statusIndicator = document.getElementById('save-status-indicator');

	let socket;
	let debounceTimer;

	// Function to render markdown content
	const renderMarkdown = (content) => {
		if (typeof marked !== 'undefined') {
			preview.innerHTML = marked.parse(content, { sanitize: true });
		}
	};

	// --- Status Indicator Logic ---
	const showStatus = (state, message) => {
		if (statusIndicator) {
			statusIndicator.style.display = 'inline-block';
			statusIndicator.className = `status-badge status-${state}`;
			statusIndicator.textContent = message;
		}
	};

	// --- WebSocket Connection Logic ---
	const connect = () => {
		const websocketProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
		const websocketUrl = `${websocketProtocol}//${window.location.host}${document.body.dataset.contextPath}/ws/editor/${fileId}`;

		socket = new WebSocket(websocketUrl);

		socket.onopen = () => {
			console.log('WebSocket connection established.');
			showStatus('ok', 'Verbunden');
		};

		socket.onmessage = (event) => {
			const data = JSON.parse(event.data);
			if (data.type === 'content_update') {
				console.log('Received content update from another client.');

				// Save cursor position before updating
				const cursorStart = editor.selectionStart;
				const cursorEnd = editor.selectionEnd;

				editor.value = data.payload;
				renderMarkdown(data.payload);

				// Restore cursor position
				editor.setSelectionRange(cursorStart, cursorEnd);
			}
		};

		socket.onclose = () => {
			console.warn('WebSocket connection closed.');
			showStatus('danger', 'Getrennt');
			setTimeout(connect, 5000); // Try to reconnect after 5 seconds
		};

		socket.onerror = (error) => {
			console.error('WebSocket error:', error);
			showStatus('danger', 'Verbindungsfehler');
		};
	};


	// --- Event Listeners ---
	if (editor.readOnly) {
		renderMarkdown(editor.value);
		return;
	}

	connect();
	renderMarkdown(editor.value);

	// Debounced function to send content updates
	const sendContentUpdate = () => {
		if (socket && socket.readyState === WebSocket.OPEN) {
			const payload = {
				type: 'content_update',
				payload: editor.value
			};
			socket.send(JSON.stringify(payload));
			showStatus('warn', 'Speichern...');
			// Give visual feedback that saving is complete
			setTimeout(() => {
				if (statusIndicator.textContent === 'Speichern...') {
					showStatus('ok', 'Gespeichert');
				}
			}, 1000);
		}
	};

	// Live preview and debounced saving on input
	editor.addEventListener('input', () => {
		renderMarkdown(editor.value);
		clearTimeout(debounceTimer);
		debounceTimer = setTimeout(sendContentUpdate, 500); // Send update 500ms after user stops typing
	});

	// Event listener for the toggle switch
	if (toggle) {
		toggle.addEventListener('change', () => {
			if (toggle.checked) { // Edit mode
				editor.style.display = 'block';
				preview.style.display = 'none';
			} else { // View mode
				renderMarkdown(editor.value);
				editor.style.display = 'none';
				preview.style.display = 'block';
			}
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_events_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			showConfirmationModal(this.dataset.confirmMessage || 'Sind Sie sicher?', () => this.submit());
		});
	});

	// Client-side file size validation
	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			if (!file) return;

			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.closest('.form-group').querySelector('.file-size-warning');

			if (file.size > maxSize) {
				if (warningElement) warningElement.style.display = 'block';
				e.target.value = ''; // Clear the invalid selection
			} else {
				if (warningElement) warningElement.style.display = 'none';
			}
		});
	});

	const assignModal = document.getElementById('assign-users-modal');
	const eventModal = document.getElementById('event-modal');
	const reqContainer = document.getElementById('modal-requirements-container');
	const resContainer = document.getElementById('modal-reservations-container');
	const cfContainer = document.getElementById('modal-custom-fields-container');
	const attachmentsList = document.getElementById('modal-attachments-list');
	const kitSelect = document.getElementById('kit-selection-modal');
	const findCrewBtn = document.getElementById('find-crew-btn');
	const findCrewModal = document.getElementById('find-crew-modal');

	const allCourses = JSON.parse(document.getElementById('allCoursesData').textContent);
	const allItems = JSON.parse(document.getElementById('allItemsData').textContent);

	const assignForm = document.getElementById('assign-users-form');
	const assignModalTitle = document.getElementById('assign-users-modal-title');
	const assignCheckboxes = document.getElementById('user-checkboxes-container');
	const assignEventIdInput = assignForm.querySelector('input[name="eventId"]');

	const openAssignModal = async (btn) => {
		const eventId = btn.dataset.eventId;
		const eventName = btn.dataset.eventName;
		assignModalTitle.textContent = `Team für "${eventName}" zuweisen`;
		assignEventIdInput.value = eventId;
		assignCheckboxes.innerHTML = '<p>Lade Benutzer...</p>';
		assignModal.classList.add('active');
		try {
			const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getAssignmentData&id=${eventId}`);
			if (!response.ok) throw new Error('Could not fetch assignment data.');
			const data = await response.json();
			assignCheckboxes.innerHTML = '';
			if (data.signedUpUsers && data.signedUpUsers.length > 0) {
				data.signedUpUsers.forEach(user => {
					const isChecked = data.assignedUserIds.includes(user.id) ? 'checked' : '';
					assignCheckboxes.innerHTML += `
						<label class="checkbox-label">
							<input type="checkbox" name="userIds" value="${user.id}" ${isChecked}>
							${user.username}
						</label>`;
				});
			} else {
				assignCheckboxes.innerHTML = '<p>Es haben sich noch keine Benutzer für dieses Event angemeldet.</p>';
			}
		} catch (error) {
			assignCheckboxes.innerHTML = '<p class="error-message">Fehler beim Laden der Benutzerdaten.</p>';
			console.error('Error fetching assignment data:', error);
		}
	};
	document.querySelectorAll('.assign-users-btn').forEach(btn => btn.addEventListener('click', () => openAssignModal(btn)));
	assignModal.querySelector('.modal-close-btn').addEventListener('click', () => assignModal.classList.remove('active'));

	const createRow = (container) => {
		const newRow = document.createElement('div'); newRow.className = 'dynamic-row';
		const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn-small btn-danger';
		removeBtn.innerHTML = '×'; removeBtn.onclick = () => newRow.remove();
		newRow.appendChild(removeBtn); container.appendChild(newRow);
		return newRow;
	};

	const addRequirementRow = (courseId = '', personCount = 1) => {
		const row = createRow(reqContainer);
		const select = document.createElement('select'); select.name = 'requiredCourseId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Lehrgang --</option>' + allCourses.map(c => `<option value="${c.id}">${c.name}</option>`).join('');
		select.value = courseId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'requiredPersons'; input.value = personCount; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

	const addReservationRow = (itemId = '', quantity = 1) => {
		const row = createRow(resContainer);
		const select = document.createElement('select'); select.name = 'itemId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Material --</option>' + allItems.map(i => `<option value="${i.id}">${i.name}</option>`).join('');
		select.value = itemId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'itemQuantity'; input.value = quantity; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

	const addCustomFieldRow = (fieldName = '', fieldType = 'TEXT') => {
		const row = createRow(cfContainer);
		const nameInput = document.createElement('input');
		nameInput.type = 'text';
		nameInput.name = 'customFieldName';
		nameInput.placeholder = 'Frage eingeben (z.B. T-Shirt Größe)';
		nameInput.className = 'form-group';
		nameInput.style.flexGrow = '2';
		nameInput.value = fieldName;

		const typeSelect = document.createElement('select');
		typeSelect.name = 'customFieldType';
		typeSelect.className = 'form-group';
		typeSelect.innerHTML = `<option value="TEXT">Text</option><option value="BOOLEAN">Ja/Nein</option>`;
		typeSelect.value = fieldType;

		row.prepend(nameInput, typeSelect);
	};

	const addAttachmentRow = (id, filename, filepath) => {
		const li = document.createElement('li'); li.id = `attachment-item-${id}`;
		li.innerHTML = `<a href="${contextPath}/download?id=${id}" target="_blank">${filename}</a>`;
		const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn btn-small btn-danger-outline';
		removeBtn.innerHTML = '×';
		removeBtn.onclick = () => {
			showConfirmationModal(`Anhang '${filename}' wirklich löschen?`, async () => {
				const formData = new FormData();
				formData.append('action', 'deleteAttachment');
				formData.append('id', id);
				formData.append('csrfToken', document.querySelector('#event-modal-form input[name="csrfToken"]').value);

				try {
					const response = await fetch(`${contextPath}/admin/veranstaltungen`, {
						method: 'POST',
						body: new URLSearchParams(formData)
					});
					if (response.ok) li.remove();
					else alert('Fehler beim Löschen des Anhangs.');
				} catch (e) {
					console.error('Error deleting attachment:', e);
					alert('Netzwerkfehler beim Löschen des Anhangs.');
				}
			});
		};
		li.appendChild(removeBtn); attachmentsList.appendChild(li);
	};

	if (kitSelect) {
		kitSelect.addEventListener('change', async () => {
			const kitId = kitSelect.value;
			if (!kitId) return;

			try {
				const response = await fetch(`${contextPath}/admin/kits?action=getKitItems&id=${kitId}`);
				if (!response.ok) throw new Error('Could not fetch kit items');
				const items = await response.json();
				items.forEach(item => addReservationRow(item.itemId, item.quantity));
			} catch (e) {
				console.error("Error fetching kit items:", e);
				alert("Fehler beim Laden der Kit-Inhalte.");
			}
			kitSelect.value = '';
		});
	}

	if (findCrewBtn) {
		findCrewBtn.addEventListener('click', async () => {
			const eventId = document.getElementById('event-modal-id').value;
			if (!eventId) {
				alert("Bitte speichern Sie das Event zuerst.");
				return;
			}
			const crewListContainer = document.getElementById('find-crew-list');
			crewListContainer.innerHTML = '<p>Suche nach qualifizierter Crew...</p>';
			findCrewModal.classList.add('active');
			try {
				const response = await fetch(`${contextPath}/api/admin/crew-finder?eventId=${eventId}`);
				if (!response.ok) throw new Error('Could not find crew members.');
				const users = await response.json();

				document.getElementById('find-crew-event-id').value = eventId;
				crewListContainer.innerHTML = '';

				if (users.length > 0) {
					users.forEach(user => {
						crewListContainer.innerHTML += `
							<label class="checkbox-label" style="padding: 0.5rem; border-bottom: 1px solid var(--border-color);">
								<input type="checkbox" name="userIds" value="${user.id}">
								${user.username}
							</label>`;
					});
				} else {
					crewListContainer.innerHTML = '<p>Keine passenden und verfügbaren Benutzer gefunden.</p>';
				}

			} catch (e) {
				console.error("Error finding crew:", e);
				crewListContainer.innerHTML = '<p class="error-message">Fehler bei der Crew-Suche.</p>';
			}
		});
		findCrewModal.querySelector('.modal-close-btn').addEventListener('click', () => findCrewModal.classList.remove('active'));
	}

	document.getElementById('modal-add-requirement-btn').addEventListener('click', () => addRequirementRow());
	document.getElementById('modal-add-reservation-btn').addEventListener('click', () => addReservationRow());
	document.getElementById('modal-add-custom-field-btn').addEventListener('click', () => addCustomFieldRow());

	const eventForm = document.getElementById('event-modal-form');
	const eventModalTitle = document.getElementById('event-modal-title');
	const actionInput = document.getElementById('event-modal-action');
	const idInput = document.getElementById('event-modal-id');

	const resetEventModal = () => {
		eventForm.reset();
		reqContainer.innerHTML = '';
		resContainer.innerHTML = '';
		cfContainer.innerHTML = '';
		attachmentsList.innerHTML = '';
		document.querySelectorAll('.file-size-warning').forEach(el => el.style.display = 'none');
	};

	const openEventModal = () => eventModal.classList.add('active');
	const closeEventModal = () => eventModal.classList.remove('active');
	eventModal.querySelector('.modal-close-btn').addEventListener('click', closeEventModal);
	eventModal.addEventListener('click', e => { if (e.target === eventModal) closeEventModal(); });

	document.getElementById('new-event-btn').addEventListener('click', () => {
		resetEventModal();
		eventModalTitle.textContent = "Neues Event anlegen";
		actionInput.value = "create";
		idInput.value = "";
		openEventModal();
	});

	document.querySelectorAll('.edit-event-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const eventId = btn.dataset.eventId;
			try {
				const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getEventData&id=${eventId}`);
				if (!response.ok) throw new Error('Event data could not be fetched.');
				const event = await response.json();
				resetEventModal();
				eventModalTitle.textContent = "Event bearbeiten";
				actionInput.value = "update";
				idInput.value = event.id;
				eventForm.querySelector('#name-modal').value = event.name || '';
				eventForm.querySelector('#location-modal').value = event.location || '';
				eventForm.querySelector('#leaderUserId-modal').value = event.leaderUserId || '';
				eventForm.querySelector('#eventDateTime-modal').value = event.eventDateTime ? event.eventDateTime.substring(0, 16) : '';
				eventForm.querySelector('#endDateTime-modal').value = event.endDateTime ? event.endDateTime.substring(0, 16) : '';
				eventForm.querySelector('#description-modal').value = event.description || '';

				event.skillRequirements?.forEach(req => addRequirementRow(req.requiredCourseId, req.requiredPersons));
				event.reservedItems?.forEach(res => addReservationRow(res.id, res.quantity));
				event.customFields?.forEach(cf => addCustomFieldRow(cf.fieldName, cf.fieldType));
				event.attachments?.forEach(att => addAttachmentRow(att.id, att.filename, att.filepath));

				openEventModal();
			} catch (error) {
				console.error('Error opening edit modal:', error);
				alert('Fehler beim Laden der Event-Daten.');
			}
		});
	});

	const tabButtons = eventModal.querySelectorAll('.modal-tab-button');
	const tabContents = eventModal.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_kits.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	// --- General Confirmations ---
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	// --- Kit Create/Edit Modal ---
	const kitModal = document.getElementById('kit-modal');
	if (kitModal) {
		const form = kitModal.querySelector('form');
		const title = kitModal.querySelector('h3');
		const actionInput = form.querySelector('input[name="action"]');
		const idInput = form.querySelector('input[name="id"]');
		const nameInput = form.querySelector('#name-modal');
		const descInput = form.querySelector('#description-modal');
		const locationInput = form.querySelector('#location-modal');
		const closeModalBtn = kitModal.querySelector('.modal-close-btn');

		const openModal = () => kitModal.classList.add('active');
		const closeModal = () => kitModal.classList.remove('active');

		document.getElementById('new-kit-btn')?.addEventListener('click', () => {
			form.reset();
			title.textContent = 'Neues Kit anlegen';
			actionInput.value = 'create';
			idInput.value = '';
			openModal();
		});

		document.querySelectorAll('.edit-kit-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				form.reset();
				title.textContent = 'Kit bearbeiten';
				actionInput.value = 'update';
				idInput.value = btn.dataset.kitId;
				nameInput.value = btn.dataset.kitName;
				descInput.value = btn.dataset.kitDesc;
				locationInput.value = btn.dataset.kitLocation || '';
				openModal();
			});
		});

		if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
		kitModal.addEventListener('click', e => {
			if (e.target === kitModal) closeModal();
		});
	}

	// --- Kit Content Management (Accordion & Dynamic Rows) ---
	const allItems = JSON.parse(document.getElementById('allItemsData').textContent || '[]');

	// Toggle accordion for each kit
	document.querySelectorAll('.kit-header').forEach(header => {
		header.addEventListener('click', () => {
			const content = header.nextElementSibling;
			const icon = header.querySelector('.toggle-icon');
			const isOpening = content.style.display !== 'block';

			content.style.display = isOpening ? 'block' : 'none';
			icon.classList.toggle('fa-chevron-down', !isOpening);
			icon.classList.toggle('fa-chevron-up', isOpening);
		});
	});

	/**
	 * Creates a new DOM element for an item row within a kit's content form.
	 * @param {object} item - The item to pre-populate the row with.
	 * @returns {HTMLDivElement} The new row element.
	 */
	const createItemRow = (item = { id: '', quantity: 1 }) => {
		const row = document.createElement('div');
		row.className = 'dynamic-row';

		const select = document.createElement('select');
		select.name = 'itemIds';
		select.className = 'form-group';
		select.innerHTML = '<option value="">-- Artikel auswählen --</option>' +
			allItems.map(i => `<option value="${i.id}">${i.name}</option>`).join('');
		select.value = item.id;

		const quantityInput = document.createElement('input');
		quantityInput.type = 'number';
		quantityInput.name = 'quantities';
		quantityInput.value = item.quantity;
		quantityInput.min = '1';
		quantityInput.className = 'form-group';
		quantityInput.style.maxWidth = '100px';
		quantityInput.required = true;

		const removeBtn = document.createElement('button');
		removeBtn.type = 'button';
		removeBtn.className = 'btn btn-small btn-danger btn-remove-kit-item-row';
		removeBtn.title = 'Zeile entfernen';
		removeBtn.innerHTML = '×';

		row.appendChild(select);
		row.appendChild(quantityInput);
		row.appendChild(removeBtn);

		return row;
	};

	// Event delegation for adding/removing item rows
	document.body.addEventListener('click', e => {
		const addBtn = e.target.closest('.btn-add-kit-item-row');
		const removeBtn = e.target.closest('.btn-remove-kit-item-row');

		if (addBtn) {
			e.preventDefault();
			const container = document.getElementById(addBtn.dataset.containerId);
			if (container) {
				const noItemsMsg = container.querySelector('.no-items-message');
				if (noItemsMsg) noItemsMsg.remove();
				container.appendChild(createItemRow());
			}
		} else if (removeBtn) {
			e.preventDefault();
			const row = removeBtn.closest('.dynamic-row');
			const container = row.parentElement;
			showConfirmationModal("Diesen Artikel wirklich aus dem Kit entfernen?", () => {
				row.remove();
				// If the container is now empty, show the placeholder message again.
				if (container && !container.querySelector('.dynamic-row')) {
					const p = document.createElement('p');
					p.className = 'no-items-message';
					p.textContent = 'Dieses Kit ist leer. Fügen Sie einen Artikel hinzu.';
					container.appendChild(p);
				}
			});
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_matrix.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const modalOverlay = document.getElementById('attendance-modal');
	if (!modalOverlay) return;

	// Get references to all modal elements once
	const modalTitle = document.getElementById('modal-title');
	const modalUserId = document.getElementById('modal-user-id');
	const modalMeetingId = document.getElementById('modal-meeting-id');
	const modalAttended = document.getElementById('modal-attended');
	const modalRemarks = document.getElementById('modal-remarks');
	const closeBtn = modalOverlay.querySelector('.modal-close-btn');

	/**
	 * Opens the attendance modal and populates it with data from the clicked cell.
	 * @param {HTMLElement} cell The table cell that was clicked.
	 */
	const openModal = (cell) => {
		const userData = cell.dataset;
		modalTitle.textContent = `Nutzer: ${userData.userName} | Meeting: ${userData.meetingName}`;
		modalUserId.value = userData.userId;
		modalMeetingId.value = userData.meetingId;
		modalRemarks.value = userData.remarks;
		// The value from dataset is a string, so we need to compare it to 'true'
		modalAttended.checked = (userData.attended === 'true');
		modalOverlay.classList.add('active');
	};

	/**
	 * Closes the attendance modal.
	 */
	const closeModal = () => modalOverlay.classList.remove('active');

	// Attach click listener to all qualification cells to open the modal
	document.querySelectorAll('.qual-cell').forEach(cell => {
		cell.addEventListener('click', (e) => openModal(e.currentTarget));
	});

	// --- Modal Closing Listeners ---
	if (closeBtn) closeBtn.addEventListener('click', closeModal);

	// Close modal if the overlay background is clicked
	modalOverlay.addEventListener('click', (event) => {
		if (event.target === modalOverlay) closeModal();
	});

	// Close modal on Escape key press
	document.addEventListener('keydown', (event) => {
		if (event.key === 'Escape' && modalOverlay.classList.contains('active')) {
			closeModal();
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_meeting_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const modal = document.getElementById('meeting-modal');
	if (!modal) return;

	const form = document.getElementById('meeting-modal-form');
	const modalTitle = document.getElementById('meeting-modal-title');
	const actionInput = document.getElementById('meeting-action');
	const idInput = document.getElementById('meeting-id');
	const attachmentsList = document.getElementById('modal-attachments-list');
	const closeModalBtn = modal.querySelector('.modal-close-btn');

	const openModal = () => modal.classList.add('active');
	const closeModal = () => modal.classList.remove('active');

	const resetModal = () => {
		form.reset();
		attachmentsList.innerHTML = '';
	};

	const newMeetingBtn = document.getElementById('new-meeting-btn');
	if (newMeetingBtn) {
		newMeetingBtn.addEventListener('click', () => {
			resetModal();
			modalTitle.textContent = "Neues Meeting planen";
			actionInput.value = "create";
			idInput.value = "";
			openModal();
		});
	}

	const addAttachmentRow = (attachment, courseId) => {
		const li = document.createElement('li');
		li.id = `attachment-item-${attachment.id}`;
		li.innerHTML = `<a href="${contextPath}/download?id=${attachment.id}" target="_blank">${attachment.filename}</a> (Rolle: ${attachment.requiredRole})`;
		const removeBtn = document.createElement('button');
		removeBtn.type = 'button';
		removeBtn.className = 'btn btn-small btn-danger-outline';
		removeBtn.innerHTML = '×';
		removeBtn.onclick = () => {
			showConfirmationModal(`Anhang '${attachment.filename}' wirklich löschen?`, () => {
				const csrfToken = form.querySelector('input[name="csrfToken"]').value; // Get token from main form
				const deleteForm = document.createElement('form');
				deleteForm.method = 'post';
				deleteForm.action = `${contextPath}/admin/meetings`;
				deleteForm.innerHTML = `
					<input type="hidden" name="action" value="deleteAttachment">
					<input type="hidden" name="attachmentId" value="${attachment.id}">
					<input type="hidden" name="courseId" value="${courseId}">
					<input type="hidden" name="csrfToken" value="${csrfToken}">
				`;
				document.body.appendChild(deleteForm);
				deleteForm.submit();
			});
		};
		li.appendChild(removeBtn);
		attachmentsList.appendChild(li);
	};

	document.querySelectorAll('.edit-meeting-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const meetingId = btn.dataset.meetingId;
			try {
				const response = await fetch(`${contextPath}/admin/meetings?action=getMeetingData&id=${meetingId}`);
				if (!response.ok) throw new Error('Meeting data could not be fetched.');
				const data = await response.json();
				const meeting = data.meetingData;
				const attachments = data.attachmentsData;

				resetModal();
				modalTitle.textContent = "Meeting bearbeiten";
				actionInput.value = "update";
				idInput.value = meeting.id;
				form.querySelector('#name-modal').value = meeting.name || '';
				form.querySelector('#location-modal').value = meeting.location || '';
				form.querySelector('#meetingDateTime-modal').value = meeting.meetingDateTime ? meeting.meetingDateTime.substring(0, 16) : '';
				form.querySelector('#endDateTime-modal').value = meeting.endDateTime ? meeting.endDateTime.substring(0, 16) : '';
				form.querySelector('#leader-modal').value = meeting.leaderUserId || '';
				form.querySelector('#description-modal').value = meeting.description || '';

				if (attachments && attachments.length > 0) {
					attachments.forEach(att => addAttachmentRow(att, meeting.courseId));
				} else {
					attachmentsList.innerHTML = '<li>Keine Anhänge vorhanden.</li>';
				}

				openModal();
			} catch (error) {
				console.error('Error fetching meeting data:', error);
				alert('Fehler beim Laden der Meeting-Daten.');
			}
		});
	});

	if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
	modal.addEventListener('click', e => { if (e.target === modal) closeModal(); });
	document.addEventListener('keydown', e => { if (e.key === 'Escape' && modal.classList.contains('active')) closeModal(); });

	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.nextElementSibling;
			if (file && file.size > maxSize) {
				warningElement.style.display = 'block';
				e.target.value = '';
			} else if (warningElement) {
				warningElement.style.display = 'none';
			}
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_reports.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const eventTrendCanvas = document.getElementById('eventTrendChart');
	const userActivityCanvas = document.getElementById('userActivityChart');

	const getJsonData = (id) => {
		const element = document.getElementById(id);
		if (element) {
			try {
				return JSON.parse(element.textContent);
			} catch (e) {
				console.error(`Failed to parse JSON from #${id}`, e);
				return null;
			}
		}
		return null;
	};

	const eventTrendData = getJsonData('eventTrendData');
	const userActivityData = getJsonData('userActivityData');

	if (eventTrendCanvas && eventTrendData && eventTrendData.length > 0) {
		const labels = eventTrendData.map(d => d.month);
		const data = eventTrendData.map(d => d.count);

		new Chart(eventTrendCanvas.getContext('2d'), {
			type: 'line',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl Events pro Monat',
					data: data,
					fill: true,
					borderColor: 'rgb(0, 123, 255)',
					backgroundColor: 'rgba(0, 123, 255, 0.1)',
					tension: 0.1
				}]
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					y: {
						beginAtZero: true,
						ticks: {
							stepSize: 1
						}
					}
				}
			}
		});
	} else if (eventTrendCanvas) {
		eventTrendCanvas.parentElement.innerHTML = '<p>Nicht genügend Daten für den Event-Trend vorhanden.</p>';
	}

	if (userActivityCanvas && userActivityData && userActivityData.length > 0) {
		const labels = userActivityData.map(d => d.username);
		const data = userActivityData.map(d => d.participation_count);

		new Chart(userActivityCanvas.getContext('2d'), {
			type: 'bar',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl zugewiesener Events',
					data: data,
					backgroundColor: 'rgba(0, 123, 255, 0.6)',
					borderColor: 'rgb(0, 123, 255)',
					borderWidth: 1
				}]
			},
			options: {
				indexAxis: 'y', 
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					x: {
						beginAtZero: true,
						ticks: {
							stepSize: 1
						}
					}
				},
				plugins: {
					legend: {
						display: false
					}
				}
			}
		});
	} else if (userActivityCanvas) {
		userActivityCanvas.parentElement.innerHTML = '<p>Nicht genügend Daten für Benutzeraktivität vorhanden.</p>';
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_roles.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const modal = document.getElementById('role-permissions-modal');
	if (!modal) return;

	const modalTitle = document.getElementById('role-modal-title');
	const roleIdInput = document.getElementById('modal-role-id');
	const roleNameInput = document.getElementById('modal-role-name');
	const checkboxContainer = document.getElementById('permissions-checkbox-container');
	const allPermissions = JSON.parse(document.getElementById('allPermissionsData').textContent || '[]');

	/**
	 * Opens the permissions modal and fetches the permissions for the selected role.
	 * @param {HTMLElement} btn The button that was clicked.
	 */
	const openModal = async (btn) => {
		const roleId = btn.dataset.roleId;
		const roleName = btn.dataset.roleName;

		modalTitle.textContent = `Berechtigungen für Rolle: ${roleName}`;
		roleIdInput.value = roleId;
		roleNameInput.value = roleName;
		checkboxContainer.innerHTML = '<p>Lade Berechtigungen...</p>';
		modal.classList.add('active');

		try {
			const response = await fetch(`${contextPath}/admin/roles?action=getRolePermissions&roleId=${roleId}`);
			if (!response.ok) throw new Error('Could not fetch role permissions');

			const data = await response.json();
			const assignedIds = new Set(data.permissionIds);

			checkboxContainer.innerHTML = ''; // Clear loading message

			// Group permissions for better UI
			const grouped = allPermissions.reduce((acc, p) => {
				const groupName = p.permissionKey.split('_')[0] || 'ALLGEMEIN';
				if (!acc[groupName]) acc[groupName] = [];
				acc[groupName].push(p);
				return acc;
			}, {});


			for (const groupName in grouped) {
				const details = document.createElement('details');
				details.open = true; // Default to open
				const summary = document.createElement('summary');
				summary.textContent = groupName;
				details.appendChild(summary);

				const groupDiv = document.createElement('div');
				groupDiv.className = 'permission-group';
				grouped[groupName].forEach(p => {
					const isChecked = assignedIds.has(p.id) ? 'checked' : '';
					// Prevent ADMIN role from having the main access permission removed to avoid lockouts.
					const isDisabled = p.permissionKey === 'ACCESS_ADMIN_PANEL' && roleName === 'ADMIN' ? 'disabled' : '';
					const label = document.createElement('label');
					label.className = 'checkbox-label';
					label.innerHTML = `
                        <input type="checkbox" name="permissionIds" value="${p.id}" ${isChecked} ${isDisabled}>
                        <span>
                            <strong>${p.permissionKey}</strong>
                            <small>${p.description}</small>
                        </span>
                    `;
					groupDiv.appendChild(label);
				});
				details.appendChild(groupDiv);
				checkboxContainer.appendChild(details);
			}

		} catch (error) {
			console.error("Error fetching role permissions:", error);
			checkboxContainer.innerHTML = '<p class="error-message">Fehler beim Laden der Berechtigungen.</p>';
		}
	};

	document.querySelectorAll('.edit-permissions-btn').forEach(btn => {
		btn.addEventListener('click', (e) => openModal(e.currentTarget));
	});

	const closeModal = () => modal.classList.remove('active');

	modal.querySelector('.modal-close-btn').addEventListener('click', closeModal);
	modal.addEventListener('click', (e) => {
		if (e.target === modal) closeModal();
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_storage_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const lightbox = document.getElementById('lightbox');
	if (lightbox) {
		const lightboxImage = document.getElementById('lightbox-image');
		const closeBtn = lightbox.querySelector('.lightbox-close');

		document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
			trigger.addEventListener('click', (e) => {
				e.preventDefault();
				lightboxImage.src = trigger.dataset.src;
				lightbox.style.display = 'flex';
			});
		});

		const closeLightbox = () => {
			lightbox.style.display = 'none';
			lightboxImage.src = '';
		};

		if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
		lightbox.addEventListener('click', (e) => {
			if (e.target === lightbox) {
				closeLightbox();
			}
		});
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && lightbox.style.display === 'flex') {
				closeLightbox();
			}
		});
	}

	const itemModal = document.getElementById('item-modal');
	if (itemModal) {
		const form = itemModal.querySelector('form');
		const title = itemModal.querySelector('h3');
		const actionInput = form.querySelector('input[name="action"]');
		const idInput = form.querySelector('input[name="id"]');
		const closeModalBtn = itemModal.querySelector('.modal-close-btn');

		document.getElementById('new-item-btn').addEventListener('click', () => {
			form.reset();
			title.textContent = 'Neuen Lagerartikel anlegen';
			actionInput.value = 'create';
			itemModal.classList.add('active');
		});

		document.querySelectorAll('.edit-item-btn').forEach(btn => {
			btn.addEventListener('click', async () => {
				form.reset();
				const fetchUrl = btn.dataset.fetchUrl;
				try {
					const response = await fetch(fetchUrl);
					if (!response.ok) throw new Error('Could not fetch item data.');
					const itemData = await response.json();

					title.textContent = 'Lagerartikel bearbeiten';
					actionInput.value = 'update';
					idInput.value = itemData.id;
					form.querySelector('#name-modal').value = itemData.name || '';
					form.querySelector('#location-modal').value = itemData.location || '';
					form.querySelector('#cabinet-modal').value = itemData.cabinet || '';
					form.querySelector('#compartment-modal').value = itemData.compartment || '';
					form.querySelector('#quantity-modal').value = itemData.quantity;
					form.querySelector('#maxQuantity-modal').value = itemData.maxQuantity;
					form.querySelector('#weight_kg-modal').value = itemData.weightKg || '';
					form.querySelector('#price_eur-modal').value = itemData.priceEur || '';
					itemModal.classList.add('active');
				} catch (error) {
					console.error("Failed to open edit modal:", error);
					alert("Fehler beim Laden der Artikeldaten.");
				}
			});
		});
		closeModalBtn.addEventListener('click', () => itemModal.classList.remove('active'));
	}

	const defectModal = document.getElementById('defect-modal');
	if (defectModal) {
		const modalTitle = defectModal.querySelector('h3');
		const itemIdInput = defectModal.querySelector('#defect-item-id');
		const defectQtyInput = defectModal.querySelector('#defective_quantity');
		const reasonInput = defectModal.querySelector('#defect_reason');
		const closeModalBtn = defectModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.defect-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
				itemIdInput.value = btn.dataset.itemId;
				defectQtyInput.value = btn.dataset.currentDefectQty;
				defectQtyInput.max = btn.dataset.maxQty;
				reasonInput.value = btn.dataset.currentReason;
				defectModal.classList.add('active');
			});
		});
		closeModalBtn.addEventListener('click', () => defectModal.classList.remove('active'));
	}

	const repairModal = document.getElementById('repair-modal');
	if (repairModal) {
		const modalTitle = repairModal.querySelector('#repair-modal-title');
		const itemIdInput = repairModal.querySelector('#repair-item-id');
		const repairQtyInput = repairModal.querySelector('#repaired_quantity');
		const closeModalBtn = repairModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.repair-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Artikel "${btn.dataset.itemName}" repariert`;
				itemIdInput.value = btn.dataset.itemId;
				repairQtyInput.value = "1";
				repairQtyInput.max = btn.dataset.maxRepairQty;
				repairModal.classList.add('active');
			});
		});

		closeModalBtn.addEventListener('click', () => repairModal.classList.remove('active'));
		repairModal.addEventListener('click', (e) => {
			if (e.target === repairModal) repairModal.classList.remove('active');
		});
	}

	const maintenanceModal = document.getElementById('maintenance-modal');
	if (maintenanceModal) {
		const modalTitle = maintenanceModal.querySelector('h3');
		const itemIdInput = maintenanceModal.querySelector('#maintenance-item-id');
		const closeModalBtn = maintenanceModal.querySelector('.modal-close-btn');
		const statusSelect = maintenanceModal.querySelector('#maintenance-status');

		document.querySelectorAll('.maintenance-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Wartungs-Status für "${btn.dataset.itemName}"`;
				itemIdInput.value = btn.dataset.itemId;
				statusSelect.value = btn.dataset.currentStatus;
				maintenanceModal.classList.add('active');
			});
		});

		closeModalBtn.addEventListener('click', () => maintenanceModal.classList.remove('active'));
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_system.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const apiUrl = `${contextPath}/api/admin/system-stats`;

	const cpuProgress = document.getElementById('cpu-progress');
	const cpuText = document.getElementById('cpu-text');
	const ramProgress = document.getElementById('ram-progress');
	const ramText = document.getElementById('ram-text');
	const diskProgress = document.getElementById('disk-progress');
	const diskText = document.getElementById('disk-text');
	const uptimeText = document.getElementById('uptime-text');
	const batteryCard = document.getElementById('battery-card');
	const batteryProgress = document.getElementById('battery-progress');
	const batteryText = document.getElementById('battery-text');

	const formatGigaBytes = (gb) => {
		if (gb === 0) return '0 GB';
		if (gb < 1) return `${(gb * 1024).toFixed(0)} MB`;
		return `${gb.toFixed(2)} GB`;
	};

	const updateUI = (stats) => {
		const cpuPercent = stats.cpuLoad.toFixed(1);
		cpuProgress.style.width = cpuPercent + '%';
		cpuText.textContent = cpuPercent + '%';

		if (stats.totalMemory > 0) {
			const ramPercent = (stats.usedMemory / stats.totalMemory) * 100;
			ramProgress.style.width = ramPercent.toFixed(1) + '%';
			ramText.textContent = `${formatGigaBytes(stats.usedMemory)} / ${formatGigaBytes(stats.totalMemory)}`;
		}

		if (stats.totalDiskSpace > 0) {
			const diskPercent = (stats.usedDiskSpace / stats.totalDiskSpace) * 100;
			diskProgress.style.width = diskPercent.toFixed(1) + '%';
			diskText.textContent = `${formatGigaBytes(stats.usedDiskSpace)} / ${formatGigaBytes(stats.totalDiskSpace)}`;
		}

		uptimeText.textContent = stats.uptime;

		if (stats.batteryPercentage >= 0) {
			batteryCard.style.display = 'block';
			const batteryPercent = stats.batteryPercentage;
			batteryProgress.style.width = batteryPercent + '%';
			batteryText.textContent = batteryPercent + '%';
		} else {
			batteryCard.style.display = 'none';
		}
	};

	const fetchStats = async () => {
		try {
			const response = await fetch(apiUrl);
			if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
			const data = await response.json();
			updateUI(data);
		} catch (error) {
			console.error("Could not fetch system stats:", error);
			cpuText.textContent = "Fehler";
			ramText.textContent = "Fehler";
			diskText.textContent = "Fehler";
			uptimeText.textContent = "Fehler";
		}
	};

	fetchStats();
	let intervalId = setInterval(fetchStats, 5000);

	document.addEventListener("visibilitychange", () => {
		if (document.hidden) {
			clearInterval(intervalId);
		} else {
			fetchStats();
			intervalId = setInterval(fetchStats, 5000);
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_users.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(event) {
			event.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const passwordAlert = document.getElementById('password-reset-alert');
	if (passwordAlert) {
		const passwordElement = passwordAlert.querySelector('strong.copyable-password');
		if (passwordElement && navigator.clipboard) {
			navigator.clipboard.writeText(passwordElement.textContent)
				.then(() => console.log('Password copied to clipboard'))
				.catch(err => console.error('Failed to copy password:', err));
		}
	}

	const modal = document.getElementById('user-modal');
	if (!modal) return;

	const form = document.getElementById('user-modal-form');
	const title = document.getElementById('user-modal-title');
	const actionInput = form.querySelector('#user-modal-action');
	const idInput = form.querySelector('#userId-modal');
	const usernameInput = form.querySelector('#username-modal');
	const passwordInput = form.querySelector('#password-modal');
	const passwordGroup = form.querySelector('#password-group');
	const roleInput = form.querySelector('#role-modal');
	const classYearInput = form.querySelector('#classYear-modal');
	const classNameInput = form.querySelector('#className-modal');
	const emailInput = form.querySelector('#email-modal');
	const permissionsContainer = document.getElementById('permissions-checkbox-container');
	const closeModalBtn = modal.querySelector('.modal-close-btn');

	const groupedPermissions = JSON.parse(document.getElementById('allPermissionsData').textContent);

	const closeModal = () => modal.classList.remove('active');

	const populatePermissions = (assignedIds = new Set()) => {
		permissionsContainer.innerHTML = '';

		for (const [groupName, permissionsInGroup] of Object.entries(groupedPermissions)) {
			const details = document.createElement('details');
			details.open = true;

			const summary = document.createElement('summary');
			summary.style.fontWeight = 'bold';
			summary.style.cursor = 'pointer';
			summary.style.padding = '0.5rem 0';
			summary.textContent = groupName;

			const groupDiv = document.createElement('div');
			groupDiv.style.paddingLeft = '1rem';

			permissionsInGroup.forEach(p => {
				const isChecked = assignedIds.has(p.id) ? 'checked' : '';
				const label = document.createElement('label');
				label.style.display = 'flex';
				label.style.alignItems = 'flex-start';
				label.style.marginBottom = '0.5rem';
				label.innerHTML = `
                    <input type="checkbox" name="permissionIds" value="${p.id}" ${isChecked} style="margin-top: 5px; margin-right: 10px;">
                    <div>
                        <strong>${p.permissionKey.replace(groupName + '_', '')}</strong>
                        <small style="display: block; color: var(--text-muted-color);">${p.description}</small>
                    </div>
                `;
				groupDiv.appendChild(label);
			});

			details.appendChild(summary);
			details.appendChild(groupDiv);
			permissionsContainer.appendChild(details);
		}
	};

	const newUserBtn = document.getElementById('new-user-btn');
	if (newUserBtn) {
		newUserBtn.addEventListener('click', () => {
			form.reset();
			title.textContent = "Neuen Benutzer anlegen";
			actionInput.value = "create";
			idInput.value = "";
			passwordInput.required = true;
			passwordGroup.style.display = 'block';
			roleInput.value = "3";
			populatePermissions();
			modal.classList.add('active');
			usernameInput.focus();
		});
	}

	document.querySelectorAll('.edit-user-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			form.reset();
			const fetchUrl = btn.dataset.fetchUrl;
			try {
				const response = await fetch(fetchUrl);
				if (!response.ok) throw new Error('Could not fetch user data');
				const data = await response.json();
				const user = data.user;
				const assignedPermissionIds = new Set(data.permissionIds);

				title.textContent = `Benutzer bearbeiten: ${user.username}`;
				actionInput.value = "update";
				idInput.value = user.id;
				usernameInput.value = user.username || '';
				roleInput.value = user.roleId || '3';
				classYearInput.value = user.classYear || '';
				classNameInput.value = user.className || '';
				emailInput.value = user.email || '';
				passwordInput.required = false;
				passwordGroup.style.display = 'none';

				populatePermissions(assignedPermissionIds);

				modal.classList.add('active');
			} catch (error) {
				console.error('Failed to open edit modal:', error);
				alert('Benutzerdaten konnten nicht geladen werden.');
			}
		});
	});

	closeModalBtn.addEventListener('click', closeModal);
	modal.addEventListener('click', (event) => { if (event.target === modal) closeModal(); });
	document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && modal.classList.contains('active')) closeModal(); });

	const tabButtons = modal.querySelectorAll('.modal-tab-button');
	const tabContents = modal.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\login.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const togglePassword = document.getElementById('togglePassword');
	const passwordInput = document.getElementById('password');

	if (togglePassword && passwordInput) {
		togglePassword.addEventListener('click', function() {
			const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
			passwordInput.setAttribute('type', type);
			this.querySelector('i').classList.toggle('fa-eye');
			this.querySelector('i').classList.toggle('fa-eye-slash');
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\logout.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	setTimeout(function() {
		window.location.href = `${contextPath}/login`;
	}, 5000);
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error400.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const output = document.getElementById('droid-output');
	const redirectContainer = document.getElementById('redirect-container');
	const contentLength = document.body.dataset.contentLength || 'UNKNOWN';

	const lines = [
		'INITIATING DATASTREAM ANALYSIS...',
		`PACKET RECEIVED. SIZE: ${contentLength} BYTES.`,
		'PARSING HEADER... [OK]',
		'ANALYSING PAYLOAD...',
		'    > SCANNING FOR SYNTAX VIOLATIONS...',
		'    > ERROR! UNEXPECTED TOKEN OR MALFORMED PARAMETER DETECTED.',
		'    > CORRUPTION LEVEL: MODERATE.',
		'CONCLUSION: ANFRAGE NICHT VERARBEITBAR. DATENINTEGRITÄT KOMPROMITTIERT.',
		'EMPFEHLUNG: ZURÜCKKEHREN UND ANFRAGE NEU FORMULIEREN.',
		''
	];

	let lineIndex = 0;

	function printLine() {
		if (lineIndex < lines.length) {
			const p = document.createElement('p');
			p.textContent = lines[lineIndex];
			output.appendChild(p);
			output.scrollTop = output.scrollHeight;
			lineIndex++;
			setTimeout(printLine, Math.random() * 200 + 50);
		} else {
			redirectContainer.style.opacity = '1';
		}
	}

	printLine();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error401.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const statusText = document.getElementById('scanner-status');
    const light = document.getElementById('scanner-light');
    const progress = document.getElementById('scanner-progress');
    const redirectContainer = document.getElementById('redirect-container');

    const steps = [
        { text: 'SCANNE...', color: '#ffc107', lightColor: '#ffc107', duration: 1500, progress: 50 },
        { text: 'KEINE ID', color: '#dc3545', lightColor: '#dc3545', duration: 1000, progress: 80 },
        { text: 'ZUGRIFF?', color: '#dc3545', lightColor: '#dc3545', duration: 800, progress: 100 },
        { text: 'VERWEIGERT', color: '#dc3545', lightColor: '#dc3545', duration: 2000, progress: 100 }
    ];

    let currentStep = 0;

    function runScan() {
        if(currentStep >= steps.length) {
            redirectContainer.style.opacity = '1';
            return;
        }

        const step = steps[currentStep];
        statusText.textContent = step.text;
        statusText.style.color = step.color;
        light.style.background = step.lightColor;
        light.style.boxShadow = `0 0 10px ${step.lightColor}`;
        progress.style.width = `${step.progress}%`;
        progress.style.backgroundColor = step.lightColor;

        currentStep++;
        setTimeout(runScan, step.duration);
    }

    setTimeout(runScan, 500); 
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error403.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const consoleBody = document.getElementById('console-body');
	const redirectContainer = document.getElementById('redirect-container');
	const username = document.body.dataset.username || 'unknown_user';
	const role = document.body.dataset.role || 'unknown_role';
	const requestUri = document.body.dataset.requestUri || '/';
	const contextPath = document.body.dataset.contextPath || '';

	let currentLine;

	async function type(text, delay = 25) {
		for (const char of text) {
			currentLine.innerHTML += char;
			consoleBody.scrollTop = consoleBody.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
		currentLine.innerHTML = currentLine.innerHTML.replace('<span class="cursor"></span>', '');
		consoleBody.innerHTML += '\n'; 
	}

	async function addLine(text, className = '') {
		currentLine = document.createElement('span');
		if (className) currentLine.className = className;
		consoleBody.appendChild(currentLine);
		await type(text + ' <span class="cursor"></span>');
	}

	async function runSequence() {
		await addLine('[INFO] Eingehender Request erkannt...', 'info');
		await new Promise(resolve => setTimeout(resolve, 300));
		await addLine(`[INFO] Ziel-Ressource: ${requestUri}`, 'info');
		await new Promise(resolve => setTimeout(resolve, 400));
		await addLine('[INFO] Starte Identitäts-Scan...', 'info');
		await new Promise(resolve => setTimeout(resolve, 500));
		await addLine(`[OK]   ... Subjekt identifiziert: "${username}"`, 'ok');
		await new Promise(resolve => setTimeout(resolve, 200));
		await addLine(`[OK]   ... Zugehörigkeit/Rolle: [${role}]`, 'ok');
		await new Promise(resolve => setTimeout(resolve, 400));
		await addLine('[WARN] Prüfe Berechtigungs-Matrix für Ziel-Ressource...', 'warn');
		await new Promise(resolve => setTimeout(resolve, 800));
		await addLine('[FAIL] >>> ZUGRIFF VERWEIGERT <<<', 'fail');
		await new Promise(resolve => setTimeout(resolve, 200));
		await addLine('[FAIL] >>> Erforderliche Berechtigung nicht im Token des Subjekts gefunden.', 'fail');
		await new Promise(resolve => setTimeout(resolve, 500));
		await addLine('[INFO] Aktion protokolliert. Sicherheits-Subsystem wird heruntergefahren.', 'info');

		currentLine = document.createElement('span');
		consoleBody.appendChild(currentLine);
		currentLine.innerHTML = '> <span class="cursor"></span>';

		redirectContainer.style.opacity = '1';

		setTimeout(() => {
			window.location.href = `${contextPath}/home`;
		}, 5000);
	}

	runSequence();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error404.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const terminalBody = document.getElementById('terminal-body');
	const homeLinkContainer = document.getElementById('home-link-container');
	const contextPath = document.body.dataset.contextPath || '';
	const requestUri = document.body.dataset.requestUri || '/';

	async function type(text, element, delay = 50) {
		for (const char of text) {
			element.textContent += char;
			terminalBody.scrollTop = terminalBody.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
	}

	async function addLine(text, className, delay = 20) {
		const p = document.createElement('p');
		if (className) p.className = className;
		terminalBody.appendChild(p);
		await type(text, p, delay);
	}

	async function runSequence() {
		const p1 = document.createElement('p');
		terminalBody.appendChild(p1);

		const prompt1 = document.createElement('span');
		prompt1.className = 'prompt';
		await type('user@technik-team:~$ ', prompt1, 20);
		p1.appendChild(prompt1);

		const command1 = document.createElement('span');
		command1.className = 'command';
		await type('ls -l ' + requestUri, command1, 50);
		p1.appendChild(command1);

		await new Promise(resolve => setTimeout(resolve, 500));

		await addLine('ls: cannot access \'' + requestUri + '\': No such file or directory', 'error', 15);
		await new Promise(resolve => setTimeout(resolve, 800));

		await addLine('Tipp: Kehren Sie mit dem folgenden Befehl zur Startseite zurück:', 'info', 25);
		await new Promise(resolve => setTimeout(resolve, 300));

		const p_link = document.createElement('p');
		terminalBody.appendChild(p_link);

		const prompt2 = document.createElement('span');
		prompt2.className = 'prompt';
		await type('user@technik-team:~$ ', prompt2, 20);
		p_link.appendChild(prompt2);

		const homeLink = document.createElement('a');
		homeLink.href = `${contextPath}/home`;
		homeLink.className = 'link';
		p_link.appendChild(homeLink);
		await type('cd /home', homeLink, 80);

		const cursor = document.createElement('span');
		cursor.className = 'cursor';
		cursor.innerHTML = ' ';
		p_link.appendChild(cursor);

		homeLinkContainer.style.opacity = '1';
	}

	runSequence();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error500.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const diagBtn = document.getElementById('diagnostic-btn');
	const output = document.getElementById('diagnostic-output');

	const steps = [
		{ text: 'Initialisiere Diagnose-Protokoll...', type: 'info', icon: 'fas fa-cogs' },
		{ text: 'Prüfe Speicher-Integrität...', type: 'info', icon: 'fas fa-memory' },
		{ text: '[OK] RAM Module antworten.', type: 'ok', icon: 'fas fa-check-circle' },
		{ text: 'Verbinde mit Kernel...', type: 'info', icon: 'fas fa-project-diagram' },
		{ text: '[WARN] Kernel antwortet langsam. Kaffee-Level kritisch.', type: 'warn', icon: 'fas fa-exclamation-triangle' },
		{ text: 'Lade KI-Logikmodule...', type: 'info', icon: 'fas fa-brain' },
		{ text: '[FAIL] Logikmodul "Hamster im Laufrad" hat die Arbeit niedergelegt.', type: 'fail', icon: 'fas fa-times-circle' },
		{ text: 'Versuche Workaround: Mehr Glitzer-Effekte laden...', type: 'warn', icon: 'fas fa-magic' },
		{ text: '[FAIL] Glitzer-Puffer übergelaufen.', type: 'fail', icon: 'fas fa-times-circle' },
		{ text: '--------------------------------', type: 'info', icon: '' },
		{ text: 'Diagnose abgeschlossen. Fehler gefunden.', type: 'fail', icon: 'fas fa-skull-crossbones' }
	];

	let isRunning = false;

	async function typeText(element, text, delay = 20) {
		for (let i = 0; i < text.length; i++) {
			element.innerHTML += text.charAt(i);
			output.scrollTop = output.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
	}

	diagBtn.addEventListener('click', async () => {
		if (isRunning) return;

		isRunning = true;
		diagBtn.disabled = true;
		diagBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Diagnose läuft...';
		output.innerHTML = ''; 

		for (const step of steps) {
			const line = document.createElement('p');
			line.className = step.type;
			const iconHtml = step.icon ? `<i class="${step.icon}" style="margin-right: 8px;"></i>` : '';
			line.innerHTML = `${iconHtml}`;
			output.appendChild(line);

			await typeText(line, step.text);

			await new Promise(resolve => setTimeout(resolve, 300)); 
		}

		const finalLine = document.createElement('p');
		finalLine.innerHTML = '> <span class="cursor"> </span>';
		output.appendChild(finalLine);
		output.scrollTop = output.scrollHeight;

		diagBtn.disabled = false;
		diagBtn.innerHTML = '<i class="fas fa-tasks"></i> Diagnose erneut starten';
		isRunning = false;
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error503.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const output = document.getElementById('reboot-output');
	const progress = document.getElementById('reboot-progress');
	const contextPath = document.body.dataset.contextPath || '';

	const steps = [
		{ text: 'System check initiated...', delay: 100, progress: 10 },
		{ text: 'Checking memory modules... [OK]', delay: 300, progress: 20 },
		{ text: 'Checking CPU cores... [OK]', delay: 300, progress: 30 },
		{ text: 'Pinging gateway... [NO RESPONSE]', delay: 1000, progress: 40 },
		{ text: 'Server overload detected. Reason: Too many requests.', delay: 500, progress: 50 },
		{ text: 'Flushing request queue...', delay: 1500, progress: 70 },
		{ text: 'Initializing reboot sequence...', delay: 500, progress: 80 },
		{ text: 'System will be back online shortly.', delay: 1000, progress: 100 },
		{ text: 'Redirecting to login page...', delay: 2000, progress: 100 }
	];

	let stepIndex = 0;

	function runSequence() {
		if (stepIndex >= steps.length) {
			window.location.href = `${contextPath}/login`;
			return;
		}

		const step = steps[stepIndex];
		const p = document.createElement('p');
		p.textContent = step.text;
		output.appendChild(p);
		output.scrollTop = output.scrollHeight;

		progress.style.width = `${step.progress}%`;

		stepIndex++;
		setTimeout(runSequence, step.delay);
	}

	runSequence();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\calendar.js
========================================================================

document.addEventListener('DOMContentLoaded', function() {
	const calendarEl = document.getElementById('calendar-container');
	const contextPath = document.body.dataset.contextPath || '';

	if (calendarEl && window.innerWidth >= 992) {
		const calendar = new FullCalendar.Calendar(calendarEl, {
			initialView: 'dayGridMonth',
			locale: 'de',
			headerToolbar: {
				left: 'prev,next today',
				center: 'title',
				right: 'dayGridMonth,timeGridWeek,listWeek'
			},
			events: `${contextPath}/api/calendar/entries`,
			eventClick: function(info) {
				info.jsEvent.preventDefault();
				if (info.event.url) {
					window.location.href = info.event.url;
				}
			}
		});
		calendar.render();
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\dateien.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const uploadModal = document.getElementById('upload-version-modal');
	if (!uploadModal) return;

	const modalTitle = document.getElementById('upload-modal-title');
	const modalFileIdInput = document.getElementById('upload-file-id');
	const modalFileNameSpan = document.getElementById('upload-file-name');
	const fileInput = document.getElementById('new-file-version');
	const closeModalBtn = uploadModal.querySelector('.modal-close-btn');

	document.querySelectorAll('.upload-new-version-btn').forEach(btn => {
		btn.addEventListener('click', () => {
			const fileId = btn.dataset.fileId;
			const fileName = btn.dataset.fileName;

			modalFileIdInput.value = fileId;
			modalFileNameSpan.textContent = fileName;
			fileInput.value = ''; // Reset file input
			uploadModal.classList.add('active');
		});
	});

	const closeModal = () => uploadModal.classList.remove('active');

	closeModalBtn.addEventListener('click', closeModal);
	uploadModal.addEventListener('click', (e) => {
		if (e.target === uploadModal) closeModal();
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\eventDetails.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const eventId = document.body.dataset.eventId || '';
	const currentUserId = document.body.dataset.userId || '';
	const isAdmin = document.body.dataset.isAdmin === 'true';

	const taskModal = document.getElementById('task-modal');
	if (taskModal) {
		const allUsers = JSON.parse(document.getElementById('allUsersData')?.textContent || '[]');
		const allItems = JSON.parse(document.getElementById('allItemsData')?.textContent || '[]');
		const allKits = JSON.parse(document.getElementById('allKitsData')?.textContent || '[]');
		const allTasks = JSON.parse(document.getElementById('allTasksData')?.textContent || '[]');

		const form = document.getElementById('task-modal-form');
		const title = document.getElementById('task-modal-title');
		const taskIdInput = document.getElementById('task-id-modal');
		const descInput = document.getElementById('task-description-modal');
		const detailsInput = document.getElementById('task-details-modal');
		const orderInput = document.getElementById('task-display-order-modal');
		const statusGroup = document.getElementById('task-status-group');
		const statusInput = document.getElementById('task-status-modal');
		const deleteBtn = document.getElementById('delete-task-btn');

		const assignmentTypeRadios = form.querySelectorAll('input[name="assignmentType"]');
		const directFields = document.getElementById('direct-assignment-fields');
		const poolFields = document.getElementById('pool-assignment-fields');
		const requiredPersonsInput = document.getElementById('task-required-persons-modal');
		const userCheckboxesContainer = document.getElementById('task-user-checkboxes');

		const itemsContainer = document.getElementById('task-items-container');
		const kitsContainer = document.getElementById('task-kits-container');

		const createRow = (container, onRemove) => {
			const row = document.createElement('div');
			row.className = 'dynamic-row';
			const removeBtn = document.createElement('button');
			removeBtn.type = 'button';
			removeBtn.className = 'btn-small btn-danger';
			removeBtn.innerHTML = '×';
			removeBtn.onclick = () => onRemove(row);
			row.appendChild(removeBtn);
			container.appendChild(newRow);
			return row;
		};

		const addItemRow = (item = { id: '', quantity: 1 }) => {
			const row = createRow(itemsContainer, r => r.remove());
			const select = document.createElement('select');
			select.name = 'itemIds';
			select.className = 'form-group';
			select.innerHTML = '<option value="">-- Material --</option>' + allItems.map(i => `<option value="${i.id}" data-max-qty="${i.availableQuantity}">${i.name}</option>`).join('');
			select.value = item.id;

			const input = document.createElement('input');
			input.type = 'number';
			input.name = 'itemQuantities';
			input.value = item.quantity;
			input.min = '1';
			input.className = 'form-group';
			input.style.maxWidth = '100px';

			select.addEventListener('change', () => {
				const selectedOption = select.options[select.selectedIndex];
				const maxQty = selectedOption.dataset.maxQty;
				input.max = maxQty || '';
				if (maxQty) input.title = `Maximal verfügbar: ${maxQty}`;
			});

			row.prepend(select, input);
		};

		const addKitRow = (kit = { id: '' }) => {
			const row = createRow(kitsContainer, r => r.remove());
			const select = document.createElement('select');
			select.name = 'kitIds';
			select.className = 'form-group';
			select.innerHTML = '<option value="">-- Kit --</option>' + allKits.map(k => `<option value="${k.id}">${k.name}</option>`).join('');
			select.value = kit.id;
			row.prepend(select);
		};

		const openModal = () => taskModal.classList.add('active');
		const closeModal = () => taskModal.classList.remove('active');

		const resetModal = () => {
			form.reset();
			taskIdInput.value = '';
			itemsContainer.innerHTML = '';
			kitsContainer.innerHTML = '';
			userCheckboxesContainer.innerHTML = '';
			statusGroup.style.display = 'none';
			deleteBtn.style.display = 'none';
			directFields.style.display = 'block';
			poolFields.style.display = 'none';
			form.querySelector('input[name="assignmentType"][value="direct"]').checked = true;
		};

		document.getElementById('new-task-btn')?.addEventListener('click', () => {
			resetModal();
			title.textContent = 'Neue Aufgabe erstellen';
			allUsers.forEach(user => {
				userCheckboxesContainer.innerHTML += `<label><input type="checkbox" name="userIds" value="${user.id}"> ${user.username}</label>`;
			});
			openModal();
		});

		document.querySelectorAll('.edit-task-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				const taskId = parseInt(btn.dataset.taskId, 10);
				const task = allTasks.find(t => t.id === taskId);
				if (!task) return;

				resetModal();
				title.textContent = 'Aufgabe bearbeiten';
				statusGroup.style.display = 'block';
				deleteBtn.style.display = 'inline-block';

				taskIdInput.value = task.id;
				descInput.value = task.description;
				detailsInput.value = task.details || '';
				orderInput.value = task.displayOrder;
				statusInput.value = task.status;

				if (task.requiredPersons > 0) {
					form.querySelector('input[name="assignmentType"][value="pool"]').checked = true;
					poolFields.style.display = 'block';
					directFields.style.display = 'none';
					requiredPersonsInput.value = task.requiredPersons;
				} else {
					const assignedIds = new Set(task.assignedUsers.map(u => u.id));
					allUsers.forEach(user => {
						const isChecked = assignedIds.has(user.id) ? 'checked' : '';
						userCheckboxesContainer.innerHTML += `<label><input type="checkbox" name="userIds" value="${user.id}" ${isChecked}> ${user.username}</label>`;
					});
				}

				task.requiredItems?.forEach(item => addItemRow({ id: item.id, quantity: item.quantity }));
				task.requiredKits?.forEach(kit => addKitRow({ id: kit.id }));
				openModal();
			});
		});

		assignmentTypeRadios.forEach(radio => {
			radio.addEventListener('change', () => {
				directFields.style.display = radio.value === 'direct' ? 'block' : 'none';
				poolFields.style.display = radio.value === 'pool' ? 'block' : 'none';
			});
		});

		deleteBtn.addEventListener('click', () => {
			showConfirmationModal('Diese Aufgabe wirklich löschen?', () => {
				const csrfToken = form.querySelector('input[name="csrfToken"]').value;
				const deleteForm = document.createElement('form');
				deleteForm.method = 'post';
				deleteForm.action = `${contextPath}/task-action`;
				deleteForm.innerHTML = `
					<input type="hidden" name="action" value="delete">
					<input type="hidden" name="taskId" value="${taskIdInput.value}">
					<input type="hidden" name="eventId" value="${eventId}">
					<input type="hidden" name="csrfToken" value="${csrfToken}">`;
				document.body.appendChild(deleteForm);
				deleteForm.submit();
			});
		});

		document.body.addEventListener('click', e => {
			const addItemBtn = e.target.closest('#add-task-item-btn');
			const addKitBtn = e.target.closest('#add-task-kit-btn');

			if (addItemBtn) {
				addItemRow();
			}
			if (addKitBtn) {
				addKitRow();
			}
		});

		taskModal.querySelector('.modal-close-btn').addEventListener('click', closeModal);
	}

	const taskListContainer = document.getElementById('task-list-container');
	if (taskListContainer) {
		taskListContainer.addEventListener('click', (e) => {
			const markDoneBtn = e.target.closest('.mark-task-done-btn');
			if (markDoneBtn) {
				const taskId = markDoneBtn.dataset.taskId;
				const csrfToken = document.body.dataset.csrfToken;
				const params = new URLSearchParams();
				params.append('action', 'updateStatus');
				params.append('taskId', taskId);
				params.append('status', 'ERLEDIGT');
				if (csrfToken) {
					params.append('csrfToken', csrfToken);
				}

				fetch(`${contextPath}/task-action`, {
					method: 'POST',
					body: params
				})
					.then(response => {
						if (response.ok) window.location.reload();
						else alert('Fehler beim Aktualisieren der Aufgabe.');
					})
					.catch(error => {
						console.error("Error updating task status:", error);
						alert('Netzwerkfehler beim Aktualisieren der Aufgabe.');
					});
			}
		});
	}

	const chatBox = document.getElementById('chat-box');
	if (chatBox) {
		const chatForm = document.getElementById('chat-form');
		const chatInput = document.getElementById('chat-message-input');
		const websocketProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
		const websocketUrl = `${websocketProtocol}//${window.location.host}${contextPath}/ws/chat/${eventId}`;
		let socket;

		const connect = () => {
			socket = new WebSocket(websocketUrl);
			socket.onopen = () => fetchMessages();
			socket.onmessage = (event) => {
				const data = JSON.parse(event.data);
				switch (data.type) {
					case 'new_message':
						appendMessage(data.payload);
						break;
					case 'message_soft_deleted':
						handleSoftDelete(data.payload);
						break;
					case 'message_updated':
						const messageTextElement = document.getElementById(`message-text-${data.payload.messageId}`);
						const editedMarkerElement = document.getElementById(`message-edited-marker-${data.payload.messageId}`);
						if (messageTextElement) messageTextElement.innerHTML = marked.parse(data.payload.newText, { sanitize: true });;
						if (editedMarkerElement) editedMarkerElement.style.display = 'inline';
						break;
				}
			};
			socket.onclose = (event) => console.warn('WebSocket connection closed.', event);
			socket.onerror = (error) => console.error('WebSocket error:', error);
		};

		const getTextColorForBackground = (hexColor) => {
			if (!hexColor || hexColor.length < 7) return '#000000';
			const r = parseInt(hexColor.slice(1, 3), 16);
			const g = parseInt(hexColor.slice(3, 5), 16);
			const b = parseInt(hexColor.slice(5, 7), 16);
			const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
			return luminance > 0.5 ? '#000000' : '#FFFFFF';
		};

		const formatAsLocaleTime = (dateString) => {
			if (!dateString) return '';
			return new Date(dateString).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' });
		};

		const appendMessage = (message) => {
			const isCurrentUser = String(message.userId) === String(currentUserId);

			const container = document.createElement('div');
			container.className = 'chat-message-container';
			container.id = `message-container-${message.id}`;
			if (isCurrentUser) container.classList.add('current-user');

			const bubbleElement = document.createElement('div');
			bubbleElement.className = 'chat-bubble';
			bubbleElement.id = `chat-bubble-${message.id}`;

			const bubbleBackgroundColor = isCurrentUser ? 'var(--primary-color)' : (message.chatColor || '#E9ECEF');
			bubbleElement.style.backgroundColor = bubbleBackgroundColor;
			bubbleElement.style.borderColor = bubbleBackgroundColor;
			bubbleElement.style.color = getTextColorForBackground(bubbleBackgroundColor);

			if (message.isDeleted) {
				renderDeletedState(bubbleElement, message);
			} else {
				renderNormalState(bubbleElement, message, isCurrentUser);
				const optionsMenu = createOptionsMenu(message, isCurrentUser);
				container.appendChild(optionsMenu);
			}

			container.prepend(bubbleElement);
			chatBox.appendChild(container);
			chatBox.scrollTop = chatBox.scrollHeight;
		};

		const renderNormalState = (bubbleElement, message, isCurrentUser) => {
			if (!isCurrentUser) {
				const usernameElement = document.createElement('strong');
				usernameElement.className = 'chat-username';
				usernameElement.style.color = 'black';
				usernameElement.textContent = message.username;
				bubbleElement.appendChild(usernameElement);
			}

			const textElement = document.createElement('span');
			textElement.className = 'chat-text';
			textElement.id = `message-text-${message.id}`;
			textElement.innerHTML = marked.parse(message.messageText, { sanitize: true });

			const timeElement = document.createElement('span');
			timeElement.className = 'chat-timestamp';
			timeElement.textContent = formatAsLocaleTime(message.sentAt);
			timeElement.style.color = bubbleElement.style.color === '#FFFFFF' ? 'rgba(255,255,255,0.7)' : 'var(--text-muted-color)';

			const editedMarker = document.createElement('span');
			editedMarker.className = 'chat-edited-marker';
			editedMarker.id = `message-edited-marker-${message.id}`;
			editedMarker.textContent = ' (bearbeitet)';
			editedMarker.style.display = message.edited ? 'inline' : 'none';

			timeElement.prepend(editedMarker);
			bubbleElement.appendChild(textElement);
			bubbleElement.appendChild(timeElement);
		};

		const renderDeletedState = (bubbleElement, message) => {
			let deletedText;
			const deletedByEl = document.createElement('span');
			deletedByEl.textContent = message.deletedByUsername;

			const originalUserEl = document.createElement('span');
			originalUserEl.textContent = message.username;

			const infoSpan = document.createElement('span');
			infoSpan.className = 'chat-deleted-info';

			if (message.username === message.deletedByUsername) {
				infoSpan.textContent = `Nachricht wurde von ${originalUserEl.textContent} gelöscht`;
			} else {
				infoSpan.textContent = `Nachricht von ${originalUserEl.textContent} wurde von ${deletedByEl.textContent} gelöscht`;
			}
			bubbleElement.appendChild(infoSpan);
			bubbleElement.classList.add('deleted');
		};

		const createOptionsMenu = (message, isCurrentUser) => {
			const optionsMenu = document.createElement('div');
			optionsMenu.className = 'chat-options';
			if (isCurrentUser) {
				const editButton = document.createElement('button');
				editButton.className = 'chat-option-btn';
				editButton.innerHTML = '<i class="fas fa-pencil-alt"></i>';
				editButton.onclick = () => handleEdit(message.id);
				optionsMenu.appendChild(editButton);
			}
			if (isAdmin || isCurrentUser) {
				const deleteButton = document.createElement('button');
				deleteButton.className = 'chat-option-btn';
				deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
				deleteButton.onclick = () => handleDelete(message.id, message.userId, message.username);
				optionsMenu.appendChild(deleteButton);
			}
			return optionsMenu;
		};

		const handleDelete = (messageId, originalUserId, originalUsername) => {
			showConfirmationModal("Nachricht wirklich löschen?", () => {
				socket.send(JSON.stringify({ type: 'delete_message', payload: { messageId, originalUserId, originalUsername } }));
			});
		};

		const handleSoftDelete = (payload) => {
			const bubbleElement = document.getElementById(`chat-bubble-${payload.messageId}`);
			const containerElement = document.getElementById(`message-container-${payload.messageId}`);
			if (bubbleElement && containerElement) {
				containerElement.querySelector('.chat-options')?.remove();

				const deletedByEl = document.createElement('span');
				deletedByEl.textContent = payload.deletedByUsername;

				const originalUserEl = document.createElement('span');
				originalUserEl.textContent = payload.originalUsername;

				const infoSpan = document.createElement('span');
				infoSpan.className = 'chat-deleted-info';

				if (payload.originalUsername === payload.deletedByUsername) {
					infoSpan.textContent = `Nachricht von ${originalUserEl.textContent} gelöscht`;
				} else {
					infoSpan.textContent = `Nachricht von ${originalUserEl.textContent} wurde von ${deletedByEl.textContent} gelöscht`;
				}

				bubbleElement.innerHTML = ''; // Clear existing content
				bubbleElement.appendChild(infoSpan);
				bubbleElement.classList.add('deleted');
			}
		};

		const handleEdit = (messageId) => {
			const textElement = document.getElementById(`message-text-${messageId}`);
			const currentText = textElement.textContent;
			const editInput = document.createElement('input');
			editInput.type = 'text';
			editInput.value = currentText;
			editInput.className = 'chat-edit-input';

			editInput.onkeydown = (keyboardEvent) => {
				if (keyboardEvent.key === 'Enter') {
					if (editInput.value.trim() && editInput.value !== currentText) {
						socket.send(JSON.stringify({ type: 'update_message', payload: { messageId, newText: editInput.value } }));
					}
					textElement.style.display = 'block';
					editInput.replaceWith(textElement);
				} else if (keyboardEvent.key === 'Escape') {
					textElement.style.display = 'block';
					editInput.replaceWith(textElement);
				}
			};

			textElement.style.display = 'none';
			textElement.parentElement.insertBefore(editInput, textElement);
			editInput.focus();
		};

		const fetchMessages = () => {
			fetch(`${contextPath}/api/event-chat?eventId=${eventId}`)
				.then(response => response.json())
				.then(messages => {
					chatBox.innerHTML = '';
					if (messages && messages.length > 0) messages.forEach(appendMessage);
				}).catch(error => console.error("Error fetching initial chat messages:", error));
		};

		chatInput.addEventListener('keyup', (e) => {
			const popup = document.getElementById('mention-popup');
			if (e.key === '@') {
				const assignedUsers = JSON.parse(document.getElementById('allUsersData')?.textContent || '[]');
				if (assignedUsers.length > 0) {
					popup.innerHTML = assignedUsers.map(u => `<div class="mention-item" data-username="${u.username}">${u.username}</div>`).join('');
					popup.style.display = 'block';
				}
			} else if (popup.style.display === 'block' && e.key !== 'Shift') { // Avoid closing on shift
				popup.style.display = 'none';
			}
		});

		document.getElementById('mention-popup').addEventListener('click', (e) => {
			if (e.target.classList.contains('mention-item')) {
				const username = e.target.dataset.username;
				const text = chatInput.value;
				const atIndex = text.lastIndexOf('@');
				chatInput.value = text.substring(0, atIndex + 1) + username + ' ';
				document.getElementById('mention-popup').style.display = 'none';
				chatInput.focus();
			}
		});

		chatForm.addEventListener('submit', (event) => {
			event.preventDefault();
			const messageText = chatInput.value.trim();
			if (messageText && socket && socket.readyState === WebSocket.OPEN) {
				const payload = { type: "new_message", payload: { messageText: messageText } };
				socket.send(JSON.stringify(payload));
				chatInput.value = '';
			}
		});

		connect();
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\events.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.js-confirm-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            showConfirmationModal(this.dataset.confirmMessage || 'Sind Sie sicher?', () => this.submit());
        });
    });

    const signupModal = document.getElementById('signup-modal');
    const signupModalTitle = document.getElementById('signup-modal-title');
    const signupEventIdInput = document.getElementById('signup-event-id');
    const customFieldsContainer = document.getElementById('custom-fields-container');
    const closeModalBtn = signupModal.querySelector('.modal-close-btn');
	const contextPath = document.body.dataset.contextPath || '';

    const openSignupModal = async (btn) => {
        const eventId = btn.dataset.eventId;
        const eventName = btn.dataset.eventName;

        signupModalTitle.textContent = `Anmeldung für: ${eventName}`;
        signupEventIdInput.value = eventId;
        customFieldsContainer.innerHTML = '<p>Lade Anmelde-Optionen...</p>';
        signupModal.classList.add('active');

        try {
            const response = await fetch(`${contextPath}/api/public/event-custom-fields?eventId=${eventId}`);
            if (!response.ok) throw new Error('Could not fetch custom fields for the event.');
            
            const customFields = await response.json();
            
            customFieldsContainer.innerHTML = '';
            if (customFields && customFields.length > 0) {
                customFields.forEach(field => {
                    const fieldGroup = document.createElement('div');
                    fieldGroup.className = 'form-group';
                    let fieldHtml = `<label for="customfield_${field.id}">${field.fieldName}</label>`;
                    if (field.fieldType === 'BOOLEAN') {
                        fieldHtml += `<select name="customfield_${field.id}" id="customfield_${field.id}" class="form-control"><option value="true">Ja</option><option value="false">Nein</option></select>`;
                    } else { 
                        fieldHtml += `<input type="text" name="customfield_${field.id}" id="customfield_${field.id}" class="form-control">`;
                    }
                    fieldGroup.innerHTML = fieldHtml;
                    customFieldsContainer.appendChild(fieldGroup);
                });
            } else {
                 customFieldsContainer.innerHTML = '<p>Für dieses Event sind keine weiteren Angaben nötig.</p>';
            }
        } catch (error) {
            console.error('Failed to load custom fields:', error);
            customFieldsContainer.innerHTML = '<p class="error-message">Fehler beim Laden der Anmelde-Optionen.</p>';
        }
    };
    
    document.querySelectorAll('.signup-btn').forEach(btn => btn.addEventListener('click', () => openSignupModal(btn)));
    closeModalBtn.addEventListener('click', () => signupModal.classList.remove('active'));
    signupModal.addEventListener('click', (e) => {
        if (e.target === signupModal) signupModal.classList.remove('active');
    });
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\lager.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const transactionModal = document.getElementById('transaction-modal');
	if (transactionModal) {
		const modalTitle = document.getElementById('transaction-modal-title');
		const modalItemId = document.getElementById('transaction-item-id');
		const quantityInput = document.getElementById('transaction-quantity');
		const checkoutButton = transactionModal.querySelector('button[value="checkout"]');
		const checkinButton = transactionModal.querySelector('button[value="checkin"]');
		const closeModalBtn = transactionModal.querySelector('.modal-close-btn');

		const openModal = (btn) => {
			modalTitle.textContent = `${btn.dataset.itemName}: Entnehmen / Einräumen`;
			modalItemId.value = btn.dataset.itemId;

			const availableQty = parseInt(btn.dataset.maxQty, 10);
			const currentQty = parseInt(btn.dataset.currentQty, 10);
			const totalMaxQty = parseInt(btn.dataset.totalMaxQty, 10);
			const availableSpace = totalMaxQty > 0 ? totalMaxQty - currentQty : 9999;

			quantityInput.max = availableQty;
			quantityInput.title = `Maximal entnehmbar: ${availableQty}`;
			quantityInput.value = 1;

			checkoutButton.disabled = (availableQty <= 0);
			checkinButton.disabled = (totalMaxQty > 0 && currentQty >= totalMaxQty);

			checkoutButton.onmouseover = () => {
				quantityInput.max = availableQty;
				quantityInput.title = `Maximal entnehmbar: ${availableQty}`;
			};

			checkinButton.onmouseover = () => {
				quantityInput.max = availableSpace > 0 ? availableSpace : 9999;
				quantityInput.title = `Maximal einräumbar: ${availableSpace}`;
			};

			transactionModal.classList.add('active');
		};

		const closeModal = () => transactionModal.classList.remove('active');
		document.querySelectorAll('.transaction-btn').forEach(btn => btn.addEventListener('click', () => openModal(btn)));
		closeModalBtn.addEventListener('click', closeModal);
		transactionModal.addEventListener('click', e => { if (e.target === transactionModal) closeModal(); });
	}

	const lightbox = document.getElementById('lightbox');
	if (lightbox) {
		const lightboxImage = document.getElementById('lightbox-image');
		const closeBtn = lightbox.querySelector('.lightbox-close');

		document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
			trigger.addEventListener('click', (e) => {
				e.preventDefault();
				lightboxImage.src = trigger.dataset.src;
				lightbox.style.display = 'flex';
			});
		});

		const closeLightbox = () => {
			lightbox.style.display = 'none';
			lightboxImage.src = '';
		};

		if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
		lightbox.addEventListener('click', (e) => {
			if (e.target === lightbox) {
				closeLightbox();
			}
		});
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && lightbox.style.display === 'flex') {
				closeLightbox();
			}
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\qr_action.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const quantityInput = document.getElementById('quantity');
	const checkoutBtn = document.getElementById('checkout-btn');
	const checkinBtn = document.getElementById('checkin-btn');

	const form = document.querySelector('.qr-action-container form');
	const availableQty = parseInt(form.dataset.availableQty, 10);
	const totalQty = parseInt(form.dataset.totalQty, 10);
	const maxQty = parseInt(form.dataset.maxQty, 10);

	quantityInput.max = availableQty;

	checkoutBtn.addEventListener('click', () => {
		quantityInput.max = availableQty;
		quantityInput.title = `Maximal entnehmbar: ${availableQty}`;
	});

	checkinBtn.addEventListener('click', () => {
		const availableSpace = maxQty > 0 ? maxQty - totalQty : 9999;
		quantityInput.max = availableSpace > 0 ? availableSpace : 9999;
		quantityInput.title = `Maximal einräumbar: ${availableSpace}`;
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\storage_item_details.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const lightbox = document.getElementById('lightbox');
	if (lightbox) {
		const lightboxImage = document.getElementById('lightbox-image');
		const closeBtn = lightbox.querySelector('.lightbox-close');

		document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
			trigger.addEventListener('click', (e) => {
				e.preventDefault();
				lightboxImage.src = trigger.href;
				lightbox.style.display = 'flex';
			});
		});

		const closeLightbox = () => { lightbox.style.display = 'none'; };
		if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
		lightbox.addEventListener('click', (e) => { if (e.target === lightbox) closeLightbox(); });
		document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && lightbox.style.display === 'flex') closeLightbox(); });
	}

	const tabButtons = document.querySelectorAll('.modal-tab-button');
	const tabContents = document.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_achievements.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Erfolge & Abzeichen" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />
<c:set var="hasMasterAccess"
	value="${userPermissions.contains('ACCESS_ADMIN_PANEL')}" />

<h1>
	<i class="fas fa-award"></i> Erfolge & Abzeichen verwalten
</h1>
<p>Hier können Sie die Bedingungen und das Aussehen für Erfolge
	definieren, die Benutzer verdienen können.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if
		test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_CREATE')}">
		<button type="button" id="new-achievement-btn" class="btn btn-success">
			<i class="fas fa-plus"></i> Neuen Erfolg anlegen
		</button>
	</c:if>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th>Icon</th>
				<th>Name</th>
				<th>Programmatischer Key</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty achievements}">
				<tr>
					<td colspan="4" style="text-align: center;">Keine Erfolge
						definiert.</td>
				</tr>
			</c:if>
			<c:forEach var="ach" items="${achievements}">
				<tr>
					<td style="font-size: 1.5rem; text-align: center;"><i
						class="fas ${ach.iconClass}"></i></td>
					<td><c:out value="${ach.name}" /></td>
					<td><code>
							<c:out value="${ach.achievementKey}" />
						</code></td>
					<td><c:if
							test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_UPDATE')}">
							<button type="button"
								class="btn btn-small btn-secondary edit-achievement-btn"
								data-id="${ach.id}">
								<i class="fas fa-edit"></i> Bearbeiten
							</button>
						</c:if> <c:if
							test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_DELETE')}">
							<form
								action="${pageContext.request.contextPath}/admin/achievements"
								method="post" class="js-confirm-form" style="display: inline;"
								data-confirm-message="Erfolg '${fn:escapeXml(ach.name)}' wirklich löschen?">
								<input type="hidden" name="csrfToken"
									value="${sessionScope.csrfToken}"> <input type="hidden"
									name="action" value="delete"> <input type="hidden"
									name="id" value="${ach.id}">
								<button type="submit" class="btn btn-small btn-danger">
									<i class="fas fa-trash"></i> Löschen
								</button>
							</form>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list">
	<c:if test="${empty achievements}">
		<div class="card">
			<p>Keine Erfolge definiert.</p>
		</div>
	</c:if>
	<c:forEach var="ach" items="${achievements}">
		<div class="list-item-card">
			<h3 class="card-title">
				<i class="fas ${ach.iconClass}"></i>
				<c:out value="${ach.name}" />
			</h3>
			<div class="card-row">
				<span>Key:</span>
				<code>
					<c:out value="${ach.achievementKey}" />
				</code>
			</div>
			<div class="card-actions">
				<c:if
					test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_UPDATE')}">
					<button type="button"
						class="btn btn-small btn-secondary edit-achievement-btn"
						data-id="${ach.id}">
						<i class="fas fa-edit"></i> Bearbeiten
					</button>
				</c:if>
				<c:if
					test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_DELETE')}">
					<form
						action="${pageContext.request.contextPath}/admin/achievements"
						method="post" class="js-confirm-form"
						data-confirm-message="Erfolg '${fn:escapeXml(ach.name)}' wirklich löschen?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="delete"> <input type="hidden"
							name="id" value="${ach.id}">
						<button type="submit" class="btn btn-small btn-danger">
							<i class="fas fa-trash"></i> Löschen
						</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Modal for Create/Edit Achievement -->
<div class="modal-overlay" id="achievement-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="achievement-modal-title">Erfolg verwalten</h3>
		<form id="achievement-modal-form"
			action="${pageContext.request.contextPath}/admin/achievements"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="achievement-modal-action"> <input
				type="hidden" name="id" id="achievement-modal-id"> <input
				type="hidden" name="achievement_key" id="achievement-key-hidden">

			<div class="form-group">
				<label for="name-modal">Name des Erfolgs</label> <input type="text"
					id="name-modal" name="name" required>
			</div>

			<div id="key-builder-group">
				<div class="form-group">
					<label for="key-type-select">Art des Erfolgs (Trigger)</label> <select
						id="key-type-select">
						<option value="">-- Bitte wählen --</option>
						<option value="EVENT_PARTICIPANT">Event-Teilnahme
							(Anzahl)</option>
						<option value="EVENT_LEADER">Event-Leitung (Anzahl)</option>
						<option value="QUALIFICATION">Qualifikation erhalten</option>
					</select>
				</div>
				<div id="key-number-group" class="key-subtype-group"
					style="display: none;">
					<div class="form-group">
						<label for="key-value-input">Erforderliche Anzahl</label> <input
							type="number" id="key-value-input" min="1" value="1"
							placeholder="z.B. 5 für 5 Teilnahmen">
					</div>
				</div>
				<div id="key-course-group" class="key-subtype-group"
					style="display: none;">
					<div class="form-group">
						<label for="key-course-select">Qualifikation</label> <select
							id="key-course-select">
							<option value="">-- Lehrgang wählen --</option>
							<c:forEach var="course" items="${allCourses}">
								<option value="${fn:replace(course.abbreviation, ' ', '_')}"><c:out
										value="${course.name}" /></option>
							</c:forEach>
						</select>
					</div>
				</div>
				<p>
					Generierter Key:
					<code id="generated-key-preview">--</code>
				</p>
			</div>

			<div class="form-group">
				<label for="icon-modal"> Icon-Klasse (Font Awesome) <a
					href="https://fontawesome.com/v5/search?m=free" target="_blank"
					title="Icons durchsuchen"> <i class="fas fa-external-link-alt"></i>
				</a>
				</label> <input type="text" id="icon-modal" name="icon_class"
					value="fa-award" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>

			<button type="submit" class="btn btn-success">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_achievements.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_course_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lehrgangs-Vorlagen" />
</c:import>

<h1>Lehrgangs-Vorlagen verwalten</h1>
<p>Dies sind die übergeordneten Lehrgänge. Einzelne Termine
	(Meetings) werden für jede Vorlage separat verwaltet.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" id="new-course-btn" class="btn btn-success">
		<i class="fas fa-plus"></i> Neue Vorlage
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Vorlagen filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name der Vorlage</th>
				<th class="sortable" data-sort-type="string">Abkürzung (für
					Matrix)</th>
				<th style="min-width: 350px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty courseList}">
				<tr>
					<td colspan="3" style="text-align: center;">Es wurden noch
						keine Lehrgangs-Vorlagen erstellt.</td>
				</tr>
			</c:if>
			<c:forEach var="course" items="${courseList}">
				<tr>
					<td><c:out value="${course.name}" /></td>
					<td><c:out value="${course.abbreviation}" /></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><a
						href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
						class="btn btn-small"> <i class="fas fa-calendar-day"></i>
							Meetings
					</a>
						<button type="button"
							class="btn btn-small btn-info grant-quals-btn"
							data-course-id="${course.id}"
							data-course-name="${fn:escapeXml(course.name)}">
							<i class="fas fa-user-graduate"></i> Qualis vergeben
						</button>
						<button type="button"
							class="btn btn-small btn-secondary edit-course-btn"
							data-id="${course.id}">
							<i class="fas fa-edit"></i> Bearbeiten
						</button>
						<form action="${pageContext.request.contextPath}/admin/lehrgaenge"
							method="post" class="js-confirm-form"
							data-confirm-message="Vorlage '${fn:escapeXml(course.name)}' wirklich löschen? Alle zugehörigen Meetings und Qualifikationen werden auch gelöscht!">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="id" value="${course.id}">
							<button type="submit" class="btn btn-small btn-danger">
								<i class="fas fa-trash"></i> Löschen
							</button>
						</form></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty courseList}">
		<div class="card">
			<p>Es wurden noch keine Lehrgangs-Vorlagen erstellt.</p>
		</div>
	</c:if>
	<c:forEach var="course" items="${courseList}">
		<div class="list-item-card">
			<h3 class="card-title">
				<c:out value="${course.name}" />
			</h3>
			<div class="card-row">
				<span>Abkürzung:</span> <strong><c:out
						value="${course.abbreviation}" /></strong>
			</div>
			<div class="card-actions">
				<a
					href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
					class="btn btn-small"> <i class="fas fa-calendar-day"></i>
					Meetings
				</a>
				<button type="button" class="btn btn-small btn-info grant-quals-btn"
					data-course-id="${course.id}"
					data-course-name="${fn:escapeXml(course.name)}">
					<i class="fas fa-user-graduate"></i> Qualis vergeben
				</button>
				<button type="button"
					class="btn btn-small btn-secondary edit-course-btn"
					data-id="${course.id}">
					<i class="fas fa-edit"></i> Bearbeiten
				</button>
				<form action="${pageContext.request.contextPath}/admin/lehrgaenge"
					method="post" class="js-confirm-form"
					data-confirm-message="Vorlage '${fn:escapeXml(course.name)}' wirklich löschen? Alle zugehörigen Meetings und Qualifikationen werden auch gelöscht!">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="delete"> <input type="hidden"
						name="id" value="${course.id}">
					<button type="submit" class="btn btn-small btn-danger">
						<i class="fas fa-trash"></i> Löschen
					</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>

<!-- MODAL FOR CREATE/EDIT COURSE -->
<div class="modal-overlay" id="course-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="course-modal-title">Lehrgangs-Vorlage</h3>
		<form id="course-modal-form"
			action="${pageContext.request.contextPath}/admin/lehrgaenge"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="course-modal-action"> <input type="hidden"
				name="id" id="course-modal-id">
			<div class="form-group">
				<label for="name-modal">Name der Vorlage</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="form-group">
				<label for="abbreviation-modal">Abkürzung (max. 10 Zeichen)</label>
				<input type="text" id="abbreviation-modal" name="abbreviation"
					maxlength="10" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Allgemeine Beschreibung</label>
				<textarea id="description-modal" name="description" rows="4"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Vorlage Speichern
			</button>
		</form>
	</div>
</div>

<!-- MODAL FOR GRANTING QUALIFICATIONS -->
<div class="modal-overlay" id="grant-quals-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="grant-quals-modal-title">Qualifikationen vergeben</h3>
		<p>Diese Aktion vergibt den Status 'ABSOLVIERT' an alle Nutzer,
			die eine Mindestanzahl an Meetings für diesen Lehrgang besucht haben.</p>
		<form action="${pageContext.request.contextPath}/admin/lehrgaenge"
			method="post" class="js-confirm-form"
			data-confirm-message="Sind Sie sicher? Diese Aktion kann nicht rückgängig gemacht werden.">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="grantQualifications"> <input
				type="hidden" name="courseId" id="grant-quals-course-id">
			<div class="form-group">
				<label for="minMeetings">Min. besuchte Meetings</label> <input
					type="number" name="minMeetings" id="minMeetings" value="1" min="1"
					required>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-check-circle"></i> Qualifikationen jetzt vergeben
			</button>
		</form>
	</div>
</div>


<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_course_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_dashboard.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Dashboard" />
</c:import>

<h1>
	Willkommen im Admin-Bereich,
	<c:out value="${sessionScope.user.username}" />
	!
</h1>
<p>Hier können Sie die Anwendung verwalten. Wählen Sie eine Option
	aus der Navigation oder nutzen Sie den Schnellzugriff.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-rocket"></i> Schnellzugriff
		</h2>
		<ul style="list-style: none; padding: 0;">
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/veranstaltungen">Neue
					Veranstaltung anlegen</a></li>
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/mitglieder">Neuen
					Benutzer erstellen</a></li>
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/lager">Neuen
					Lagerartikel anlegen</a></li>
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/lehrgaenge">Neue
					Lehrgangs-Vorlage erstellen</a></li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-chart-bar"></i> System-Statistiken
		</h2>
		<p style="font-size: 1.1rem; margin-bottom: 0.5rem;">
			Anzahl registrierter Benutzer: <strong><c:out
					value="${userCount}" /></strong>
		</p>
		<p style="font-size: 1.1rem;">
			Anzahl aktiver Events: <strong><c:out
					value="${activeEventCount}" /></strong>
		</p>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-exclamation-triangle text-warning"></i> Defekte
			Artikel
		</h2>
		<p>
			Es sind aktuell <strong><c:out
					value="${fn:length(defectiveItems)}" /></strong> Artikel als defekt
			gemeldet.
		</p>
		<a href="${pageContext.request.contextPath}/admin/defekte"
			class="btn btn-small" style="margin-top: 1rem;">Defekte anzeigen</a>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-history"></i> Letzte Aktionen
		</h2>
		<p>Die letzten Log-Einträge des Systems.</p>
		<a href="${pageContext.request.contextPath}/admin/log"
			class="btn btn-small" style="margin-top: 1rem;">Komplettes Log
			ansehen</a>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_defect_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Defekte Artikel" />
</c:import>

<h1>
	<i class="fas fa-wrench"></i> Defekte Artikel verwalten
</h1>
<p>Hier sind alle Artikel gelistet, von denen mindestens ein
	Exemplar als defekt markiert wurde.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Defekt / Gesamt</th>
				<th>Grund</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty defectiveItems}">
				<tr>
					<td colspan="4" style="text-align: center;">Aktuell sind keine
						Artikel als defekt gemeldet.</td>
				</tr>
			</c:if>
			<c:forEach var="item" items="${defectiveItems}">
				<tr>
					<td><a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
								value="${item.name}" /></a></td>
					<td><c:out value="${item.defectiveQuantity}" /> / <c:out
							value="${item.quantity}" /></td>
					<td><c:out value="${item.defectReason}" /></td>
					<td>
						<button class="btn btn-small btn-warning defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-max-qty="${item.quantity}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}">Status
							bearbeiten</button>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list">
	<c:if test="${empty defectiveItems}">
		<div class="card">
			<p>Aktuell sind keine Artikel als defekt gemeldet.</p>
		</div>
	</c:if>
	<c:forEach var="item" items="${defectiveItems}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
						value="${item.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Defekt / Gesamt:</span> <strong><c:out
						value="${item.defectiveQuantity}" /> / <c:out
						value="${item.quantity}" /></strong>
			</div>
			<div class="card-row"
				style="flex-direction: column; align-items: flex-start;">
				<span>Grund:</span>
				<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
					<c:out
						value="${not empty item.defectReason ? item.defectReason : 'Kein Grund angegeben.'}" />
				</p>
			</div>
			<div class="card-actions">
				<button class="btn btn-small btn-warning defect-modal-btn"
					data-item-id="${item.id}"
					data-item-name="${fn:escapeXml(item.name)}"
					data-max-qty="${item.quantity}"
					data-current-defect-qty="${item.defectiveQuantity}"
					data-current-reason="${fn:escapeXml(item.defectReason)}">Status
					bearbeiten</button>
			</div>
		</div>
	</c:forEach>
</div>


<!-- Modal for updating defect status -->
<div class="modal-overlay" id="defect-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="defect-modal-title">Defekt-Status bearbeiten</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="updateDefect"> <input type="hidden"
				name="id" id="defect-item-id"> <input type="hidden"
				name="returnTo" value="defekte">
			<div class="form-group">
				<label for="defective_quantity">Anzahl defekter Artikel</label> <input
					type="number" name="defective_quantity" id="defective_quantity"
					min="0" required>
			</div>
			<div class="form-group">
				<label for="defect_reason">Grund (optional)</label>
				<textarea name="defect_reason" id="defect_reason" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_defect_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_editor.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Editor: ${file.filename}" />
	<c:param name="page" value="editor" />
</c:import>

<div id="editor-page-wrapper">
	<div id="editor-page-container" data-file-id="${file.id}">
		<div class="editor-header">
			<h1>
				<i class="fas fa-file-alt"></i>
				<c:out value="${file.filename}" />
			</h1>
			<div class="editor-controls">
				<c:if test="${editorMode eq 'edit'}">
					<div class="mode-switcher">
						<span>View</span> <label class="switch"> <input
							type="checkbox" id="mode-toggle" checked> <span
							class="slider"></span>
						</label> <span>Edit</span>
					</div>
				</c:if>
				<span id="save-status-indicator" class="status-badge"
					style="display: none;"></span>
			</div>
		</div>

		<c:import url="/WEB-INF/jspf/message_banner.jspf" />

		<div class="editor-container card">
			<textarea id="editor" name="content"
				style="display: ${editorMode eq 'edit' ? 'block' : 'none'};"
				<c:if test="${editorMode ne 'edit'}">readonly</c:if>>${fn:escapeXml(fileContent)}</textarea>
			<div id="markdown-preview" class="markdown-content"
				style="display: ${editorMode eq 'edit' ? 'none' : 'block'};">
			</div>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_editor.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_events_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Eventverwaltung" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />
<c:set var="hasMasterAccess"
	value="${userPermissions.contains('ACCESS_ADMIN_PANEL')}" />

<h1>
	<i class="fas fa-calendar-check"></i> Eventverwaltung
</h1>
<p>Hier können Sie Events erstellen, bearbeiten, Personal zuweisen
	und den Status verwalten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if
		test="${hasMasterAccess or userPermissions.contains('EVENT_CREATE')}">
		<button type="button" class="btn btn-success" id="new-event-btn">
			<i class="fas fa-plus"></i> Neues Event anlegen
		</button>
	</c:if>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter" placeholder="Events filtern..."
			aria-label="Tabelle filtern">
	</div>
</div>

<c:if test="${empty eventList}">
	<div class="card">
		<p>Keine Events gefunden.</p>
	</div>
</c:if>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th class="sortable" data-sort-type="string">Zeitraum</th>
				<th class="sortable" data-sort-type="string">Status</th>
				<th style="min-width: 450px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="event" items="${eventList}">
				<c:set var="isLeader"
					value="${sessionScope.user.id == event.leaderUserId}" />
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
								value="${event.name}" /></a></td>
					<td><c:out value="${event.formattedEventDateTimeRange}" /></td>
					<td><span
						class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
								value="${event.status}" /></span></td>
					<td style="display: flex; gap: 5px; flex-wrap: wrap;"><c:if
							test="${hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader}">
							<button type="button" class="btn btn-small edit-event-btn"
								data-event-id="${event.id}">Bearbeiten</button>
						</c:if> <c:if test="${event.status != 'ABGESCHLOSSEN'}">
							<c:if
								test="${hasMasterAccess or userPermissions.contains('EVENT_MANAGE_ASSIGNMENTS') or isLeader}">
								<button type="button"
									class="btn btn-small btn-success assign-users-btn"
									data-event-id="${event.id}"
									data-event-name="${fn:escapeXml(event.name)}">Zuweisen</button>
							</c:if>
							<c:if
								test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and (event.status == 'GEPLANT' || event.status == 'KOMPLETT')}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich starten? Der Chat wird aktiviert.">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="LAUFEND">
									<button type="submit" class="btn btn-small btn-warning">Starten</button>
								</form>
							</c:if>
							<c:if
								test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and event.status == 'LAUFEND'}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich abschließen?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="ABGESCHLOSSEN">
									<button type="submit" class="btn btn-small"
										style="background-color: var(--text-muted-color);">Abschließen</button>
								</form>
							</c:if>
						</c:if> <c:if
							test="${hasMasterAccess or userPermissions.contains('EVENT_DELETE')}">
							<form
								action="${pageContext.request.contextPath}/admin/veranstaltungen"
								method="post" class="inline-form js-confirm-form"
								data-confirm-message="Soll das Event '${fn:escapeXml(event.name)}' wirklich endgültig gelöscht werden?">
								<input type="hidden" name="csrfToken"
									value="${sessionScope.csrfToken}"> <input type="hidden"
									name="action" value="delete"><input type="hidden"
									name="id" value="${event.id}">
								<button type="submit" class="btn btn-small btn-danger">Löschen</button>
							</form>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="event" items="${eventList}">
		<c:set var="isLeader"
			value="${sessionScope.user.id == event.leaderUserId}" />
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
						value="${event.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${event.formattedEventDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Status:</span> <span><span
					class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
							value="${event.status}" /></span></span>
			</div>
			<div class="card-actions">
				<c:if
					test="${hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader}">
					<button type="button" class="btn btn-small edit-event-btn"
						data-event-id="${event.id}">Bearbeiten</button>
				</c:if>
				<c:if test="${event.status != 'ABGESCHLOSSEN'}">
					<c:if
						test="${hasMasterAccess or userPermissions.contains('EVENT_MANAGE_ASSIGNMENTS') or isLeader}">
						<button type="button"
							class="btn btn-small btn-success assign-users-btn"
							data-event-id="${event.id}"
							data-event-name="${fn:escapeXml(event.name)}">Zuweisen</button>
					</c:if>
					<c:if
						test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and (event.status == 'GEPLANT' || event.status == 'KOMPLETT')}">
						<form
							action="${pageContext.request.contextPath}/admin/veranstaltungen"
							method="post" style="display: inline;" class="js-confirm-form"
							data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich starten? Der Chat wird aktiviert.">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="updateStatus"><input type="hidden"
								name="id" value="${event.id}"><input type="hidden"
								name="newStatus" value="LAUFEND">
							<button type="submit" class="btn btn-small btn-warning">Starten</button>
						</form>
					</c:if>
					<c:if
						test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and event.status == 'LAUFEND'}">
						<form
							action="${pageContext.request.contextPath}/admin/veranstaltungen"
							method="post" style="display: inline;" class="js-confirm-form"
							data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich abschließen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="updateStatus"><input type="hidden"
								name="id" value="${event.id}"><input type="hidden"
								name="newStatus" value="ABGESCHLOSSEN">
							<button type="submit" class="btn btn-small"
								style="background-color: var(--text-muted-color);">Abschließen</button>
						</form>
					</c:if>
				</c:if>
				<c:if
					test="${hasMasterAccess or userPermissions.contains('EVENT_DELETE')}">
					<form
						action="${pageContext.request.contextPath}/admin/veranstaltungen"
						method="post" class="inline-form js-confirm-form"
						data-confirm-message="Soll das Event '${fn:escapeXml(event.name)}' wirklich endgültig gelöscht werden?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="delete"><input type="hidden"
							name="id" value="${event.id}">
						<button type="submit" class="btn btn-small btn-danger">Löschen</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<jsp:include page="/WEB-INF/jspf/event_modals.jspf" />

<!-- Crew Finder Modal -->
<div class="modal-overlay" id="find-crew-modal">
	<div class="modal-content" style="max-width: 500px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="find-crew-modal-title">Crew Finder</h3>
		<p>Folgende Benutzer sind qualifiziert und verfügbar. Wählen Sie
			aus, wen Sie per Benachrichtigung einladen möchten.</p>
		<form id="find-crew-form"
			action="${pageContext.request.contextPath}/admin/veranstaltungen"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="inviteUsers"> <input type="hidden"
				name="eventId" id="find-crew-event-id">
			<div id="find-crew-list"
				style="max-height: 40vh; overflow-y: auto; border: 1px solid var(--border-color); border-radius: 6px; padding: 0.5rem; margin-bottom: 1rem;">
				<!-- User list will be populated by JS -->
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-paper-plane"></i> Ausgewählte einladen
			</button>
		</form>
	</div>
</div>

<script id="allCoursesData" type="application/json">${allCoursesJson}</script>
<script id="allItemsData" type="application/json">${allItemsJson}</script>
<script id="allKitsData" type="application/json">${allKitsJson}</script>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_events_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_files.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Datei- & Kategorienverwaltung" />
</c:import>

<h1>
	<i class="fas fa-folder-open"></i> Datei- & Kategorienverwaltung
</h1>
<p>Verwalten Sie hier alle hochgeladenen Dateien und deren
	Kategorien.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="file-manager-layout">

	<div class="card">
		<h2>Aktionen</h2>
		<form
			action="${pageContext.request.contextPath}/admin/dateien/kategorien/erstellen"
			method="post" style="margin-bottom: 2rem;">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}">
			<div class="form-group">
				<label for="newCategoryName">Neue Kategorie erstellen</label> <input
					type="text" name="categoryName" id="newCategoryName" required>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-plus"></i> Erstellen
			</button>
		</form>

		<hr>

		<h3 style="margin-top: 1.5rem;">Neue Datei hochladen</h3>
		<%-- This form now correctly points to the unified AdminFileServlet --%>
		<form action="${pageContext.request.contextPath}/admin/uploadFile"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="create">
			<div class="form-group">
				<label for="file">Datei auswählen</label> <input type="file"
					name="file" id="file" class="file-input" data-max-size="20971520"
					required> <small class="file-size-warning">Datei
					ist zu groß! (Max. 20 MB)</small>
			</div>
			<div class="form-group">
				<label for="categoryId">In Kategorie</label> <select
					name="categoryId" id="categoryId" required>
					<option value="">-- Bitte wählen --</option>
					<c:forEach var="cat" items="${allCategories}">
						<option value="${cat.id}"><c:out value="${cat.name}" /></option>
					</c:forEach>
				</select>
			</div>
			<div class="form-group">
				<label for="requiredRole">Sichtbar für</label> <select
					name="requiredRole" id="requiredRole">
					<option value="NUTZER" selected>Alle zugeordneten Nutzer</option>
					<option value="ADMIN">Nur Admins</option>
				</select>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-cloud-upload-alt"></i> Hochladen
			</button>
		</form>
	</div>

	<div class="card">
		<h2>Vorhandene Dateien nach Kategorie</h2>
		<c:if test="${empty groupedFiles}">
			<p>Es sind keine Kategorien oder Dateien vorhanden.</p>
		</c:if>

		<c:forEach var="categoryEntry" items="${groupedFiles}">
			<div class="category-group" style="margin-bottom: 2rem;">
				<h3
					style="border-bottom: 1px solid var(--border-color); padding-bottom: 0.5rem;">
					<i class="fas fa-folder"></i>
					<c:out value="${categoryEntry.key}" />
				</h3>
				<ul class="file-list">
					<c:if test="${empty categoryEntry.value}">
						<li style="justify-content: center;">Keine Dateien in dieser
							Kategorie.</li>
					</c:if>
					<c:forEach var="file" items="${categoryEntry.value}">
						<li>
							<div class="file-info">
								<a href="<c:url value='/download?id=${file.id}'/>"
									title="Datei herunterladen"> <i class="fas fa-download"></i>
									<c:out value="${file.filename}" />
								</a> <small class="file-meta">Sichtbar für: <c:out
										value="${file.requiredRole}" /></small>
							</div>
							<div class="file-actions"
								style="display: flex; gap: 0.5rem; align-items: center;">
								<button type="button"
									class="btn btn-small btn-secondary upload-new-version-btn"
									data-file-id="${file.id}"
									data-file-name="${fn:escapeXml(file.filename)}">
									<i class="fas fa-upload"></i> Neue Version
								</button>
								<form
									action="${pageContext.request.contextPath}/admin/uploadFile"
									method="post" class="js-confirm-form"
									data-confirm-message="Datei '${fn:escapeXml(file.filename)}' wirklich löschen?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="delete"> <input
										type="hidden" name="fileId" value="${file.id}">
									<button type="submit" class="btn btn-small btn-danger-outline"
										title="Löschen">
										<i class="fas fa-trash-alt"></i>
									</button>
								</form>
							</div>
						</li>
					</c:forEach>
				</ul>
			</div>
		</c:forEach>
	</div>
</div>

<!-- Modal for uploading a new version -->
<div class="modal-overlay" id="upload-version-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="upload-modal-title">Neue Version hochladen</h3>
		<form id="upload-version-form"
			action="${pageContext.request.contextPath}/admin/uploadFile"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="update"> <input type="hidden"
				name="fileId" id="upload-file-id">
			<p>
				Sie sind dabei, eine neue Version für die Datei <strong
					id="upload-file-name"></strong> hochzuladen. Die alte Version wird
				dabei überschrieben.
			</p>
			<div class="form-group">
				<label for="new-file-version">Neue Datei auswählen (muss
					denselben Dateityp haben)</label> <input type="file" name="file"
					id="new-file-version" class="file-input" data-max-size="20971520"
					required> <small class="file-size-warning">Datei
					ist zu groß! (Max. 20 MB)</small>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-cloud-upload-alt"></i> Jetzt hochladen
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_files.js"></script>
<script src="${pageContext.request.contextPath}/js/public/dateien.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_kits.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Kit-Verwaltung" />
</c:import>

<h1>
	<i class="fas fa-box-open"></i> Kit-Verwaltung
</h1>
<p>Verwalten Sie hier wiederverwendbare Material-Zusammenstellungen
	(Kits oder Koffer).</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-kit-btn">
		<i class="fas fa-plus"></i> Neues Kit anlegen
	</button>
</div>

<div class="card">
	<c:if test="${empty kits}">
		<p>Es wurden noch keine Kits erstellt.</p>
	</c:if>
	<c:forEach var="kit" items="${kits}">
		<div class="kit-container"
			style="border-bottom: 1px solid var(--border-color); padding-bottom: 1.5rem; margin-bottom: 1.5rem;">
			<div class="kit-header">
				<div>
					<h3>
						<i class="fas fa-chevron-down toggle-icon"></i>
						<c:out value="${kit.name}" />
					</h3>
					<p
						style="margin: -0.5rem 0 0 1.75rem; color: var(--text-muted-color);">
						<c:out value="${kit.description}" />
					</p>
				</div>
				<div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
					<c:set var="absoluteActionUrl"
						value="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/pack-kit?kitId=${kit.id}" />
					<c:set var="qrApiUrl"
						value="https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${fn:escapeXml(absoluteActionUrl)}" />
					<a href="${qrApiUrl}" target="_blank" class="btn btn-small">QR-Code</a>

					<button type="button"
						class="btn btn-small btn-secondary edit-kit-btn"
						data-kit-id="${kit.id}" data-kit-name="${fn:escapeXml(kit.name)}"
						data-kit-desc="${fn:escapeXml(kit.description)}"
						data-kit-location="${fn:escapeXml(kit.location)}">Bearbeiten</button>
					<form action="${pageContext.request.contextPath}/admin/kits"
						method="post" class="js-confirm-form"
						data-confirm-message="Kit '${fn:escapeXml(kit.name)}' wirklich löschen?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="delete"> <input type="hidden"
							name="id" value="${kit.id}">
						<button type="submit" class="btn btn-small btn-danger">Löschen</button>
					</form>
				</div>
			</div>
			<div class="kit-content"
				style="display: none; padding-left: 2rem; margin-top: 1rem;">

				<form action="${pageContext.request.contextPath}/admin/kits"
					method="post">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="updateKitItems"> <input type="hidden"
						name="kitId" value="${kit.id}">

					<h4>Inhalt bearbeiten</h4>
					<div id="kit-items-container-${kit.id}" class="kit-items-container">
						<c:if test="${empty kit.items}">
							<p class="no-items-message">Dieses Kit ist leer. Fügen Sie
								einen Artikel hinzu.</p>
						</c:if>
						<c:forEach var="item" items="${kit.items}">
							<div class="dynamic-row">
								<select name="itemIds" class="form-group">
									<c:forEach var="storageItem" items="${allItems}">
										<option value="${storageItem.id}"
											${storageItem.id == item.itemId ? 'selected' : ''}>
											<c:out value="${storageItem.name}" />
										</option>
									</c:forEach>
								</select> <input type="number" name="quantities" value="${item.quantity}"
									min="1" class="form-group" style="max-width: 100px;">
								<button type="button"
									class="btn btn-small btn-danger btn-remove-kit-item-row"
									title="Zeile entfernen">×</button>
							</div>
						</c:forEach>
					</div>

					<div
						style="margin-top: 1rem; display: flex; justify-content: space-between; align-items: center;">
						<button type="button" class="btn btn-small btn-add-kit-item-row"
							data-container-id="kit-items-container-${kit.id}">
							<i class="fas fa-plus"></i> Zeile hinzufügen
						</button>
						<button type="submit" class="btn btn-success">
							<i class="fas fa-save"></i> Kit-Inhalt speichern
						</button>
					</div>
				</form>

			</div>
		</div>
	</c:forEach>
</div>

<!-- Modal for Create/Edit Kit -->
<div class="modal-overlay" id="kit-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3>Kit verwalten</h3>
		<form action="${pageContext.request.contextPath}/admin/kits"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value=""> <input type="hidden" name="id"
				value="">
			<div class="form-group">
				<label for="name-modal">Name des Kits</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>
			<div class="form-group">
				<label for="location-modal">Physischer Standort des Kits</label> <input
					type="text" id="location-modal" name="location"
					placeholder="z.B. Lager, Schrank 3, Fach A">
			</div>
			<button type="submit" class="btn">Speichern</button>
		</form>
	</div>
</div>

<script id="allItemsData" type="application/json">
    ${allItemsJson}
</script>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_kits.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_log.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Log" />
</c:import>

<h1>Admin Aktions-Protokoll</h1>

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Nach Details, Name oder Aktion filtern..."
			style="width: 100%;" aria-label="Protokoll filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table searchable-table">
		<thead>
			<tr>
				<th>Wann</th>
				<th>Wer</th>
				<th>Aktionstyp</th>
				<th>Details</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="log" items="${logs}">
				<tr>
					<td><c:out value="${log.formattedActionTimestamp}" /> Uhr</td>
					<td><c:out value="${log.adminUsername}" /></td>
					<td><c:out value="${log.actionType}" /></td>
					<td style="white-space: normal;"><c:out value="${log.details}" /></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty logs}">
		<div class="card">
			<p>Keine Log-Einträge gefunden.</p>
		</div>
	</c:if>
	<c:forEach var="log" items="${logs}">
		<div class="list-item-card">
			<h3 class="card-title" style="word-break: break-all;">
				<c:out value="${log.actionType}" />
			</h3>
			<div class="card-row">
				<span>Wer:</span> <strong><c:out
						value="${log.adminUsername}" /></strong>
			</div>
			<div class="card-row">
				<span>Wann:</span> <strong><c:out
						value="${log.formattedActionTimestamp}" /> Uhr</strong>
			</div>
			<div class="card-row"
				style="flex-direction: column; align-items: flex-start;">
				<span style="font-weight: 500;">Details:</span>
				<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
					<c:out value="${log.details}" />
				</p>
			</div>
		</div>
	</c:forEach>
</div>


<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_matrix.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Qualifikations-Matrix" />
</c:import>

<h1>
	<i class="fas fa-th-list"></i> Qualifikations-Matrix
</h1>
<p>Klicken Sie auf eine Zelle, um die Teilnahme an einem Meeting zu
	bearbeiten. Die Kopfzeile und die Benutzerleiste bleiben beim Scrollen
	fixiert.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="horizontal-scroll-hint">
	<i class="fas fa-arrows-alt-h"></i> Tabelle ist seitlich scrollbar
</div>

<div class="table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th rowspan="2" class="sticky-header sticky-col"
					style="vertical-align: middle; left: 0; z-index: 15;">Nutzer /
					Lehrgang ↓</th>
				<c:forEach var="course" items="${allCourses}">
					<th colspan="${fn:length(meetingsByCourse[course.id])}"
						class="sticky-header" style="text-align: center;"><a
						href="${pageContext.request.contextPath}/admin/lehrgaenge"
						title="Vorlagen verwalten">${course.abbreviation}</a></th>
				</c:forEach>
			</tr>
			<tr>
				<c:forEach var="course" items="${allCourses}">
					<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
						<th class="sticky-header"
							style="text-align: center; min-width: 120px;"><a
							href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
							title="Meetings für '${course.name}' verwalten">${meeting.name}</a>
						</th>
					</c:forEach>
				</c:forEach>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="user" items="${allUsers}">
				<tr>
					<td class="sticky-col" style="font-weight: 500; left: 0;"><a
						href="${pageContext.request.contextPath}/admin/mitglieder?action=details&id=${user.id}">${user.username}</a>
					</td>
					<c:forEach var="course" items="${allCourses}">
						<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
							<c:set var="attendanceKey" value="${user.id}-${meeting.id}" />
							<c:set var="attendance" value="${attendanceMap[attendanceKey]}" />
							<td class="qual-cell" data-user-id="${user.id}"
								data-user-name="${user.username}"
								data-meeting-id="${meeting.id}"
								data-meeting-name="${course.name} - ${meeting.name}"
								data-attended="${not empty attendance && attendance.attended}"
								data-remarks="${not empty attendance ? attendance.remarks : ''}"
								style="text-align: center; font-weight: bold; cursor: pointer;"
								title="Klicken zum Bearbeiten"><c:choose>
									<c:when test="${not empty attendance && attendance.attended}">
										<span style="font-size: 1.2rem;">✔</span>
									</c:when>
									<c:otherwise>
										<span class="text-muted">-</span>
									</c:otherwise>
								</c:choose></td>
						</c:forEach>
					</c:forEach>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Attendance Modal -->
<div class="modal-overlay" id="attendance-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3>Teilnahme bearbeiten</h3>
		<p id="modal-title" style="font-weight: bold; margin-bottom: 1rem;"></p>
		<form action="${pageContext.request.contextPath}/admin/teilnahme"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="returnTo" value="matrix"> <input type="hidden"
				name="userId" id="modal-user-id"> <input type="hidden"
				name="meetingId" id="modal-meeting-id">
			<div class="form-group"
				style="display: flex; align-items: center; gap: 1rem;">
				<label for="modal-attended" style="margin-bottom: 0;">Teilgenommen:</label>
				<input type="checkbox" id="modal-attended" name="attended"
					value="true" style="width: auto; height: 1.5rem;">
			</div>
			<div class="form-group">
				<label for="modal-remarks">Bemerkungen:</label>
				<textarea name="remarks" id="modal-remarks" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_matrix.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_meeting_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Meetings für ${parentCourse.name}" />
</c:import>

<h1>
	Meetings für "
	<c:out value="${parentCourse.name}" />
	"
</h1>
<a href="${pageContext.request.contextPath}/admin/lehrgaenge"
	style="margin-bottom: 1rem; display: inline-block;"> <i
	class="fas fa-arrow-left"></i> Zurück zu allen Vorlagen
</a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-meeting-btn">
		<i class="fas fa-plus"></i> Neues Meeting planen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Meetings filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<c:if test="${empty meetings}">
	<div class="card">
		<p>Für diesen Lehrgang wurden noch keine Meetings geplant.</p>
	</div>
</c:if>

<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Meeting-Name</th>
				<th class="sortable" data-sort-type="string">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Leitung</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="meeting" items="${meetings}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
								value="${meeting.name}" /></a></td>
					<td><c:out value="${meeting.formattedMeetingDateTimeRange}" /></td>
					<td><c:out
							value="${empty meeting.leaderUsername ? 'N/A' : meeting.leaderUsername}" /></td>
					<td style="display: flex; gap: 0.5rem;">
						<button type="button" class="btn btn-small edit-meeting-btn"
							data-meeting-id="${meeting.id}">Bearbeiten & Anhänge</button>
						<form action="${pageContext.request.contextPath}/admin/meetings"
							method="post" class="inline-form js-confirm-form"
							data-confirm-message="Meeting '${fn:escapeXml(meeting.name)}' wirklich löschen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="courseId" value="${parentCourse.id}"> <input
								type="hidden" name="meetingId" value="${meeting.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="meeting" items="${meetings}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
						value="${meeting.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${meeting.formattedMeetingDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Leitung:</span> <strong><c:out
						value="${empty meeting.leaderUsername ? 'N/A' : meeting.leaderUsername}" /></strong>
			</div>
			<div class="card-actions">
				<button type="button" class="btn btn-small edit-meeting-btn"
					data-meeting-id="${meeting.id}">Bearbeiten & Anhänge</button>
				<form action="${pageContext.request.contextPath}/admin/meetings"
					method="post" class="inline-form js-confirm-form"
					data-confirm-message="Meeting '${fn:escapeXml(meeting.name)}' wirklich löschen?">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="delete"> <input type="hidden"
						name="courseId" value="${parentCourse.id}"> <input
						type="hidden" name="meetingId" value="${meeting.id}">
					<button type="submit" class="btn btn-small btn-danger">Löschen</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>


<!-- Modal for creating/editing a meeting -->
<div class="modal-overlay" id="meeting-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="meeting-modal-title">Meeting</h3>
		<form id="meeting-modal-form"
			action="${pageContext.request.contextPath}/admin/meetings"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="meeting-action"> <input type="hidden"
				name="courseId" value="${parentCourse.id}"> <input
				type="hidden" name="id" id="meeting-id">
			<div class="form-group">
				<label for="name-modal">Name des Meetings</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="meetingDateTime-modal">Beginn</label> <input
						type="datetime-local" id="meetingDateTime-modal"
						name="meetingDateTime" required>
				</div>
				<div class="form-group">
					<label for="endDateTime-modal">Ende (optional)</label> <input
						type="datetime-local" id="endDateTime-modal" name="endDateTime">
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="location-modal">Ort</label><input type="text"
						id="location-modal" name="location">
				</div>
				<div class="form-group">
					<label for="leader-modal">Leitende Person</label> <select
						name="leaderUserId" id="leader-modal">
						<option value="">(Keine)</option>
						<c:forEach var="user" items="${allUsers}">
							<option value="${user.id}"><c:out
									value="${user.username}" /></option>
						</c:forEach>
					</select>
				</div>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>
			<div class="card"
				style="margin-top: 1rem; padding: 1rem; background-color: var(--bg-color);">
				<h4 class="card-title" style="border: none; padding: 0;">Anhänge</h4>
				<ul id="modal-attachments-list" class="details-list"
					style="margin-bottom: 1rem;"></ul>
				<div class="form-group">
					<label for="attachment-modal">Neuen Anhang hochladen</label> <input
						type="file" name="attachment" id="attachment-modal"
						class="file-input" data-max-size="20971520"> <small
						class="file-size-warning" style="color: red; display: none;">Datei
						ist zu groß! (Max. 20 MB)</small>
				</div>
				<div class="form-group">
					<label for="requiredRole-modal">Sichtbar für</label> <select
						name="requiredRole" id="requiredRole-modal">
						<option value="NUTZER" selected>Alle Nutzer</option>
						<option value="ADMIN">Nur Admins</option>
					</select>
				</div>
			</div>
			<button type="submit" class="btn" style="margin-top: 1.5rem;">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_meeting_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_reports.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Berichte & Analysen" />
</c:import>

<h1>
	<i class="fas fa-chart-pie"></i> Berichte & Analysen
</h1>
<p>Hier finden Sie zusammengefasste Daten und Analysen über die
	Anwendungsnutzung.</p>

<div class="dashboard-grid">
	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Event-Trend (Letzte 12 Monate)</h2>
		<div style="position: relative; height: 300px;">
			<canvas id="eventTrendChart"></canvas>
		</div>
	</div>
	<div class="card">
		<h2 class="card-title">Top 10 Aktivste Benutzer</h2>
		<div style="position: relative; height: 400px;">
			<canvas id="userActivityChart"></canvas>
		</div>
		<a href="<c:url value='/admin/berichte?report=user_activity'/>"
			class="btn btn-small" style="margin-top: 1rem;">Vollständiger
			Bericht</a>
	</div>
	<div class="card">
		<h2 class="card-title">Sonstige Berichte</h2>
		<ul class="details-list">
			<li><a
				href="<c:url value='/admin/berichte?report=event_participation'/>">Teilnahme-Zusammenfassung</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt die
					Anzahl der Anmeldungen pro Event.</p></li>
			<li><a
				href="<c:url value='/admin/berichte?report=inventory_usage'/>">Nutzungsfrequenz
					(Material)</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt,
					welche Artikel am häufigsten entnommen werden.</p></li>
			<li><span>Gesamtwert des Lagers</span> <span
				style="font-weight: bold;"> <fmt:setLocale value="de_DE" />
					<fmt:formatNumber value="${totalInventoryValue}" type="currency" />
			</span></li>
		</ul>
	</div>
</div>

<script id="eventTrendData" type="application/json">
    <c:out value="${eventTrendDataJson}" />
</script>
<script id="userActivityData" type="application/json">
    <c:out value="${userActivityDataJson}" />
</script>


<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_reports.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_storage_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lagerverwaltung" />
</c:import>

<h1>
	<i class="fas fa-warehouse"></i> Lagerverwaltung
</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-item-btn">
		<i class="fas fa-plus"></i> Neuen Artikel anlegen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Artikel filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th class="sortable" data-sort-type="string">Ort</th>
				<th class="sortable" data-sort-type="string">Schrank</th>
				<th class="sortable" data-sort-type="string">Fach</th>
				<th class="sortable" data-sort-type="number">Verfügbar</th>
				<th>Status</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="item" items="${storageList}">
				<tr
					class="${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
					<td class="item-name-cell"><a
						href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
								value="${item.name}" /></a> <c:if
							test="${not empty item.imagePath}">
							<button class="camera-btn lightbox-trigger"
								data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
								title="Bild anzeigen">
								<i class="fas fa-camera"></i>
							</button>
						</c:if></td>
					<td><c:out value="${item.location}" /></td>
					<td><c:out
							value="${not empty item.cabinet ? item.cabinet : '-'}" /></td>
					<td><c:out
							value="${not empty item.compartment ? item.compartment : '-'}" /></td>
					<td>${item.availableQuantity}/${item.maxQuantity}<c:if
							test="${item.defectiveQuantity > 0}">
							<span class="text-danger">(${item.defectiveQuantity} def.)</span>
						</c:if>
					</td>
					<td><span
						class="status-badge ${item.status == 'IN_STORAGE' ? 'status-ok' : (item.status == 'CHECKED_OUT' ? 'status-danger' : 'status-warn')}"><c:out
								value="${item.status}" /></span></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
						<button type="button" class="btn btn-small edit-item-btn"
							data-fetch-url="<c:url value='/admin/lager?action=getItemData&id=${item.id}'/>">Bearbeiten</button>

						<c:set var="absoluteActionUrl"
							value="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/lager/aktionen?id=${item.id}" />
						<c:set var="qrApiUrl"
							value="https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${fn:escapeXml(absoluteActionUrl)}" />
						<a href="${qrApiUrl}" target="_blank"
						class="btn btn-small btn-secondary">QR-Code</a>

						<button class="btn btn-small btn-warning defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-max-qty="${item.quantity}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}">Defekt</button>

						<button class="btn btn-small btn-info maintenance-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-current-status="${item.status}">Wartung</button>

						<form action="${pageContext.request.contextPath}/admin/lager"
							method="post" class="js-confirm-form"
							data-confirm-message="Artikel '${fn:escapeXml(item.name)}' wirklich löschen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="id" value="${item.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty storageList}">
		<div class="card">
			<p>Keine Artikel gefunden.</p>
		</div>
	</c:if>
	<c:forEach var="item" items="${storageList}">
		<div
			class="list-item-card ${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
			<h3 class="card-title">
				<a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
						value="${item.name}" /></a>
				<c:if test="${not empty item.imagePath}">
					<button class="camera-btn lightbox-trigger"
						data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
						title="Bild anzeigen">
						<i class="fas fa-camera"></i>
					</button>
				</c:if>
			</h3>
			<div class="card-row">
				<span>Ort:</span> <strong><c:out value="${item.location}" />,
					<c:out value="${item.cabinet}" />, <c:out
						value="${item.compartment}" /></strong>
			</div>
			<div class="card-row">
				<span>Bestand:</span> <strong>${item.availableQuantity} /
					${item.maxQuantity} <c:if test="${item.defectiveQuantity > 0}">
						<span class="text-danger">(${item.defectiveQuantity} def.)</span>
					</c:if>
				</strong>
			</div>
			<div class="card-row">
				<span>Status:</span> <span><span
					class="status-badge ${item.status == 'IN_STORAGE' ? 'status-ok' : (item.status == 'CHECKED_OUT' ? 'status-danger' : 'status-warn')}"><c:out
							value="${item.status}" /></span></span>
			</div>
			<div class="card-actions">
				<button type="button" class="btn btn-small edit-item-btn"
					data-fetch-url="<c:url value='/admin/lager?action=getItemData&id=${item.id}'/>">Bearbeiten</button>
				<c:if test="${item.defectiveQuantity > 0}">
					<button class="btn btn-small btn-success repair-modal-btn"
						data-item-id="${item.id}"
						data-item-name="${fn:escapeXml(item.name)}"
						data-max-repair-qty="${item.defectiveQuantity}">Repariert</button>
				</c:if>
				<button class="btn btn-small btn-warning defect-modal-btn"
					data-item-id="${item.id}"
					data-item-name="${fn:escapeXml(item.name)}"
					data-max-qty="${item.quantity}"
					data-current-defect-qty="${item.defectiveQuantity}"
					data-current-reason="${fn:escapeXml(item.defectReason)}">Defekt</button>
				<button class="btn btn-small btn-info maintenance-modal-btn"
					data-item-id="${item.id}"
					data-item-name="${fn:escapeXml(item.name)}"
					data-current-status="${item.status}">Wartung</button>
				<form action="${pageContext.request.contextPath}/admin/lager"
					method="post" class="js-confirm-form"
					data-confirm-message="Artikel '${fn:escapeXml(item.name)}' wirklich löschen?">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="delete"> <input type="hidden"
						name="id" value="${item.id}">
					<button type="submit" class="btn btn-small btn-danger">Löschen</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>

<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>

<jsp:include page="/WEB-INF/jspf/storage_modals.jspf" />

<!-- Repair Modal -->
<div class="modal-overlay" id="repair-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="repair-modal-title">Artikel als repariert markieren</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="repair"> <input type="hidden" name="id"
				id="repair-item-id">
			<div class="form-group">
				<label for="repaired_quantity">Anzahl reparierter Artikel</label> <input
					type="number" name="repaired_quantity" id="repaired_quantity"
					value="1" min="1" required>
			</div>
			<div class="form-group">
				<label for="repair_notes">Notiz (optional)</label>
				<textarea name="repair_notes" id="repair_notes" rows="3"
					placeholder="z.B. Kabel neu gelötet"></textarea>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-check-circle"></i> Als repariert buchen
			</button>
		</form>
	</div>
</div>


<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_storage_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_system.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Systemstatus" />
</c:import>

<h1>
	<i class="fas fa-server"></i> Systemstatus
</h1>
<p>Live-Statistiken des Servers. Die Daten werden alle 5 Sekunden
	aktualisiert.</p>

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-microchip"></i> CPU Auslastung
		</h2>
		<div class="progress-bar-container">
			<div id="cpu-progress" class="progress-bar"></div>
		</div>
		<p id="cpu-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-memory"></i> Arbeitsspeicher (RAM)
		</h2>
		<div class="progress-bar-container">
			<div id="ram-progress" class="progress-bar"></div>
		</div>
		<p id="ram-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-hdd"></i> Festplattenspeicher
		</h2>
		<div class="progress-bar-container">
			<div id="disk-progress" class="progress-bar"></div>
		</div>
		<p id="disk-text" class="progress-text">Lade...</p>
	</div>
	<div class="card" id="battery-card" style="display: none;">
		<h2 class="card-title">
			<i class="fas fa-battery-half"></i> Akku
		</h2>
		<div class="progress-bar-container">
			<div id="battery-progress" class="progress-bar"></div>
		</div>
		<p id="battery-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-clock"></i> Server Uptime
		</h2>
		<p id="uptime-text"
			style="font-size: 1.5rem; font-weight: 500; color: var(--primary-color); text-align: center;">Lade...</p>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="<c:url value='/js/admin/admin_system.js'/>"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_users.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Benutzerverwaltung" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />
<c:set var="hasMasterAccess"
	value="${userPermissions.contains('ACCESS_ADMIN_PANEL')}" />

<h1>
	<i class="fas fa-users-cog"></i> Benutzerverwaltung
</h1>
<p>Verwalten Sie hier alle Benutzerkonten und deren individuelle
	Berechtigungen.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if
		test="${hasMasterAccess or userPermissions.contains('USER_CREATE')}">
		<button type="button" class="btn btn-success" id="new-user-btn">
			<i class="fas fa-user-plus"></i> Neuen Benutzer anlegen
		</button>
	</c:if>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Benutzer filtern..." aria-label="Benutzer filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="number">ID</th>
				<th class="sortable" data-sort-type="string">Benutzername</th>
				<th class="sortable" data-sort-type="string">Rolle</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty requestScope.userList}">
				<tr>
					<td colspan="4" style="text-align: center;">Keine Benutzer
						gefunden.</td>
				</tr>
			</c:if>
			<c:forEach var="user" items="${requestScope.userList}">
				<tr>
					<td><c:out value="${user.id}" /></td>
					<td><c:out value="${user.username}" /></td>
					<td><c:out value="${user.roleName}" /></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><c:if
							test="${hasMasterAccess or userPermissions.contains('USER_UPDATE')}">
							<button type="button" class="btn btn-small edit-user-btn"
								data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
						</c:if> <a
						href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
						class="btn btn-small">Details</a> <c:if
							test="${sessionScope.user.id != user.id}">
							<c:if
								test="${hasMasterAccess or userPermissions.contains('USER_PASSWORD_RESET')}">
								<form action="<c:url value='/admin/mitglieder'/>" method="post"
									class="js-confirm-form"
									data-confirm-message="Passwort für '${fn:escapeXml(user.username)}' zurücksetzen? Das neue Passwort wird angezeigt.">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="resetPassword"><input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-warning">Passwort
										Reset</button>
								</form>
							</c:if>
							<c:if
								test="${hasMasterAccess or userPermissions.contains('USER_DELETE')}">
								<form action="<c:url value='/admin/mitglieder'/>" method="post"
									class="js-confirm-form"
									data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="delete"><input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-danger">Löschen</button>
								</form>
							</c:if>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty requestScope.userList}">
		<div class="card">
			<p>Keine Benutzer gefunden.</p>
		</div>
	</c:if>
	<c:forEach var="user" items="${requestScope.userList}">
		<div class="list-item-card">
			<h3 class="card-title">
				<c:out value="${user.username}" />
			</h3>
			<div class="card-row">
				<span>Rolle:</span> <strong><c:out value="${user.roleName}" /></strong>
			</div>
			<div class="card-row">
				<span>ID:</span> <strong><c:out value="${user.id}" /></strong>
			</div>
			<div class="card-actions">
				<c:if
					test="${hasMasterAccess or userPermissions.contains('USER_UPDATE')}">
					<button type="button" class="btn btn-small edit-user-btn"
						data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
				</c:if>
				<a
					href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
					class="btn btn-small">Details</a>
				<c:if test="${sessionScope.user.id != user.id}">
					<c:if
						test="${hasMasterAccess or userPermissions.contains('USER_PASSWORD_RESET')}">
						<form action="<c:url value='/admin/mitglieder'/>" method="post"
							class="js-confirm-form"
							data-confirm-message="Passwort für '${fn:escapeXml(user.username)}' zurücksetzen? Das neue Passwort wird angezeigt.">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="resetPassword"> <input
								type="hidden" name="userId" value="${user.id}">
							<button type="submit" class="btn btn-small btn-warning">Reset</button>
						</form>
					</c:if>
					<c:if
						test="${hasMasterAccess or userPermissions.contains('USER_DELETE')}">
						<form action="<c:url value='/admin/mitglieder'/>" method="post"
							class="js-confirm-form"
							data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="userId" value="${user.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</c:if>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<jsp:include page="/WEB-INF/jspf/user_modals.jspf" />

<script id="allPermissionsData" type="application/json">
    ${groupedPermissionsJson}
</script>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_users.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_user_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle"
		value="Benutzerdetails: ${fn:escapeXml(userToView.username)}" />
</c:import>

<h1>
	Benutzerdetails:
	<c:out value="${userToView.username}" />
</h1>
<a href="${pageContext.request.contextPath}/admin/mitglieder"
	style="display: inline-block; margin-bottom: 1rem;"> <i
	class="fas fa-arrow-left"></i> Zurück zur Benutzerliste
</a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="responsive-dashboard-grid">
	<div class="card">
		<h2 class="card-title">Stammdaten</h2>
		<ul class="details-list">
			<li><strong>Benutzername:</strong> <c:out
					value="${userToView.username}" /></li>
			<li><strong>Rolle:</strong> <c:out
					value="${userToView.roleName}" /></li>
			<li><strong>Jahrgang:</strong> <c:out
					value="${userToView.classYear}" /></li>
			<li><strong>Klasse:</strong> <c:out
					value="${userToView.className}" /></li>
			<li><strong>E-Mail:</strong> <c:out
					value="${not empty userToView.email ? userToView.email : 'Nicht hinterlegt'}" /></li>
			<li><strong>Registriert seit:</strong> <c:out
					value="${userToView.formattedCreatedAt}" /> Uhr</li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Event-Teilnahmehistorie</h2>
		<div class="table-wrapper"
			style="max-height: 450px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Event</th>
						<th>Datum</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty eventHistory}">
						<tr>
							<td colspan="3" style="text-align: center;">Keine
								Event-Historie vorhanden.</td>
						</tr>
					</c:if>
					<c:forEach var="event" items="${eventHistory}">
						<tr>
							<td><a
								href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
										value="${event.name}" /></a></td>
							<td><c:out value="${event.formattedEventDateTime}" /> Uhr</td>
							<td><c:out value="${event.userAttendanceStatus}" /></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\report_display.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Bericht: ${reportTitle}" />
</c:import>

<h1>${reportTitle}</h1>
<div class="table-controls">
	<a href="<c:url value='/admin/berichte'/>" class="btn btn-secondary"><i
		class="fas fa-arrow-left"></i> Zurück zur Berichtsübersicht</a> <a
		href="?report=${param.report}&export=csv" class="btn btn-success"><i
		class="fas fa-file-csv"></i> Als CSV exportieren</a>
</div>

<div class="table-wrapper">
	<c:if test="${empty reportData}">
		<p style="text-align: center; padding: 2rem;">Keine Daten für
			diesen Bericht verfügbar.</p>
	</c:if>
	<c:if test="${not empty reportData}">
		<table class="data-table">
			<c:choose>
				<c:when test="${param.report == 'event_participation'}">
					<thead>
						<tr>
							<th>Event-Name</th>
							<th>Zugewiesene Teilnehmer</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<td><c:out value="${row.event_name}" /></td>
								<td><c:out value="${row.participant_count}" /></td>
							</tr>
						</c:forEach>
					</tbody>
				</c:when>

				<c:when test="${param.report == 'inventory_usage'}">
					<thead>
						<tr>
							<th>Artikelname</th>
							<th>Gesamtmenge entnommen</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<td><c:out value="${row.item_name}" /></td>
								<td><c:out value="${row.total_quantity_checked_out}" /></td>
							</tr>
						</c:forEach>
					</tbody>
				</c:when>

				<c:when test="${param.report == 'user_activity'}">
					<thead>
						<tr>
							<th>Benutzername</th>
							<th>Anmeldungen (Events)</th>
							<th>Teilnahmen (Meetings)</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<td><c:out value="${row.username}" /></td>
								<td><c:out value="${row.events_signed_up}" /></td>
								<td><c:out value="${row.meetings_attended}" /></td>
							</tr>
						</c:forEach>
					</tbody>
				</c:when>

				<c:otherwise>
					<thead>
						<tr>
							<c:forEach var="header" items="${reportData[0].keySet()}">
								<th><c:out value="${fn:replace(header, '_', ' ')}" /></th>
							</c:forEach>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<c:forEach var="key" items="${reportData[0].keySet()}">
									<td><c:out value="${row[key]}" /></td>
								</c:forEach>
							</tr>
						</c:forEach>
					</tbody>
				</c:otherwise>
			</c:choose>
		</table>
	</c:if>

</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\auth\login.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Anmeldung" />
	<c:param name="showNav" value="false" />
</c:import>

<div class="login-page-container">
	<div class="login-box">
		<h1>
			<i class="fas fa-bolt"></i> TechnikTeam
		</h1>
		<c:import url="/WEB-INF/jspf/message_banner.jspf" />
		<form action="<c:url value='/login'/>" method="post">
			<div class="form-group">
				<label for="username">Benutzername</label> <input type="text"
					id="username" name="username" required autocomplete="username"
					autofocus>
			</div>
			<div class="form-group">
				<label for="password">Passwort</label>
				<div class="password-input-wrapper">
					<input type="password" id="password" name="password" required
						autocomplete="current-password"> <span id="togglePassword"
						class="password-toggle-icon"> <i class="fas fa-eye"></i>
					</span>
				</div>
			</div>
			<button type="submit" class="btn" style="width: 100%;">Anmelden</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script>
	document.addEventListener('DOMContentLoaded', () => {
		const togglePassword = document.getElementById('togglePassword');
		const passwordInput = document.getElementById('password');

		if (togglePassword && passwordInput) {
			togglePassword.addEventListener('click', function() {
				const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
				passwordInput.setAttribute('type', type);
				this.querySelector('i').classList.toggle('fa-eye');
				this.querySelector('i').classList.toggle('fa-eye-slash');
			});
		}
	});
</script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\auth\logout.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Logout" />
	<c:param name="showNav" value="false" />
</c:import>

<div style="text-align: center; margin-top: 5rem; padding: 2rem;">
	<h1>
		<c:out value="${not empty username ? username : 'Du'}" />
		, du wurdest erfolgreich ausgeloggt!
	</h1>
	<p>Du wirst in 5 Sekunden automatisch zur Login-Seite
		weitergeleitet.</p>
	<p>
		<a href="${pageContext.request.contextPath}/login">Jetzt zur
			Login-Seite</a>
	</p>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/auth/logout.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error400.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="400 - Fehlerhafte Anfrage" />
</c:import>

<body
	data-content-length="${pageContext.request.contentLength > 0 ? pageContext.request.contentLength : 'UNKNOWN'}">
	<div class="error-page-container">
		<h1 class="error-code" style="color: var(--info-color);">400</h1>
		<h2>Fehlerhafte Anfrage</h2>
		<p class="error-message-text">Der Server konnte die Anfrage
			aufgrund einer fehlerhaften Syntax nicht verstehen. Das
			Protokolldroiden-System analysiert die Übertragung.</p>

		<div class="protocol-droid-console">
			<div class="droid-eye"></div>
			<pre id="droid-output"></pre>
		</div>

		<div id="redirect-container"
			style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
			<a href="javascript:history.back()" class="btn btn-secondary"> <i
				class="fas fa-arrow-left"></i> Einen Schritt zurück
			</a>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error400.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error401.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="401 - Nicht autorisiert" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--danger-color);">401</h1>
	<h2>Nicht Autorisiert</h2>
	<p class="error-message-text">Für den Zugriff auf diese Ressource
		ist eine Authentifizierung erforderlich. Ihre Anmeldeinformationen
		fehlen oder sind ungültig.</p>

	<div class="card-scanner">
		<div class="scanner-light" id="scanner-light"></div>
		<div class="card-slot">
			<div class="card-content">
				<p>STATUS:</p>
				<h3 id="scanner-status">BEREIT</h3>
				<div class="progress-bar-container"
					style="height: 10px; margin-top: 1rem;">
					<div id="scanner-progress" class="progress-bar"></div>
				</div>
			</div>
		</div>
	</div>

	<div id="redirect-container"
		style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
		<a href="${pageContext.request.contextPath}/login"
			class="btn btn-success"> <i class="fas fa-sign-in-alt"></i> Zur
			Anmeldeseite
		</a>
	</div>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error401.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error403.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="403 - Zugriff Verweigert" />
</c:import>

<body data-context-path="${pageContext.request.contextPath}"
	data-username="${fn:escapeXml(sessionScope.user.username)}"
	data-role="${fn:escapeXml(sessionScope.user.roleName)}"
	data-request-uri="${fn:escapeXml(pageContext.errorData.requestURI)}">

	<div class="error-page-container">
		<h1 class="error-code" style="color: var(--warning-color);">403</h1>
		<h2>Zugriff Verweigert</h2>
		<p class="error-message-text">Ihre Zugriffsebene ist für die
			angeforderte Ressource nicht ausreichend. Das Sicherheitsprotokoll
			wurde aktiviert.</p>

		<div class="security-console">
			<div class="console-header">
				<span>SYSTEM SECURITY DAEMON - PROTOKOLL</span>
			</div>
			<pre id="console-body"></pre>
		</div>

		<div id="redirect-container"
			style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
			<a href="${pageContext.request.contextPath}/home"
				class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
				Startseite
			</a>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error403.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error404.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="404 - Seite nicht gefunden" />
</c:import>

<body data-context-path="${pageContext.request.contextPath}"
	data-request-uri="${fn:escapeXml(pageContext.errorData.requestURI)}">

	<div class="error-page-container">
		<h1 class="error-code">404</h1>
		<h2>Ressource nicht gefunden</h2>
		<p class="error-message-text">
			Sie haben sich im Dateisystem verirrt. Die angeforderte Ressource
			wurde nicht gefunden. <br>Das Systemprotokoll unten zeigt
			weitere Details.
		</p>

		<div class="terminal-window">
			<div class="terminal-header">
				<div class="terminal-buttons">
					<span class="term-btn close"></span><span class="term-btn min"></span><span
						class="term-btn max"></span>
				</div>
				<span>bash -- technik-team</span>
			</div>
			<div id="terminal-body" class="terminal-body"></div>
		</div>

		<div id="home-link-container"
			style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
			<a href="${pageContext.request.contextPath}/home"
				class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
				Startseite
			</a>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error404.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error500.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="500 - Interner Fehler" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--danger-color);">500</h1>
	<h2>Systemfehler im Hauptrechner</h2>
	<p class="error-message-text">Ein unerwarteter Fehler ist
		aufgetreten und unser System ist ins Stolpern geraten. Starten Sie die
		automatische Systemdiagnose, um den Fehler zu analysieren.</p>

	<div class="diagnostic-container">
		<button id="diagnostic-btn" class="btn btn-warning">
			<i class="fas fa-tasks"></i> Diagnose starten
		</button>
		<div id="diagnostic-output" class="diagnostic-console">
		</div>
	</div>

	<a href="${pageContext.request.contextPath}/home"
		class="btn btn-primary" style="margin-top: 1.5rem;"> <i
		class="fas fa-home"></i> Flucht zur Startseite
	</a>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error500.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error503.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="503 - Dienst nicht verfügbar" />
</c:import>

<body data-context-path="${pageContext.request.contextPath}">
	<div class="error-page-container">
		<h1 class="error-code" style="color: #ff8c00;">503</h1>
		<h2>Dienst Nicht Verfügbar</h2>
		<p class="error-message-text">Der Server ist zurzeit überlastet
			oder wird gewartet. Bitte versuchen Sie es in Kürze erneut. Das
			System versucht einen Neustart.</p>

		<div class="reboot-console">
			<pre id="reboot-output"></pre>
			<div class="progress-bar-container"
				style="margin-top: 1rem; background: #333;">
				<div id="reboot-progress" class="progress-bar"
					style="background: var(--success-color);"></div>
			</div>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error503.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error_generic.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="Fehler" />
</c:import>

<c:set var="statusCode" value="${pageContext.errorData.statusCode}" />

<c:set var="errorMessage"
	value="Ein unerwarteter Fehler ist aufgetreten." />
<c:choose>
	<c:when test="${statusCode == 402}">
		<c:set var="errorMessage"
			value="Zahlung erforderlich. (Dieser Code ist für die zukünftige Verwendung reserviert.)" />
	</c:when>
	<c:when test="${statusCode == 405}">
		<c:set var="errorMessage"
			value="Methode nicht erlaubt. Die verwendete HTTP-Methode (z.B. GET, POST) ist für diese Ressource nicht zulässig." />
	</c:when>
	<c:when test="${statusCode == 406}">
		<c:set var="errorMessage"
			value="Nicht akzeptabel. Der Server kann keine Antwort generieren, die den Kriterien des Clients entspricht." />
	</c:when>
	<c:when test="${statusCode == 408}">
		<c:set var="errorMessage"
			value="Anfrage-Zeitüberschreitung. Der Server hat zu lange auf eine Antwort gewartet." />
	</c:when>
	<c:when test="${statusCode == 409}">
		<c:set var="errorMessage"
			value="Konflikt. Die Anfrage konnte wegen eines Konflikts mit dem aktuellen Zustand der Ressource nicht abgeschlossen werden." />
	</c:when>
	<c:when test="${statusCode == 410}">
		<c:set var="errorMessage"
			value="Verschwunden. Die angeforderte Ressource ist nicht mehr verfügbar und wird es auch in Zukunft nicht sein." />
	</c:when>
	<c:when test="${statusCode == 501}">
		<c:set var="errorMessage"
			value="Nicht implementiert. Der Server erkennt die Anfragemethode nicht oder kann sie nicht erfüllen." />
	</c:when>
	<c:when test="${statusCode == 502}">
		<c:set var="errorMessage"
			value="Bad Gateway. Der Server hat als Gateway oder Proxy eine ungültige Antwort vom Upstream-Server erhalten." />
	</c:when>
	<c:when test="${statusCode == 504}">
		<c:set var="errorMessage"
			value="Gateway-Zeitüberschreitung. Der Server hat als Gateway oder Proxy keine rechtzeitige Antwort erhalten." />
	</c:when>
</c:choose>

<div class="error-page-container">
	<h1 class="error-code">${statusCode}</h1>
	<h2>${errorMessage}</h2>
	<p class="error-message-text">Wenn Sie glauben, dass dies ein
		Fehler ist, kontaktieren Sie bitte den Administrator.</p>
	<a href="${pageContext.request.contextPath}/home"
		class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
		Startseite
	</a>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\calendar.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Kalender" />
</c:import>

<h1>
	<i class="fas fa-calendar-alt"></i> Terminübersicht
</h1>
<p>
	Übersicht aller anstehenden Veranstaltungen und Lehrgänge. <a
		href="<c:url value='/calendar.ics'/>" class="btn btn-small btn-info"
		style="margin-left: 1rem;"> <i class="fas fa-rss"></i> Kalender
		abonnieren
	</a>
</p>

<!-- Mobile List View -->
<div class="mobile-list-view">
	<div class="termin-container">
		<c:if test="${empty groupedEntries}">
			<div class="card">
				<p>Derzeit sind keine Termine geplant.</p>
			</div>
		</c:if>

		<c:forEach var="entry" items="${groupedEntries}">
			<h2 class="termin-month-header">${entry.key}</h2>
			<ul class="termin-list">
				<c:forEach var="termin" items="${entry.value}">
					<a href="${termin.url}" class="termin-item-link">
						<li class="termin-item">
							<div class="termin-date">
								<span class="termin-date-day">${termin.day}</span> <span
									class="termin-date-month">${termin.monthAbbr}</span>
							</div>
							<div class="termin-details">
								<span class="termin-title">${termin.title}</span> <span
									class="status-badge ${termin.typeClass}">${termin.type}</span>
							</div>
							<div class="termin-arrow">
								<i class="fas fa-chevron-right"></i>
							</div>
					</li>
					</a>
				</c:forEach>
			</ul>
		</c:forEach>
	</div>
</div>

<!-- Desktop Full Calendar View -->
<div id="calendar-container" class="desktop-calendar-view card"></div>


<c:import url="/WEB-INF/jspf/main_footer.jspf" />

<script
	src="${pageContext.request.contextPath}/vendor/fullcalendar/main.global.min.js"></script>
<script
	src="${pageContext.request.contextPath}/vendor/fullcalendar/locales/de.js"></script>
<script src="${pageContext.request.contextPath}/js/public/calendar.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\dateien.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Dateien & Dokumente" />
</c:import>

<h1>Dateien & Dokumente</h1>
<p>Hier können Sie zentrale Dokumente und Vorlagen herunterladen.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<c:if test="${empty fileData}">
	<div class="card">
		<p>Es sind keine Dateien oder Dokumente verfügbar.</p>
	</div>
</c:if>

<c:set var="canUpdateFiles"
	value="${sessionScope.user.permissions.contains('FILE_UPDATE') or sessionScope.user.permissions.contains('ACCESS_ADMIN_PANEL')}" />

<c:forEach var="categoryEntry" items="${fileData}">
	<div class="card">
		<h2>
			<i class="fas fa-folder"></i>
			<c:out value="${categoryEntry.key}" />
		</h2>
		<ul class="file-list">
			<c:forEach var="file" items="${categoryEntry.value}">
				<li style="padding: 0.75rem 0;">
					<div>
						<a href="<c:url value='/download?id=${file.id}'/>"><i
							class="fas fa-download"></i> <c:out value="${file.filename}" /></a>
					</div> <c:if
						test="${canUpdateFiles and fn:endsWith(fn:toLowerCase(file.filename), '.md')}">
						<div class="file-actions">
							<a href="<c:url value='/editor?fileId=${file.id}'/>"
								class="btn btn-small"> <i class="fas fa-edit"></i>
								Bearbeiten
							</a>
						</div>
					</c:if>
				</li>
			</c:forEach>
		</ul>
	</div>
</c:forEach>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\eventDetails.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Event Details: ${event.name}" />
</c:import>


<div
	style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap; margin-bottom: 0.5rem;">
	<h1>
		<c:out value="${event.name}" />
	</h1>
	<c:if test="${not empty event.status}">
		<c:set var="statusClass"
			value="${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}" />
		<span class="status-badge ${statusClass}"><c:out
				value="${event.status}" /></span>
	</c:if>
</div>

<p class="details-subtitle">
	<strong>Zeitraum:</strong>
	<c:out value="${event.formattedEventDateTimeRange}" />
	<c:if test="${not empty event.location}">
		<span style="margin-left: 1rem;"><strong>Ort:</strong> <c:out
				value="${event.location}" /></span>
	</c:if>
</p>

<div class="responsive-dashboard-grid">
	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Aufgaben</h2>
		<div id="task-list-container">
			<c:if test="${empty event.eventTasks}">
				<p>Für dieses Event wurden noch keine Aufgaben erstellt.</p>
			</c:if>
			<c:forEach var="task" items="${event.eventTasks}">
				<div class="card" style="margin-bottom: 1rem;">
					<div
						style="display: flex; justify-content: space-between; align-items: start;">
						<div>
							<span
								class="status-badge ${task.status == 'ERLEDIGT' ? 'status-ok' : 'status-warn'}"><c:out
									value="${task.status}" /></span>
							<h4 style="margin-top: 0.5rem;">
								<c:out value="${task.displayOrder}" />
								.
								<c:out value="${task.description}" />
							</h4>
						</div>
						<c:if test="${hasTaskManagementPermission}">
							<div>
								<button class="btn btn-small edit-task-btn"
									data-task-id="${task.id}">Bearbeiten</button>
							</div>
						</c:if>
					</div>

					<div class="markdown-content" style="margin-top: 1rem;">${fn:escapeXml(task.details)}</div>

					<p style="margin-top: 1rem;">
						<strong>Zugewiesen an:</strong>
						<c:if test="${task.requiredPersons > 0}">
							<span class="text-muted">Offener Pool
								(${fn:length(task.assignedUsers)} / ${task.requiredPersons}
								Plätze)</span>
						</c:if>
						<c:out value="${task.getAssignedUsernames()}" />
					</p>

					<c:if
						test="${not empty task.requiredItems || not empty task.requiredKits}">
						<p style="margin-top: 1rem;">
							<strong>Benötigtes Material:</strong>
						</p>
						<ul style="padding-left: 1.5rem;">
							<c:forEach var="item" items="${task.requiredItems}">
								<li><a
									href="${pageContext.request.contextPath}/lager/details?id=${item.id}"><c:out
											value="${item.quantity}" />x <c:out value="${item.name}" /></a></li>
							</c:forEach>
							<c:forEach var="kit" items="${task.requiredKits}">
								<li><a
									href="${pageContext.request.contextPath}/pack-kit?kitId=${kit.id}">1x
										Kit: <c:out value="${kit.name}" />
								</a></li>
							</c:forEach>
						</ul>
					</c:if>

					<c:if
						test="${event.status == 'LAUFEND' and (isUserAssigned or isUserParticipant)}">
						<div
							style="margin-top: 1.5rem; border-top: 1px solid var(--border-color); padding-top: 1rem;">
							<c:set var="isTaskAssignedToCurrentUser" value="false" />
							<c:forEach var="assigned" items="${task.assignedUsers}">
								<c:if test="${assigned.id == sessionScope.user.id}">
									<c:set var="isTaskAssignedToCurrentUser" value="true" />
								</c:if>
							</c:forEach>

							<c:if test="${task.requiredPersons > 0}">
								<c:choose>
									<c:when test="${isTaskAssignedToCurrentUser}">
										<form action="${pageContext.request.contextPath}/task-action"
											method="post">
											<input type="hidden" name="csrfToken"
												value="${sessionScope.csrfToken}"> <input
												type="hidden" name="action" value="unclaim"> <input
												type="hidden" name="taskId" value="${task.id}">
											<button type="submit"
												class="btn btn-danger-outline btn-small">Aufgabe
												zurückgeben</button>
										</form>
									</c:when>
									<c:when
										test="${fn:length(task.assignedUsers) < task.requiredPersons}">
										<form action="${pageContext.request.contextPath}/task-action"
											method="post">
											<input type="hidden" name="csrfToken"
												value="${sessionScope.csrfToken}"> <input
												type="hidden" name="action" value="claim"> <input
												type="hidden" name="taskId" value="${task.id}">
											<button type="submit" class="btn btn-success btn-small">Aufgabe
												übernehmen</button>
										</form>
									</c:when>
								</c:choose>
							</c:if>

							<c:if
								test="${isTaskAssignedToCurrentUser and task.status == 'OFFEN'}">
								<button class="btn btn-primary btn-small mark-task-done-btn"
									data-task-id="${task.id}">Als erledigt markieren</button>
							</c:if>
						</div>
					</c:if>
				</div>
			</c:forEach>
		</div>
		<c:if test="${hasTaskManagementPermission}">
			<button class="btn btn-success" id="new-task-btn"
				style="margin-top: 1rem;">
				<i class="fas fa-plus"></i> Neue Aufgabe
			</button>
		</c:if>
	</div>

	<c:if test="${isUserAssigned or isUserParticipant}">
		<div class="card" style="grid-column: 1/-1;">
			<h2 class="card-title">Event-Chat</h2>
			<c:choose>
				<c:when test="${event.status == 'LAUFEND'}">
					<div id="chat-box"
						style="height: 300px; overflow-y: auto; border: 1px solid var(--border-color); padding: 0.5rem; margin-bottom: 1rem; background: var(--bg-color);"></div>
					<div style="position: relative;">
						<form id="chat-form" style="display: flex; gap: 0.5rem;">
							<input type="text" id="chat-message-input" class="form-group"
								style="flex-grow: 1; margin: 0;"
								placeholder="Nachricht eingeben... @ für Erwähnungen">
							<button type="submit" class="btn">Senden</button>
						</form>
						<div id="mention-popup"
							style="display: none; position: absolute; bottom: 100%; left: 0; background: var(--surface-color); border: 1px solid var(--border-color); border-radius: 6px; box-shadow: var(--shadow-md); max-height: 150px; overflow-y: auto; z-index: 10;">
						</div>
					</div>
				</c:when>
				<c:otherwise>
					<p class="info-message">Der Chat ist nur aktiv, während das
						Event läuft.</p>
				</c:otherwise>
			</c:choose>
		</div>
	</c:if>
</div>

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">Beschreibung</h2>
		<div class="markdown-content">${fn:escapeXml(not empty event.description ? event.description : 'Keine Beschreibung für dieses Event vorhanden.')}
		</div>
	</div>
	<div class="card">
		<h2 class="card-title">Benötigter Personalbedarf</h2>
		<ul class="details-list">
			<c:if test="${empty event.skillRequirements}">
				<li>Keine speziellen Qualifikationen benötigt.</li>
			</c:if>
			<c:forEach var="req" items="${event.skillRequirements}">
				<li><strong><c:out value="${req.courseName}" />:</strong> <span><c:out
							value="${req.requiredPersons}" /> Person(en)</span></li>
			</c:forEach>
		</ul>
	</div>
	<div class="card">
		<h2 class="card-title">Reserviertes Material</h2>
		<ul class="details-list">
			<c:if test="${empty event.reservedItems}">
				<li>Kein Material für dieses Event reserviert.</li>
			</c:if>
			<c:forEach var="item" items="${event.reservedItems}">
				<li><c:out value="${item.name}" /> <span><c:out
							value="${item.quantity}" />x</span></li>
			</c:forEach>
		</ul>
	</div>
	<div class="card">
		<h2 class="card-title">Anhänge</h2>
		<ul class="details-list">
			<c:if test="${empty event.attachments}">
				<li>Keine Anhänge für dieses Event vorhanden.</li>
			</c:if>
			<c:forEach var="att" items="${event.attachments}">
				<li><a href="<c:url value='/download?id=${att.id}'/>"><c:out
							value="${att.filename}" /></a></li>
			</c:forEach>
		</ul>
	</div>
</div>

<div class="card">
	<h2 class="card-title">Zugewiesenes Team</h2>
	<ul class="details-list">
		<c:if test="${empty event.assignedAttendees}">
			<li>Noch kein Team zugewiesen.</li>
		</c:if>
		<c:forEach var="attendee" items="${event.assignedAttendees}">
			<li><c:out value="${attendee.username}" /></li>
		</c:forEach>
	</ul>
</div>

<div style="margin-top: 2rem;">
	<a href="${pageContext.request.contextPath}/veranstaltungen"
		class="btn"><i class="fas fa-arrow-left"></i> Zurück zur
		Event-Übersicht</a>
</div>

<c:if test="${hasTaskManagementPermission}">
	<jsp:include page="/WEB-INF/jspf/task_modal.jspf" />
</c:if>

<script id="allUsersData" type="application/json">${assignedUsersJson}</script>
<script id="allItemsData" type="application/json">${allItemsJson}</script>
<script id="allKitsData" type="application/json">${allKitsJson}</script>
<script id="allTasksData" type="application/json">${tasksJson}</script>


<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script>
	document.body.dataset.eventId = "${event.id}";
	document.body.dataset.userId = "${sessionScope.user.id}";
	document.body.dataset.isAdmin = "${hasTaskManagementPermission}";
</script>
<script
	src="${pageContext.request.contextPath}/js/public/eventDetails.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\events.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Veranstaltungen" />
</c:import>

<h1>Anstehende Veranstaltungen</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter" placeholder="Events filtern..."
			style="width: 100%;" aria-label="Events filtern">
	</div>
</div>

<c:if test="${empty events}">
	<div class="card">
		<p>Derzeit stehen keine Veranstaltungen an.</p>
	</div>
</c:if>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Veranstaltung</th>
				<th class="sortable" data-sort-type="date">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Event-Status</th>
				<th class="sortable" data-sort-type="string">Dein Status</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="event" items="${events}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
								value="${event.name}" /></a></td>
					<td data-sort-value="${event.eventDateTime}"><c:out
							value="${event.formattedEventDateTimeRange}" /></td>
					<td><span
						class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
								value="${event.status}" /></span></td>
					<td><c:choose>
							<c:when test="${event.userAttendanceStatus == 'ZUGEWIESEN'}">
								<strong class="text-success"><c:out value="Zugewiesen" /></strong>
							</c:when>
							<c:when test="${event.userAttendanceStatus == 'ANGEMELDET'}">
								<span class="text-success"><c:out value="Angemeldet" /></span>
							</c:when>
							<c:when test="${event.userAttendanceStatus == 'ABGEMELDET'}">
								<span class="text-danger"><c:out value="Abgemeldet" /></span>
							</c:when>
							<c:otherwise>
								<c:out value="Offen" />
							</c:otherwise>
						</c:choose></td>
					<td>
						<div style="display: flex; gap: 0.5rem;">
							<c:if
								test="${event.userAttendanceStatus == 'OFFEN' or event.userAttendanceStatus == 'ABGEMELDET'}">
								<c:choose>
									<c:when test="${event.userQualified}">
										<button type="button"
											class="btn btn-small btn-success signup-btn"
											data-event-id="${event.id}"
											data-event-name="${fn:escapeXml(event.name)}">Anmelden</button>
									</c:when>
									<c:otherwise>
										<button type="button" class="btn btn-small btn-success"
											disabled
											title="Du erfüllst die Anforderungen für dieses Event nicht.">Anmelden</button>
									</c:otherwise>
								</c:choose>
							</c:if>
							<c:if test="${event.userAttendanceStatus == 'ANGEMELDET'}">
								<form action="${pageContext.request.contextPath}/event-action"
									method="post" class="js-confirm-form"
									data-confirm-message="Wirklich vom Event '${fn:escapeXml(event.name)}' abmelden?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="eventId" value="${event.id}">
									<button type="submit" name="action" value="signoff"
										class="btn btn-small btn-danger">Abmelden</button>
								</form>
							</c:if>
						</div>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="event" items="${events}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
						value="${event.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${event.formattedEventDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Event-Status:</span> <span><span
					class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
							value="${event.status}" /></span></span>
			</div>
			<div class="card-row">
				<span>Dein Status:</span> <strong> <c:choose>
						<c:when test="${event.userAttendanceStatus == 'ZUGEWIESEN'}">
							<span class="text-success">Zugewiesen</span>
						</c:when>
						<c:when test="${event.userAttendanceStatus == 'ANGEMELDET'}">
							<span class="text-success">Angemeldet</span>
						</c:when>
						<c:when test="${event.userAttendanceStatus == 'ABGEMELDET'}">
							<span class="text-danger">Abgemeldet</span>
						</c:when>
						<c:otherwise>Offen</c:otherwise>
					</c:choose>
				</strong>
			</div>
			<div class="card-actions">
				<c:if
					test="${event.userAttendanceStatus == 'OFFEN' or event.userAttendanceStatus == 'ABGEMELDET'}">
					<c:choose>
						<c:when test="${event.userQualified}">
							<button type="button"
								class="btn btn-small btn-success signup-btn"
								data-event-id="${event.id}"
								data-event-name="${fn:escapeXml(event.name)}">Anmelden</button>
						</c:when>
						<c:otherwise>
							<button type="button" class="btn btn-small btn-success" disabled
								title="Du erfüllst die Anforderungen für dieses Event nicht.">Anmelden</button>
						</c:otherwise>
					</c:choose>
				</c:if>
				<c:if test="${event.userAttendanceStatus == 'ANGEMELDET'}">
					<form action="${pageContext.request.contextPath}/event-action"
						method="post" class="js-confirm-form"
						data-confirm-message="Wirklich vom Event '${fn:escapeXml(event.name)}' abmelden?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="eventId" value="${event.id}">
						<button type="submit" name="action" value="signoff"
							class="btn btn-small btn-danger">Abmelden</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Signup Modal -->
<div class="modal-overlay" id="signup-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="signup-modal-title">Anmeldung</h3>
		<form id="signup-form"
			action="${pageContext.request.contextPath}/event-action"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="signup"> <input type="hidden"
				name="eventId" id="signup-event-id">
			<div id="custom-fields-container"></div>
			<button type="submit" class="btn btn-success"
				style="margin-top: 1rem;">Anmeldung bestätigen</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/public/events.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\feedback_form.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Feedback geben" />
</c:import>

<div style="max-width: 700px; margin: auto;">
	<div class="card">
		<h1>
			Feedback für:
			<c:out value="${event.name}" />
		</h1>
		<p>Dein Feedback hilft uns, zukünftige Events zu verbessern.</p>

		<form action="${pageContext.request.contextPath}/feedback"
			method="post">
			<input type="hidden" name="action" value="submitResponse"> <input
				type="hidden" name="formId" value="${form.id}">

			<div class="form-group">
				<label>Gesamteindruck (1 = schlecht, 5 = super)</label>
				<div class="star-rating">
					<input type="radio" id="star5" name="rating" value="5" required /><label
						for="star5" title="5 Sterne"></label> <input type="radio"
						id="star4" name="rating" value="4" /><label for="star4"
						title="4 Sterne"></label> <input type="radio" id="star3"
						name="rating" value="3" /><label for="star3" title="3 Sterne"></label>
					<input type="radio" id="star2" name="rating" value="2" /><label
						for="star2" title="2 Sterne"></label> <input type="radio"
						id="star1" name="rating" value="1" /><label for="star1"
						title="1 Stern"></label>
				</div>
			</div>

			<div class="form-group">
				<label for="comments">Kommentare & Verbesserungsvorschläge</label>
				<textarea id="comments" name="comments" rows="5"></textarea>
			</div>

			<button type="submit" class="btn">Feedback absenden</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\home.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Home" />
</c:import>

<h1>
	Willkommen zurück,
	<c:out value="${sessionScope.user.username}" />
	!
</h1>
<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">Meine nächsten Einsätze</h2>
		<c:choose>
			<c:when test="${not empty assignedEvents}">
				<ul class="details-list">
					<c:forEach var="event" items="${assignedEvents}">
						<li><a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
									value="${event.name}" /></a> <small><c:out
									value="${event.formattedEventDateTimeRange}" /></small></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Du bist derzeit für keine kommenden Events fest eingeteilt.</p>
			</c:otherwise>
		</c:choose>
		<a href="${pageContext.request.contextPath}/veranstaltungen"
			class="btn btn-small" style="margin-top: 1rem;">Alle
			Veranstaltungen anzeigen</a>
	</div>

	<div class="card">
		<h2 class="card-title">Meine offenen Aufgaben</h2>
		<c:choose>
			<c:when test="${not empty openTasks}">
				<ul class="details-list">
					<c:forEach var="task" items="${openTasks}">
						<li><a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${task.eventId}">
								<c:out value="${task.description}" /> <small
								style="display: block; color: var(--text-muted-color);">Für
									Event: <c:out value="${task.eventName}" />
							</small>
						</a></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Super! Du hast aktuell keine offenen Aufgaben.</p>
			</c:otherwise>
		</c:choose>
	</div>

	<div class="card">
		<h2 class="card-title">Weitere anstehende Veranstaltungen</h2>
		<c:choose>
			<c:when test="${not empty upcomingEvents}">
				<ul class="details-list">
					<c:forEach var="event" items="${upcomingEvents}">
						<li><a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
									value="${event.name}" /></a> <small><c:out
									value="${event.formattedEventDateTimeRange}" /></small></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Keine weiteren anstehenden Veranstaltungen.</p>
			</c:otherwise>
		</c:choose>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\lager.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lager" />
</c:import>

<h1>
	<i class="fas fa-boxes"></i> Lagerübersicht
</h1>
<p>Hier finden Sie eine Übersicht aller erfassten Artikel im Lager.
	Klicken Sie auf einen Artikelnamen für Details und Verlauf.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Alle Artikel filtern..." aria-label="Lager filtern">
	</div>
</div>

<c:if test="${empty storageData}">
	<div class="card">
		<p>Derzeit sind keine Artikel im Lager erfasst.</p>
	</div>
</c:if>

<div class="searchable-table">
	<c:forEach var="locationEntry" items="${storageData}">
		<div class="card">
			<h2>
				<i class="fas fa-map-marker-alt"></i>
				<c:out value="${locationEntry.key}" />
			</h2>

			<!-- Desktop Table View -->
			<div class="desktop-table-wrapper">
				<table class="data-table">
					<thead>
						<tr>
							<th>Gerät</th>
							<th class="sortable" data-sort-type="string">Schrank</th>
							<th class="sortable" data-sort-type="string">Fach</th>
							<th>Status</th>
							<th>Bestand</th>
							<th>Aktion</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="item" items="${locationEntry.value}">
							<tr
								class="${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
								<td class="item-name-cell"><a
									href="<c:url value='/lager/details?id=${item.id}'/>"
									title="Details für ${item.name} ansehen"><c:out
											value="${item.name}" /></a> <c:if
										test="${not empty item.imagePath}">
										<button class="camera-btn lightbox-trigger"
											data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
											title="Bild anzeigen">
											<i class="fas fa-camera"></i>
										</button>
									</c:if></td>
								<td><c:out
										value="${not empty item.cabinet ? item.cabinet : '-'}" /></td>
								<td><c:out
										value="${not empty item.compartment ? item.compartment : '-'}" /></td>
								<td><c:choose>
										<c:when test="${item.status == 'CHECKED_OUT'}">
											<span class="status-badge status-warn">Entnommen</span>
											<span class="item-status-details">an:
												${item.currentHolderUsername}</span>
										</c:when>
										<c:when test="${item.status == 'MAINTENANCE'}">
											<span class="status-badge status-info">Wartung</span>
										</c:when>
										<c:otherwise>
											<span class="status-badge status-ok">Im Lager</span>
										</c:otherwise>
									</c:choose></td>
								<td><span class="inventory-details">${item.availableQuantity}
										/ ${item.maxQuantity}</span> <c:if
										test="${item.defectiveQuantity > 0}">
										<span class="inventory-details text-danger">(${item.defectiveQuantity}
											defekt)</span>
									</c:if></td>
								<td>
									<button class="btn btn-small transaction-btn"
										data-item-id="${item.id}"
										data-item-name="${fn:escapeXml(item.name)}"
										data-max-qty="${item.availableQuantity}"
										data-current-qty="${item.quantity}"
										data-total-max-qty="${item.maxQuantity}">Aktion</button>
								</td>
							</tr>
						</c:forEach>
					</tbody>
				</table>
			</div>

			<!-- Mobile Card View -->
			<div class="mobile-card-list">
				<c:forEach var="item" items="${locationEntry.value}">
					<div
						class="list-item-card ${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
						<h3 class="card-title">
							<a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
									value="${item.name}" /></a>
							<c:if test="${not empty item.imagePath}">
								<button class="camera-btn lightbox-trigger"
									data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
									title="Bild anzeigen">
									<i class="fas fa-camera"></i>
								</button>
							</c:if>
						</h3>
						<div class="card-row">
							<span>Ort:</span> <strong><c:out value="${item.cabinet}" />,
								<c:out value="${item.compartment}" /></strong>
						</div>
						<div class="card-row">
							<span>Bestand:</span> <strong>${item.availableQuantity}
								/ ${item.maxQuantity} <c:if test="${item.defectiveQuantity > 0}">
									<span class="text-danger">(${item.defectiveQuantity}
										def.)</span>
								</c:if>
							</strong>
						</div>
						<div class="card-row">
							<span>Status:</span> <span> <c:choose>
									<c:when test="${item.status == 'CHECKED_OUT'}">
										<span class="status-badge status-warn">Entnommen</span>
										<span class="item-status-details">an:
											${item.currentHolderUsername}</span>
									</c:when>
									<c:when test="${item.status == 'MAINTENANCE'}">
										<span class="status-badge status-info">Wartung</span>
									</c:when>
									<c:otherwise>
										<span class="status-badge status-ok">Im Lager</span>
									</c:otherwise>
								</c:choose>
							</span>
						</div>
						<div class="card-actions">
							<button class="btn btn-small transaction-btn"
								data-item-id="${item.id}"
								data-item-name="${fn:escapeXml(item.name)}"
								data-max-qty="${item.availableQuantity}"
								data-current-qty="${item.quantity}"
								data-total-max-qty="${item.maxQuantity}">Aktion</button>
						</div>
					</div>
				</c:forEach>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Lightbox Modal (HTML is in main_footer.jspf, this is just a comment) -->

<%@ include file="/WEB-INF/jspf/storage_modals.jspf"%>
<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/public/lager.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\lehrgaenge.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lehrgänge" />
</c:import>

<h1>Anstehende Lehrgänge & Meetings</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Lehrgänge filtern..." style="width: 100%;"
			aria-label="Lehrgänge filtern">
	</div>
</div>

<c:if test="${empty meetings}">
	<div class="card">
		<p>Derzeit stehen keine Lehrgänge oder Meetings an.</p>
	</div>
</c:if>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Meeting</th>
				<th class="sortable" data-sort-type="string">Gehört zu Kurs</th>
				<th class="sortable" data-sort-type="date">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Dein Status</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="meeting" items="${meetings}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
								value="${meeting.name}" /></a></td>
					<td><c:out value="${meeting.parentCourseName}" /></td>
					<td data-sort-value="${meeting.meetingDateTime}"><c:out
							value="${meeting.formattedMeetingDateTimeRange}" /></td>
					<td><c:choose>
							<c:when test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
								<span class="text-success"><c:out value="Angemeldet" /></span>
							</c:when>
							<c:when test="${meeting.userAttendanceStatus == 'ABGEMELDET'}">
								<span class="text-danger"><c:out value="Abgemeldet" /></span>
							</c:when>
							<c:otherwise>
								<c:out value="Offen" />
							</c:otherwise>
						</c:choose></td>
					<td>
						<form action="${pageContext.request.contextPath}/meeting-action"
							method="post" style="display: flex; gap: 0.5rem;">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="meetingId" value="${meeting.id}">
							<c:if test="${meeting.userAttendanceStatus != 'ANGEMELDET'}">
								<button type="submit" name="action" value="signup"
									class="btn btn-small btn-success">Anmelden</button>
							</c:if>
							<c:if test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
								<button type="submit" name="action" value="signoff"
									class="btn btn-small btn-danger">Abmelden</button>
							</c:if>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="meeting" items="${meetings}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
						value="${meeting.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Kurs:</span> <strong><c:out
						value="${meeting.parentCourseName}" /></strong>
			</div>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${meeting.formattedMeetingDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Dein Status:</span> <strong> <c:choose>
						<c:when test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
							<span class="text-success">Angemeldet</span>
						</c:when>
						<c:when test="${meeting.userAttendanceStatus == 'ABGEMELDET'}">
							<span class="text-danger">Abgemeldet</span>
						</c:when>
						<c:otherwise>Offen</c:otherwise>
					</c:choose>
				</strong>
			</div>
			<div class="card-actions">
				<form action="${pageContext.request.contextPath}/meeting-action"
					method="post" style="display: flex; gap: 0.5rem;">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="meetingId" value="${meeting.id}">
					<c:if test="${meeting.userAttendanceStatus != 'ANGEMELDET'}">
						<button type="submit" name="action" value="signup"
							class="btn btn-small btn-success">Anmelden</button>
					</c:if>
					<c:if test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
						<button type="submit" name="action" value="signoff"
							class="btn btn-small btn-danger">Abmelden</button>
					</c:if>
				</form>
			</div>
		</div>
	</c:forEach>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\meetingDetails.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Meeting Details" />
</c:import>

<h1>
	<c:out value="${meeting.parentCourseName}" />
</h1>
<h2 style="border: none; padding: 0; margin-top: -1rem;">
	<c:out value="${meeting.name}" />
</h2>

<div class="dashboard-grid"
	style="grid-template-columns: 2fr 1fr; align-items: flex-start;">

	<div class="card">
		<ul class="details-list">
			<li><strong>Datum & Uhrzeit:</strong> <span><c:out
						value="${meeting.formattedMeetingDateTimeRange}" /></span></li>
			<li><strong>Ort:</strong> <span><c:out
						value="${not empty meeting.location ? meeting.location : 'N/A'}" /></span></li>
			<li><strong>Leitung:</strong> <span><c:out
						value="${not empty meeting.leaderUsername ? meeting.leaderUsername : 'N/A'}" /></span></li>
		</ul>
		<h3 style="margin-top: 2rem;">Beschreibung</h3>
		<div class="markdown-content">${fn:escapeXml(not empty meeting.description ? meeting.description : 'Keine Beschreibung für dieses Meeting vorhanden.')}
		</div>
	</div>

	<div class="card">
		<h2 class="card-title">Anhänge</h2>
		<c:if test="${empty attachments}">
			<p>Für dieses Meeting sind keine Anhänge verfügbar.</p>
		</c:if>
		<ul class="details-list">
			<c:forEach var="att" items="${attachments}">
				<li><a href="<c:url value='/download?id=${att.id}'/>"><c:out
							value="${att.filename}" /></a> <c:if
						test="${sessionScope.user.id == meeting.leaderUserId or sessionScope.user.permissions.contains('ACCESS_ADMIN_PANEL')}">
						<span class="text-muted">(<c:out
								value="${att.requiredRole}" />)
						</span>
					</c:if></li>
			</c:forEach>
		</ul>
	</div>

</div>

<div style="margin-top: 1rem;">
	<a href="${pageContext.request.contextPath}/lehrgaenge"
		class="btn btn-secondary"> <i class="fas fa-arrow-left"></i>
		Zurück zu allen Lehrgängen
	</a>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\pack_kit.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Packliste: ${kit.name}" />
	<c:param name="showNav" value="false" />
</c:import>

<div class="main-content" style="max-width: 800px; margin: 2rem auto;">
	<div class="card">
		<div
			style="display: flex; justify-content: space-between; align-items: start;">
			<div>
				<h1>
					Packliste:
					<c:out value="${kit.name}" />
				</h1>
				<p class="details-subtitle" style="margin-top: -1rem;">
					<c:out value="${kit.description}" />
				</p>
			</div>
			<button class="btn no-print" onclick="window.print()">
				<i class="fas fa-print"></i> Drucken
			</button>
		</div>

		<c:if test="${not empty kit.location}">
			<div class="card" style="background-color: var(--bg-color);">
				<h3 class="card-title" style="border: none; padding: 0;">Standort</h3>
				<p style="font-size: 1.2rem; font-weight: 500;">
					<c:out value="${kit.location}" />
				</p>
			</div>
		</c:if>
		<c:if test="${empty kit.location}">
			<p class="info-message">Für dieses Kit ist kein physischer
				Standort hinterlegt.</p>
		</c:if>

		<h3 style="margin-top: 2rem;">Inhalt zum Einpacken</h3>
		<ul class="details-list">
			<c:if test="${empty kitItems}">
				<li>Dieses Kit hat keinen definierten Inhalt.</li>
			</c:if>
			<c:forEach var="item" items="${kitItems}">
				<li><label
					style="display: flex; align-items: center; gap: 1rem; cursor: pointer; width: 100%;">
						<input type="checkbox"
						style="width: 1.5rem; height: 1.5rem; flex-shrink: 0;"> <span>
							<strong>${item.quantity}x</strong> <c:out
								value="${item.itemName}" />
					</span>
				</label></li>
			</c:forEach>
		</ul>
		<div class="no-print" style="margin-top: 2rem; text-align: center;">
			<a href="${pageContext.request.contextPath}/lager"
				class="btn btn-secondary">Zurück zur Lagerübersicht</a>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\passwort.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Passwort ändern" />
</c:import>

<div style="max-width: 600px; margin: auto;">
	<div class="card">
		<h1>Passwort ändern</h1>

		<c:if test="${not empty successMessage}">
			<p class="success-message">
				<c:out value="${successMessage}" />
			</p>
		</c:if>
		<c:if test="${not empty errorMessage}">
			<p class="error-message">
				<c:out value="${errorMessage}" />
			</p>
		</c:if>

		<form action="${pageContext.request.contextPath}/passwort"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}">
			<div class="form-group">
				<label for="currentPassword">Aktuelles Passwort</label> <input
					type="password" id="currentPassword" name="currentPassword"
					required autocomplete="current-password">
			</div>
			<div class="form-group">
				<label for="newPassword">Neues Passwort</label> <input
					type="password" id="newPassword" name="newPassword" required
					autocomplete="new-password">
			</div>
			<div class="form-group">
				<label for="confirmPassword">Neues Passwort bestätigen</label> <input
					type="password" id="confirmPassword" name="confirmPassword"
					required autocomplete="new-password">
			</div>
			<button type="submit" class="btn">Passwort speichern</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\profile.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Mein Profil" />
</c:import>

<h1>Mein Profil</h1>
<p>Hier finden Sie eine Übersicht Ihrer Daten, Qualifikationen und
	Aktivitäten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="responsive-dashboard-grid">
	<div class="card">
		<h2 class="card-title">Stammdaten</h2>
		<ul class="details-list">
			<li><strong>Benutzername:</strong> <span><c:out
						value="${sessionScope.user.username}" /></span></li>
			<li><strong>Rolle:</strong> <span><c:out
						value="${sessionScope.user.roleName}" /></span></li>
			<li><strong>Jahrgang:</strong> <span><c:out
						value="${sessionScope.user.classYear}" /></span></li>
			<li><strong>Klasse:</strong> <span><c:out
						value="${sessionScope.user.className}" /></span></li>
			<li><strong>E-Mail:</strong> <span><c:out
						value="${not empty sessionScope.user.email ? sessionScope.user.email : 'Nicht hinterlegt'}" /></span></li>
			<li style="align-items: center; gap: 1rem;"><strong>Chat-Farbe:</strong>
				<form action="${pageContext.request.contextPath}/profil"
					method="post"
					style="display: flex; align-items: center; gap: 0.5rem;">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="color"
						name="chatColor"
						value="<c:out value='${not empty sessionScope.user.chatColor ? sessionScope.user.chatColor : "#E9ECEF"}'/>"
						title="Wähle deine Chat-Farbe">
					<button type="submit" class="btn btn-small">Speichern</button>
				</form></li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Meine Qualifikationen</h2>
		<div class="table-wrapper"
			style="max-height: 400px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Lehrgang</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty qualifications}">
						<tr>
							<td colspan="2">Keine Qualifikationen erworben.</td>
						</tr>
					</c:if>
					<c:forEach var="qual" items="${qualifications}">
						<tr>
							<td><c:out value="${qual.courseName}" /></td>
							<td><c:out value="${qual.status}" /></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>

	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Meine Abzeichen</h2>
		<c:if test="${empty achievements}">
			<p>Du hast noch keine Abzeichen verdient. Nimm an Events teil, um
				sie freizuschalten!</p>
		</c:if>
		<div style="display: flex; flex-wrap: wrap; gap: 1rem;">
			<c:forEach var="ach" items="${achievements}">
				<div class="card"
					style="flex: 1; min-width: 250px; text-align: center;">
					<i class="fas ${ach.iconClass}"
						style="font-size: 3rem; color: var(--primary-color); margin-bottom: 1rem;"></i>
					<h4 style="margin: 0;">
						<c:out value="${ach.name}" />
					</h4>
					<p style="color: var(--text-muted-color); font-size: 0.9rem;">
						<c:out value="${ach.description}" />
					</p>
					<small>Verdient am: <c:out value="${ach.formattedEarnedAt}" /></small>
				</div>
			</c:forEach>
		</div>
	</div>

</div>

<div class="card">
	<h2 class="card-title">Meine Event-Historie</h2>

	<!-- Desktop Table View -->
	<div class="desktop-table-wrapper">
		<div class="table-wrapper"
			style="max-height: 500px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Event</th>
						<th>Datum</th>
						<th>Dein Status</th>
						<th>Feedback</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty eventHistory}">
						<tr>
							<td colspan="4">Keine Event-Historie vorhanden.</td>
						</tr>
					</c:if>
					<c:forEach var="event" items="${eventHistory}">
						<tr>
							<td><a
								href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
										value="${event.name}" /></a></td>
							<td><c:out value="${event.formattedEventDateTime}" /> Uhr</td>
							<td><c:out value="${event.userAttendanceStatus}" /></td>
							<td><c:if
									test="${event.status == 'ABGESCHLOSSEN' && event.userAttendanceStatus == 'ZUGEWIESEN'}">
									<a
										href="${pageContext.request.contextPath}/feedback?action=submit&eventId=${event.id}"
										class="btn btn-small">Feedback geben</a>
								</c:if></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>

	<!-- Mobile Card View -->
	<div class="mobile-card-list">
		<c:if test="${empty eventHistory}">
			<div class="list-item-card">
				<p>Keine Event-Historie vorhanden.</p>
			</div>
		</c:if>
		<c:forEach var="event" items="${eventHistory}">
			<div class="list-item-card">
				<h3 class="card-title">
					<a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
							value="${event.name}" /></a>
				</h3>
				<div class="card-row">
					<span>Datum:</span> <strong><c:out
							value="${event.formattedEventDateTime}" /> Uhr</strong>
				</div>
				<div class="card-row">
					<span>Dein Status:</span> <strong><c:out
							value="${event.userAttendanceStatus}" /></strong>
				</div>
				<div class="card-actions">
					<c:if
						test="${event.status == 'ABGESCHLOSSEN' && event.userAttendanceStatus == 'ZUGEWIESEN'}">
						<a
							href="${pageContext.request.contextPath}/feedback?action=submit&eventId=${event.id}"
							class="btn btn-small">Feedback geben</a>
					</c:if>
				</div>
			</div>
		</c:forEach>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\qr_action.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Lager-Aktion: <c:out value="${item.name}" /></title>
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet"
	href="${pageContext.request.contextPath}/css/style.css">

<script>
	// This script runs immediately to prevent a "flash" of the wrong theme.
	const savedTheme = localStorage.getItem('theme') || 'light';
	document.documentElement.setAttribute('data-theme', savedTheme);
</script>

</head>
<body class="qr-action-body">

	<div class="qr-action-container card">
		<p>Aktion für:</p>
		<h1 class="qr-action-item-name">
			<c:out value="${item.name}" />
		</h1>
		<p class="details-subtitle"
			style="margin-top: -1rem; margin-bottom: 2rem;">Bestand:
			${item.quantity} / ${item.maxQuantity} (Verfügbar:
			${item.availableQuantity})</p>


		<c:if test="${not empty sessionScope.successMessage}">
			<p class="success-message" style="margin-top: 1rem;">${sessionScope.successMessage}</p>
			<c:remove var="successMessage" scope="session" />
		</c:if>
		<c:if test="${not empty sessionScope.errorMessage}">
			<p class="error-message" style="margin-top: 1rem;">${sessionScope.errorMessage}</p>
			<c:remove var="errorMessage" scope="session" />
		</c:if>

		<form action="${pageContext.request.contextPath}/lager/transaktion"
			method="post" data-available-qty="${item.availableQuantity}"
			data-total-qty="${item.quantity}" data-max-qty="${item.maxQuantity}">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="itemId" value="${item.id}"> <input type="hidden"
				name="redirectUrl"
				value="${pageContext.request.contextPath}/lager/aktionen?id=${item.id}">

			<div class="form-group">
				<label for="quantity">Anzahl</label> <input type="number"
					name="quantity" id="quantity" value="1" min="1" required>
			</div>

			<div class="form-group">
				<label for="notes">Notiz (optional, z.B. für welches Event)</label>
				<input type="text" name="notes" id="notes"
					placeholder="z.B. für Event XYZ">
			</div>
			<div class="form-group">
				<label for="eventId">Zuweisen zu Event (optional)</label> <select
					name="eventId" id="eventId">
					<option value="">Kein Event</option>
					<c:forEach var="event" items="${activeEvents}">
						<option value="${event.id}">${event.name}</option>
					</c:forEach>
				</select>
			</div>

			<div class="qr-action-buttons">
				<button type="submit" name="type" value="checkout" id="checkout-btn"
					class="btn btn-danger qr-action-btn"
					${item.availableQuantity <= 0 ? 'disabled' : ''}>
					<i class="fas fa-sign-out-alt"></i> Entnehmen
				</button>
				<button type="submit" name="type" value="checkin" id="checkin-btn"
					class="btn btn-success qr-action-btn"
					${item.maxQuantity > 0 && item.quantity >= item.maxQuantity ? 'disabled' : ''}>
					<i class="fas fa-sign-in-alt"></i> Einräumen
				</button>
			</div>
		</form>
	</div>

	<script src="${pageContext.request.contextPath}/js/public/qr_action.js"></script>
</body>
</html>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\storage_item_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle"
		value="Artikeldetails: ${fn:escapeXml(item.name)}" />
</c:import>

<h1>
	<i class="fas fa-cube"></i> Artikeldetails
</h1>

<div class="responsive-dashboard-grid" style="align-items: flex-start;">

	<div class="card">
		<h2 class="card-title">
			<c:out value="${item.name}" />
		</h2>
		<c:if test="${not empty item.imagePath}">
			<a
				href="${pageContext.request.contextPath}/image?file=${item.imagePath}"
				class="lightbox-trigger"> <img
				src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
				alt="<c:out value='${item.name}'/>"
				style="width: 100%; border-radius: var(--border-radius); margin-bottom: 1rem; cursor: zoom-in;">
			</a>
		</c:if>
		<ul class="details-list">
			<li><strong>Allg. Status:</strong> <span
				class="status-badge ${item.availabilityStatusCssClass}"><c:out
						value="${item.availabilityStatus}" /></span></li>
			<li><strong>Verfügbar:</strong> <span><c:out
						value="${item.availableQuantity}" /> / <c:out
						value="${item.quantity}" /></span></li>
			<li><strong>Defekt:</strong> <span><c:out
						value="${item.defectiveQuantity}" /></span></li>
			<li><strong>Tracking-Status:</strong> <span> <c:choose>
						<c:when test="${item.status == 'CHECKED_OUT'}">
							<span class="status-badge status-warn"><c:out
									value="Entnommen" /></span>
						</c:when>
						<c:when test="${item.status == 'MAINTENANCE'}">
							<span class="status-badge status-info"><c:out
									value="Wartung" /></span>
						</c:when>
						<c:otherwise>
							<span class="status-badge status-ok"><c:out
									value="Im Lager" /></span>
						</c:otherwise>
					</c:choose>
			</span></li>
			<c:if test="${not empty item.currentHolderUsername}">
				<li><strong>Aktueller Inhaber:</strong> <span><c:out
							value="${item.currentHolderUsername}" /></span></li>
			</c:if>
			<li><strong>Ort:</strong> <span><c:out
						value="${item.location}" /></span></li>
			<li><strong>Schrank:</strong> <span><c:out
						value="${not empty item.cabinet ? item.cabinet : 'N/A'}" /></span></li>
			<li><strong>Fach:</strong> <span><c:out
						value="${not empty item.compartment ? item.compartment : 'N/A'}" /></span></li>
		</ul>
		<div style="margin-top: 2rem;">
			<a href="<c:url value='/lager'/>" class="btn btn-small"><i
				class="fas fa-arrow-left"></i> Zur Lagerübersicht</a>
		</div>
	</div>

	<div class="card">
		<div class="modal-tabs">
			<button class="modal-tab-button active" data-tab="history-tab">Verlauf</button>
			<button class="modal-tab-button" data-tab="maintenance-tab">Wartungshistorie</button>
		</div>

		<div id="history-tab" class="modal-tab-content active">
			<h2 class="card-title" style="border: none; padding: 0;">Verlauf
				/ Chronik</h2>

			<!-- Desktop Table View -->
			<div class="desktop-table-wrapper">
				<div class="table-wrapper"
					style="max-height: 60vh; overflow-y: auto;">
					<table class="data-table">
						<thead>
							<tr>
								<th>Wann</th>
								<th>Aktion</th>
								<th>Wer</th>
								<th>Notiz</th>
							</tr>
						</thead>
						<tbody>
							<c:if test="${empty history}">
								<tr>
									<td colspan="4" style="text-align: center;">Kein Verlauf
										für diesen Artikel vorhanden.</td>
								</tr>
							</c:if>
							<c:forEach var="entry" items="${history}">
								<tr>
									<td><c:out
											value="${entry.transactionTimestampLocaleString}" /></td>
									<td><span
										class="status-badge ${entry.quantityChange > 0 ? 'status-ok' : 'status-danger'}">${entry.quantityChange > 0 ? '+' : ''}<c:out
												value="${entry.quantityChange}" /></span></td>
									<td><c:out value="${entry.username}" /></td>
									<td><c:out
											value="${not empty entry.notes ? entry.notes : '-'}" /></td>
								</tr>
							</c:forEach>
						</tbody>
					</table>
				</div>
			</div>

			<!-- Mobile Card View -->
			<div class="mobile-card-list">
				<c:if test="${empty history}">
					<div class="list-item-card">
						<p>Kein Verlauf für diesen Artikel vorhanden.</p>
					</div>
				</c:if>
				<c:forEach var="entry" items="${history}">
					<div class="list-item-card">
						<h3 class="card-title">
							<span
								class="status-badge ${entry.quantityChange > 0 ? 'status-ok' : 'status-danger'}">
								${entry.quantityChange > 0 ? '+' : ''}<c:out
									value="${entry.quantityChange}" />
							</span>
							<c:out value="${entry.username}" />
						</h3>
						<div class="card-row">
							<span>Wann:</span> <strong><c:out
									value="${entry.transactionTimestampLocaleString}" /></strong>
						</div>
						<div class="card-row"
							style="flex-direction: column; align-items: flex-start;">
							<span>Notiz:</span>
							<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
								<c:out value="${not empty entry.notes ? entry.notes : '-'}" />
							</p>
						</div>
					</div>
				</c:forEach>
			</div>
		</div>

		<div id="maintenance-tab" class="modal-tab-content">
			<h2 class="card-title" style="border: none; padding: 0;">Wartungshistorie</h2>
			<!-- Desktop Table View -->
			<div class="desktop-table-wrapper">
				<div class="table-wrapper"
					style="max-height: 60vh; overflow-y: auto;">
					<table class="data-table">
						<thead>
							<tr>
								<th>Datum</th>
								<th>Aktion</th>
								<th>Bearbeiter</th>
								<th>Notiz</th>
							</tr>
						</thead>
						<tbody>
							<c:if test="${empty maintenanceHistory}">
								<tr>
									<td colspan="4" style="text-align: center;">Keine
										Wartungseinträge für diesen Artikel vorhanden.</td>
								</tr>
							</c:if>
							<c:forEach var="entry" items="${maintenanceHistory}">
								<tr>
									<td><c:out value="${entry.formattedLogDate}" /></td>
									<td><c:out value="${entry.action}" /></td>
									<td><c:out value="${entry.username}" /></td>
									<td><c:out value="${entry.notes}" /></td>
								</tr>
							</c:forEach>
						</tbody>
					</table>
				</div>
			</div>

			<!-- Mobile Card View -->
			<div class="mobile-card-list">
				<c:if test="${empty maintenanceHistory}">
					<div class="list-item-card">
						<p>Keine Wartungseinträge für diesen Artikel vorhanden.</p>
					</div>
				</c:if>
				<c:forEach var="entry" items="${maintenanceHistory}">
					<div class="list-item-card">
						<h3 class="card-title">
							<c:out value="${entry.action}" />
						</h3>
						<div class="card-row">
							<span>Datum:</span> <strong><c:out
									value="${entry.formattedLogDate}" /></strong>
						</div>
						<div class="card-row">
							<span>Bearbeiter:</span> <strong><c:out
									value="${entry.username}" /></strong>
						</div>
						<div class="card-row"
							style="flex-direction: column; align-items: flex-start;">
							<span>Notiz:</span>
							<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
								<c:out value="${entry.notes}" />
							</p>
						</div>
					</div>
				</c:forEach>
			</div>

		</div>
	</div>
</div>


<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/public/storage_item_details.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\web.xml
========================================================================

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"
	version="5.0">

	<display-name>TechnikTeam Web Application</display-name>

	<session-config>
		<session-timeout>30</session-timeout>
		<cookie-config>
			<http-only>true</http-only>
			<!-- For production, secure should be true. Kept as-is for local dev compatibility. -->
			<secure>false</secure>
		</cookie-config>
	</session-config>

	<welcome-file-list>
		<welcome-file>/views/auth/login.jsp</welcome-file>
	</welcome-file-list>

	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<url-pattern>*.jspf</url-pattern>
			<el-ignored>false</el-ignored>
		</jsp-property-group>
	</jsp-config>

	<!-- Custom Error Pages -->
	<error-page>
		<error-code>400</error-code>
		<location>/views/error/error400.jsp</location>
	</error-page>
	<error-page>
		<error-code>401</error-code>
		<location>/views/error/error401.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/views/error/error403.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/views/error/error404.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/views/error/error500.jsp</location>
	</error-page>
	<error-page>
		<error-code>503</error-code>
		<location>/views/error/error503.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/views/error/error500.jsp</location>
	</error-page>
	<error-page>
		<location>/views/error/error_generic.jsp</location>
	</error-page>

</web-app>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\common_modals.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
<!-- The confirmation modal is dynamically created and added to the body by main.js -->
<!-- This file is a placeholder for any other future global modals. -->
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\error_footer.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
    </div>
</main>
<script src="${pageContext.request.contextPath}/js/main.js"></script>
</body>
</html>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\error_header.jspf
========================================================================

<%@ page pageEncoding="UTF-8" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html>
<html lang="de" data-theme="light">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title><c:out value="${param.pageTitle}" /> - TechnikTeam</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body data-context-path="${pageContext.request.contextPath}">
<main class="main-content-wrapper no-sidebar">
    <div class="main-content">
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\event_modals.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!-- Event Create/Edit Modal -->
<div class="modal-overlay" id="event-modal">
	<div class="modal-content" style="max-width: 800px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="event-modal-title">Event verwalten</h3>

		<div class="modal-tabs">
			<button class="modal-tab-button active" data-tab="general">Allgemein</button>
			<button class="modal-tab-button" data-tab="requirements">Bedarf</button>
			<button class="modal-tab-button" data-tab="reservations">Material</button>
			<button class="modal-tab-button" data-tab="attachments">Anhänge</button>
			<button class="modal-tab-button" data-tab="custom-fields">Anmeldefelder</button>
		</div>

		<form id="event-modal-form"
			action="${pageContext.request.contextPath}/admin/veranstaltungen"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="event-modal-action"> <input type="hidden"
				name="id" id="event-modal-id">

			<!-- General Tab -->
			<div class="modal-tab-content active" id="general">
				<div class="form-group">
					<label for="name-modal">Name des Events</label> <input type="text"
						id="name-modal" name="name" required>
				</div>
				<div class="responsive-dashboard-grid">
					<div class="form-group">
						<label for="eventDateTime-modal">Beginn</label> <input
							type="datetime-local" id="eventDateTime-modal"
							name="eventDateTime" required>
					</div>
					<div class="form-group">
						<label for="endDateTime-modal">Ende (optional)</label> <input
							type="datetime-local" id="endDateTime-modal" name="endDateTime">
					</div>
				</div>
				<div class="responsive-dashboard-grid">
					<div class="form-group">
						<label for="location-modal">Ort</label> <input type="text"
							id="location-modal" name="location">
					</div>
					<div class="form-group">
						<label for="leaderUserId-modal">Event-Leitung</label> <select
							name="leaderUserId" id="leaderUserId-modal">
							<option value="">(Keine)</option>
							<c:forEach var="user" items="${allUsers}">
								<option value="${user.id}"><c:out
										value="${user.username}" /></option>
							</c:forEach>
						</select>
					</div>
				</div>
				<div class="form-group">
					<label for="description-modal">Beschreibung (Markdown wird
						unterstützt)</label>
					<textarea id="description-modal" name="description" rows="3"></textarea>
				</div>
			</div>

			<!-- Requirements Tab -->
			<div class="modal-tab-content" id="requirements">
				<h4>Personalbedarf</h4>
				<p>Legen Sie fest, welche Qualifikationen für dieses Event
					benötigt werden.</p>
				<div id="modal-requirements-container"></div>
				<button type="button" class="btn btn-small"
					id="modal-add-requirement-btn" style="margin-top: 1rem;">
					<i class="fas fa-plus"></i> Bedarf hinzufügen
				</button>
				<button type="button" class="btn btn-info" id="find-crew-btn"
					style="margin-top: 1rem; margin-left: 1rem;">
					<i class="fas fa-search"></i> Crew finden
				</button>
			</div>

			<!-- Reservations Tab -->
			<div class="modal-tab-content" id="reservations">
				<h4>Materialreservierung</h4>
				<p>Reservieren Sie Material aus dem Lager für dieses Event.</p>
				<div class="form-group">
					<label for="kit-selection-modal">Aus Kit hinzufügen</label> <select
						id="kit-selection-modal">
						<option value="">-- Kit auswählen --</option>
						<c:forEach var="kit" items="${allKits}">
							<option value="${kit.id}"><c:out value="${kit.name}" /></option>
						</c:forEach>
					</select>
				</div>
				<div id="modal-reservations-container"></div>
				<button type="button" class="btn btn-small"
					id="modal-add-reservation-btn" style="margin-top: 1rem;">
					<i class="fas fa-plus"></i> Material hinzufügen
				</button>
			</div>

			<!-- Attachments Tab -->
			<div class="modal-tab-content" id="attachments">
				<h4>Anhänge</h4>
				<ul id="modal-attachments-list" class="details-list"></ul>
				<div class="form-group">
					<label for="attachment-modal">Neuen Anhang hochladen</label> <input
						type="file" name="attachment" id="attachment-modal">
				</div>
				<div class="form-group">
					<label for="requiredRole-modal">Sichtbar für</label> <select
						name="requiredRole" id="requiredRole-modal">
						<option value="NUTZER" selected>Alle Nutzer</option>
						<option value="ADMIN">Nur Admins</option>
					</select>
				</div>
			</div>

			<!-- Custom Fields Tab -->
			<div class="modal-tab-content" id="custom-fields">
				<h4>Zusätzliche Anmeldefelder</h4>
				<p>Fügen Sie benutzerdefinierte Felder hinzu, die bei der
					Anmeldung abgefragt werden (z.B. T-Shirt Größe, Allergien etc.).</p>
				<div id="modal-custom-fields-container"></div>
				<button type="button" class="btn btn-small"
					id="modal-add-custom-field-btn" style="margin-top: 1rem;">
					<i class="fas fa-plus"></i> Feld hinzufügen
				</button>
			</div>

			<div style="margin-top: 1.5rem;">
				<button type="submit" class="btn btn-success">
					<i class="fas fa-save"></i> Event speichern
				</button>
			</div>
		</form>
	</div>
</div>

<!-- User Assignment Modal -->
<div class="modal-overlay" id="assign-users-modal">
	<div class="modal-content" style="max-width: 500px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="assign-users-modal-title">Team zuweisen</h3>
		<form id="assign-users-form"
			action="${pageContext.request.contextPath}/admin/veranstaltungen"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="assignUsers"> <input type="hidden"
				name="eventId" value="">
			<div id="user-checkboxes-container"
				style="max-height: 40vh; overflow-y: auto;">
				<!-- Checkboxes populated by JS -->
			</div>
			<button type="submit" class="btn btn-success"
				style="margin-top: 1rem;">
				<i class="fas fa-users"></i> Team finalisieren
			</button>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\main_footer.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
</main>
</div>
<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>
<script
	src="${pageContext.request.contextPath}/vendor/diff-match-patch/diff_match_patch.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="${pageContext.request.contextPath}/js/main.js"></script>
</body>
</html>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\main_header.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<!DOCTYPE html>
<html lang="de"
	data-theme="${not empty sessionScope.user.theme ? sessionScope.user.theme : 'light'}">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>${param.pageTitle}-TechnikTeam</title>
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet"
	href="${pageContext.request.contextPath}/css/style.css">
<link rel="icon"
	href="${pageContext.request.contextPath}/images/favicon.ico"
	type="image/x-icon">
<script>
	// This script runs immediately to prevent a "flash" of the wrong theme.
	const savedTheme = localStorage.getItem('theme')
			|| document.documentElement.dataset.theme || 'light';
	document.documentElement.setAttribute('data-theme', savedTheme);
</script>
</head>
<body data-context-path="${pageContext.request.contextPath}"
	data-is-logged-in="${not empty sessionScope.user}"
	data-csrf-token="${sessionScope.csrfToken}"
	data-page="${not empty param.page ? param.page : ''}"
	data-all-permissions="${fn:escapeXml(not empty param.permissionsJson ? param.permissionsJson : '[]')}">

	<c:set var="showNav"
		value="${empty param.showNav or param.showNav == 'true'}" />
	<c:if test="${showNav}">
		<c:set var="user" value="${sessionScope.user}" />

		<aside class="sidebar">
			<header class="sidebar-header">
				<a href="${pageContext.request.contextPath}/home" class="logo">
					<i class="fas fa-bolt"></i> TechnikTeam
				</a>
			</header>
			<nav class="sidebar-nav">
				<ul>
					<c:set var="userSectionDrawn" value="false" />
					<c:set var="adminSectionDrawn" value="false" />
					<c:forEach var="navItem" items="${sessionScope.navigationItems}">
						<c:if test="${navItem.requiredPermission == null}">
							<c:if test="${not userSectionDrawn}">
								<li class="nav-section-title">Benutzerbereich</li>
								<c:set var="userSectionDrawn" value="true" />
							</c:if>
							<li><a
								href="${pageContext.request.contextPath}${navItem.url}"
								class="${pageContext.request.requestURI eq (pageContext.request.contextPath.concat(navItem.url)) ? 'active-nav-link' : ''}">
									<i class="fas ${navItem.icon} fa-fw"></i> ${navItem.label}
							</a></li>
						</c:if>
					</c:forEach>

					<c:forEach var="navItem" items="${sessionScope.navigationItems}">
						<c:if test="${not empty navItem.requiredPermission}">
							<c:if test="${not adminSectionDrawn}">
								<li class="nav-section-title">Admin-Bereich</li>
								<c:set var="adminSectionDrawn" value="true" />
							</c:if>
							<li><a
								href="${pageContext.request.contextPath}${navItem.url}"
								class="${pageContext.request.requestURI eq (pageContext.request.contextPath.concat(navItem.url)) ? 'active-nav-link' : ''}">
									<i class="fas ${navItem.icon} fa-fw"></i> ${navItem.label}
							</a></li>
						</c:if>
					</c:forEach>
				</ul>
			</nav>
			<div class="user-actions">
				<div class="theme-switcher desktop-only">
					<i class="fas fa-sun"></i> <label class="switch"> <input
						type="checkbox" id="theme-toggle-desktop"> <span
						class="slider"></span>
					</label> <i class="fas fa-moon"></i>
				</div>
				<hr style="margin: 1rem 0;" class="desktop-only">
				<div class="user-info">
					Angemeldet als: <strong>${user.username}</strong>
				</div>
				<div class="sidebar-controls">
					<a href="${pageContext.request.contextPath}/profil"
						class="btn btn-secondary btn-small" style="flex-grow: 1;">Profil</a>
					<a href="${pageContext.request.contextPath}/logout"
						id="logout-link" class="btn btn-danger-outline btn-small"
						style="flex-grow: 1;">Logout</a>
				</div>
			</div>
		</aside>

		<header class="mobile-header">
			<button class="mobile-nav-toggle" aria-label="Navigation umschalten">
				<span class="line line-1"></span> <span class="line line-2"></span>
				<span class="line line-3"></span>
			</button>
			<a href="${pageContext.request.contextPath}/home" class="mobile-logo">TechnikTeam</a>
			<div class="mobile-header-right">
				<div class="theme-switcher mobile-only">
					<i class="fas fa-sun"></i> <label class="switch"> <input
						type="checkbox" id="theme-toggle"> <span class="slider"></span>
					</label> <i class="fas fa-moon"></i>
				</div>
				<a href="${pageContext.request.contextPath}/profil"><i
					class="fas fa-user-circle" style="font-size: 1.5rem;"></i></a>
			</div>
		</header>
		<div class="page-overlay"></div>
	</c:if>

	<div class="main-content-wrapper">
		<main class="main-content">
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\message_banner.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:if test="${not empty sessionScope.successMessage}">
	<p class="success-message">
		<i class="fas fa-check-circle"></i>
		<c:out value="${sessionScope.successMessage}" />
	</p>
	<c:remove var="successMessage" scope="session" />
</c:if>

<c:if test="${not empty sessionScope.errorMessage}">
	<p class="error-message">
		<i class="fas fa-exclamation-triangle"></i>
		<c:out value="${sessionScope.errorMessage}" />
	</p>
	<c:remove var="errorMessage" scope="session" />
</c:if>

<c:if test="${not empty sessionScope.infoMessage}">
	<p class="info-message">
		<i class="fas fa-info-circle"></i>
		<c:out value="${sessionScope.infoMessage}" />
	</p>
	<c:remove var="infoMessage" scope="session" />
</c:if>

<c:if
	test="${not empty sessionScope.passwordResetUser and not empty sessionScope.passwordResetNewPassword}">
	<p class="password-reset-alert" id="password-reset-alert"
		style="word-wrap: break-word;">
		<i class="fas fa-key"></i> Passwort für '<strong><c:out
				value="${sessionScope.passwordResetUser}" /></strong>' wurde zurückgesetzt
		auf: <strong class="copyable-password"
			title="In Zwischenablage kopieren"><c:out
				value="${sessionScope.passwordResetNewPassword}" /></strong> (wurde in die
		Zwischenablage kopiert).
	</p>
	<c:remove var="passwordResetUser" scope="session" />
	<c:remove var="passwordResetNewPassword" scope="session" />
</c:if>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\storage_modals.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!-- Transaction Modal -->
<div class="modal-overlay" id="transaction-modal">
	<div class="modal-content" style="max-width: 450px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="transaction-modal-title">Aktion</h3>
		<form id="transaction-form"
			action="${pageContext.request.contextPath}/lager/transaktion"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="itemId" id="transaction-item-id">
			<div class="form-group">
				<label for="transaction-quantity">Anzahl</label> <input
					type="number" name="quantity" id="transaction-quantity" value="1"
					min="1" required>
			</div>
			<div class="form-group">
				<label for="transaction-notes">Notiz (optional)</label> <input
					type="text" name="notes" id="transaction-notes"
					placeholder="z.B. für Event XYZ">
			</div>
			<div class="form-group">
				<label for="transaction-eventId">Zuweisen zu Event
					(optional)</label> <select name="eventId" id="transaction-eventId">
					<option value="">Kein Event</option>
					<c:if test="${not empty activeEvents}">
						<c:forEach var="event" items="${activeEvents}">
							<option value="${event.id}">${event.name}</option>
						</c:forEach>
					</c:if>
				</select>
			</div>
			<div
				style="display: flex; justify-content: space-between; gap: 1rem;">
				<button type="submit" name="type" value="checkout"
					class="btn btn-danger" style="flex-grow: 1;">Entnehmen</button>
				<button type="submit" name="type" value="checkin"
					class="btn btn-success" style="flex-grow: 1;">Einräumen</button>
			</div>
		</form>
	</div>
</div>

<!-- Maintenance Modal -->
<div class="modal-overlay" id="maintenance-modal">
	<div class="modal-content" style="max-width: 450px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="maintenance-modal-title">Wartungs-Status</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="updateStatus"> <input type="hidden"
				name="id" id="maintenance-item-id">
			<div class="form-group">
				<label for="maintenance-status">Neuer Status</label> <select
					name="status" id="maintenance-status">
					<option value="IN_STORAGE">Zurück in den Bestand</option>
					<option value="MAINTENANCE">Zur Wartung</option>
				</select>
			</div>
			<div class="form-group">
				<label for="maintenance-notes">Notiz (z.B. was wurde
					gemacht?)</label>
				<textarea name="notes" id="maintenance-notes" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">Speichern</button>
		</form>
	</div>
</div>

<!-- Defect Modal -->
<div class="modal-overlay" id="defect-modal">
	<div class="modal-content" style="max-width: 450px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3>Defekt-Status bearbeiten</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="updateDefect"> <input type="hidden"
				name="id" id="defect-item-id">
			<div class="form-group">
				<label for="defective_quantity">Anzahl defekter Artikel</label> <input
					type="number" name="defective_quantity" id="defective_quantity"
					min="0" required>
			</div>
			<div class="form-group">
				<label for="defect_reason">Grund (optional)</label>
				<textarea name="defect_reason" id="defect_reason" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<!-- Item Create/Edit Modal -->
<div class="modal-overlay" id="item-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3>Lagerartikel</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value=""> <input type="hidden" name="id"
				value="">

			<div class="form-group">
				<label for="name-modal">Name</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="location-modal">Ort</label> <input type="text"
						id="location-modal" name="location">
				</div>
				<div class="form-group">
					<label for="cabinet-modal">Schrank (optional)</label> <input
						type="text" id="cabinet-modal" name="cabinet">
				</div>
				<div class="form-group">
					<label for="compartment-modal">Fach (optional)</label> <input
						type="text" id="compartment-modal" name="compartment">
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="quantity-modal">Menge im Bestand</label> <input
						type="number" id="quantity-modal" name="quantity" min="0" required>
				</div>
				<div class="form-group">
					<label for="maxQuantity-modal">Max. Menge (für Status)</label> <input
						type="number" id="maxQuantity-modal" name="maxQuantity" min="0"
						required>
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="weight_kg-modal">Gewicht (kg)</label> <input
						type="text" id="weight_kg-modal" name="weight_kg"
						placeholder="z.B. 1.25">
				</div>
				<div class="form-group">
					<label for="price_eur-modal">Preis (€)</label> <input type="text"
						id="price_eur-modal" name="price_eur" placeholder="z.B. 49.99">
				</div>
			</div>
			<div class="form-group">
				<label for="imageFile-modal">Bild (optional)</label> <input
					type="file" name="imageFile" id="imageFile-modal" accept="image/*">
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\table_scripts.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- TABLE FILTERING LOGIC ---
    const filterInput = document.getElementById('table-filter');
    if (filterInput) {
        const searchableLists = document.querySelectorAll('.searchable-list');
        const searchableTables = document.querySelectorAll('.searchable-table');

        filterInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            
            searchableLists.forEach(list => {
                const items = list.querySelectorAll('[data-searchable-content]');
                items.forEach(item => {
                    const content = item.dataset.searchableContent.toLowerCase();
                    item.style.display = content.includes(searchTerm) ? '' : 'none';
                });
            });

            searchableTables.forEach(table => {
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const content = row.textContent.toLowerCase();
                    row.style.display = content.includes(searchTerm) ? '' : 'none';
                });
            });
        });
    }

    // --- TABLE SORTING LOGIC ---
    document.querySelectorAll('.sortable-table').forEach(table => {
        const headers = table.querySelectorAll('th.sortable');
        const tbody = table.querySelector('tbody');

        headers.forEach((header, index) => {
            header.addEventListener('click', () => {
                const rows = Array.from(tbody.querySelectorAll('tr'));
                const isAscending = !header.classList.contains('sorted-asc');
                const sortType = header.dataset.sortType || 'string';

                headers.forEach(h => h.classList.remove('sorted-asc', 'sorted-desc'));
                
                header.classList.toggle('sorted-asc', isAscending);
                header.classList.toggle('sorted-desc', !isAscending);

                rows.sort((a, b) => {
                    let valA = a.children[index].dataset.sortValue || a.children[index].textContent.trim();
                    let valB = b.children[index].dataset.sortValue || b.children[index].textContent.trim();
                    
                    if (sortType === 'number') {
                        valA = parseFloat(valA) || 0;
                        valB = parseFloat(valB) || 0;
                    }

                    if (valA < valB) return isAscending ? -1 : 1;
                    if (valA > valB) return isAscending ? 1 : -1;
                    return 0;
                });

                tbody.append(...rows);
            });
        });
    });
});
</script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\task_modal.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<div class="modal-overlay" id="task-modal">
	<div class="modal-content" style="max-width: 800px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="task-modal-title">Aufgabe verwalten</h3>
		<form id="task-modal-form"
			action="${pageContext.request.contextPath}/task-action" method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="save"> <input type="hidden"
				name="eventId" value="${event.id}"> <input type="hidden"
				id="task-id-modal" name="taskId">

			<div class="form-group">
				<label for="task-description-modal">Beschreibung</label> <input
					type="text" id="task-description-modal" name="description" required>
			</div>

			<div class="form-group">
				<label for="task-details-modal">Zusätzliche Details /
					Anleitung (optional)</label>
				<textarea id="task-details-modal" name="details" rows="3"></textarea>
			</div>

			<div class="form-group">
				<label for="task-display-order-modal">Anzeigereihenfolge</label> <input
					type="number" id="task-display-order-modal" name="displayOrder"
					value="10" required>
			</div>

			<div class="form-group" id="task-status-group" style="display: none;">
				<label for="task-status-modal">Status</label> <select
					id="task-status-modal" name="status">
					<option value="OFFEN">Offen</option>
					<option value="IN_ARBEIT">In Arbeit</option>
					<option value="ERLEDIGT">Erledigt</option>
					<option value="BLOCKIERT">Blockiert</option>
				</select>
			</div>

			<div class="card"
				style="margin: 1.5rem 0; background-color: var(--bg-color);">
				<h4 class="card-title">Zuweisung</h4>
				<div style="display: flex; gap: 1rem; margin-bottom: 1rem;">
					<label> <input type="radio" name="assignmentType"
						value="direct" checked> Direkte Zuweisung
					</label> <label> <input type="radio" name="assignmentType"
						value="pool"> Offener Pool
					</label>
				</div>
				<div id="direct-assignment-fields">
					<p>Wählen Sie die Benutzer aus, die dieser Aufgabe direkt
						zugewiesen sind.</p>
					<div id="task-user-checkboxes"
						style="max-height: 150px; overflow-y: auto; border: 1px solid var(--border-color); padding: 0.5rem; border-radius: 6px;">
						<!-- Checkboxes are populated by JS -->
					</div>
				</div>
				<div id="pool-assignment-fields" style="display: none;">
					<div class="form-group">
						<label for="task-required-persons-modal">Benötigte
							Personen</label> <input type="number" id="task-required-persons-modal"
							name="requiredPersons" value="1" min="1">
					</div>
				</div>
			</div>

			<div class="card"
				style="margin: 1.5rem 0; background-color: var(--bg-color);">
				<h4 class="card-title">Material & Kits</h4>
				<div id="task-items-container"></div>
				<button type="button" class="btn btn-small" id="add-task-item-btn">
					<i class="fas fa-plus"></i> Material hinzufügen
				</button>
				<div id="task-kits-container" style="margin-top: 1rem;"></div>
				<button type="button" class="btn btn-small" id="add-task-kit-btn"
					style="margin-top: 0.5rem;">
					<i class="fas fa-plus"></i> Kit hinzufügen
				</button>
			</div>

			<div style="display: flex; justify-content: space-between;">
				<button type="submit" class="btn btn-success">
					<i class="fas fa-save"></i> Aufgabe Speichern
				</button>
				<button type="button" class="btn btn-danger" id="delete-task-btn"
					style="display: none;">
					<i class="fas fa-trash"></i> Aufgabe Löschen
				</button>
			</div>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\user_modals.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<div class="modal-overlay" id="user-modal">
	<div class="modal-content" style="max-width: 800px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="user-modal-title">Benutzer</h3>

		<div class="modal-tabs">
			<button class="modal-tab-button active" data-tab="general-tab">Allgemein</button>
			<button class="modal-tab-button" data-tab="permissions-tab">Berechtigungen</button>
		</div>

		<form id="user-modal-form"
			action="${pageContext.request.contextPath}/admin/mitglieder"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				id="user-modal-action" name="action"> <input type="hidden"
				id="userId-modal" name="userId">

			<div class="modal-tab-content active" id="general-tab">
				<div class="form-group">
					<label for="username-modal">Benutzername</label> <input type="text"
						id="username-modal" name="username" required>
				</div>
				<div class="form-group" id="password-group">
					<label for="password-modal">Passwort (mind. 8 Zeichen)</label> <input
						type="password" id="password-modal" name="password" minlength="8">
				</div>
				<div class="responsive-dashboard-grid">
					<div class="form-group">
						<label for="role-modal">Rolle</label> <select name="roleId"
							id="role-modal" required>
							<c:forEach var="role" items="${allRoles}">
								<option value="${role.id}"><c:out
										value="${role.roleName}" /></option>
							</c:forEach>
						</select>
					</div>
					<div class="form-group">
						<label for="classYear-modal">Jahrgang</label> <input type="number"
							id="classYear-modal" name="classYear" placeholder="z.B. 2023">
					</div>
					<div class="form-group">
						<label for="className-modal">Klasse</label> <input type="text"
							id="className-modal" name="className" placeholder="z.B. 10b">
					</div>
				</div>
				<div class="form-group">
					<label for="email-modal">E-Mail (optional)</label> <input
						type="email" id="email-modal" name="email">
				</div>
			</div>

			<div class="modal-tab-content" id="permissions-tab">
				<h4>Individuelle Berechtigungen</h4>
				<p>Diese Berechtigungen gelten zusätzlich zu denen, die eine
					Rolle evtl. standardmäßig hat. Hier können granulare Rechte
					vergeben werden.</p>
				<div id="permissions-checkbox-container"
					style="max-height: 40vh; overflow-y: auto; padding: 0.5rem; border: 1px solid var(--border-color); border-radius: var(--border-radius);">
					<!-- Checkboxes will be populated by JS -->
				</div>
			</div>

			<button type="submit" class="btn" style="margin-top: 1.5rem;">
				<i class="fas fa-save"></i> Benutzer speichern
			</button>
		</form>
	</div>
</div>
========================================================================
DUMP: technik_team_db.sql
========================================================================
-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Erstellungszeit: 22. Jul 2025 um 21:50
-- Server-Version: 10.4.32-MariaDB
-- PHP-Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Datenbank: `technik_team_db`
--

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `achievements`
--

CREATE TABLE `achievements` (
  `id` int(11) NOT NULL,
  `achievement_key` varchar(50) NOT NULL,
  `name` varchar(100) NOT NULL,
  `description` text DEFAULT NULL,
  `icon_class` varchar(50) DEFAULT 'fa-award'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `achievements`
--

INSERT INTO `achievements` (`id`, `achievement_key`, `name`, `description`, `icon_class`) VALUES
(1, 'EVENT_PARTICIPANT_1', 'Erster Einsatz', 'Am ersten Event teilgenommen.', 'fa-award'),
(2, 'EVENT_PARTICIPANT_5', 'Erfahrener Techniker', 'An 5 Events teilgenommen.', 'fa-star'),
(3, 'EVENT_PARTICIPANT_10', 'Alter Hase', 'An 10 Events teilgenommen.', 'fa-trophy'),
(4, 'EVENT_LEADER_1', 'Teamleiter', 'Das erste Event geleitet.', 'fa-user-tie'),
(5, 'QUALIFICATION_TON', 'Tontechniker', 'Grundlehrgang Tontechnik absolviert.', 'fa-sliders-h'),
(6, 'QUALIFICATION_LICHT', 'Lichttechniker', 'Grundlehrgang Lichttechnik absolviert.', 'fa-lightbulb'),
(7, 'QUALIFICATION_d', 'Der XLR', '', 'fa-award');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `admin_logs`
--

CREATE TABLE `admin_logs` (
  `id` int(11) NOT NULL,
  `admin_username` varchar(50) DEFAULT NULL,
  `action_type` varchar(255) DEFAULT NULL,
  `details` text DEFAULT NULL,
  `action_timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `admin_logs`
--

INSERT INTO `admin_logs` (`id`, `admin_username`, `action_type`, `details`, `action_timestamp`) VALUES
(1, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'s_gross\' (ID: 3) zurückgesetzt.', '2025-06-26 10:22:31'),
(2, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'j_mueller\' (ID: 2) zurückgesetzt.', '2025-06-26 10:35:49'),
(3, 'admin', 'UPDATE_USER', 'Benutzer \'s_gross\' (ID: 3) aktualisiert. Änderungen: Benutzername von \'s_gross\' zu \'lager\', Klasse von \'null\' zu \'\'.', '2025-06-27 07:54:15'),
(4, 'admin', 'UPDATE_USER', 'Benutzer \'j_mueller\' (ID: 2) aktualisiert. Änderungen: Benutzername von \'j_mueller\' zu \'nutzer\', Klasse von \'null\' zu \'\'.', '2025-06-27 07:54:23'),
(5, 'admin', 'CREATE_USER', 'Benutzer \'Paul\' (ID: 4, Rolle: LAGERWART, Klasse: 7 Me) erstellt.', '2025-06-27 12:22:00'),
(6, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Gerüst\' erstellt.', '2025-06-27 12:22:21'),
(7, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Gerüst\' erstellt.', '2025-06-27 12:25:10'),
(8, 'lager', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Gerüst\' aktualisiert.', '2025-06-27 12:27:39'),
(9, 'admin', 'DELETE_STORAGE_ITEM', 'Lagerartikel \'Gerüst\' (ID: 1) gelöscht.', '2025-06-27 12:28:03'),
(10, 'admin', 'DELETE_STORAGE_ITEM', 'Lagerartikel \'Gerüst\' (ID: 2) gelöscht.', '2025-06-27 12:28:05'),
(11, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Test\' erstellt.', '2025-06-27 12:28:31'),
(12, 'admin', 'DELETE_STORAGE_ITEM', 'Lagerartikel \'Test\' (ID: 3) gelöscht.', '2025-06-27 12:28:40'),
(13, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Movingheads\' erstellt.', '2025-06-27 12:29:37'),
(14, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Tri leds\' erstellt.', '2025-06-27 12:33:57'),
(15, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Par 56\' erstellt.', '2025-06-27 12:34:56'),
(16, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Mischpult (alt)\' erstellt.', '2025-06-27 12:44:17'),
(17, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Strand Lighting\' erstellt.', '2025-06-27 12:45:22'),
(18, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'DMX-Dimmer\' erstellt.', '2025-06-27 12:48:02'),
(19, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'DMX Kabel \' erstellt.', '2025-06-27 12:50:24'),
(20, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'traversen\' erstellt.', '2025-06-27 14:08:37'),
(21, 'lager', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'traversen\' aktualisiert.', '2025-06-27 14:09:22'),
(22, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'laser\' erstellt.', '2025-06-27 14:10:33'),
(23, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Led bars\' erstellt.', '2025-06-27 14:11:44'),
(24, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Mikrofonstativ\' erstellt.', '2025-06-27 14:15:42'),
(25, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Par scheinwerfer\' erstellt.', '2025-06-27 14:18:32'),
(26, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'XLR Kabel (normal)\' erstellt.', '2025-06-27 14:20:08'),
(27, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'DMX dimmer\' erstellt.', '2025-06-27 14:20:35'),
(28, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Mehrfachstecker\' erstellt.', '2025-06-27 14:20:45'),
(29, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Farbfolien\' erstellt.', '2025-06-27 14:21:46'),
(30, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Farbfolienhalter\' erstellt.', '2025-06-27 14:23:12'),
(31, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Plugboxen\' erstellt.', '2025-06-27 14:23:49'),
(32, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Große Lampe\' erstellt.', '2025-06-27 14:24:17'),
(33, 'lager', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Plugboxen\' aktualisiert.', '2025-06-27 14:24:45'),
(34, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Mikrofonklemmen\' erstellt.', '2025-06-27 14:26:07'),
(35, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'leuchtmittel\' erstellt.', '2025-06-27 14:26:15'),
(36, 'lager', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'leuchtmittel\' aktualisiert.', '2025-06-27 14:26:33'),
(37, 'lager', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 10 aktualisiert: 2 defekt. Grund: ', '2025-06-27 14:26:41'),
(38, 'lager', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 10 aktualisiert: 0 defekt. Grund: ', '2025-06-27 14:26:49'),
(39, 'lager', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'leuchtmittel\' aktualisiert.', '2025-06-27 14:27:18'),
(40, 'lager', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 24 aktualisiert: 2 defekt. Grund: ', '2025-06-27 14:27:21'),
(41, 'lager', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Lampenstative\' erstellt.', '2025-06-27 14:28:19'),
(42, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Mikrofonhalterung\' erstellt.', '2025-06-27 14:34:39'),
(43, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Mikrofonständer Zubehör \' erstellt.', '2025-06-27 14:43:45'),
(44, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'XLR 1m\' erstellt.', '2025-06-27 14:45:14'),
(45, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Mehrfachstecker\' aktualisiert.', '2025-06-27 14:45:46'),
(46, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Verlängerungskabel\' erstellt.', '2025-06-27 14:46:59'),
(47, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Klinke (groß)\' erstellt.', '2025-06-27 14:48:06'),
(48, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Kat 5e\' erstellt.', '2025-06-27 14:49:27'),
(49, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Tape (schwarz)\' erstellt.', '2025-06-27 14:50:47'),
(50, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Isolierband (mehrfarbig)\' erstellt.', '2025-06-27 14:53:27'),
(51, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Klettband\' erstellt.', '2025-06-27 14:57:54'),
(52, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Lan Kabel\' erstellt.', '2025-06-27 15:00:52'),
(53, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Mikrofonklemmen\' aktualisiert.', '2025-06-27 15:03:17'),
(54, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Kameramikrofon\' erstellt.', '2025-06-27 15:04:02'),
(55, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Shotgun Mikrofon\' erstellt.', '2025-06-27 15:07:01'),
(56, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Oberflächenmikrofon\' erstellt.', '2025-06-27 15:10:52'),
(57, 'lager', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'DMX Kabel \' aktualisiert.', '2025-06-27 15:10:58'),
(58, 'lager', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'DMX Kabel \' aktualisiert.', '2025-06-27 15:11:25'),
(59, 'lager', 'DELETE_STORAGE_ITEM', 'Lagerartikel \'DMX-Dimmer\' (ID: 9) gelöscht.', '2025-06-27 15:11:57'),
(60, 'lager', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'laser\' aktualisiert.', '2025-06-27 15:12:20'),
(61, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Kaltgeräte Kabel\' erstellt.', '2025-06-27 15:15:26'),
(62, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Funkzubehör\' erstellt.', '2025-06-27 15:17:17'),
(63, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Kaltgeräte Kabel (Daisy Chain)\' erstellt.', '2025-06-27 15:18:58'),
(64, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Kennzeichnungsringe (mehrfarbig)\' erstellt.', '2025-06-27 15:20:24'),
(65, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Mikrofonklemmen (groß)\' aktualisiert.', '2025-06-27 15:25:32'),
(66, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Mikrofonklemmen (klein)\' erstellt.', '2025-06-27 15:27:54'),
(67, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Verlängerungskabel\' aktualisiert.', '2025-06-27 15:50:31'),
(68, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'LAN Kabel\' aktualisiert.', '2025-06-27 15:51:06'),
(69, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Kaltgeräte Kabel\' aktualisiert.', '2025-06-27 15:51:34'),
(70, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Klinke (groß)\' aktualisiert.', '2025-06-27 15:52:06'),
(71, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'HDMI Kabel\' erstellt.', '2025-06-27 15:56:53'),
(72, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Kabelmikrofon\' erstellt.', '2025-06-27 15:58:37'),
(73, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Klinke - VGA)\' erstellt.', '2025-06-27 16:00:13'),
(74, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapterkabel (XLR - Klinke (klein))\' erstellt.', '2025-06-27 16:12:12'),
(75, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Adapterkabel (2 XLR - Klinke (klein))\' aktualisiert.', '2025-06-27 16:14:00'),
(76, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapterkabel (Klinke - RCA)\' erstellt.', '2025-06-27 16:18:01'),
(77, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapterkabel (2 Klinke - Klinke (klein))\' erstellt.', '2025-06-27 16:18:48'),
(78, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapterkabel (Klinke (klein) - Klinke)\' erstellt.', '2025-06-27 16:19:34'),
(79, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapterkabel (XLR - Klinke)\' erstellt.', '2025-06-27 16:20:13'),
(80, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Klinke (klein)\' erstellt.', '2025-06-27 16:21:07'),
(81, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'HDMI Kabel\' aktualisiert.', '2025-06-27 16:22:25'),
(82, 'admin', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 46 aktualisiert: 1 defekt. Grund: VGA Anschluss fehlen Pole', '2025-06-27 16:23:00'),
(83, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Klinke (klein) - Chinch)\' erstellt.', '2025-06-27 16:24:05'),
(84, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Kaltgeräte Kabel\' aktualisiert.', '2025-06-27 16:24:44'),
(85, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Klinke (klein) - Klinke (groß))\' erstellt.', '2025-06-27 16:26:11'),
(86, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (XLR (5-polig) - XLR (3-polig))\' erstellt.', '2025-06-27 16:27:29'),
(87, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (XLR - XLR)\' erstellt.', '2025-06-27 16:28:23'),
(88, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Klinke (groß) - Klinke (klein))\' erstellt.', '2025-06-27 16:29:43'),
(89, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Klinke (klein) - Klinke (groß))\' erstellt.', '2025-06-27 16:31:38'),
(90, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'LAN Kabel\' aktualisiert.', '2025-06-27 16:35:15'),
(91, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Mikrofonklemmen (groß)\' aktualisiert.', '2025-06-27 16:57:52'),
(92, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (XLR (3-polig) - XLR (5-polig))\' erstellt.', '2025-06-27 17:00:12'),
(93, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (XLR - Chinch)\' erstellt.', '2025-06-27 17:01:42'),
(94, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Klinke (groß) - 2 Klinke (groß))\' erstellt.', '2025-06-27 17:04:03'),
(95, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Klinke (groß) - Klinke (klein))\' erstellt.', '2025-06-27 17:04:54'),
(96, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Dell Strom)\' erstellt.', '2025-06-27 17:09:57'),
(97, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Verlängerungskabel\' aktualisiert.', '2025-06-27 17:21:15'),
(98, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'BNC Kabel \' erstellt.', '2025-06-28 10:08:14'),
(99, 'Paul', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Klinke (klein) - Klinke (groß))\' aktualisiert.', '2025-06-28 10:08:55'),
(100, 'Paul', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Kaltgeräte Kabel (Daisy Chain)\' aktualisiert.', '2025-06-28 10:09:36'),
(101, 'Paul', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 41 aktualisiert: 1 defekt. Grund: Defekte Buchse ', '2025-06-28 10:10:05'),
(102, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Klinke (klein) - 2x RCA (Male)\' erstellt.', '2025-06-28 10:12:26'),
(103, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Doppel RCA\' erstellt.', '2025-06-28 10:13:24'),
(104, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Dreifach RCA\' erstellt.', '2025-06-28 10:14:05'),
(105, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'RCA\' erstellt.', '2025-06-28 10:14:43'),
(106, 'Paul', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'DMX Kabel \' aktualisiert.', '2025-06-28 10:15:12'),
(107, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Nebelmaschine (klein) \' erstellt.', '2025-06-28 10:17:40'),
(108, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Nebelmaschine (groß)\' erstellt.', '2025-06-28 10:18:30'),
(109, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Boden Nebelmaschine  \' erstellt.', '2025-06-28 10:20:02'),
(110, 'Paul', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Nebelfluid (divers)\' erstellt.', '2025-06-28 10:21:42'),
(111, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Traversenbolzen\' erstellt.', '2025-06-28 10:24:58'),
(112, 'admin', 'UPDATE_USER', 'Benutzer \'admin\' (ID: 1) aktualisiert. Änderungen: Klasse von \'null\' zu \'\', E-Mail geändert.', '2025-06-29 10:40:05'),
(113, 'admin', 'CREATE_COURSE', 'Lehrgangs-Vorlage \'Mit Hunden Tanzen\' (Abk.: MHT) erstellt.', '2025-06-30 16:58:09'),
(114, 'admin', 'CREATE_MEETING', 'Meeting \'MHT\' (ID: 1) für Lehrgang \'Mit Hunden Tanzen\' geplant.', '2025-06-30 16:59:57'),
(115, 'admin', 'ADD_MEETING_ATTACHMENT', 'Anhang \'Screenshot 2025-06-28 at 23-32-56 Berichte & Analysen - TechnikTeam.png\' zu Meeting ID 1 hinzugefügt. Sichtbar für: NUTZER.', '2025-06-30 16:59:57'),
(116, 'admin', 'UPDATE_ATTENDANCE', 'Teilnahme für Nutzer \'admin\' (ID: 1) bei Meeting \'MHT\' (ID: 1) auf \'TEILGENOMMEN\' gesetzt. Bemerkungen: \'Tim hat mit bravo bestanden!\'.', '2025-06-30 17:01:45'),
(117, 'admin', 'UPDATE_ATTENDANCE', 'Teilnahme für Nutzer \'Paul\' (ID: 4) bei Meeting \'MHT\' (ID: 1) auf \'TEILGENOMMEN\' gesetzt. Bemerkungen: \'\'.', '2025-06-30 17:02:23'),
(118, 'admin', 'UPDATE_ATTENDANCE', 'Teilnahme für Nutzer \'admin\' (ID: 1) bei Meeting \'MHT\' (ID: 1) auf \'TEILGENOMMEN\' gesetzt. Bemerkungen: \'\'.', '2025-06-30 17:02:53'),
(119, 'admin', 'UPDATE_ATTENDANCE', 'Teilnahme für Nutzer \'admin\' (ID: 1) bei Meeting \'MHT\' (ID: 1) auf \'TEILGENOMMEN\' gesetzt. Bemerkungen: \'\'.', '2025-06-30 17:04:49'),
(120, 'admin', 'DELETE_COURSE', 'Lehrgangs-Vorlage \'Mit Hunden Tanzen\' (ID: 1) und alle zugehörigen Meetings, Anhänge und Qualifikationen gelöscht.', '2025-07-01 19:42:44'),
(121, 'admin', 'CREATE_FILE_CATEGORY', 'Dateikategorie \'Test\' erstellt.', '2025-07-03 21:57:00'),
(122, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-03 21:57:15'),
(123, 'admin', 'CREATE_EVENT', 'Event \'Test\' (ID: 1) erstellt.', '2025-07-04 17:08:38'),
(124, 'admin', 'UPDATE_EVENT_STATUS', 'Status für Event \'Test\' (ID: 1) von \'GEPLANT\' auf \'LAUFEND\' geändert.', '2025-07-04 17:09:08'),
(125, 'admin', 'ASSIGN_TEAM', 'Team für Event \'Test\' (ID: 1) finalisiert. 1 Benutzer zugewiesen.', '2025-07-04 17:52:56'),
(126, 'admin', 'DELETE_CHAT_MESSAGE', 'Admin \'admin\' deleted chat message (ID: 8) in event chat (ID: 1).', '2025-07-04 20:08:37'),
(127, 'admin', 'CREATE_KIT', 'Kit \'Test\' (ID: 1) erstellt.', '2025-07-04 20:15:47'),
(128, 'admin', 'ADD_ITEM_TO_KIT', '1x Item ID 56 zu Kit ID 1 hinzugefügt.', '2025-07-04 20:15:53'),
(129, 'admin', 'ADD_ITEM_TO_KIT', '1x Item ID 56 zu Kit ID 1 hinzugefügt.', '2025-07-04 20:16:00'),
(130, 'admin', 'DELETE_CHAT_MESSAGE', 'Admin \'admin\' deleted chat message (ID: 53) in event chat (ID: 1).', '2025-07-04 20:35:23'),
(131, 'admin', 'DELETE_CHAT_MESSAGE', 'Admin \'admin\' deleted chat message (ID: 56) in event chat (ID: 1).', '2025-07-04 20:36:44'),
(132, 'admin', 'DELETE_CHAT_MESSAGE', 'Admin \'admin\' deleted chat message (ID: 60) in event chat (ID: 1).', '2025-07-05 07:16:51'),
(133, 'admin', 'DELETE_CHAT_MESSAGE', 'Admin \'admin\' deleted chat message (ID: 70) in event chat (ID: 1).', '2025-07-05 07:50:19'),
(134, 'admin', 'DELETE_CHAT_MESSAGE', 'Admin \'admin\' deleted chat message (ID: 71) in event chat (ID: 1).', '2025-07-05 07:50:27'),
(135, 'admin', 'DELETE_CHAT_MESSAGE', 'Admin \'admin\' deleted chat message (ID: 74) in event chat (ID: 1).', '2025-07-05 08:19:56'),
(136, 'admin', 'DELETE_USER', 'Benutzer \'lager\' (ID: 3, Rolle: LAGERWART) wurde gelöscht.', '2025-07-05 12:37:48'),
(137, 'admin', 'ADD_ITEM_TO_KIT', '1x Item ID 56 zu Kit ID 1 hinzugefügt.', '2025-07-05 12:51:56'),
(138, 'admin', 'UPDATE_KIT', 'Kit \'Test\' (ID: 1) aktualisiert.', '2025-07-05 12:52:11'),
(139, 'admin', 'ADD_ITEM_TO_KIT', '1x Item ID 45 zu Kit ID 1 hinzugefügt.', '2025-07-05 12:52:24'),
(140, 'admin', 'ADD_ITEM_TO_KIT', '1x Item ID 36 zu Kit ID 1 hinzugefügt.', '2025-07-05 12:56:36'),
(141, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-05 13:02:34'),
(142, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-05 13:11:06'),
(143, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-05 13:11:18'),
(144, 'admin', 'UPDATE_KIT', 'Kit \'Test\' (ID: 1) aktualisiert.', '2025-07-05 13:21:00'),
(145, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-05 13:25:29'),
(146, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'Test\' erstellt.', '2025-07-05 13:49:08'),
(147, 'admin', 'STORAGE_TRANSACTION', '1 x \'Test\' (ID: 74) entnommen. Notiz: ', '2025-07-05 13:53:13'),
(148, 'admin', 'STORAGE_TRANSACTION', '1 x \'Test\' (ID: 74) eingeräumt. Notiz: ', '2025-07-05 13:53:23'),
(149, 'admin', 'STORAGE_TRANSACTION', '1 x \'Test\' (ID: 74) eingeräumt. Notiz: ', '2025-07-05 13:57:07'),
(150, 'admin', 'STORAGE_TRANSACTION', '2 x \'Test\' (ID: 74) entnommen. Notiz: Für Event: Test', '2025-07-05 13:57:37'),
(151, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Test\' aktualisiert.', '2025-07-05 14:08:52'),
(152, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX dimmer\' (ID: 17) entnommen. Notiz: Für Event: Test', '2025-07-05 14:09:45'),
(153, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX dimmer\' (ID: 17) eingeräumt. Notiz: ', '2025-07-05 14:13:30'),
(154, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX dimmer\' (ID: 17) eingeräumt. Notiz: ', '2025-07-05 14:13:36'),
(155, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Test\' aktualisiert.', '2025-07-05 14:15:37'),
(156, 'admin', 'STORAGE_TRANSACTION', '1 x \'Test\' (ID: 74) entnommen. Notiz: Für Event: Test', '2025-07-05 14:15:49'),
(157, 'admin', 'STORAGE_TRANSACTION', '1 x \'Test\' (ID: 74) eingeräumt. Notiz: ', '2025-07-05 14:15:56'),
(158, 'admin', 'STORAGE_TRANSACTION', '1 x \'Test\' (ID: 74) entnommen. Notiz: Für Event: Test', '2025-07-05 14:16:03'),
(159, 'admin', 'STORAGE_TRANSACTION', '1 x \'Test\' (ID: 74) entnommen. Notiz: Für Event: Test', '2025-07-05 14:16:07'),
(160, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Test\' aktualisiert.', '2025-07-05 14:21:29'),
(161, 'admin', 'STORAGE_TRANSACTION', '2 x \'Test\' (ID: 74) entnommen. Notiz: Für Event: Test', '2025-07-05 14:21:39'),
(162, 'admin', 'STORAGE_TRANSACTION', '2 x \'Test\' (ID: 74) eingeräumt. Notiz: ', '2025-07-05 14:25:05'),
(163, 'admin', 'STORAGE_TRANSACTION', '2 x \'Test\' (ID: 74) entnommen. Notiz: ', '2025-07-05 14:25:20'),
(164, 'admin', 'STORAGE_TRANSACTION', '2 x \'Test\' (ID: 74) eingeräumt. Notiz: ', '2025-07-05 14:25:37'),
(165, 'admin', 'CREATE_TASK', 'Aufgabe \'Test\' (ID: 1) für Event-ID 1 erstellt.', '2025-07-05 16:49:05'),
(166, 'admin', 'CREATE_TASK', 'Aufgabe \'Test1\' (ID: 2) für Event-ID 1 erstellt.', '2025-07-05 16:50:21'),
(167, 'admin', 'CREATE_TASK', 'Aufgabe \'Test\' (ID: 3) für Event-ID 1 erstellt.', '2025-07-06 19:31:07'),
(168, 'admin', 'UPDATE_USER', 'Benutzer \'admin\' (ID: 1) aktualisiert. Änderungen: E-Mail geändert.', '2025-07-06 19:32:59'),
(169, 'admin', 'DELETE_TASK', 'Aufgabe mit ID 1 gelöscht.', '2025-07-06 19:48:19'),
(170, 'admin', 'UPDATE_TASK', 'Aufgabe \'Test\' (ID: 3) für Event-ID 1 aktualisiert.', '2025-07-06 19:52:42'),
(171, 'admin', 'UPDATE_TASK', 'Aufgabe \'Test\' (ID: 3) für Event-ID 1 aktualisiert.', '2025-07-06 20:00:45'),
(172, 'admin', 'CREATE_TASK', 'Aufgabe \'Test\' (ID: 4) für Event-ID 1 erstellt.', '2025-07-06 20:32:42'),
(173, 'admin', 'UPDATE_TASK', 'Aufgabe \'Test\' (ID: 4) für Event-ID 1 aktualisiert.', '2025-07-06 20:32:48'),
(174, 'admin', 'DELETE_TASK', 'Aufgabe mit ID 4 gelöscht.', '2025-07-06 20:32:53'),
(175, 'admin', 'DELETE_STORAGE_ITEM', 'Lagerartikel \'Test\' (ID: 74) gelöscht.', '2025-07-06 21:02:54'),
(176, 'admin', 'DELETE_TASK', 'Aufgabe mit ID 2 gelöscht.', '2025-07-06 22:24:31'),
(177, 'admin', 'UPDATE_USER', 'Benutzer \'admin\' (ID: 1) aktualisiert.', '2025-07-08 13:52:18'),
(178, 'admin', 'UPDATE_TASK', 'Aufgabe \'Test\' (ID: 3) für Event-ID 1 aktualisiert.', '2025-07-08 14:14:33'),
(179, 'admin', 'DELETE_TASK', 'Aufgabe mit ID 3 gelöscht.', '2025-07-08 14:14:59'),
(180, 'admin', 'UPDATE_USER', 'Benutzer \'admin\' (ID: 1) aktualisiert.', '2025-07-08 14:34:05'),
(181, 'admin', 'DELETE_USER', 'Benutzer \'nutzer\' (ID: 2, Rolle: NUTZER) wurde gelöscht.', '2025-07-08 14:34:36'),
(182, 'admin', 'DELETE_USER', 'Benutzer \'Paul\' (ID: 4, Rolle: NUTZER) wurde gelöscht.', '2025-07-08 14:34:37'),
(183, 'admin', 'CREATE_USER', 'Benutzer \'Tim\' (ID: 6, Rolle-ID: 3, Klasse: 11 3) erstellt und Berechtigungen zugewiesen.', '2025-07-08 14:37:08'),
(184, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Tim\' (ID: 6) zurückgesetzt.', '2025-07-08 15:29:46'),
(185, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 1) aus Kategorie \'Test\' gelöscht.', '2025-07-08 15:34:00'),
(186, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-08 15:37:06'),
(187, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 2) aus Kategorie \'Test\' gelöscht.', '2025-07-08 15:39:27'),
(188, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-08 15:39:34'),
(189, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 3) aus Kategorie \'Test\' gelöscht.', '2025-07-08 15:40:36'),
(190, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: NUTZER.', '2025-07-08 15:45:15'),
(191, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-08 15:45:23'),
(192, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-08 15:47:00'),
(193, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 6) aus Kategorie \'Test\' gelöscht.', '2025-07-08 15:49:20'),
(194, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-08 15:49:29'),
(195, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 7) aus Kategorie \'Test\' gelöscht.', '2025-07-08 16:09:39'),
(196, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-08 16:09:53'),
(197, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 8) aus Kategorie \'Test\' gelöscht.', '2025-07-08 16:10:00'),
(198, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-08 16:14:16'),
(199, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 9) aus Kategorie \'Test\' gelöscht.', '2025-07-08 16:14:20'),
(200, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: NUTZER.', '2025-07-08 16:33:08'),
(201, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 10) aus Kategorie \'Test\' gelöscht.', '2025-07-08 16:33:12'),
(202, 'admin', 'CREATE_TASK', 'Aufgabe \'Test\' (ID: 5) für Event-ID 1 erstellt.', '2025-07-08 22:40:34'),
(203, 'admin', 'UPDATE_TASK', 'Aufgabe \'Test\' (ID: 5) für Event-ID 1 aktualisiert.', '2025-07-09 09:22:56'),
(204, 'admin', 'UPDATE_TASK', 'Aufgabe \'Test\' (ID: 5) für Event-ID 1 aktualisiert.', '2025-07-09 09:23:09'),
(205, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Tim\' (ID: 6) zurückgesetzt.', '2025-07-09 09:24:32'),
(206, 'admin', 'UPDATE_EVENT', 'Event \'Test\' (ID: 1) aktualisiert.', '2025-07-09 09:24:52'),
(207, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-09 09:25:14'),
(208, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Tim\' (ID: 6) zurückgesetzt.', '2025-07-09 10:19:22'),
(209, 'admin', 'CREATE_TASK', 'Aufgabe \'dsvf\' (ID: 6) für Event \'Test\' (ID: 1) erstellt.', '2025-07-09 10:21:45'),
(210, 'admin', 'UPDATE_TASK', 'Aufgabe \'dsvf\' (ID: 6) für Event \'Test\' (ID: 1) aktualisiert.', '2025-07-09 10:22:27'),
(211, 'admin', 'UPDATE_TASK', 'Aufgabe \'dsvf\' (ID: 6) für Event \'Test\' (ID: 1) aktualisiert.', '2025-07-09 10:23:12'),
(212, 'admin', 'STORAGE_TRANSACTION', '8 x \'DMX dimmer\' (ID: 17) eingeräumt. Notiz: ', '2025-07-09 10:24:38'),
(213, 'admin', 'STORAGE_TRANSACTION', '8 x \'DMX dimmer\' (ID: 17) eingeräumt. Notiz: ', '2025-07-09 10:25:04'),
(214, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX dimmer\' (ID: 17) entnommen. Notiz: ', '2025-07-09 10:25:23'),
(215, 'admin', 'STORAGE_TRANSACTION', '21 x \'DMX dimmer\' (ID: 17) entnommen. Notiz: ', '2025-07-09 10:25:41'),
(216, 'admin', 'STORAGE_TRANSACTION', '8 x \'Plugboxen\' (ID: 21) eingeräumt. Notiz: ', '2025-07-09 10:26:40'),
(217, 'admin', 'CREATE_COURSE', 'Lehrgangs-Vorlage \'XLR\' (Abk.: d) erstellt.', '2025-07-09 10:29:53'),
(218, 'admin', 'CREATE_MEETING', 'Meeting \'XLR\' (ID: 2) für Lehrgang \'XLR\' geplant.', '2025-07-09 10:30:29'),
(219, 'admin', 'DELETE_MEETING', 'Meeting \'XLR\' (ID: 2) vom Lehrgang \'XLR\' (Kurs-ID: 2) wurde gelöscht.', '2025-07-09 10:31:29'),
(220, 'admin', 'CREATE_MEETING', 'Meeting \'d\' (ID: 3) für Lehrgang \'XLR\' geplant.', '2025-07-09 10:31:53'),
(221, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Dell Strom)\' aktualisiert.', '2025-07-09 10:32:18'),
(222, 'admin', 'UPDATE_STORAGE_ITEM', 'Lagerartikel \'Adapter (Dell Strom)\' aktualisiert.', '2025-07-09 10:32:32'),
(223, 'admin', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 63 aktualisiert: 1 defekt. Grund: ', '2025-07-09 10:32:41'),
(224, 'admin', 'UPDATE_ITEM_STATUS', 'Status für Artikel-ID 63 auf \'MAINTENANCE\' gesetzt. Notiz: ', '2025-07-09 10:32:52'),
(225, 'admin', 'UPDATE_ITEM_STATUS', 'Status für Artikel-ID 63 auf \'IN_STORAGE\' gesetzt. Notiz: ', '2025-07-09 10:32:58'),
(226, 'admin', 'CREATE_STORAGE_ITEM', 'Lagerartikel \'besen\' erstellt.', '2025-07-09 10:33:54'),
(227, 'admin', 'DELETE_STORAGE_ITEM', 'Lagerartikel \'besen\' (ID: 75) gelöscht.', '2025-07-09 10:34:17'),
(228, 'admin', 'ASSIGN_TEAM', 'Team für Event \'Test\' (ID: 1) finalisiert. 1 Benutzer zugewiesen.', '2025-07-09 10:34:32'),
(229, 'admin', 'UPDATE_EVENT', 'Event \'Test\' (ID: 1) aktualisiert.', '2025-07-09 10:34:58'),
(230, 'admin', 'UPDATE_EVENT_STATUS', 'Status für Event \'Test\' (ID: 1) von \'LAUFEND\' auf \'ABGESCHLOSSEN\' geändert.', '2025-07-09 10:35:03'),
(231, 'admin', 'UPDATE_EVENT', 'Event \'Test\' (ID: 1) aktualisiert.', '2025-07-09 10:35:26'),
(232, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Tim\' (ID: 6) zurückgesetzt.', '2025-07-09 10:37:04'),
(233, 'admin', 'CREATE_EVENT', 'Event \'Tetris\' (ID: 2) erstellt.', '2025-07-09 10:38:06'),
(234, 'admin', 'ASSIGN_TEAM', 'Team für Event \'Tetris\' (ID: 2) finalisiert. 0 Benutzer zugewiesen.', '2025-07-09 10:38:12'),
(235, 'admin', 'UPDATE_EVENT_STATUS', 'Status für Event \'Tetris\' (ID: 2) von \'GEPLANT\' auf \'LAUFEND\' geändert.', '2025-07-09 10:38:20'),
(236, 'admin', 'CREATE_TASK', 'Aufgabe \'dvf\' (ID: 7) für Event \'Tetris\' (ID: 2) erstellt.', '2025-07-09 10:38:52'),
(237, 'admin', 'CREATE_FILE_CATEGORY', 'Dateikategorie \'A\' erstellt.', '2025-07-09 10:39:58'),
(238, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'A\' hochgeladen. Sichtbar für: NUTZER.', '2025-07-09 10:40:24'),
(239, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 11) aus Kategorie \'Test\' gelöscht.', '2025-07-09 10:40:35'),
(240, 'admin', 'CREATE_KIT', 'Kit \'5 Hunde Tranzen\' (ID: 2) erstellt.', '2025-07-09 10:41:22'),
(241, 'admin', 'UPDATE_KIT', 'Kit \'Test\' (ID: 1) aktualisiert.', '2025-07-09 10:41:32'),
(242, 'admin', 'UPDATE_KIT', 'Kit \'Test\' (ID: 1) aktualisiert.', '2025-07-09 10:41:35'),
(243, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-09 10:41:45'),
(244, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-09 10:41:53'),
(245, 'admin', 'UPDATE_ATTENDANCE', 'Teilnahme für Nutzer \'admin\' (ID: 1) bei Meeting \'d\' (ID: 3) auf \'TEILGENOMMEN\' gesetzt. Bemerkungen: \'\'.', '2025-07-09 10:43:00'),
(246, 'admin', 'DELETE_USER', 'Benutzer \'Tim\' (ID: 6, Rolle: NUTZER) wurde gelöscht.', '2025-07-09 10:46:44'),
(247, 'admin', 'DELETE_TASK', 'Aufgabe \'null\' (ID: 7) von Event \'Tetris\' gelöscht.', '2025-07-09 11:50:01'),
(248, 'admin', 'STORAGE_TRANSACTION', '6 x \'DMX dimmer\' (ID: 17) eingeräumt. Notiz: ', '2025-07-09 11:53:36'),
(249, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX dimmer\' (ID: 17) eingeräumt. Notiz: ', '2025-07-09 11:53:43'),
(250, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX dimmer\' (ID: 17) entnommen. Notiz: ', '2025-07-09 11:53:45'),
(251, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: NUTZER.', '2025-07-09 11:54:42'),
(252, 'admin', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 24 aktualisiert: 3 defekt. Grund: ', '2025-07-09 11:55:49'),
(253, 'admin', 'UPDATE_MEETING', 'Meeting \'d\' (ID: 3) für Lehrgang \'XLR\' aktualisiert.', '2025-07-09 11:56:13'),
(254, 'admin', 'ADD_MEETING_ATTACHMENT', 'Anhang \'DatabaseManager.java\' zu Meeting ID 3 hinzugefügt. Sichtbar für: NUTZER.', '2025-07-09 11:56:14'),
(255, 'admin', 'DELETE_MEETING', 'Meeting \'d\' (ID: 3) vom Lehrgang \'XLR\' (Kurs-ID: 2) wurde gelöscht.', '2025-07-09 11:56:16'),
(256, 'admin', 'UPDATE_ITEM_STATUS', 'Status für Artikel-ID 63 auf \'IN_STORAGE\' gesetzt. Notiz: ', '2025-07-09 11:56:38'),
(257, 'admin', 'UPDATE_ITEM_STATUS', 'Status für Artikel-ID 63 auf \'IN_STORAGE\' gesetzt. Notiz: ', '2025-07-09 11:56:45'),
(258, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX dimmer\' (ID: 17) entnommen. Notiz: ', '2025-07-09 12:23:05'),
(259, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX dimmer\' (ID: 17) eingeräumt. Notiz: ', '2025-07-09 12:23:13'),
(260, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX Kabel \' (ID: 10) entnommen. Notiz: ', '2025-07-09 12:24:04'),
(261, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX Kabel \' (ID: 10) eingeräumt. Notiz: ', '2025-07-09 12:24:28'),
(262, 'admin', 'STORAGE_TRANSACTION', '1 x \'DMX Kabel \' (ID: 10) entnommen. Notiz: ', '2025-07-09 12:24:53'),
(263, 'admin', 'STORAGE_TRANSACTION', '11 x \'DMX Kabel \' (ID: 10) entnommen. Notiz: Für Event: Tetris', '2025-07-09 12:30:44'),
(264, 'admin', 'STORAGE_TRANSACTION', '12 x \'DMX Kabel \' (ID: 10) eingeräumt. Notiz: ', '2025-07-09 12:30:55'),
(265, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-09 12:31:16'),
(266, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 12) aus Kategorie \'A\' gelöscht.', '2025-07-09 12:31:19'),
(267, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 14) aus Kategorie \'Test\' gelöscht.', '2025-07-09 12:31:20'),
(268, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 13) aus Kategorie \'Test\' gelöscht.', '2025-07-09 12:31:23'),
(269, 'admin', 'UPDATE_ITEM_STATUS', 'Status für Artikel-ID 63 auf \'IN_STORAGE\' gesetzt. Notiz: ', '2025-07-09 12:38:41'),
(270, 'admin', 'UPDATE_ITEM_STATUS', 'Status für Artikel-ID 63 auf \'MAINTENANCE\' gesetzt. Notiz: ', '2025-07-09 12:38:50'),
(271, 'admin', 'UPDATE_ITEM_STATUS', 'Status für Artikel-ID 63 auf \'IN_STORAGE\' gesetzt. Notiz: ', '2025-07-09 12:38:53'),
(272, 'admin', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 63 aktualisiert: 0 defekt. Grund: ', '2025-07-09 12:39:02'),
(273, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-09 12:39:50'),
(274, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: ADMIN.', '2025-07-09 12:44:06'),
(275, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 16) aus Kategorie \'Test\' gelöscht.', '2025-07-09 12:44:09'),
(276, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 15) aus Kategorie \'Test\' gelöscht.', '2025-07-09 12:44:10'),
(277, 'admin', 'FILE_UPLOAD', 'Datei \'DatabaseManager.java\' in Kategorie \'A\' hochgeladen. Sichtbar für: NUTZER.', '2025-07-09 12:44:19'),
(278, 'admin', 'FILE_DELETE', 'Datei \'DatabaseManager.java\' (ID: 17) aus Kategorie \'A\' gelöscht.', '2025-07-09 12:44:22'),
(279, 'admin', 'FILE_UPLOAD', 'Datei \'Anleitung.txt\' in Kategorie \'Test\' hochgeladen. Sichtbar für: NUTZER.', '2025-07-09 12:49:43'),
(280, 'admin', 'CREATE_USER', 'Benutzer \'Tim\' (ID: 7, Rolle-ID: 3, Klasse: 0 ) erstellt und Berechtigungen zugewiesen.', '2025-07-09 13:14:43'),
(281, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Tim\' (ID: 7) zurückgesetzt.', '2025-07-09 13:14:48'),
(282, 'admin', 'DELETE_USER', 'Benutzer \'Tim\' (ID: 7, Rolle: NUTZER) wurde gelöscht.', '2025-07-09 13:14:50'),
(283, 'admin', 'DELETE_KIT', 'Kit \'5 Hunde Tranzen\' (ID: 2) gelöscht.', '2025-07-09 13:31:30'),
(284, 'admin', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 24 aktualisiert: 2 defekt. Grund: ', '2025-07-09 13:31:44'),
(285, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-09 13:47:41'),
(286, 'admin', 'CREATE_TASK', 'Aufgabe \'Tets\' (ID: 8) für Event \'Tetris\' (ID: 2) erstellt.', '2025-07-09 14:05:31'),
(287, 'admin', 'UPDATE_EVENT_STATUS', 'Status für Event \'Tetris\' (ID: 2) von \'LAUFEND\' auf \'ABGESCHLOSSEN\' geändert.', '2025-07-09 15:32:58'),
(288, 'admin', 'UPDATE_EVENT', 'Event \'Tetris\' (ID: 2) aktualisiert.', '2025-07-09 15:33:37'),
(289, 'admin', 'UPDATE_EVENT', 'Event \'Tetris\' (ID: 2) aktualisiert.', '2025-07-09 15:34:03'),
(290, 'admin', 'UPDATE_EVENT', 'Event \'Tetris\' (ID: 2) aktualisiert.', '2025-07-09 16:18:20'),
(291, 'admin', 'UPDATE_EVENT', 'Event \'Tetris\' (ID: 2) aktualisiert.', '2025-07-09 16:18:31'),
(292, 'admin', 'CREATE_EVENT', 'Event \'ff\' (ID: 3) erstellt.', '2025-07-09 16:19:28'),
(293, 'admin', 'UPDATE_EVENT_STATUS', 'Status für Event \'ff\' (ID: 3) von \'GEPLANT\' auf \'LAUFEND\' geändert.', '2025-07-09 16:19:39'),
(294, 'admin', 'INVITE_CREW', 'Einladungen für Event \'ff\' an 1 Benutzer gesendet.', '2025-07-09 16:23:53'),
(295, 'admin', 'STORAGE_TRANSACTION', '6 x \'DMX dimmer\' (ID: 17) entnommen. Notiz: ', '2025-07-09 16:24:33'),
(296, 'admin', 'STORAGE_TRANSACTION', '6 x \'DMX dimmer\' (ID: 17) eingeräumt. Notiz: L', '2025-07-09 16:24:51'),
(297, 'admin', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 24 aktualisiert: 15 defekt. Grund: ', '2025-07-09 16:25:53'),
(298, 'admin', 'UPDATE_DEFECT_STATUS', 'Defekt-Status für Artikel-ID 24 aktualisiert: 0 defekt. Grund: ', '2025-07-09 16:26:12'),
(299, 'admin', 'UPDATE_USER', 'Benutzer \'admin\' (ID: 1) aktualisiert.', '2025-07-09 16:29:08'),
(300, 'admin', 'UPDATE_USER', 'Benutzer \'admin\' (ID: 1) aktualisiert.', '2025-07-09 16:29:38'),
(301, 'admin', 'CREATE_USER', 'Benutzer \'Hund\' (ID: 8, Rolle-ID: 1, Klasse: 0 ) erstellt und Berechtigungen zugewiesen.', '2025-07-09 16:29:59'),
(302, 'admin', 'UPDATE_EVENT', 'Event \'ff\' (ID: 3) aktualisiert.', '2025-07-09 16:30:32'),
(303, 'admin', 'CREATE_MEETING', 'Meeting \'Test\' (ID: 4) für Lehrgang \'XLR\' geplant.', '2025-07-09 16:32:50'),
(304, 'admin', 'UPDATE_COURSE', 'Lehrgangs-Vorlage \'XLR\' (ID: 2) aktualisiert. ', '2025-07-09 16:33:23'),
(305, 'admin', 'CREATE_KIT', 'Kit \'Das Kit\' (ID: 3) erstellt.', '2025-07-09 16:33:45'),
(306, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 3 aktualisiert.', '2025-07-09 16:33:56'),
(307, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 3 aktualisiert.', '2025-07-09 16:34:26'),
(308, 'admin', 'UPDATE_ACHIEVEMENT', 'Erfolg \'Tontechniker\' (ID: 5) aktualisiert.', '2025-07-09 16:34:50'),
(309, 'admin', 'CREATE_ACHIEVEMENT', 'Erfolg \'Der XLR\' erstellt.', '2025-07-09 16:35:33'),
(310, 'admin', 'UPDATE_MEETING', 'Meeting \'Test\' (ID: 4) für Lehrgang \'XLR\' aktualisiert.', '2025-07-09 16:37:19'),
(311, 'admin', 'UPDATE_ATTENDANCE', 'Teilnahme für Nutzer \'admin\' (ID: 1) bei Meeting \'Test\' (ID: 4) auf \'TEILGENOMMEN\' gesetzt. Bemerkungen: \'\'.', '2025-07-09 16:37:47'),
(312, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Hund\' (ID: 8) zurückgesetzt.', '2025-07-09 16:46:04'),
(313, 'admin', 'BATCH_GRANT_QUALIFICATION', 'Batch-Qualifikation für \'XLR\' an 1 Benutzer vergeben (min. 1 Meetings).', '2025-07-09 17:05:49'),
(314, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Hund\' (ID: 8) zurückgesetzt.', '2025-07-09 17:27:08'),
(315, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-09 17:49:04'),
(316, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-09 17:49:09'),
(317, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Hund\' (ID: 8) zurückgesetzt.', '2025-07-09 17:51:46'),
(318, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-09 18:09:03'),
(319, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-09 18:09:14'),
(320, 'admin', 'UPDATE_KIT_ITEMS', 'Inhalt für Kit ID 1 aktualisiert.', '2025-07-09 18:09:21'),
(321, 'admin', 'FILE_UPLOAD', 'Datei \'calendar.txt\' in Kategorie \'A\' hochgeladen. Sichtbar für: NUTZER.', '2025-07-10 18:00:01'),
(322, 'admin', 'FILE_DELETE', 'Datei \'Anleitung.txt\' (ID: 18) aus Kategorie \'Test\' gelöscht.', '2025-07-10 18:45:41'),
(323, 'admin', 'FILE_UPLOAD', 'Datei \'calendar.txt\' hochgeladen.', '2025-07-10 18:45:55'),
(324, 'admin', 'FILE_UPLOAD', 'Datei \'re.odt\' hochgeladen.', '2025-07-10 20:16:11'),
(325, 'admin', 'FILE_UPLOAD', 'Datei \'README.md\' hochgeladen.', '2025-07-22 15:11:38'),
(326, 'admin', 'FILE_UPLOAD', 'Datei \'README.markdown\' hochgeladen.', '2025-07-22 17:03:10'),
(327, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Hund\' (ID: 8) zurückgesetzt.', '2025-07-22 17:03:31'),
(328, 'admin', 'UPDATE_USER', 'Benutzer \'Hund\' (ID: 8) aktualisiert.', '2025-07-22 17:08:16'),
(329, 'admin', 'RESET_PASSWORD', 'Passwort für Benutzer \'Hund\' (ID: 8) zurückgesetzt.', '2025-07-22 17:13:35'),
(330, 'Hund', 'UPDATE_MARKDOWN_FILE', 'Inhalt der Datei \'README.md\' (ID: 22) aktualisiert.', '2025-07-22 17:31:28');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `attachments`
--

CREATE TABLE `attachments` (
  `id` int(11) NOT NULL,
  `parent_type` enum('EVENT','MEETING') NOT NULL,
  `parent_id` int(11) NOT NULL,
  `filename` varchar(255) NOT NULL,
  `filepath` varchar(255) NOT NULL,
  `required_role` enum('NUTZER','ADMIN') NOT NULL DEFAULT 'NUTZER',
  `uploaded_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `courses`
--

CREATE TABLE `courses` (
  `id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `abbreviation` varchar(20) DEFAULT NULL,
  `description` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `courses`
--

INSERT INTO `courses` (`id`, `name`, `abbreviation`, `description`) VALUES
(2, 'XLR', 'd', '');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `course_attendance`
--

CREATE TABLE `course_attendance` (
  `user_id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `signup_status` enum('ANGEMELDET','ABGEMELDET') NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `events`
--

CREATE TABLE `events` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `event_datetime` datetime NOT NULL,
  `end_datetime` datetime DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL,
  `status` enum('GEPLANT','KOMPLETT','LAUFEND','ABGESCHLOSSEN','ABGESAGT') NOT NULL DEFAULT 'GEPLANT',
  `leader_user_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `events`
--

INSERT INTO `events` (`id`, `name`, `event_datetime`, `end_datetime`, `description`, `location`, `status`, `leader_user_id`) VALUES
(1, 'Test', '2025-07-11 12:00:00', '2025-07-11 13:30:00', 'Dies ist ein Event, dass in der Aula stattfindet. Wenn möglich trefft schon 5min vorher ein. ', 'Aula', 'ABGESCHLOSSEN', 1),
(2, 'Tetris', '2025-07-19 18:00:00', NULL, '# Markdown syntax guide\r\n\r\n## Headers\r\n\r\n# This is a Heading h1\r\n## This is a Heading h2\r\n###### This is a Heading h6\r\n\r\n## Emphasis\r\n\r\n*This text will be italic*  \r\n_This will also be italic_\r\n\r\n**This text will be bold**  \r\n__This will also be bold__\r\n\r\n_You **can** combine them_\r\n\r\n## Lists\r\n\r\n### Unordered\r\n\r\n* Item 1\r\n* Item 2\r\n* Item 2a\r\n* Item 2b\r\n    * Item 3a\r\n    * Item 3b\r\n\r\n### Ordered\r\n\r\n1. Item 1\r\n2. Item 2\r\n3. Item 3\r\n    1. Item 3a\r\n    2. Item 3b\r\n\r\n## Images\r\n\r\n![This is an alt text.](/image/sample.webp \"This is a sample image.\")\r\n\r\n## Links\r\n\r\nYou may be using [Markdown Live Preview](https://markdownlivepreview.com/).\r\n\r\n## Blockquotes\r\n\r\n> Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.\r\n>\r\n>> Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\r\n\r\n## Tables\r\n\r\n| Left columns  | Right columns |\r\n| ------------- |:-------------:|\r\n| left foo      | right foo     |\r\n| left bar      | right bar     |\r\n| left baz      | right baz     |\r\n\r\n## Blocks of code\r\n\r\n```\r\nlet message = \'Hello world\';\r\nalert(message);\r\n```\r\n\r\n## Inline code\r\n\r\nThis web site is using `markedjs/marked`.\r\n', '', 'ABGESCHLOSSEN', NULL),
(3, 'ff', '2025-07-20 22:22:00', NULL, '', '', 'LAUFEND', NULL);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_assignments`
--

CREATE TABLE `event_assignments` (
  `assignment_id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `event_assignments`
--

INSERT INTO `event_assignments` (`assignment_id`, `event_id`, `user_id`) VALUES
(2, 1, 1);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_attendance`
--

CREATE TABLE `event_attendance` (
  `user_id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `signup_status` enum('ANGEMELDET','ABGEMELDET') NOT NULL,
  `commitment_status` enum('BESTÄTIGT','OFFEN','ZUGESAGT') NOT NULL DEFAULT 'OFFEN'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `event_attendance`
--

INSERT INTO `event_attendance` (`user_id`, `event_id`, `signup_status`, `commitment_status`) VALUES
(1, 1, 'ANGEMELDET', 'OFFEN'),
(1, 2, 'ANGEMELDET', 'OFFEN'),
(1, 3, 'ANGEMELDET', 'OFFEN');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_chat_messages`
--

CREATE TABLE `event_chat_messages` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `username` varchar(255) DEFAULT NULL,
  `message_text` text DEFAULT NULL,
  `edited` tinyint(1) NOT NULL DEFAULT 0,
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0,
  `deleted_by_user_id` int(11) DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `deleted_by_username` varchar(255) DEFAULT NULL,
  `sent_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `event_chat_messages`
--

INSERT INTO `event_chat_messages` (`id`, `event_id`, `user_id`, `username`, `message_text`, `edited`, `is_deleted`, `deleted_by_user_id`, `deleted_at`, `deleted_by_username`, `sent_at`) VALUES
(2, 1, 1, 'admin', 'Ja, die sind in Kiste C3, direkt neben dem Mischpult. Bring bitte gleich das Gaffa-Tape mit.', 0, 0, NULL, NULL, NULL, '2025-07-06 07:31:05'),
(7, 1, 1, 'admin', 'Fokus auf den Aufbau, bitte. Pizza besprechen wir, wenn wir fertig sind..', 1, 0, NULL, NULL, NULL, '2025-07-06 07:34:45'),
(8, 1, 1, 'admin', 'ETsttt', 1, 1, 1, NULL, NULL, '2025-07-06 20:31:07'),
(9, 1, 1, 'admin', 'Hallo 123', 0, 0, NULL, NULL, NULL, '2025-07-09 10:23:50'),
(10, 3, 1, 'admin', '@Tim', 0, 0, NULL, NULL, NULL, '2025-07-09 17:50:10');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_custom_fields`
--

CREATE TABLE `event_custom_fields` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `field_name` varchar(255) DEFAULT NULL,
  `field_type` enum('TEXT','BOOLEAN','DROPDOWN','CHECKBOX_GROUP') NOT NULL,
  `is_required` tinyint(1) NOT NULL DEFAULT 0,
  `field_options` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_custom_field_responses`
--

CREATE TABLE `event_custom_field_responses` (
  `id` int(11) NOT NULL,
  `field_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `response_value` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_skill_requirements`
--

CREATE TABLE `event_skill_requirements` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `required_course_id` int(11) NOT NULL,
  `required_persons` int(11) NOT NULL DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `event_skill_requirements`
--

INSERT INTO `event_skill_requirements` (`id`, `event_id`, `required_course_id`, `required_persons`) VALUES
(2, 1, 2, 4);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_storage_reservations`
--

CREATE TABLE `event_storage_reservations` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `reserved_quantity` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `event_storage_reservations`
--

INSERT INTO `event_storage_reservations` (`id`, `event_id`, `item_id`, `reserved_quantity`) VALUES
(1, 1, 56, 1);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_tasks`
--

CREATE TABLE `event_tasks` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `description` text NOT NULL,
  `status` varchar(20) NOT NULL DEFAULT 'OFFEN',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `display_order` int(11) NOT NULL DEFAULT 0,
  `required_persons` int(11) NOT NULL DEFAULT 0,
  `details` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `event_tasks`
--

INSERT INTO `event_tasks` (`id`, `event_id`, `description`, `status`, `created_at`, `display_order`, `required_persons`, `details`) VALUES
(5, 1, 'Test', 'OFFEN', '2025-07-08 22:40:34', 1, 1, 'Test'),
(6, 1, 'dsvf', 'BLOCKIERT', '2025-07-09 10:21:45', 2, 33, ''),
(8, 2, 'Tets', 'OFFEN', '2025-07-09 14:05:31', 10, 0, '');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_task_assignments`
--

CREATE TABLE `event_task_assignments` (
  `task_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_task_kits`
--

CREATE TABLE `event_task_kits` (
  `task_id` int(11) NOT NULL,
  `kit_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `event_task_kits`
--

INSERT INTO `event_task_kits` (`task_id`, `kit_id`) VALUES
(5, 1),
(6, 1),
(8, 1);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `event_task_storage_items`
--

CREATE TABLE `event_task_storage_items` (
  `task_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `quantity` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `event_task_storage_items`
--

INSERT INTO `event_task_storage_items` (`task_id`, `item_id`, `quantity`) VALUES
(5, 51, 6),
(6, 51, 9999),
(6, 56, 99),
(8, 49, 8);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `feedback_forms`
--

CREATE TABLE `feedback_forms` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `feedback_responses`
--

CREATE TABLE `feedback_responses` (
  `id` int(11) NOT NULL,
  `form_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `rating` int(11) NOT NULL COMMENT 'e.g., 1 to 5 stars',
  `comments` text DEFAULT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `files`
--

CREATE TABLE `files` (
  `id` int(11) NOT NULL,
  `filename` varchar(255) DEFAULT NULL,
  `filepath` varchar(512) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `required_role` varchar(20) DEFAULT NULL,
  `uploaded_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `files`
--

INSERT INTO `files` (`id`, `filename`, `filepath`, `category_id`, `required_role`, `uploaded_at`) VALUES
(19, 'calendar.txt', 'calendar.txt', 3, 'NUTZER', '2025-07-10 18:00:01'),
(20, 'calendar.txt', 'calendar.txt', 1, 'NUTZER', '2025-07-10 18:45:55'),
(21, 're.odt', 're.odt', 1, 'NUTZER', '2025-07-10 20:16:11'),
(22, 'README.md', 'README.md', 1, 'NUTZER', '2025-07-22 19:43:13'),
(23, 'README.markdown', 'README.markdown', 1, 'NUTZER', '2025-07-22 17:03:10');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `file_categories`
--

CREATE TABLE `file_categories` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `file_categories`
--

INSERT INTO `file_categories` (`id`, `name`) VALUES
(3, 'A'),
(1, 'Test');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `inventory_kits`
--

CREATE TABLE `inventory_kits` (
  `id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `inventory_kits`
--

INSERT INTO `inventory_kits` (`id`, `name`, `description`, `location`) VALUES
(1, 'Test', 'Das ist ein Test Kit', 'Aula Foyer'),
(3, 'Das Kit', '', NULL);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `inventory_kit_items`
--

CREATE TABLE `inventory_kit_items` (
  `kit_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `quantity` int(11) NOT NULL DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `inventory_kit_items`
--

INSERT INTO `inventory_kit_items` (`kit_id`, `item_id`, `quantity`) VALUES
(1, 41, 26),
(1, 45, 10),
(1, 46, 6),
(1, 59, 9),
(3, 56, 10028);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `maintenance_log`
--

CREATE TABLE `maintenance_log` (
  `id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `log_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `action` varchar(255) DEFAULT NULL,
  `notes` text DEFAULT NULL,
  `cost` decimal(10,2) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `maintenance_log`
--

INSERT INTO `maintenance_log` (`id`, `item_id`, `user_id`, `log_date`, `action`, `notes`, `cost`) VALUES
(1, 63, 1, '2025-07-09 10:32:52', 'Marked for Maintenance', '', 0.00),
(2, 63, 1, '2025-07-09 10:32:58', 'Returned to Service', '', 0.00),
(3, 63, 1, '2025-07-09 11:56:38', 'Returned to Service', '', 0.00),
(4, 63, 1, '2025-07-09 11:56:45', 'Returned to Service', '', 0.00),
(5, 63, 1, '2025-07-09 12:38:41', 'Returned to Service', '', 0.00),
(6, 63, 1, '2025-07-09 12:38:50', 'Marked for Maintenance', '', 0.00),
(7, 63, 1, '2025-07-09 12:38:53', 'Returned to Service', '', 0.00);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `meetings`
--

CREATE TABLE `meetings` (
  `id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `meeting_datetime` datetime NOT NULL,
  `end_datetime` datetime DEFAULT NULL,
  `leader_user_id` int(11) DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `meetings`
--

INSERT INTO `meetings` (`id`, `course_id`, `name`, `meeting_datetime`, `end_datetime`, `leader_user_id`, `description`, `location`) VALUES
(4, 2, 'Test', '2025-07-25 13:14:00', NULL, 1, '', '');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `meeting_attendance`
--

CREATE TABLE `meeting_attendance` (
  `user_id` int(11) NOT NULL,
  `meeting_id` int(11) NOT NULL,
  `attended` tinyint(1) DEFAULT 0,
  `remarks` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `meeting_attendance`
--

INSERT INTO `meeting_attendance` (`user_id`, `meeting_id`, `attended`, `remarks`) VALUES
(1, 4, 1, '');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `permissions`
--

CREATE TABLE `permissions` (
  `id` int(11) NOT NULL,
  `permission_key` varchar(100) NOT NULL COMMENT 'e.g., USER_CREATE, EVENT_DELETE',
  `description` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `permissions`
--

INSERT INTO `permissions` (`id`, `permission_key`, `description`) VALUES
(1, 'ACCESS_ADMIN_PANEL', 'Globaler Zugriff auf alle Admin-Funktionen. Überschreibt alle anderen Berechtigungen.'),
(2, 'USER_CREATE', 'Kann neue Benutzer anlegen.'),
(3, 'USER_READ', 'Kann Benutzerliste und -details einsehen.'),
(4, 'USER_UPDATE', 'Kann Benutzerprofile und deren Berechtigungen bearbeiten.'),
(5, 'USER_DELETE', 'Kann Benutzer löschen.'),
(6, 'USER_PASSWORD_RESET', 'Kann Passwörter anderer Benutzer zurücksetzen.'),
(7, 'EVENT_CREATE', 'Kann neue Events erstellen.'),
(8, 'EVENT_READ', 'Kann die Event-Verwaltungsliste einsehen.'),
(9, 'EVENT_UPDATE', 'Kann bestehende Events bearbeiten (Details, Personalbedarf, Material).'),
(10, 'EVENT_DELETE', 'Kann Events löschen.'),
(11, 'EVENT_MANAGE_ASSIGNMENTS', 'Kann Benutzer zu Events zuweisen.'),
(12, 'EVENT_MANAGE_TASKS', 'Kann Aufgaben innerhalb eines Events erstellen, bearbeiten und löschen.'),
(13, 'COURSE_CREATE', 'Kann neue Lehrgangs-Vorlagen erstellen.'),
(14, 'COURSE_READ', 'Kann Lehrgangs-Vorlagen und deren Termine einsehen.'),
(15, 'COURSE_UPDATE', 'Kann Lehrgangs-Vorlagen bearbeiten.'),
(16, 'COURSE_DELETE', 'Kann Lehrgangs-Vorlagen löschen.'),
(17, 'STORAGE_CREATE', 'Kann neue Lagerartikel anlegen.'),
(18, 'STORAGE_READ', 'Kann die Lager-Verwaltungsliste einsehen.'),
(19, 'STORAGE_UPDATE', 'Kann Lagerartikel bearbeiten, inkl. Defekt-Status.'),
(20, 'STORAGE_DELETE', 'Kann Lagerartikel löschen.'),
(21, 'KIT_CREATE', 'Kann neue Material-Kits/Koffer erstellen.'),
(22, 'KIT_READ', 'Kann die Kit-Verwaltungsliste einsehen.'),
(23, 'KIT_UPDATE', 'Kann Kits und deren Inhalte bearbeiten.'),
(24, 'KIT_DELETE', 'Kann Kits löschen.'),
(25, 'QUALIFICATION_READ', 'Kann die Qualifikations-Matrix einsehen.'),
(26, 'QUALIFICATION_UPDATE', 'Kann Teilnahme und Qualifikationen in der Matrix bearbeiten.'),
(27, 'FILE_CREATE', 'Kann Dateien hochladen und Kategorien erstellen.'),
(28, 'FILE_READ', 'Kann die Datei-Verwaltungsseite einsehen.'),
(29, 'FILE_DELETE', 'Kann Dateien und Kategorien löschen.'),
(30, 'LOG_READ', 'Kann das Admin-Aktionsprotokoll einsehen.'),
(31, 'REPORT_READ', 'Kann die Berichts- und Analyse-Seite einsehen.'),
(32, 'SYSTEM_READ', 'Kann die Systemstatus-Seite einsehen.'),
(33, 'ACHIEVEMENT_CREATE', 'Kann neue Erfolge und Abzeichen erstellen.'),
(34, 'ACHIEVEMENT_UPDATE', 'Kann bestehende Erfolge und Abzeichen bearbeiten.'),
(35, 'ACHIEVEMENT_DELETE', 'Kann Erfolge und Abzeichen löschen.'),
(36, 'FILE_MANAGE', 'Kann die Datei-Verwaltungsseite einsehen und grundlegende Operationen durchführen.'),
(37, 'FILE_UPDATE', 'Kann den Inhalt von Dateien (z.B. im Markdown-Editor) bearbeiten und neue Versionen hochladen.');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `roles`
--

CREATE TABLE `roles` (
  `id` int(11) NOT NULL,
  `role_name` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `roles`
--

INSERT INTO `roles` (`id`, `role_name`) VALUES
(1, 'ADMIN'),
(3, 'NUTZER');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `shared_documents`
--

CREATE TABLE `shared_documents` (
  `id` int(11) NOT NULL,
  `document_name` varchar(100) NOT NULL,
  `content` text DEFAULT NULL,
  `last_modified` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `shared_documents`
--

INSERT INTO `shared_documents` (`id`, `document_name`, `content`, `last_modified`) VALUES
(1, 'realtime_notes', '# Markdown syntax guide\r\n\r\n## Headers\r\n\r\n# This is a Heading h1\r\n## This is a Heading h2\r\n###### This is a Heading h6\r\n\r\n## Emphasis\r\n\r\n*This text will be italic*  \r\n_This will also be italic_\r\n\r\n**This text will be bold**  \r\n__This will also be bold__\r\n\r\n_You **can** combine them_\r\n\r\n## Lists\r\n\r\n### Unordered\r\n\r\n* Item 1\r\n* Item 2\r\n* Item 2a\r\n* Item 2b\r\n    * Item 3a\r\n    * Item 3b\r\n\r\n### Ordered\r\n\r\n1. Item 1\r\n2. Item 2\r\n3. Item 3\r\n    1. Item 3a\r\n    2. Item 3b\r\n\r\n## Images\r\n\r\n![This is an alt text.](/image/sample.webp \"This is a sample image.\")\r\n\r\n## Links\r\n\r\nYou may be using [Markdown Live Preview](https://markdownlivepreview.com/).\r\n\r\n## Blockquotes\r\n\r\n> Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.\r\n>\r\n>> Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\r\n\r\n## Tables\r\n\r\n| Left columns  | Right columns |\r\n| ------------- |:-------------:|\r\n| left foo      | right foo     |\r\n| left bar      | right bar     |\r\n| left baz      | right baz     |\r\n\r\n## Blocks of code\r\n\r\n```\r\nlet message = \'Hello world\';\r\nalert(message);\r\n```\r\n\r\n## Inline code\r\n\r\nThis web site is using `markedjs/marked`.', '2025-07-09 17:45:45');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `storage_items`
--

CREATE TABLE `storage_items` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `location` varchar(50) DEFAULT NULL,
  `cabinet` varchar(50) DEFAULT NULL,
  `shelf` varchar(50) DEFAULT NULL,
  `compartment` varchar(50) DEFAULT NULL,
  `quantity` int(11) NOT NULL DEFAULT 1,
  `max_quantity` int(11) NOT NULL DEFAULT 0,
  `defective_quantity` int(11) NOT NULL DEFAULT 0,
  `defect_reason` text DEFAULT NULL,
  `weight_kg` decimal(10,2) DEFAULT NULL,
  `price_eur` decimal(10,2) DEFAULT NULL,
  `image_path` varchar(512) DEFAULT NULL,
  `status` enum('IN_STORAGE','CHECKED_OUT','ASSIGNED_TO_EVENT','MAINTENANCE') NOT NULL DEFAULT 'IN_STORAGE',
  `current_holder_user_id` int(11) DEFAULT NULL,
  `assigned_event_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `storage_items`
--

INSERT INTO `storage_items` (`id`, `name`, `location`, `cabinet`, `shelf`, `compartment`, `quantity`, `max_quantity`, `defective_quantity`, `defect_reason`, `weight_kg`, `price_eur`, `image_path`, `status`, `current_holder_user_id`, `assigned_event_id`) VALUES
(4, 'Movingheads', 'Oben', '1', '/', '2', 2, 4, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(5, 'Tri leds', 'Oben', '1', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '1000014818.jpg', 'IN_STORAGE', NULL, NULL),
(6, 'Par 56', 'Oben', '1', '/', '3', 4, 14, 0, NULL, 0.00, 0.00, '1000014819.jpg', 'IN_STORAGE', NULL, NULL),
(7, 'Mischpult (alt)', 'Erdgeschoss', '2', '/', '4', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2714.43.484538135326788297692.jpg', 'IN_STORAGE', NULL, NULL),
(8, 'Strand Lighting', 'Erdgeschoss', '2', '/', '4', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2714.45.122077548250905478222.jpg', 'IN_STORAGE', NULL, NULL),
(10, 'DMX Kabel ', 'Erdgeschoss', '1', '/', '/', 12, 12, 0, '', 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(11, 'Traversen', 'Oben', '1-3', '/', '1', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(12, 'Laser', 'Oben', '1', '/', '3', 2, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(13, 'Led bars', 'Oben', '2', '/', '2', 7, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(14, 'Mikrofonstativ', 'Erdgeschoss ', '2', '/', '4', 6, 6, 0, NULL, 0.00, 0.00, '1000004426.jpg', 'IN_STORAGE', NULL, NULL),
(15, 'Par Scheinwerfer', 'Oben', '2', '/', '3', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(16, 'XLR Kabel (normal)', 'Erdgeschoss', '1', '/', 'Hängend', 19, 19, 0, NULL, 0.00, 0.00, '2025-06-2716.17.57144115011978189604.jpg', 'IN_STORAGE', NULL, NULL),
(17, 'DMX dimmer', 'Oben', '2', '/', '2', 6, 6, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(18, 'Mehrfachstecker', 'Erdgeschoss', '2', '/', 'Hängend', 12, 10, 0, NULL, 0.00, 0.00, '2025-06-2716.20.283964599778401908342.jpg', 'IN_STORAGE', NULL, NULL),
(19, 'Farbfolien', 'Oben', '4', '/', '3', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(20, 'Farbfolienhalter', 'Oben', '4', '/', '2', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(21, 'Plugboxen', 'Oben', '5', '/', '2-4', 12, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(22, 'Große Lampe', 'Oben', '5', '/', '4', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(23, 'Mikrofonklemmen (groß)', 'Erdgeschoss', '2', '/', '2', 10, 10, 0, NULL, 0.00, 0.00, '2025-06-2716.25.505575202287104074157.jpg', 'IN_STORAGE', NULL, NULL),
(24, 'leuchtmittel', 'Oben', '/', '/', '1', 15, 0, 0, '', 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(25, 'Lampenstative', 'Oben', 'ganz hinten', '/', '0', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(26, 'Mikrofonhalterung', 'Erdgeschoss', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '1000004428.jpg', 'IN_STORAGE', NULL, NULL),
(27, 'Mikrofonständer Zubehör ', 'Erdgeschoss', '2', '/', '2', 7, 7, 0, NULL, 0.00, 0.00, '2025-06-2716.43.268863184837397618557.jpg', 'IN_STORAGE', NULL, NULL),
(28, 'XLR 1m', 'Erdgeschoss ', '2', '/', 'Hängend', 14, 14, 0, NULL, 0.00, 0.00, '2025-06-2716.44.217215765873591130197.jpg', 'IN_STORAGE', NULL, NULL),
(29, 'Verlängerungskabel', 'Erdgeschoss', '1', '/', 'Hängend', 17, 17, 0, NULL, 0.00, 0.00, '2025-06-2716.46.3329023597302231662.jpg', 'IN_STORAGE', NULL, NULL),
(30, 'Klinke (groß)', 'Erdgeschoss ', '1', '/', 'Hängend', 7, 7, 0, NULL, 0.00, 0.00, '2025-06-2716.47.474256954529147799815.jpg', 'IN_STORAGE', NULL, NULL),
(31, 'Kat 5e', 'Erdgeschoss', '1', '/', 'Hängend', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2716.48.438613619599782685040.jpg', 'IN_STORAGE', NULL, NULL),
(32, 'Tape (schwarz)', 'Erdgeschoss', '1', '/', 'Hängend', 5, 5, 0, NULL, 0.00, 0.00, '2025-06-2716.50.189037015943349490192.jpg', 'IN_STORAGE', NULL, NULL),
(33, 'Isolierband (mehrfarbig)', 'Erdgeschoss', '1', '/', 'Hängend', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2716.52.326139423796119518903.jpg', 'IN_STORAGE', NULL, NULL),
(34, 'Klettband', 'Erdgeschoss', '2', '/', 'Hängend', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2716.54.436320883725802641087.jpg', 'IN_STORAGE', NULL, NULL),
(35, 'LAN Kabel', 'Erdgeschoss', '2', '/', '1', 24, 24, 0, NULL, 0.00, 0.00, '2025-06-2717.00.06154248686898973087.jpg', 'IN_STORAGE', NULL, NULL),
(36, 'Kameramikrofon', 'Erdgeschoss', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2717.03.512938281413325712878.jpg', 'IN_STORAGE', NULL, NULL),
(37, 'Shotgun Mikrofon', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.06.098569123668927925595.jpg', 'IN_STORAGE', NULL, NULL),
(38, 'Oberflächenmikrofon', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2717.10.391795435121197552263.jpg', 'IN_STORAGE', NULL, NULL),
(39, 'Kaltgeräte Kabel', 'Erdgeschoss ', '2', '/', '2', 77, 77, 0, NULL, 0.00, 0.00, '2025-06-2717.15.074914010989957328333.jpg', 'IN_STORAGE', NULL, NULL),
(40, 'Funkzubehör', 'Erdgeschoss', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.17.043830938027829171798.jpg', 'IN_STORAGE', NULL, NULL),
(41, 'Kaltgeräte Kabel (Daisy Chain)', 'Erdgeschoss', '1', '/', '1', 11, 11, 1, 'Defekte Buchse ', 0.00, 0.00, '2025-06-2717.18.125709401359377594527.jpg', 'IN_STORAGE', NULL, NULL),
(42, 'Kennzeichnungsringe (mehrfarbig)', 'Erdgeschoss ', '2', '/', '2', 7, 8, 0, NULL, 0.00, 0.00, '2025-06-2717.20.11195938865415073150.jpg', 'IN_STORAGE', NULL, NULL),
(43, 'Mikrofonklemmen (klein)', 'Erdgeschoss ', '2', '/', '2', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2717.27.274588107262469783348.jpg', 'IN_STORAGE', NULL, NULL),
(44, 'HDMI Kabel', 'Erdgeschoss ', '2', '/', '1', 10, 10, 0, NULL, 0.00, 0.00, '2025-06-2717.56.305143014867881008801.jpg', 'IN_STORAGE', NULL, NULL),
(45, 'Kabelmikrofon', 'Erdgeschoss', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.58.177946197060559751805.jpg', 'IN_STORAGE', NULL, NULL),
(46, 'Adapter (Klinke - VGA)', 'Erdgeschoss', '2', '/', '2', 1, 1, 1, 'VGA Anschluss fehlen Pole', 0.00, 0.00, '2025-06-2717.59.556036963108161859221.jpg', 'IN_STORAGE', NULL, NULL),
(47, 'Adapterkabel (2 XLR - Klinke (klein))', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(48, 'Adapterkabel (Klinke - RCA)', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(49, 'Adapterkabel (2 Klinke - Klinke (klein))', 'Erdgeschoss ', '2', '/', '1', 3, 3, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(50, 'Adapterkabel (Klinke (klein) - Klinke)', 'Erdgeschoss ', '2', '/', '1', 2, 2, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(51, 'Adapterkabel (XLR - Klinke)', 'Erdgeschoss ', '2', '/', '1', 9, 9, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(52, 'Klinke (klein)', 'Erdgeschoss', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(53, 'Adapter (Klinke (klein) - Chinch)', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.23.499020825943256947204.jpg', 'IN_STORAGE', NULL, NULL),
(54, 'Adapter (Klinke (klein) - Klinke (groß))', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.25.576661925063283895663.jpg', 'IN_STORAGE', NULL, NULL),
(55, 'Adapter (XLR (5-polig) - XLR (3-polig))', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.27.096864481674443203081.jpg', 'IN_STORAGE', NULL, NULL),
(56, 'Adapter (XLR - XLR)', 'Erdgeschoss', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2718.28.148498265326953710617.jpg', 'IN_STORAGE', NULL, NULL),
(57, 'Adapter (Klinke (groß) - Klinke (klein))', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.29.288337895956067779676.jpg', 'IN_STORAGE', NULL, NULL),
(58, 'Adapter (Klinke (klein) - Klinke (groß))', 'Erdgeschoss ', '2', '/', '2', 8, 8, 0, NULL, 0.00, 0.00, '2025-06-2718.31.31210849178064261929.jpg', 'IN_STORAGE', NULL, NULL),
(59, 'Adapter (XLR (3-polig) - XLR (5-polig))', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2718.59.517877817548047227728.jpg', 'IN_STORAGE', NULL, NULL),
(60, 'Adapter (XLR - Chinch)', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.01.268681550318375427445.jpg', 'IN_STORAGE', NULL, NULL),
(61, 'Adapter (Klinke (groß) - 2 Klinke (groß))', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.03.262282293221670794195.jpg', 'IN_STORAGE', NULL, NULL),
(62, 'Adapter (Klinke (groß) - Klinke (klein))', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.04.443477670903409475836.jpg', 'IN_STORAGE', NULL, NULL),
(63, 'Adapter (Dell Strom)', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, '', 0.00, 0.00, '2025-06-2719.09.478882073636558604076.jpg', 'IN_STORAGE', NULL, NULL),
(64, 'BNC Kabel ', 'Erdgeschoss ', '2', '/', '1', 3, 0, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(65, 'Klinke (klein) - 2x RCA (Male)', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(66, 'Doppel RCA', 'Erdgeschoss ', '2', '/', '1', 4, 4, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(67, 'Dreifach RCA', 'Erdgeschoss ', '2', '/', '1', 3, 3, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(68, 'RCA', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(69, 'Nebelmaschine (klein) ', 'Erdgeschoss ', '1', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(70, 'Nebelmaschine (groß)', 'Erdgeschoss ', '1', '/', '0', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(71, 'Boden Nebelmaschine  ', 'Erdgeschoss ', '1', '/', '0', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(72, 'Nebelfluid (divers)', 'Erdgeschoss ', '1', '/', '1', 12, 12, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(73, 'Traversenbolzen', 'Erdgeschoss ', 'Riggingkiste', '/', 'Riggingkiste', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2812.24.214632515314181386114.jpg', 'IN_STORAGE', NULL, NULL);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `storage_log`
--

CREATE TABLE `storage_log` (
  `id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `quantity_change` int(11) NOT NULL,
  `notes` text DEFAULT NULL,
  `event_id` int(11) DEFAULT NULL,
  `transaction_timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `storage_log`
--

INSERT INTO `storage_log` (`id`, `item_id`, `user_id`, `quantity_change`, `notes`, `event_id`, `transaction_timestamp`) VALUES
(5, 17, 1, -1, 'Für Event: Test', 1, '2025-07-05 14:09:45'),
(6, 17, 1, 1, '', 1, '2025-07-05 14:13:30'),
(7, 17, 1, 1, '', 1, '2025-07-05 14:13:36'),
(16, 17, 1, 8, '', NULL, '2025-07-09 10:24:38'),
(17, 17, 1, 8, '', 1, '2025-07-09 10:25:04'),
(18, 17, 1, -1, '', NULL, '2025-07-09 10:25:23'),
(19, 17, 1, -21, '', NULL, '2025-07-09 10:25:41'),
(20, 21, 1, 8, '', NULL, '2025-07-09 10:26:40'),
(21, 17, 1, 6, '', NULL, '2025-07-09 11:53:36'),
(22, 17, 1, 1, '', NULL, '2025-07-09 11:53:43'),
(23, 17, 1, -1, '', NULL, '2025-07-09 11:53:45'),
(24, 17, 1, -1, '', NULL, '2025-07-09 12:23:05'),
(25, 17, 1, 1, '', NULL, '2025-07-09 12:23:13'),
(26, 10, 1, -1, '', NULL, '2025-07-09 12:24:04'),
(27, 10, 1, 1, '', NULL, '2025-07-09 12:24:28'),
(28, 10, 1, -1, '', NULL, '2025-07-09 12:24:53'),
(29, 10, 1, -11, 'Für Event: Tetris', 2, '2025-07-09 12:30:44'),
(30, 10, 1, 12, '', 2, '2025-07-09 12:30:55'),
(31, 17, 1, -6, '', NULL, '2025-07-09 16:24:33'),
(32, 17, 1, 6, 'L', 3, '2025-07-09 16:24:51');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(50) DEFAULT NULL,
  `password_hash` varchar(255) DEFAULT NULL,
  `role_id` int(11) DEFAULT NULL,
  `class_year` int(11) DEFAULT NULL,
  `class_name` varchar(10) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `chat_color` varchar(7) DEFAULT '#E9ECEF',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `theme` varchar(10) DEFAULT 'light'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `users`
--

INSERT INTO `users` (`id`, `username`, `password_hash`, `role_id`, `class_year`, `class_name`, `email`, `chat_color`, `created_at`, `theme`) VALUES
(1, 'admin', '$2a$10$odf1koglTR0zdzyPbDDkzOuw2XSKu19ylygl561RQ336KpABBFccu', 1, 0, '', NULL, '#ff00ff', '2025-06-26 08:49:17', 'light'),
(8, 'Hund', '$2a$10$swfj/iCYFuY0sDSqfktYx.LgtvXssWhpn.x/oAkaSE1UznZuu/zOe', 1, 0, '', NULL, '#E9ECEF', '2025-07-09 16:29:59', 'light');

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `user_achievements`
--

CREATE TABLE `user_achievements` (
  `user_id` int(11) NOT NULL,
  `achievement_id` int(11) NOT NULL,
  `earned_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `user_passkeys`
--

CREATE TABLE `user_passkeys` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `credential_id` text NOT NULL,
  `public_key` text NOT NULL,
  `signature_count` bigint(20) NOT NULL,
  `user_handle` text NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `user_permissions`
--

CREATE TABLE `user_permissions` (
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `user_permissions`
--

INSERT INTO `user_permissions` (`user_id`, `permission_id`) VALUES
(1, 1),
(1, 2),
(1, 3),
(1, 4),
(1, 5),
(1, 6),
(1, 7),
(1, 8),
(1, 9),
(1, 10),
(1, 11),
(1, 12),
(1, 13),
(1, 14),
(1, 15),
(1, 16),
(1, 17),
(1, 18),
(1, 19),
(1, 20),
(1, 21),
(1, 22),
(1, 23),
(1, 24),
(1, 25),
(1, 26),
(1, 27),
(1, 28),
(1, 29),
(1, 30),
(1, 31),
(1, 32),
(8, 37);

-- --------------------------------------------------------

--
-- Tabellenstruktur für Tabelle `user_qualifications`
--

CREATE TABLE `user_qualifications` (
  `user_id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `completion_date` date DEFAULT NULL,
  `status` enum('BESUCHT','ABSOLVIERT') NOT NULL DEFAULT 'BESUCHT',
  `remarks` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Daten für Tabelle `user_qualifications`
--

INSERT INTO `user_qualifications` (`user_id`, `course_id`, `completion_date`, `status`, `remarks`) VALUES
(1, 2, '2025-07-09', 'ABSOLVIERT', 'Automatisch vergeben');

--
-- Indizes der exportierten Tabellen
--

--
-- Indizes für die Tabelle `achievements`
--
ALTER TABLE `achievements`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `achievement_key` (`achievement_key`);

--
-- Indizes für die Tabelle `admin_logs`
--
ALTER TABLE `admin_logs`
  ADD PRIMARY KEY (`id`);

--
-- Indizes für die Tabelle `attachments`
--
ALTER TABLE `attachments`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx_attachments_parent` (`parent_type`,`parent_id`);

--
-- Indizes für die Tabelle `courses`
--
ALTER TABLE `courses`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`),
  ADD UNIQUE KEY `abbreviation` (`abbreviation`);

--
-- Indizes für die Tabelle `course_attendance`
--
ALTER TABLE `course_attendance`
  ADD PRIMARY KEY (`user_id`,`course_id`),
  ADD KEY `course_id` (`course_id`);

--
-- Indizes für die Tabelle `events`
--
ALTER TABLE `events`
  ADD PRIMARY KEY (`id`),
  ADD KEY `fk_event_leader` (`leader_user_id`);

--
-- Indizes für die Tabelle `event_assignments`
--
ALTER TABLE `event_assignments`
  ADD PRIMARY KEY (`assignment_id`),
  ADD UNIQUE KEY `unique_assignment` (`event_id`,`user_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indizes für die Tabelle `event_attendance`
--
ALTER TABLE `event_attendance`
  ADD PRIMARY KEY (`user_id`,`event_id`),
  ADD KEY `event_id` (`event_id`);

--
-- Indizes für die Tabelle `event_chat_messages`
--
ALTER TABLE `event_chat_messages`
  ADD PRIMARY KEY (`id`),
  ADD KEY `event_id` (`event_id`),
  ADD KEY `event_chat_messages_ibfk_2` (`user_id`);

--
-- Indizes für die Tabelle `event_custom_fields`
--
ALTER TABLE `event_custom_fields`
  ADD PRIMARY KEY (`id`),
  ADD KEY `event_id` (`event_id`);

--
-- Indizes für die Tabelle `event_custom_field_responses`
--
ALTER TABLE `event_custom_field_responses`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `field_id` (`field_id`,`user_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indizes für die Tabelle `event_skill_requirements`
--
ALTER TABLE `event_skill_requirements`
  ADD PRIMARY KEY (`id`),
  ADD KEY `event_id` (`event_id`),
  ADD KEY `required_course_id` (`required_course_id`);

--
-- Indizes für die Tabelle `event_storage_reservations`
--
ALTER TABLE `event_storage_reservations`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `unique_event_item` (`event_id`,`item_id`),
  ADD KEY `item_id` (`item_id`);

--
-- Indizes für die Tabelle `event_tasks`
--
ALTER TABLE `event_tasks`
  ADD PRIMARY KEY (`id`),
  ADD KEY `event_id` (`event_id`);

--
-- Indizes für die Tabelle `event_task_assignments`
--
ALTER TABLE `event_task_assignments`
  ADD PRIMARY KEY (`task_id`,`user_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indizes für die Tabelle `event_task_kits`
--
ALTER TABLE `event_task_kits`
  ADD PRIMARY KEY (`task_id`,`kit_id`),
  ADD KEY `kit_id` (`kit_id`);

--
-- Indizes für die Tabelle `event_task_storage_items`
--
ALTER TABLE `event_task_storage_items`
  ADD PRIMARY KEY (`task_id`,`item_id`),
  ADD KEY `item_id` (`item_id`);

--
-- Indizes für die Tabelle `feedback_forms`
--
ALTER TABLE `feedback_forms`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `event_id_unique` (`event_id`);

--
-- Indizes für die Tabelle `feedback_responses`
--
ALTER TABLE `feedback_responses`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `form_user_unique` (`form_id`,`user_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indizes für die Tabelle `files`
--
ALTER TABLE `files`
  ADD PRIMARY KEY (`id`),
  ADD KEY `category_id` (`category_id`);

--
-- Indizes für die Tabelle `file_categories`
--
ALTER TABLE `file_categories`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Indizes für die Tabelle `inventory_kits`
--
ALTER TABLE `inventory_kits`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Indizes für die Tabelle `inventory_kit_items`
--
ALTER TABLE `inventory_kit_items`
  ADD PRIMARY KEY (`kit_id`,`item_id`),
  ADD KEY `item_id` (`item_id`);

--
-- Indizes für die Tabelle `maintenance_log`
--
ALTER TABLE `maintenance_log`
  ADD PRIMARY KEY (`id`),
  ADD KEY `item_id` (`item_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indizes für die Tabelle `meetings`
--
ALTER TABLE `meetings`
  ADD PRIMARY KEY (`id`),
  ADD KEY `course_id` (`course_id`),
  ADD KEY `fk_meeting_leader` (`leader_user_id`);

--
-- Indizes für die Tabelle `meeting_attendance`
--
ALTER TABLE `meeting_attendance`
  ADD PRIMARY KEY (`user_id`,`meeting_id`),
  ADD KEY `meeting_id` (`meeting_id`);

--
-- Indizes für die Tabelle `permissions`
--
ALTER TABLE `permissions`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `permission_key_unique` (`permission_key`);

--
-- Indizes für die Tabelle `roles`
--
ALTER TABLE `roles`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `role_name_unique` (`role_name`);

--
-- Indizes für die Tabelle `shared_documents`
--
ALTER TABLE `shared_documents`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `document_name` (`document_name`),
  ADD UNIQUE KEY `idx_doc_name` (`document_name`);

--
-- Indizes für die Tabelle `storage_items`
--
ALTER TABLE `storage_items`
  ADD PRIMARY KEY (`id`),
  ADD KEY `fk_holder_user` (`current_holder_user_id`),
  ADD KEY `fk_assigned_event` (`assigned_event_id`);

--
-- Indizes für die Tabelle `storage_log`
--
ALTER TABLE `storage_log`
  ADD PRIMARY KEY (`id`),
  ADD KEY `item_id` (`item_id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `fk_log_event` (`event_id`);

--
-- Indizes für die Tabelle `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username` (`username`),
  ADD UNIQUE KEY `email` (`email`),
  ADD KEY `fk_user_role` (`role_id`);

--
-- Indizes für die Tabelle `user_achievements`
--
ALTER TABLE `user_achievements`
  ADD PRIMARY KEY (`user_id`,`achievement_id`),
  ADD KEY `achievement_id` (`achievement_id`);

--
-- Indizes für die Tabelle `user_passkeys`
--
ALTER TABLE `user_passkeys`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indizes für die Tabelle `user_permissions`
--
ALTER TABLE `user_permissions`
  ADD PRIMARY KEY (`user_id`,`permission_id`),
  ADD KEY `permission_id` (`permission_id`);

--
-- Indizes für die Tabelle `user_qualifications`
--
ALTER TABLE `user_qualifications`
  ADD PRIMARY KEY (`user_id`,`course_id`),
  ADD KEY `course_id` (`course_id`);

--
-- AUTO_INCREMENT für exportierte Tabellen
--

--
-- AUTO_INCREMENT für Tabelle `achievements`
--
ALTER TABLE `achievements`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT für Tabelle `admin_logs`
--
ALTER TABLE `admin_logs`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=331;

--
-- AUTO_INCREMENT für Tabelle `attachments`
--
ALTER TABLE `attachments`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT für Tabelle `courses`
--
ALTER TABLE `courses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT für Tabelle `events`
--
ALTER TABLE `events`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT für Tabelle `event_assignments`
--
ALTER TABLE `event_assignments`
  MODIFY `assignment_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT für Tabelle `event_chat_messages`
--
ALTER TABLE `event_chat_messages`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT für Tabelle `event_custom_fields`
--
ALTER TABLE `event_custom_fields`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT für Tabelle `event_custom_field_responses`
--
ALTER TABLE `event_custom_field_responses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT für Tabelle `event_skill_requirements`
--
ALTER TABLE `event_skill_requirements`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT für Tabelle `event_storage_reservations`
--
ALTER TABLE `event_storage_reservations`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT für Tabelle `event_tasks`
--
ALTER TABLE `event_tasks`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT für Tabelle `feedback_forms`
--
ALTER TABLE `feedback_forms`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT für Tabelle `feedback_responses`
--
ALTER TABLE `feedback_responses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT für Tabelle `files`
--
ALTER TABLE `files`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=24;

--
-- AUTO_INCREMENT für Tabelle `file_categories`
--
ALTER TABLE `file_categories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT für Tabelle `inventory_kits`
--
ALTER TABLE `inventory_kits`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT für Tabelle `maintenance_log`
--
ALTER TABLE `maintenance_log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT für Tabelle `meetings`
--
ALTER TABLE `meetings`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT für Tabelle `permissions`
--
ALTER TABLE `permissions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=38;

--
-- AUTO_INCREMENT für Tabelle `roles`
--
ALTER TABLE `roles`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT für Tabelle `shared_documents`
--
ALTER TABLE `shared_documents`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT für Tabelle `storage_items`
--
ALTER TABLE `storage_items`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=76;

--
-- AUTO_INCREMENT für Tabelle `storage_log`
--
ALTER TABLE `storage_log`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=33;

--
-- AUTO_INCREMENT für Tabelle `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT für Tabelle `user_passkeys`
--
ALTER TABLE `user_passkeys`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- Constraints der exportierten Tabellen
--

--
-- Constraints der Tabelle `course_attendance`
--
ALTER TABLE `course_attendance`
  ADD CONSTRAINT `course_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `course_attendance_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `events`
--
ALTER TABLE `events`
  ADD CONSTRAINT `fk_event_leader` FOREIGN KEY (`leader_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

--
-- Constraints der Tabelle `event_assignments`
--
ALTER TABLE `event_assignments`
  ADD CONSTRAINT `event_assignments_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_assignments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_attendance`
--
ALTER TABLE `event_attendance`
  ADD CONSTRAINT `event_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_attendance_ibfk_2` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_chat_messages`
--
ALTER TABLE `event_chat_messages`
  ADD CONSTRAINT `event_chat_messages_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_chat_messages_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_custom_fields`
--
ALTER TABLE `event_custom_fields`
  ADD CONSTRAINT `event_custom_fields_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_custom_field_responses`
--
ALTER TABLE `event_custom_field_responses`
  ADD CONSTRAINT `event_custom_field_responses_ibfk_1` FOREIGN KEY (`field_id`) REFERENCES `event_custom_fields` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_custom_field_responses_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_skill_requirements`
--
ALTER TABLE `event_skill_requirements`
  ADD CONSTRAINT `event_skill_requirements_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_skill_requirements_ibfk_2` FOREIGN KEY (`required_course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_storage_reservations`
--
ALTER TABLE `event_storage_reservations`
  ADD CONSTRAINT `event_storage_reservations_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_storage_reservations_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_tasks`
--
ALTER TABLE `event_tasks`
  ADD CONSTRAINT `event_tasks_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_task_assignments`
--
ALTER TABLE `event_task_assignments`
  ADD CONSTRAINT `event_task_assignments_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_assignments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_task_kits`
--
ALTER TABLE `event_task_kits`
  ADD CONSTRAINT `event_task_kits_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_kits_ibfk_2` FOREIGN KEY (`kit_id`) REFERENCES `inventory_kits` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `event_task_storage_items`
--
ALTER TABLE `event_task_storage_items`
  ADD CONSTRAINT `event_task_storage_items_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_storage_items_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `feedback_forms`
--
ALTER TABLE `feedback_forms`
  ADD CONSTRAINT `feedback_forms_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `feedback_responses`
--
ALTER TABLE `feedback_responses`
  ADD CONSTRAINT `feedback_responses_ibfk_1` FOREIGN KEY (`form_id`) REFERENCES `feedback_forms` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `feedback_responses_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `files`
--
ALTER TABLE `files`
  ADD CONSTRAINT `files_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `file_categories` (`id`) ON DELETE SET NULL;

--
-- Constraints der Tabelle `inventory_kit_items`
--
ALTER TABLE `inventory_kit_items`
  ADD CONSTRAINT `inventory_kit_items_ibfk_1` FOREIGN KEY (`kit_id`) REFERENCES `inventory_kits` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `inventory_kit_items_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `maintenance_log`
--
ALTER TABLE `maintenance_log`
  ADD CONSTRAINT `maintenance_log_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `maintenance_log_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);

--
-- Constraints der Tabelle `meetings`
--
ALTER TABLE `meetings`
  ADD CONSTRAINT `fk_meeting_leader` FOREIGN KEY (`leader_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `meetings_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `meeting_attendance`
--
ALTER TABLE `meeting_attendance`
  ADD CONSTRAINT `meeting_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `meeting_attendance_ibfk_2` FOREIGN KEY (`meeting_id`) REFERENCES `meetings` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `storage_items`
--
ALTER TABLE `storage_items`
  ADD CONSTRAINT `fk_assigned_event` FOREIGN KEY (`assigned_event_id`) REFERENCES `events` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `fk_holder_user` FOREIGN KEY (`current_holder_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

--
-- Constraints der Tabelle `storage_log`
--
ALTER TABLE `storage_log`
  ADD CONSTRAINT `fk_log_event` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `storage_log_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `storage_log_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `users`
--
ALTER TABLE `users`
  ADD CONSTRAINT `fk_user_role` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE SET NULL;

--
-- Constraints der Tabelle `user_achievements`
--
ALTER TABLE `user_achievements`
  ADD CONSTRAINT `user_achievements_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_achievements_ibfk_2` FOREIGN KEY (`achievement_id`) REFERENCES `achievements` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `user_passkeys`
--
ALTER TABLE `user_passkeys`
  ADD CONSTRAINT `user_passkeys_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `user_permissions`
--
ALTER TABLE `user_permissions`
  ADD CONSTRAINT `user_permissions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_permissions_ibfk_2` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE;

--
-- Constraints der Tabelle `user_qualifications`
--
ALTER TABLE `user_qualifications`
  ADD CONSTRAINT `user_qualifications_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_qualifications_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
