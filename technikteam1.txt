
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\CalendarServlet.java
========================================================================

package de.technikteam.servlet;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * This servlet handles the request for the main calendar page. Its sole purpose
 * is to forward the user to the calendar.jsp page, which then uses JavaScript
 * to fetch data from the CalendarApiServlet.
 */
@WebServlet("/kalender")
public class CalendarServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * Forwards the request to the calendar display page.
	 */
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/calendar.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\CollaborativeEditorServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * Mapped to `/editor-page`, this is a very simple servlet whose only purpose is
 * to forward the user to the `collaborative_editor.jsp` page. All the dynamic
 * functionality for the editor is handled client-side by JavaScript and the
 * `DocumentApiServlet`.
 */
@WebServlet("/editor-page")
public class CollaborativeEditorServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// CORRECTED: Forward to the actual JSP file path. Note the original servlet
		// mapping was `/dateien/texte` but the JSP link uses `/editor-page`. I'll map
		// this to the JSP link.
		request.getRequestDispatcher("/views/public/collaborative_editor.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\DocumentApiServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import java.util.stream.Collectors;

import de.technikteam.dao.FileDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Mapped to `/api/document`, this servlet provides a simple REST-like API for
 * the collaborative text editor. A GET request fetches the latest document
 * content, while a POST request (with the new content in its raw body) updates
 * the document in the database. It interacts with `FileDAO` to persist the
 * content.
 */
@WebServlet("/api/document")
public class DocumentApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(DocumentApiServlet.class);
	private FileDAO fileDAO;
	private static final String DOCUMENT_NAME = "realtime_notes";

	@Override
	public void init() {
		fileDAO = new FileDAO();
	}

	/**
	 * Handles GET requests to fetch the latest content of the shared document.
	 */
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		logger.trace("GET request for document content '{}'", DOCUMENT_NAME);
		String content = fileDAO.getDocumentContent(DOCUMENT_NAME);

		response.setContentType("text/plain");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(content);
	}

	/**
	 * Handles POST requests to update the document content. It reads the raw text
	 * from the request body.
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		String content = request.getReader().lines().collect(Collectors.joining(System.lineSeparator()));
		logger.trace("POST request to update document content for '{}'. Content length: {}", DOCUMENT_NAME,
				content.length());

		boolean success = fileDAO.updateDocumentContent(DOCUMENT_NAME, content);

		if (success) {
			response.setStatus(HttpServletResponse.SC_OK);
		} else {
			logger.error("Failed to update document content for '{}'", DOCUMENT_NAME);
			response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\DownloadServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import de.technikteam.config.AppConfig;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * Mapped to `/download`, this servlet handles file download requests for both
 * general files and meeting attachments. It takes a `file` parameter which
 * corresponds to a path relative to the application's upload directory. It
 * performs basic security checks, constructs the full file path, and streams
 * the file from the server's filesystem to the user's browser, setting the
 * correct headers to trigger a download dialog.
 */
@WebServlet("/download")
public class DownloadServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(DownloadServlet.class);

	@Override
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String relativePath = request.getParameter("file");
		if (relativePath == null || relativePath.isEmpty()) {
			logger.warn("Download request rejected: missing 'file' parameter.");
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Fehlender 'file' Parameter.");
			return;
		}

		User user = (User) request.getSession().getAttribute("user");

		// Basic security measure to prevent path traversal attacks (e.g., ../../)
		if (relativePath.contains("..")) {
			logger.warn("Potential path traversal attack from user '{}' for file '{}'. Access denied.",
					(user != null ? user.getUsername() : "GUEST"), relativePath);
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Zugriff verweigert.");
			return;
		}

		// Normalize path separators to be OS-independent, crucial for deployment
		String sanitizedPath = relativePath.replace("/", File.separator).replace("\\", File.separator);

		File file = new File(AppConfig.UPLOAD_DIRECTORY, sanitizedPath);
		if (!file.exists() || !file.isFile()) {
			logger.error("Download failed: File not found at resolved path {}", file.getAbsolutePath());
			response.sendError(HttpServletResponse.SC_NOT_FOUND, "Datei nicht gefunden.");
			return;
		}

		response.setContentType("application/octet-stream");
		response.setContentLengthLong(file.length());

		String headerKey = "Content-Disposition";
		// URL-encode the filename to handle special characters and spaces correctly.
		String headerValue = String.format("attachment; filename=\"%s\"",
				URLEncoder.encode(file.getName(), StandardCharsets.UTF_8.toString()));
		response.setHeader(headerKey, headerValue);

		logger.info("User '{}' is downloading file: {}. Size: {} bytes.", (user != null ? user.getUsername() : "GUEST"),
				file.getAbsolutePath(), file.length());

		try (FileInputStream inStream = new FileInputStream(file);
				OutputStream outStream = response.getOutputStream()) {

			byte[] buffer = new byte[4096];
			int bytesRead;
			while ((bytesRead = inStream.read(buffer)) != -1) {
				outStream.write(buffer, 0, bytesRead);
			}
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\EventActionServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import de.technikteam.dao.EventCustomFieldDAO;
import de.technikteam.dao.EventDAO;
import de.technikteam.model.EventCustomField;
import de.technikteam.model.EventCustomFieldResponse;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/event-action")
public class EventActionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(EventActionServlet.class);
	private EventDAO eventDAO;
	private EventCustomFieldDAO customFieldDAO;

	@Override
	public void init() {
		eventDAO = new EventDAO();
		customFieldDAO = new EventCustomFieldDAO();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		User user = (User) request.getSession().getAttribute("user");
		String action = request.getParameter("action");
		String eventIdParam = request.getParameter("eventId");

		if (user == null || action == null || eventIdParam == null) {
			logger.warn("Invalid request to EventActionServlet. Missing user, action, or eventId parameter.");
			response.sendRedirect(request.getContextPath() + "/events");
			return;
		}

		try {
			int eventId = Integer.parseInt(eventIdParam);
			logger.info("User '{}' (ID: {}) is performing action '{}' on event ID {}", user.getUsername(), user.getId(),
					action, eventId);

			if ("signup".equals(action)) {
				eventDAO.signUpForEvent(user.getId(), eventId);

				// Handle custom field responses
				List<EventCustomField> fields = customFieldDAO.getCustomFieldsForEvent(eventId);
				for (EventCustomField field : fields) {
					String paramName = "customfield_" + field.getId();
					String paramValue = request.getParameter(paramName);

					if (paramValue != null) {
						EventCustomFieldResponse customResponse = new EventCustomFieldResponse();
						customResponse.setFieldId(field.getId());
						customResponse.setUserId(user.getId());
						customResponse.setResponseValue(paramValue);
						customFieldDAO.saveResponse(customResponse);
						logger.debug("Saved custom response for field ID {} and user ID {}.", field.getId(),
								user.getId());
					}
				}

				request.getSession().setAttribute("successMessage", "Erfolgreich zum Event angemeldet.");
			} else if ("signoff".equals(action)) {
				eventDAO.signOffFromEvent(user.getId(), eventId);
				request.getSession().setAttribute("successMessage", "Erfolgreich vom Event abgemeldet.");
			} else {
				logger.warn("Unknown action received in EventActionServlet: {}", action);
			}

		} catch (NumberFormatException e) {
			logger.error("Invalid event ID format in EventActionServlet.", e);
			request.getSession().setAttribute("errorMessage", "Ungültige Event-ID.");
		}

		response.sendRedirect(request.getContextPath() + "/events");
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\EventChatApiServlet.java
========================================================================

package de.technikteam.servlet;

import com.google.gson.Gson;
import de.technikteam.dao.EventChatDAO;
import de.technikteam.model.EventChatMessage;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;

/**
 * Mapped to `/api/event-chat`, this servlet provides a JSON API for the
 * real-time event chat feature. A GET request fetches all messages for a given
 * event ID. A POST request allows a logged-in user to submit a new message for
 * an event. It uses the Gson library for JSON serialization.
 */
@WebServlet("/api/event-chat")
public class EventChatApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(EventChatApiServlet.class);
	private EventChatDAO chatDAO;
	private Gson gson;

	@Override
	public void init() {
		chatDAO = new EventChatDAO();
		gson = new Gson();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			int eventId = Integer.parseInt(request.getParameter("eventId"));
			logger.trace("GET request for chat messages for event ID: {}", eventId);
			List<EventChatMessage> messages = chatDAO.getMessagesForEvent(eventId);
			String jsonResponse = gson.toJson(messages);

			response.setContentType("application/json");
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(jsonResponse);
		} catch (NumberFormatException e) {
			logger.warn("Bad request to event chat API: Invalid or missing eventId.");
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid or missing eventId.");
		}
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.setCharacterEncoding("UTF-8");
		try {
			int eventId = Integer.parseInt(request.getParameter("eventId"));
			String messageText = request.getParameter("messageText");
			User user = (User) request.getSession().getAttribute("user");

			if (user == null || messageText == null || messageText.trim().isEmpty()) {
				logger.warn("Bad POST request to event chat API: Missing user session or message text for event ID {}",
						eventId);
				response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing user or message text.");
				return;
			}

			logger.info("User '{}' posting message to event chat for event ID {}: '{}'", user.getUsername(), eventId,
					messageText);

			EventChatMessage newMessage = new EventChatMessage();
			newMessage.setEventId(eventId);
			newMessage.setUserId(user.getId());
			newMessage.setUsername(user.getUsername());
			newMessage.setMessageText(messageText);

			if (chatDAO.postMessage(newMessage)) {
				response.setStatus(HttpServletResponse.SC_OK);
			} else {
				logger.error("Failed to post chat message for user '{}' to event ID {}", user.getUsername(), eventId);
				response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
			}
		} catch (NumberFormatException e) {
			logger.warn("Bad request to event chat API: Invalid eventId in POST.");
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid event ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\EventCustomFieldsApiServlet.java
========================================================================

package de.technikteam.servlet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.EventCustomFieldDAO;
import de.technikteam.model.EventCustomField;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

/**
 * A public API endpoint that securely provides the list of custom sign-up
 * fields for a specific event. This is called by the JavaScript on the main
 * events page to populate the sign-up modal window.
 */
@WebServlet("/api/public/event-custom-fields")
public class EventCustomFieldsApiServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = LogManager.getLogger(EventCustomFieldsApiServlet.class);
    private EventCustomFieldDAO customFieldDAO;
    private Gson gson;

    @Override
    public void init() {
        customFieldDAO = new EventCustomFieldDAO();
        gson = new GsonBuilder()
                .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter())
                .create();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String eventIdParam = request.getParameter("eventId");
        if (eventIdParam == null || eventIdParam.trim().isEmpty()) {
            logger.warn("API call rejected: eventId parameter is missing.");
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required 'eventId' parameter.");
            return;
        }

        try {
            int eventId = Integer.parseInt(eventIdParam);
            logger.debug("API request for custom fields for event ID: {}", eventId);

            List<EventCustomField> fields = customFieldDAO.getCustomFieldsForEvent(eventId);
            String jsonResponse = gson.toJson(fields);

            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write(jsonResponse);

        } catch (NumberFormatException e) {
            logger.warn("API call rejected: Invalid eventId format '{}'.", eventIdParam);
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid 'eventId' format. It must be a number.");
        }
    }
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\EventDetailsServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventAttachmentDAO;
import de.technikteam.dao.EventChatDAO;
import de.technikteam.dao.EventDAO;
import de.technikteam.dao.EventTaskDAO;
import de.technikteam.model.Event;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.util.stream.Collectors;
import java.io.IOException;
import java.util.List;
import java.util.Set;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Mapped to `/eventDetails`, this servlet is responsible for displaying the
 * detailed view of a single event. It fetches all relevant data for the event,
 * including its description, skill requirements, and assigned team. If the
 * event is currently 'LAUFEND' (running), it also fetches associated tasks and
 * chat history. It forwards all this data to `eventDetails.jsp`.
 */
@WebServlet("/veranstaltungen/details")
public class EventDetailsServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(EventDetailsServlet.class);
	private EventDAO eventDAO;
	private EventTaskDAO taskDAO;
	private EventChatDAO chatDAO;
	private EventAttachmentDAO attachmentDAO;

	@Override
	public void init() {
		eventDAO = new EventDAO();
		taskDAO = new EventTaskDAO();
		chatDAO = new EventChatDAO();
		attachmentDAO = new EventAttachmentDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		try {
			int eventId = Integer.parseInt(request.getParameter("id"));
			logger.info("Event details requested for ID: {} by user '{}'", eventId, user.getUsername());
			Event event = eventDAO.getEventById(eventId);

			if (event == null) {
				logger.warn("Event with ID {} not found. Redirecting to 404.", eventId);
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Event nicht gefunden.");
				return;
			}

			// Fetch base data applicable to all event statuses
			event.setSkillRequirements(eventDAO.getSkillRequirementsForEvent(eventId));
			event.setReservedItems(eventDAO.getReservedItemsForEvent(eventId));

			String userRoleForAttachments = (user.getRoleName().equals("ADMIN")
					|| user.getId() == event.getLeaderUserId()) ? "ADMIN" : "NUTZER";
			event.setAttachments(attachmentDAO.getAttachmentsForEvent(eventId, userRoleForAttachments));

			List<User> assignedUsers = eventDAO.getAssignedUsersForEvent(eventId);
			event.setAssignedAttendees(assignedUsers);

			// Fetch data specific to running events (tasks, chat)
			if ("LAUFEND".equalsIgnoreCase(event.getStatus())) {
				logger.debug("Event {} is running. Fetching tasks and chat messages.", eventId);
				event.setEventTasks(taskDAO.getTasksForEvent(eventId));
				event.setChatMessages(chatDAO.getMessagesForEvent(eventId));
			}

			// For Admins and Users, provide the list of assigned users for the task
			// assignment
			// dropdown
			if ("ADMIN".equalsIgnoreCase(user.getRoleName()) || "NUTZER".equalsIgnoreCase(user.getRoleName())) {
				request.setAttribute("assignedUsers", assignedUsers);
			}

			// For regular users, determine if they are part of the assigned team to show
			// relevant UI
			Set<Integer> assignedUserIds = assignedUsers.stream().map(User::getId).collect(Collectors.toSet());
			boolean isUserAssigned = assignedUserIds.contains(user.getId());
			request.setAttribute("isUserAssigned", isUserAssigned);

			request.setAttribute("event", event);
			logger.debug("Forwarding to eventDetails.jsp for event '{}'", event.getName());
			// CORRECTED: Forward to the actual JSP file path.
			request.getRequestDispatcher("/views/public/eventDetails.jsp").forward(request, response);

		} catch (NumberFormatException e) {
			logger.error("Invalid event ID format in request.", e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Event-ID.");
		} catch (Exception e) {
			logger.error("An unexpected error occurred while fetching event details.", e);
			response.sendRedirect(request.getContextPath() + "/error500");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\EventServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import java.util.List;

import de.technikteam.dao.EventDAO;
import de.technikteam.model.Event;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Mapped to `/veranstaltungen`, this servlet is responsible for the main event
 * listing page for a logged-in user. It fetches a list of all upcoming events
 * for which the user is qualified, along with their specific attendance status
 * for each event (e.g., ZUGEWIESEN, ANGEMELDET, OFFEN). It then passes this
 * data to `events.jsp`.
 */
// CORRECTED: The servlet mapping is changed to /veranstaltungen to match all links and user expectations.
@WebServlet("/veranstaltungen")
public class EventServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(EventServlet.class);
	private EventDAO eventDAO;

	public void init() {
		eventDAO = new EventDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		logger.info("Fetching upcoming events for user '{}' (ID: {})", user.getUsername(), user.getId());

		// The DAO method intelligently calculates the most relevant status for the
		// user.
		List<Event> events = eventDAO.getUpcomingEventsForUser(user, 0); // 0 means no limit

		request.setAttribute("events", events);
		logger.debug("Found {} upcoming events for user '{}'. Forwarding to events.jsp.", events.size(),
				user.getUsername());
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/events.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\FeedbackServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.FeedbackDAO;
import de.technikteam.model.Event;
import de.technikteam.model.FeedbackForm;
import de.technikteam.model.FeedbackResponse;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

@WebServlet("/feedback")
public class FeedbackServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private FeedbackDAO feedbackDAO;
	private EventDAO eventDAO;

	@Override
	public void init() {
		feedbackDAO = new FeedbackDAO();
		eventDAO = new EventDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		String action = request.getParameter("action") == null ? "list" : request.getParameter("action");

		try {
			switch (action) {
			case "submit":
				showSubmitForm(request, response, user);
				break;
			case "view":
				viewFeedbackResults(request, response);
				break;
			default:
				// Default action will now redirect to profile, as the listing is integrated
				// there.
				response.sendRedirect(request.getContextPath() + "/profil");
				break;
			}
		} catch (Exception e) {
			throw new ServletException(e);
		}
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		String action = request.getParameter("action");

		if ("createForm".equals(action)) {
			int eventId = Integer.parseInt(request.getParameter("eventId"));
			Event event = eventDAO.getEventById(eventId);
			FeedbackForm form = new FeedbackForm();
			form.setEventId(eventId);
			form.setTitle("Feedback für Event: " + (event != null ? event.getName() : "Unbekannt"));
			feedbackDAO.createFeedbackForm(form);
			AdminLogService.log(user.getUsername(), "CREATE_FEEDBACK_FORM",
					"Feedback-Formular für Event-ID " + eventId + " erstellt.");
			response.sendRedirect(request.getContextPath() + "/admin/veranstaltungen");

		} else if ("submitResponse".equals(action)) {
			int formId = Integer.parseInt(request.getParameter("formId"));
			int rating = Integer.parseInt(request.getParameter("rating"));
			String comments = request.getParameter("comments");

			FeedbackResponse feedbackResponse = new FeedbackResponse();
			feedbackResponse.setFormId(formId);
			feedbackResponse.setUserId(user.getId());
			feedbackResponse.setRating(rating);
			feedbackResponse.setComments(comments);

			feedbackDAO.saveFeedbackResponse(feedbackResponse);
			request.getSession().setAttribute("successMessage", "Vielen Dank für dein Feedback!");
			response.sendRedirect(request.getContextPath() + "/profil");
		}
	}

	private void showSubmitForm(HttpServletRequest request, HttpServletResponse response, User user)
			throws ServletException, IOException {
		int eventId = Integer.parseInt(request.getParameter("eventId"));
		Event event = eventDAO.getEventById(eventId);
		FeedbackForm form = feedbackDAO.getFeedbackFormForEvent(eventId);

		if (form == null) {
			request.getSession().setAttribute("errorMessage", "Für dieses Event wurde noch kein Feedback angefordert.");
			response.sendRedirect(request.getContextPath() + "/profil");
			return;
		}

		if (feedbackDAO.hasUserSubmittedFeedback(form.getId(), user.getId())) {
			request.getSession().setAttribute("infoMessage", "Du hast bereits Feedback für dieses Event abgegeben.");
			response.sendRedirect(request.getContextPath() + "/profil");
			return;
		}

		request.setAttribute("event", event);
		request.setAttribute("form", form);
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/feedback_form.jsp").forward(request, response);
	}

	private void viewFeedbackResults(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		int eventId = Integer.parseInt(request.getParameter("eventId"));
		Event event = eventDAO.getEventById(eventId);
		FeedbackForm form = feedbackDAO.getFeedbackFormForEvent(eventId);

		if (form != null) {
			List<FeedbackResponse> responses = feedbackDAO.getResponsesForForm(form.getId());
			request.setAttribute("responses", responses);
		}

		request.setAttribute("event", event);
		// CORRECTED: Forward to a (currently non-existent but logically correct)
		// results page.
		// For now, let's assume it should have been named feedback_results.jsp.
		// If this file does not exist, it will 404, but the servlet logic is now
		// correct.
		request.getRequestDispatcher("/views/public/feedback_results.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\FileServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import de.technikteam.dao.FileDAO;
import de.technikteam.model.File;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Mapped to `/dateien`, this servlet handles the display of the main files and
 * documents page for users. It fetches all files the user is permitted to see,
 * grouped by category. In a unique step, it programmatically injects a
 * "virtual" file entry that links to the collaborative live editor, placing it
 * in a specific category for a seamless user experience.
 */
@WebServlet("/dateien")
public class FileServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(FileServlet.class);
	private FileDAO fileDAO;

	@Override
	public void init() {
		fileDAO = new FileDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		User user = (User) request.getSession().getAttribute("user");
		logger.info("File page requested by user '{}' (Role: {})", user.getUsername(), user.getRoleName());

		// 1. Fetch files from the database, already filtered by the user's role in the
		// DAO.
		Map<String, List<File>> fileData = fileDAO.getAllFilesGroupedByCategory(user);

		// 2. Create our "virtual" file object for the collaborative editor.
		File collaborativeFile = new File();
		collaborativeFile.setId(-1); // Use a special ID to identify it in the JSP.
		collaborativeFile.setFilename("Gemeinsamer Notizblock (Live-Editor)");
		collaborativeFile.setFilepath(null); // No physical file path.

		// 3. Add the virtual file to a specific category. If the category doesn't
		// exist, create it.
		String virtualCategoryName = "Allgemeine Dokumente";
		List<File> generalFiles = fileData.computeIfAbsent(virtualCategoryName, k -> new ArrayList<>());
		generalFiles.add(0, collaborativeFile); // Add to the beginning of the list.

		// 4. Send the modified map to the JSP.
		request.setAttribute("fileData", fileData);
		logger.debug("Forwarding file data (including virtual editor link) to dateien.jsp.");
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/dateien.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\HomeServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.MeetingDAO;
import de.technikteam.model.Event;
import de.technikteam.model.Meeting;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@WebServlet("/home")
public class HomeServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(HomeServlet.class);
	private EventDAO eventDAO;
	private MeetingDAO meetingDAO;

	@Override
	public void init() {
		eventDAO = new EventDAO();
		meetingDAO = new MeetingDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		logger.info("Home page requested by user '{}'. Fetching dashboard data.", user.getUsername());

		List<Event> upcomingEvents = eventDAO.getUpcomingEventsForUser(user, 3);
		logger.debug("Fetched {} upcoming events for home page.", upcomingEvents.size());

		List<Meeting> upcomingMeetings = meetingDAO.getUpcomingMeetingsForUser(user).stream().limit(3)
				.collect(Collectors.toList());
		logger.debug("Fetched {} upcoming meetings for home page.", upcomingMeetings.size());

		request.setAttribute("upcomingEvents", upcomingEvents);
		request.setAttribute("upcomingMeetings", upcomingMeetings);

		logger.debug("Forwarding to the correct home.jsp path.");
		// CORRECTED: The path must point to the new location inside /views/
		request.getRequestDispatcher("/views/public/home.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\IcalServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.MeetingDAO;
import de.technikteam.model.Event;
import de.technikteam.model.Meeting;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import net.fortuna.ical4j.data.CalendarOutputter;
import net.fortuna.ical4j.model.Calendar;
import net.fortuna.ical4j.model.component.VEvent;
import net.fortuna.ical4j.model.property.Description;
import net.fortuna.ical4j.model.property.DtEnd;
import net.fortuna.ical4j.model.property.DtStart;
import net.fortuna.ical4j.model.property.Location;
import net.fortuna.ical4j.model.property.ProdId;
import net.fortuna.ical4j.model.property.Summary;
import net.fortuna.ical4j.model.property.Url;
import net.fortuna.ical4j.model.property.Version;
import net.fortuna.ical4j.util.RandomUidGenerator;

// Import the required iCal4j DateTime class
import net.fortuna.ical4j.model.DateTime;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Date;
import java.util.List;

@WebServlet("/public/calendar.ics")
public class IcalServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private EventDAO eventDAO;
	private MeetingDAO meetingDAO;

	@Override
	public void init() {
		eventDAO = new EventDAO();
		meetingDAO = new MeetingDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			Calendar calendar = new Calendar();
			calendar.getProperties().add(new ProdId("-//TechnikTeam Calendar//iCal4j 3.2.4//DE"));
			calendar.getProperties().add(Version.VERSION_2_0);

			RandomUidGenerator uidGenerator = new RandomUidGenerator();
			String baseUrl = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()
					+ request.getContextPath();
			ZoneId systemZone = ZoneId.systemDefault();

			// Add Events
			List<Event> events = eventDAO.getAllActiveAndUpcomingEvents();
			for (Event event : events) {
				VEvent vEvent = new VEvent();
				vEvent.getProperties().add(uidGenerator.generateUid());

				// FINAL CORRECTION: Convert to java.util.Date and wrap in iCal4j's DateTime
				// object.
				if (event.getEventDateTime() != null) {
					ZonedDateTime zdtStart = event.getEventDateTime().atZone(systemZone);
					Date utilDateStart = Date.from(zdtStart.toInstant());
					vEvent.getProperties().add(new DtStart(new DateTime(utilDateStart)));
				}
				if (event.getEndDateTime() != null) {
					ZonedDateTime zdtEnd = event.getEndDateTime().atZone(systemZone);
					Date utilDateEnd = Date.from(zdtEnd.toInstant());
					vEvent.getProperties().add(new DtEnd(new DateTime(utilDateEnd)));
				}

				vEvent.getProperties().add(new Summary(event.getName()));
				if (event.getDescription() != null)
					vEvent.getProperties().add(new Description(event.getDescription()));
				if (event.getLocation() != null)
					vEvent.getProperties().add(new Location(event.getLocation()));
				try {
					vEvent.getProperties().add(new Url(new URI(baseUrl + "/eventDetails?id=" + event.getId())));
				} catch (URISyntaxException ignored) {
				}
				calendar.getComponents().add(vEvent);
			}

			// Add Meetings
			List<Meeting> meetings = meetingDAO.getAllUpcomingMeetings();
			for (Meeting meeting : meetings) {
				String title = meeting.getParentCourseName() + ": " + meeting.getName();
				VEvent vMeeting = new VEvent();
				vMeeting.getProperties().add(uidGenerator.generateUid());

				// FINAL CORRECTION: Apply the same robust conversion here.
				if (meeting.getMeetingDateTime() != null) {
					ZonedDateTime zdtStart = meeting.getMeetingDateTime().atZone(systemZone);
					Date utilDateStart = Date.from(zdtStart.toInstant());
					vMeeting.getProperties().add(new DtStart(new DateTime(utilDateStart)));
				}
				if (meeting.getEndDateTime() != null) {
					ZonedDateTime zdtEnd = meeting.getEndDateTime().atZone(systemZone);
					Date utilDateEnd = Date.from(zdtEnd.toInstant());
					vMeeting.getProperties().add(new DtEnd(new DateTime(utilDateEnd)));
				}

				vMeeting.getProperties().add(new Summary(title));
				if (meeting.getDescription() != null)
					vMeeting.getProperties().add(new Description(meeting.getDescription()));
				if (meeting.getLocation() != null)
					vMeeting.getProperties().add(new Location(meeting.getLocation()));
				try {
					vMeeting.getProperties().add(new Url(new URI(baseUrl + "/meetingDetails?id=" + meeting.getId())));
				} catch (URISyntaxException ignored) {
				}
				calendar.getComponents().add(vMeeting);
			}

			response.setContentType("text/calendar; charset=utf-8");
			response.setHeader("Content-Disposition", "inline; filename=\"technikteam-calendar.ics\"");
			CalendarOutputter outputter = new CalendarOutputter();
			outputter.output(calendar, response.getOutputStream());

		} catch (Exception e) {
			throw new ServletException("Error generating iCal feed", e);
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\ImageServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import de.technikteam.config.AppConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * Mapped to `/image`, this servlet acts as a secure proxy to serve images. It
 * prevents direct filesystem access by taking a `file` parameter, locating the
 * image within a designated `images` subdirectory in the main upload path, and
 * then streaming it to the browser. It sets the `Content-Disposition: inline`
 * header so the image is displayed directly on the web page rather than
 * downloaded.
 */
@WebServlet("/image")
public class ImageServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(ImageServlet.class);

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String filename = request.getParameter("file");
		if (filename == null || filename.isEmpty()) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing 'file' parameter.");
			return;
		}

		try {
			filename = URLDecoder.decode(filename, StandardCharsets.UTF_8.toString());
		} catch (IllegalArgumentException e) {
			logger.warn("Could not decode filename: {}", filename, e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid filename encoding.");
			return;
		}

		// Prevent path traversal
		if (filename.contains("..")) {
			logger.warn("Potential path traversal attack detected for image filename: {}", filename);
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied.");
			return;
		}

		// Construct the full path to the image file inside the 'images' subdirectory
		File imageFile = new File(AppConfig.UPLOAD_DIRECTORY + File.separator + "images", filename);

		if (!imageFile.exists() || !imageFile.isFile()) {
			logger.warn("Image not found at path: {}", imageFile.getAbsolutePath());
			response.sendError(HttpServletResponse.SC_NOT_FOUND, "Image not found.");
			return;
		}

		// Determine content type (MIME type) from file extension
		String contentType = getServletContext().getMimeType(imageFile.getName());
		if (contentType == null) {
			contentType = "application/octet-stream"; // Fallback if type is unknown
		}

		response.setContentType(contentType);
		response.setContentLengthLong(imageFile.length());

		// The 'inline' header tells the browser to display the file, not to download
		// it.
		response.setHeader("Content-Disposition", "inline; filename=\"" + imageFile.getName() + "\"");

		logger.debug("Serving image: {} with content type {}", imageFile.getAbsolutePath(), contentType);

		// Stream the file content to the response
		try (FileInputStream inStream = new FileInputStream(imageFile);
				OutputStream outStream = response.getOutputStream()) {

			byte[] buffer = new byte[4096];
			int bytesRead;

			while ((bytesRead = inStream.read(buffer)) != -1) {
				outStream.write(buffer, 0, bytesRead);
			}
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\LoginServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import de.technikteam.dao.UserDAO;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/login")
public class LoginServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(LoginServlet.class);
	private UserDAO userDAO;

	@Override
	public void init() {
		userDAO = new UserDAO();
		logger.info("LoginServlet initialized.");
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws IOException, ServletException {
		String username = request.getParameter("username");
		String password = request.getParameter("password");
		logger.info("Login attempt for username: {}", username);

		User user = userDAO.validateUser(username, password);

		if (user != null) {
			HttpSession session = request.getSession();
			session.setAttribute("user", user);
			session.setAttribute("username", user.getUsername());
			// Also store the permissions set directly in the session for the filter and
			// tags.
			session.setAttribute("permissions", user.getPermissions());

			logger.info("Login successful for user: {}. Role: {}. Redirecting to home.", user.getUsername(),
					user.getRoleName());
			response.sendRedirect(request.getContextPath() + "/home");
		} else {
			logger.warn("Login failed for username: {}. Invalid credentials.", username);
			request.setAttribute("errorMessage", "Benutzername oder Passwort ungültig.");
			// CORRECTED: Forward to the actual JSP file path.
			request.getRequestDispatcher("/views/auth/login.jsp").forward(request, response);
		}
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		logger.debug("GET request received for /login. Forwarding to login JSP.");
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/auth/login.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\LogoutServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/logout")
public class LogoutServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(LogoutServlet.class);

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession(false);
		String username = "Gast";

		if (session != null) {
			if (session.getAttribute("username") != null) {
				username = (String) session.getAttribute("username");
			}
			logger.info("Logging out user: {}. Invalidating session.", username);
			session.invalidate();
		} else {
			logger.warn("Logoutservlet called but no active session found.");
		}

		request.setAttribute("username", username);
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/auth/logout.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\MeetingActionServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.MeetingAttendanceDAO;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;

/**
 * Mapped to `/meeting-action`, this servlet processes POST requests from the
 * main course/meeting listing page (`lehrgaenge.jsp`). It allows a logged-in
 * user to either sign up for (`signup`) or sign off from (`signoff`) a specific
 * meeting by updating the `meeting_attendance` table via the
 * `MeetingAttendanceDAO`.
 */
@WebServlet("/meeting-action")
public class MeetingActionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(MeetingActionServlet.class);
	private MeetingAttendanceDAO attendanceDAO;

	@Override
	public void init() {
		attendanceDAO = new MeetingAttendanceDAO();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		String action = request.getParameter("action");
		String meetingIdParam = request.getParameter("meetingId");

		if (user == null || action == null || meetingIdParam == null) {
			logger.warn("Invalid request to MeetingActionServlet. Missing user, action, or meetingId.");
			response.sendRedirect(request.getContextPath() + "/lehrgaenge");
			return;
		}

		try {
			int meetingId = Integer.parseInt(meetingIdParam);
			logger.info("User '{}' (ID: {}) performing action '{}' on meeting ID {}", user.getUsername(), user.getId(),
					action, meetingId);

			if ("signup".equals(action)) {
				// The DAO method handles both new signups and re-signups.
				attendanceDAO.setAttendance(user.getId(), meetingId, true, "");
				request.getSession().setAttribute("successMessage", "Erfolgreich zum Meeting angemeldet.");
			} else if ("signoff".equals(action)) {
				attendanceDAO.setAttendance(user.getId(), meetingId, false, "");
				request.getSession().setAttribute("successMessage", "Erfolgreich vom Meeting abgemeldet.");
			}
		} catch (NumberFormatException e) {
			logger.error("Invalid meeting ID format in MeetingActionServlet.", e);
			request.getSession().setAttribute("errorMessage", "Ungültige Meeting-ID.");
		}

		// Redirect back to the meeting list page to show the updated status.
		response.sendRedirect(request.getContextPath() + "/lehrgaenge");
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\MeetingDetailsServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.MeetingAttachmentDAO;
import de.technikteam.dao.MeetingDAO;
import de.technikteam.model.Meeting;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;

/**
 * Mapped to `/meetingDetails`, this servlet handles GET requests to display the
 * detailed view of a single course meeting. It fetches the core meeting data as
 * well as any associated file attachments, applying role-based filtering for
 * the attachments. The collected data is then forwarded to
 * `meetingDetails.jsp`.
 */
@WebServlet("/meeting/details")
public class MeetingDetailsServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(MeetingDetailsServlet.class);
	private MeetingDAO meetingDAO;
	private MeetingAttachmentDAO attachmentDAO;

	@Override
	public void init() {
		meetingDAO = new MeetingDAO();
		attachmentDAO = new MeetingAttachmentDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String meetingIdParam = request.getParameter("id");
		if (meetingIdParam == null || meetingIdParam.isEmpty()) {
			logger.warn("Bad request to MeetingDetailsServlet: missing ID parameter.");
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Meeting-ID fehlt.");
			return;
		}

		try {
			int meetingId = Integer.parseInt(meetingIdParam);
			User user = (User) request.getSession().getAttribute("user");
			logger.info("Meeting details for ID {} requested by user '{}'", meetingId, user.getUsername());

			Meeting meeting = meetingDAO.getMeetingById(meetingId);

			if (meeting == null) {
				logger.warn("Meeting with ID {} not found.", meetingId);
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Meeting nicht gefunden.");
				return;
			}

			// If current user is the leader, they act as an ADMIN for viewing attachments
			String attachmentUserRole = user.getRoleName();
			if (user.getId() == meeting.getLeaderUserId()) {
				attachmentUserRole = "ADMIN";
				logger.debug("User {} is leader of meeting {}. Granting admin view for attachments.",
						user.getUsername(), meetingId);
			}

			// Fetch attachments for the meeting, respecting the user's role (or leader
			// override)
			request.setAttribute("attachments", attachmentDAO.getAttachmentsForMeeting(meetingId, attachmentUserRole));
			request.setAttribute("meeting", meeting);

			logger.debug("Forwarding to meetingDetails.jsp for meeting '{}'", meeting.getName());
			// CORRECTED: Forward to the actual JSP file path.
			request.getRequestDispatcher("/views/public/meetingDetails.jsp").forward(request, response);

		} catch (NumberFormatException e) {
			logger.error("Invalid meeting ID format: {}", meetingIdParam, e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Meeting-ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\MeetingServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.MeetingDAO;
import de.technikteam.model.Meeting;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;

/**
 * Mapped to `/lehrgaenge`, this servlet is responsible for the main
 * course/meeting listing page for a logged-in user. It fetches a list of all
 * upcoming meetings and enriches each one with the user's specific attendance
 * status (e.g., ANGEMELDET, ABGEMELDET, OFFEN). This data is then passed to
 * `lehrgaenge.jsp` for rendering.
 */
// CORRECTED: The servlet mapping was /meeting, but all links and context point to /lehrgaenge.
@WebServlet("/lehrgaenge")
public class MeetingServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(MeetingServlet.class);
	private MeetingDAO meetingDAO;

	@Override
	public void init() {
		meetingDAO = new MeetingDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		logger.info("Fetching upcoming meetings for user '{}' (ID: {})", user.getUsername(), user.getId());

		List<Meeting> meetings = meetingDAO.getUpcomingMeetingsForUser(user);

		request.setAttribute("meetings", meetings);
		logger.debug("Found {} upcoming meetings. Forwarding to lehrgaenge.jsp.", meetings.size());
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/lehrgaenge.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\NotificationServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import de.technikteam.service.NotificationService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Mapped to `/notifications`, this servlet is the entry point for clients
 * wanting to receive real-time updates via Server-Sent Events (SSE). On a GET
 * request, it establishes a persistent connection by setting the appropriate
 * headers and registering the client's asynchronous context with the singleton
 * `NotificationService`. It requires an active user session to connect.
 */
@WebServlet(urlPatterns = "/notifications", asyncSupported = true)
public class NotificationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(NotificationServlet.class);

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		HttpSession session = request.getSession(false);
		if (session == null || session.getAttribute("user") == null) {
			logger.warn("Unauthorized attempt to connect to SSE stream. No session.");
			response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
			return;
		}

		logger.info("Client '{}' connecting to SSE stream.", session.getAttribute("username"));

		// Set headers for Server-Sent Events
		response.setContentType("text/event-stream");
		response.setCharacterEncoding("UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		response.setHeader("Connection", "keep-alive");

		// Register the client with the notification service
		NotificationService.getInstance().register(request);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\PasswordServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import de.technikteam.dao.UserDAO;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * Mapped to `/passwort`, this servlet allows a logged-in user to change their
 * own password. It handles GET requests by displaying the change form
 * (`passwort.jsp`) and POST requests by processing the password change. This
 * includes validating the user's current password and ensuring the new password
 * confirmation matches before updating the database via `UserDAO`.
 */
@WebServlet("/passwort")
public class PasswordServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(PasswordServlet.class);
	private UserDAO userDAO;

	public void init() {
		userDAO = new UserDAO();
		logger.info("PasswordServlet initialized.");
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		logger.debug("GET request received, showing password change form.");
		request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			response.sendRedirect(request.getContextPath() + "/login");
			return;
		}

		logger.info("Password change attempt for user: {}", user.getUsername());

		String currentPassword = request.getParameter("currentPassword");
		String newPassword = request.getParameter("newPassword");
		String confirmPassword = request.getParameter("confirmPassword");

		// Validate that the user knows their current password
		User authenticatedUser = userDAO.validateUser(user.getUsername(), currentPassword);
		if (authenticatedUser == null) {
			logger.warn("Password change failed for {}: incorrect current password.", user.getUsername());
			request.setAttribute("errorMessage", "Das aktuelle Passwort ist nicht korrekt.");
			request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
			return;
		}

		if (!newPassword.equals(confirmPassword)) {
			logger.warn("Password change failed for {}: new passwords do not match.", user.getUsername());
			request.setAttribute("errorMessage", "Die neuen Passwörter stimmen nicht überein.");
			request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
			return;
		}

		if (newPassword.trim().isEmpty()) {
			logger.warn("Password change failed for {}: new password is empty.", user.getUsername());
			request.setAttribute("errorMessage", "Das neue Passwort darf nicht leer sein.");
			request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
			return;
		}

		boolean success = userDAO.changePassword(user.getId(), newPassword);
		if (success) {
			logger.info("Password successfully changed for user: {}", user.getUsername());
			request.setAttribute("successMessage", "Ihr Passwort wurde erfolgreich geändert.");
		} else {
			logger.error("Password change failed for {} due to a DAO error.", user.getUsername());
			request.setAttribute("errorMessage", "Ein interner Fehler ist aufgetreten. Bitte versuchen Sie es erneut.");
		}
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\ProfileServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.UserQualificationsDAO;
import de.technikteam.model.Event;
import de.technikteam.model.User;
import de.technikteam.model.UserQualification;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet; // CORRECTION: Import the WebServlet annotation.
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

// CORRECTION: Add the WebServlet annotation to map this servlet to the "/profile" URL.
@WebServlet("/profil")
public class ProfileServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private EventDAO eventDAO;
	private UserQualificationsDAO qualificationsDAO;

	@Override
	public void init() {
		eventDAO = new EventDAO();
		qualificationsDAO = new UserQualificationsDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			response.sendRedirect(request.getContextPath() + "/login");
			return;
		}

		// Fetch all data needed for the profile page
		List<Event> eventHistory = eventDAO.getEventHistoryForUser(user.getId());
		List<UserQualification> qualifications = qualificationsDAO.getQualificationsForUser(user.getId());

		// Set the data as request attributes for the JSP
		request.setAttribute("eventHistory", eventHistory);
		request.setAttribute("qualifications", qualifications);

		// Forward the request to the JSP for rendering
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/profile.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageHistoryApiServlet.java
========================================================================

package de.technikteam.servlet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.StorageLogDAO;
import de.technikteam.model.StorageLogEntry;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Provides a JSON API to fetch the usage history for a specific storage item.
 */
@WebServlet("/api/storage-history")
public class StorageHistoryApiServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = LogManager.getLogger(StorageHistoryApiServlet.class);
    private StorageLogDAO logDAO;
    private Gson gson;

    @Override
    public void init() {
        logDAO = new StorageLogDAO();
        gson = new GsonBuilder()
                .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter())
                .create();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            int itemId = Integer.parseInt(request.getParameter("itemId"));
            logger.debug("API request for storage history for item ID: {}", itemId);
            List<StorageLogEntry> history = logDAO.getHistoryForItem(itemId);

            String jsonResponse = gson.toJson(history);
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write(jsonResponse);

        } catch (NumberFormatException e) {
            logger.warn("Bad request to storage history API: invalid or missing itemId");
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid or missing itemId.");
        }
    }
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageItemActionServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.StorageDAO;
import de.technikteam.model.Event;
import de.technikteam.model.StorageItem;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

@WebServlet("/lager/aktionen")
public class StorageItemActionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private StorageDAO storageDAO;
	private EventDAO eventDAO;

	@Override
	public void init() {
		storageDAO = new StorageDAO();
		eventDAO = new EventDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			int itemId = Integer.parseInt(request.getParameter("id"));
			StorageItem item = storageDAO.getItemById(itemId);
			List<Event> activeEvents = eventDAO.getActiveEvents();

			if (item == null) {
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Artikel nicht gefunden.");
				return;
			}
			request.setAttribute("item", item);
			request.setAttribute("activeEvents", activeEvents);
			// CORRECTED: Forward to the actual JSP file path.
			request.getRequestDispatcher("/views/public/qr_action.jsp").forward(request, response);
		} catch (NumberFormatException e) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Artikel-ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageItemDetailsServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.StorageDAO;
import de.technikteam.dao.StorageLogDAO;
import de.technikteam.model.StorageItem;
import de.technikteam.model.StorageLogEntry;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;

/**
 * Mapped to `/lager/details`, this servlet now displays a comprehensive,
 * public-facing detail page for a single inventory item. It fetches the item's
 * core data AND its full transaction history ("chronic"), forwarding both to
 * `storage_item_details.jsp` for rendering a unified view.
 */
@WebServlet("/lager/details")
public class StorageItemDetailsServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(StorageItemDetailsServlet.class);
	private StorageDAO storageDAO;
	private StorageLogDAO storageLogDAO; // Added for fetching history

	@Override
	public void init() {
		storageDAO = new StorageDAO();
		storageLogDAO = new StorageLogDAO(); // Initialize the log DAO
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			int itemId = Integer.parseInt(request.getParameter("id"));
			logger.info("Comprehensive storage item details requested for ID: {}", itemId);

			StorageItem item = storageDAO.getItemById(itemId);

			if (item == null) {
				logger.warn("Storage item with ID {} not found.", itemId);
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Artikel nicht gefunden.");
				return;
			}

			// Fetch the transaction history for the item
			List<StorageLogEntry> history = storageLogDAO.getHistoryForItem(itemId);

			request.setAttribute("item", item);
			request.setAttribute("history", history); // Pass history to the JSP

			logger.debug("Forwarding to storage_item_details.jsp for item '{}' with {} history entries.",
					item.getName(), history.size());
			// CORRECTED: Forward to the actual JSP file path.
			request.getRequestDispatcher("/views/public/storage_item_details.jsp").forward(request, response);

		} catch (NumberFormatException e) {
			logger.error("Invalid storage item ID format in request.", e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Artikel-ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.StorageDAO;
import de.technikteam.model.Event;
import de.technikteam.model.StorageItem;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * This servlet, mapped to `/lager`, is responsible for displaying the main
 * inventory/storage page for users. On a GET request, it fetches all storage
 * items from the database, grouped by their physical location, and forwards
 * this structured data to `/views/public/lager.jsp` for rendering.
 */
@WebServlet("/lager")
public class StorageServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(StorageServlet.class);
	private StorageDAO storageDAO;
	private EventDAO eventDAO;

	public void init() {
		storageDAO = new StorageDAO();
		eventDAO = new EventDAO();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		logger.info("Main storage page requested. Fetching all items.");

		// Fetch all items, grouped by their location (e.g., "Erdgeschoss",
		// "Lagercontainer").
		Map<String, List<StorageItem>> storageData = storageDAO.getAllItemsGroupedByLocation();
		List<Event> activeEvents = eventDAO.getActiveEvents();

		request.setAttribute("storageData", storageData);
		request.setAttribute("activeEvents", activeEvents);
		logger.debug("Forwarding {} location groups to /views/public/lager.jsp.", storageData.size());
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/lager.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageTransactionServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.StorageDAO;
import de.technikteam.dao.StorageLogDAO;
import de.technikteam.model.StorageItem;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/lager/transaktion")
public class StorageTransactionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(StorageTransactionServlet.class);
	private StorageDAO storageDAO;
	private StorageLogDAO storageLogDAO;

	@Override
	public void init() {
		storageDAO = new StorageDAO();
		storageLogDAO = new StorageLogDAO();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		String redirectUrl = request.getParameter("redirectUrl");
		if (redirectUrl == null || redirectUrl.isEmpty()) {
			redirectUrl = request.getContextPath() + "/lager";
		}

		try {
			int itemId = Integer.parseInt(request.getParameter("itemId"));
			int quantity = Integer.parseInt(request.getParameter("quantity"));
			String type = request.getParameter("type"); // "checkout" or "checkin"
			String notes = request.getParameter("notes");
			Integer eventId = null;
			try {
				eventId = Integer.parseInt(request.getParameter("eventId"));
				if (eventId == 0)
					eventId = null; // Treat 0 as null
			} catch (NumberFormatException e) {
				// Ignore if not provided or invalid
			}

			int quantityChange = "checkin".equals(type) ? quantity : -quantity;
			logger.info("Processing storage transaction by user '{}': item ID {}, quantity change {}",
					user.getUsername(), itemId, quantityChange);

			boolean success = false;
			StorageItem item = storageDAO.getItemById(itemId);

			if (item == null) {
				throw new ServletException("Item with ID " + itemId + " not found.");
			}

			if ("checkout".equals(type)) {
				if (item.getAvailableQuantity() >= quantity) {
					success = storageDAO.updateItemQuantity(itemId, quantityChange);
					if (success) {
						storageDAO.updateItemHolderAndStatus(itemId, "CHECKED_OUT", user.getId(), eventId);
					}
				}
			} else if ("checkin".equals(type)) {
				// Allow check-in even if it exceeds max quantity, but ensure it's not a holder
				// anymore
				success = storageDAO.updateItemQuantity(itemId, quantityChange);
				if (success) {
					// Only change status if the current user is the holder
					if (item.getCurrentHolderUserId() == user.getId()) {
						storageDAO.updateItemHolderAndStatus(itemId, "IN_STORAGE", null, null);
					}
				}
			}

			if (success) {
				storageLogDAO.logTransaction(itemId, user.getId(), quantityChange, notes,
						eventId != null ? eventId : 0);

				String itemName = item.getName();
				String action = "checkin".equals(type) ? "eingeräumt" : "entnommen";
				String logDetails = String.format("%d x '%s' (ID: %d) %s. Notiz: %s", quantity, itemName, itemId,
						action, notes);
				AdminLogService.log(user.getUsername(), "STORAGE_TRANSACTION", logDetails);

				request.getSession().setAttribute("successMessage",
						"Erfolgreich " + quantity + " Stück " + action + ".");
			} else {
				logger.warn("Storage transaction failed for item ID {}. Not enough stock or other issue.", itemId);
				request.getSession().setAttribute("errorMessage",
						"Transaktion fehlgeschlagen. Nicht genügend Artikel auf Lager?");
			}

		} catch (NumberFormatException e) {
			logger.error("Invalid number format in storage transaction request.", e);
			request.getSession().setAttribute("errorMessage", "Fehler: Ungültiges Zahlenformat.");
		} catch (SQLException e) {
			logger.error("SQL error during storage transaction.", e);
			request.getSession().setAttribute("errorMessage", "Datenbankfehler bei der Transaktion: " + e.getMessage());
		}

		response.sendRedirect(redirectUrl);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\TaskActionServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventTaskDAO;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;

/**
 * Mapped to `/task-action`, this servlet handles task status updates initiated
 * by non-admin users, typically via AJAX from the event details page. It
 * processes a POST request to change a task's status (e.g., from "OFFEN" to
 * "ERLEDIGT") when a user checks a checkbox corresponding to their assigned
 * task.
 */
@WebServlet("/task-action")
public class TaskActionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(TaskActionServlet.class);
	private EventTaskDAO taskDAO;

	@Override
	public void init() {
		taskDAO = new EventTaskDAO();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
			return;
		}

		try {
			int taskId = Integer.parseInt(request.getParameter("taskId"));
			String status = request.getParameter("status");
			logger.info("User '{}' is updating task ID {} to status '{}'", user.getUsername(), taskId, status);

			if (taskDAO.updateTaskStatus(taskId, status)) {
				response.setStatus(HttpServletResponse.SC_OK);
			} else {
				logger.error("Failed to update task status for task ID {}", taskId);
				response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Task status could not be updated.");
			}
		} catch (NumberFormatException e) {
			logger.error("Invalid task ID format in task-action request.", e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid task ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\DaoUtils.java
========================================================================

package de.technikteam.util;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

/**
 * A utility class for common Data Access Object (DAO) helper methods.
 */
public class DaoUtils {

    /**
     * Private constructor to prevent instantiation.
     */
    private DaoUtils() {
    }

    /**
     * Checks if a ResultSet contains a column with the given name
     * (case-insensitive).
     *
     * @param rs         The ResultSet to check.
     * @param columnName The name of the column.
     * @return true if the column exists, false otherwise.
     * @throws SQLException If a database error occurs.
     */
    public static boolean hasColumn(ResultSet rs, String columnName) throws SQLException {
        ResultSetMetaData rsmd = rs.getMetaData();
        int columns = rsmd.getColumnCount();
        for (int x = 1; x <= columns; x++) {
            if (columnName.equalsIgnoreCase(rsmd.getColumnName(x))) {
                return true;
            }
        }
        return false;
    }
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\ServletUtils.java
========================================================================

package de.technikteam.util;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;
import jakarta.servlet.http.Part;

/**
 * A utility class for common Servlet helper methods.
 */
public class ServletUtils {

	/**
	 * Private constructor to prevent instantiation.
	 */
	private ServletUtils() {
	}

	/**
	 * Extracts the string value from a `multipart/form-data` part.
	 *
	 * @param part The Part object to extract the value from.
	 * @return The string value of the part, or null if the part is null.
	 * @throws IOException if an I/O error occurs.
	 */
	public static String getPartValue(Part part) throws IOException {
		if (part == null) {
			return null;
		}
		try (InputStream inputStream = part.getInputStream();
				Scanner scanner = new Scanner(inputStream, StandardCharsets.UTF_8.name())) {
			return scanner.useDelimiter("\\A").hasNext() ? scanner.next() : "";
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\log4j2.xml
========================================================================

<?xml version="1.0" encoding="UTF-8"?>
<!-- Log4j2 Configuration File This file controls all logging behavior for 
	the application. It defines where log messages are sent (appenders) and at 
	what detail level (loggers). It's configured to log to both the server console 
	(for live debugging in Eclipse) and a rolling file on the server's filesystem 
	for persistent records. -->
<Configuration status="WARN">
	<Properties>
		<!-- Use the 'catalina.base' system property provided by Tomcat to create 
			the logs folder in a guaranteed writable location relative to the server 
			instance (e.g., .../wst.server.core/tmp0/logs). This avoids permission issues 
			with writing to the source directory. -->
		<Property name="log-path">${sys:catalina.base}/logs</Property>
	</Properties>

	<Appenders>
		<!-- Console Appender: Sends log output to SYSTEM_OUT, which is typically 
			visible in the Eclipse Console view. -->
		<Console name="Console" target="SYSTEM_OUT">
			<!-- Pattern includes: timestamp, thread name, log level, logger name 
				(abbreviated), the log message, and a newline. -->
			<PatternLayout
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
		</Console>

		<!-- Rolling File Appender: Writes logs to a file. It "rolls over" (creates 
			a new file) based on time (daily) or size (10 MB), keeping a maximum of 10 
			old log files compressed in .gz format. -->
		<RollingFile name="RollingFile"
			fileName="${log-path}/technik-team-app.log"
			filePattern="${log-path}/technik-team-app-%d{MM-dd-yyyy}-%i.log.gz">
			<PatternLayout>
				<Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} -
					%msg%n</Pattern>
			</PatternLayout>
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="10 MB" />
			</Policies>
			<DefaultRolloverStrategy max="10" />
		</RollingFile>
	</Appenders>

	<Loggers>
		<!-- Application-specific Logger: Logs all messages from the 'de.technikteam' 
			package and its sub-packages at the DEBUG level or higher (DEBUG, INFO, WARN, 
			ERROR, FATAL). 'additivity="false"' prevents these messages from being passed 
			up to the root logger, avoiding duplicate output. -->
		<Logger name="de.technikteam" level="debug" additivity="false">
			<AppenderRef ref="Console" />
			<AppenderRef ref="RollingFile" />
		</Logger>

		<!-- Root Logger: This is the catch-all logger for all other libraries 
			used in the project (e.g., Tomcat, HikariCP, etc.). Setting it to WARN reduces 
			log noise by only showing important warnings and errors from third-party 
			code. -->
		<Root level="warn">
			<AppenderRef ref="Console" />
			<AppenderRef ref="RollingFile" />
		</Root>
	</Loggers>
</Configuration>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\css\style.css
========================================================================

/* =================================================================== */
/*  TECHNIKTEAM DESIGN V3 (Component-Based & Modern)                   */
/* =================================================================== */

/* --- 1. THEME & COLOR PALETTE (Vibrant) --- */
:root {
	--primary-color: #007bff; /* Bright Blue */
	--primary-color-hover: #0056b3;
	--primary-color-light: rgba(0, 123, 255, 0.1);
	--bg-color: #f8f9fa;
	--surface-color: #ffffff;
	--text-color: #212529;
	--text-muted-color: #2a9d8f; /* Green for muted text */
	--border-color: #dee2e6;
	--success-color: #28a745; /* Green */
	--success-hover-color: #1e7e34;
	--warning-color: #ffc107; /* Amber/Yellow */
	--warning-hover-color: #d39e00;
	--danger-color: #dc3545; /* Red */
	--danger-hover-color: #c82333;
	--info-color: #0dcaf0; /* Vibrant Cyan */
	--shadow-sm: 0 1px 2px 0 rgb(0 0 0/ 0.05);
	--shadow-md: 0 4px 6px -1px rgb(0 0 0/ 0.1), 0 2px 4px -2px
		rgb(0 0 0/ 0.1);
	--sidebar-width: 260px;
	--header-height: 64px;
	--border-radius: 8px;
	/* Sidebar colors for Light Theme */
	--sidebar-bg: var(--surface-color);
	--sidebar-border: var(--border-color);
	--sidebar-text-color: var(--text-color);
	--sidebar-text-muted: var(--text-muted-color);
	--sidebar-hover-bg: var(--primary-color-light);
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
}

[data-theme="dark"] {
	--primary-color: #58a6ff;
	--primary-color-hover: #80b6ff;
	--primary-color-light: rgba(88, 166, 255, 0.15);
	--bg-color: #0d1117;
	--surface-color: #161b22;
	--text-color: #c9d1d9;
	--text-muted-color: #6ee3d7; /* Lighter Green for dark mode muted text */
	--border-color: #30363d;
	--success-color: #56d364;
	--success-hover-color: #6eeba1;
	--warning-color: #f0b72f;
	--warning-hover-color: #f5d442;
	--danger-color: #f87171;
	--danger-hover-color: #fa9191;
	--info-color: #67d4ed; /* Brighter Cyan for dark theme */
	/* Sidebar colors for Dark Theme */
	--sidebar-bg: #161b22;
	--sidebar-border: #30363d;
	--sidebar-text-color: #c9d1d9;
	--sidebar-text-muted: var(--text-muted-color);
	--sidebar-hover-bg: rgba(255, 255, 255, 0.05);
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
}

/* --- 2. BASE & TYPOGRAPHY --- */
*, *::before, *::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

html {
	scroll-behavior: smooth;
}

body {
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
		"Helvetica Neue", Arial, sans-serif;
	background-color: var(--bg-color);
	color: var(--text-color);
	line-height: 1.6;
	transition: background-color 0.3s, color 0.3s;
}

h1, h2, h3, h4 {
	color: var(--text-color);
	line-height: 1.3;
}

h1 {
	font-size: clamp(1.8rem, 5vw, 2.2rem);
	font-weight: 700;
	margin-bottom: 1rem;
}

h2 {
	font-size: clamp(1.2rem, 4vw, 1.5rem);
	margin-bottom: 1.25rem;
	padding-bottom: 0.75rem;
	border-bottom: 1px solid var(--border-color);
	font-weight: 600;
}

h3 {
	font-size: 1.25rem;
	margin-bottom: 1rem;
	font-weight: 600;
}

a {
	color: var(--primary-color);
	text-decoration: none;
	transition: color 0.2s;
}

a:hover {
	text-decoration: underline;
	color: var(--primary-color-hover);
}

.text-success { color: var(--success-color); }
.text-danger { color: var(--danger-color); }
.text-warning { color: var(--warning-color); }
.text-muted { color: var(--text-muted-color); }

/* --- 3. LAYOUT & CONTAINERS --- */
.main-content-wrapper {
	transition: margin-left 0.3s ease-in-out;
}
.main-content-wrapper.no-sidebar {
    margin-left: 0;
}
.main-content {
	padding: 1.5rem;
	max-width: 1600px;
	margin-left: auto;
	margin-right: auto;
}

.card {
	background: var(--surface-color);
	border-radius: var(--border-radius);
	padding: 1.5rem;
	margin-bottom: 1.5rem;
	box-shadow: var(--shadow-sm);
	border: 1px solid var(--border-color);
}

.card-title {
	border: none;
	padding: 0;
	margin-bottom: 1rem;
}

.dashboard-grid {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	gap: 1.5rem;
}

.responsive-form-grid {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
	gap: 1rem;
}

/* --- 4. NAVIGATION --- */
.sidebar {
	position: fixed;
	top: 0;
	left: calc(-1 * var(--sidebar-width));
	width: var(--sidebar-width);
	height: 100%;
	background: var(--sidebar-bg);
	border-right: 1px solid var(--sidebar-border);
	color: var(--sidebar-text-color);
	z-index: 1010;
	transition: left 0.3s ease-in-out, background-color 0.3s, border-color 0.3s;
	display: flex;
	flex-direction: column;
}

body.nav-open .sidebar {
	left: 0;
	box-shadow: var(--shadow-md);
}

.sidebar-header {
	display: flex;
	align-items: center;
	gap: 0.75rem;
	padding: 0 1.5rem;
	height: var(--header-height);
	flex-shrink: 0;
}

.sidebar-header .logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--sidebar-text-color);
	text-decoration: none;
}

.sidebar-header .logo i {
	color: var(--primary-color);
}

.sidebar-nav {
	list-style: none;
	flex-grow: 1;
	overflow-y: auto;
}

.sidebar-nav a {
	display: flex;
	align-items: center;
	gap: 1rem;
	padding: 0.9rem 1.5rem;
	color: var(--sidebar-text-muted);
	font-weight: 500;
	transition: all 0.2s;
	border-left: 4px solid transparent;
	white-space: nowrap;
	text-decoration: none;
}

.sidebar-nav a:hover {
	color: var(--sidebar-text-color);
	background-color: var(--sidebar-hover-bg);
}

.sidebar-nav a.active-nav-link {
	color: var(--sidebar-text-color);
	font-weight: 600;
	border-left-color: var(--sidebar-active-border);
	background-color: var(--sidebar-active-bg);
}

.sidebar-nav a i.fa-fw {
	width: 20px;
	text-align: center;
}

.sidebar-nav .nav-section-title {
	padding: 1.5rem 1.5rem 0.5rem;
	font-size: 0.8rem;
	font-weight: 600;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	color: var(--sidebar-text-muted);
}

.user-actions {
	padding: 1rem 1.5rem;
	border-top: 1px solid var(--sidebar-border);
	flex-shrink: 0;
}

.user-info {
	font-weight: 500;
	margin-bottom: 1rem;
	font-size: 0.9rem;
	color: var(--sidebar-text-muted);
}

.user-info strong {
	color: var(--sidebar-text-color);
}

.mobile-header {
	display: flex;
	align-items: center;
	justify-content: space-between;
	height: var(--header-height);
	background-color: var(--surface-color);
	padding: 0 1rem;
	position: sticky;
	top: 0;
	z-index: 1000;
	border-bottom: 1px solid var(--border-color);
}

.mobile-nav-toggle {
	background: none;
	border: none;
	cursor: pointer;
	padding: 0.5rem;
	z-index: 1020;
}

.mobile-nav-toggle .line {
	width: 25px;
	height: 3px;
	background-color: var(--text-color);
	margin: 5px 0;
	border-radius: 3px;
	transition: all 0.3s;
}

body.nav-open .mobile-nav-toggle .line-1 { transform: rotate(45deg) translate(5px, 6px); }
body.nav-open .mobile-nav-toggle .line-2 { opacity: 0; }
body.nav-open .mobile-nav-toggle .line-3 { transform: rotate(-45deg) translate(5px, -6px); }

.mobile-logo {
	font-weight: 600;
	font-size: 1.2rem;
	color: var(--text-color);
	text-decoration: none;
}

.page-overlay {
	display: none;
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: rgba(0, 0, 0, 0.5);
	z-index: 1005;
}

body.nav-open .page-overlay {
	display: block;
}

@media ( min-width : 992px) {
	.mobile-header, .page-overlay {
		display: none !important;
	}
	.sidebar {
		left: 0;
	}
	.main-content-wrapper {
		margin-left: var(--sidebar-width);
	}
}

/* --- 5. COMPONENTS --- */

/* Buttons */
.btn {
	display: inline-flex; align-items: center; justify-content: center;
	gap: 0.5rem; padding: 0.6rem 1.2rem;
	background-color: var(--primary-color); color: #fff;
	border: 1px solid transparent; border-radius: 6px;
	cursor: pointer; font-weight: 500; transition: all 0.2s;
	text-align: center; text-decoration: none;
}
.btn:hover {
	background-color: var(--primary-color-hover); color: #fff;
	text-decoration: none; transform: translateY(-1px);
}
.btn.btn-danger { background-color: var(--danger-color); }
.btn.btn-danger:hover { background-color: var(--danger-hover-color); }
.btn.btn-success { background-color: var(--success-color); }
.btn.btn-success:hover { background-color: var(--success-hover-color); }

/* Messages & Banners */
.success-message, .error-message, .info-message {
	padding: 1rem; margin-bottom: 1.5rem;
	border-radius: var(--border-radius); font-weight: 500;
	display: flex; align-items: center; gap: 0.75rem; color: #fff;
}
.success-message { background-color: var(--success-color); }
.error-message { background-color: var(--danger-color); }
.info-message { background-color: var(--info-color); color: #000; }

/* Forms & Inputs */
.form-group { margin-bottom: 1.25rem; }
.form-group label { display: block; margin-bottom: 0.5rem; font-weight: 500; color: var(--text-muted-color); }
.form-group input, .form-group select, .form-group textarea {
	width: 100%; padding: 0.75rem; border: 1px solid var(--border-color);
	border-radius: 6px; background-color: var(--surface-color);
	color: var(--text-color); font-size: 1rem;
	transition: border-color 0.2s, box-shadow 0.2s;
}
.form-group input:focus, .form-group select:focus, .form-group textarea:focus {
	outline: none; border-color: var(--primary-color);
	box-shadow: 0 0 0 2px var(--primary-color-light);
}

/* Modals */
.modal-overlay {
	position: fixed; top: 0; left: 0; width: 100%; height: 100%;
	background-color: rgba(0, 0, 0, 0.6);
	display: flex; justify-content: center; align-items: center;
	z-index: 2000; opacity: 0; visibility: hidden;
	transition: opacity 0.3s, visibility 0.3s;
}
.modal-overlay.active { opacity: 1; visibility: visible; }
.modal-content {
	background-color: var(--surface-color);
	padding: 2rem; border-radius: var(--border-radius);
	width: 90%; max-width: 600px; max-height: 90vh;
	overflow-y: auto; position: relative;
	transform: scale(0.9); transition: transform 0.3s;
}
.modal-overlay.active .modal-content { transform: scale(1); }
.modal-close-btn {
	position: absolute; top: 1rem; right: 1rem;
	background: none; border: none; font-size: 1.5rem;
	cursor: pointer; color: var(--text-muted-color);
}
.modal-tabs { display: flex; border-bottom: 1px solid var(--border-color); margin-bottom: 1.5rem; }
.modal-tab-button {
	padding: 0.75rem 1rem; border: none; background: none; cursor: pointer;
	font-size: 1rem; font-weight: 500; color: var(--text-muted-color);
	border-bottom: 3px solid transparent; transition: all 0.2s;
}
.modal-tab-button.active { color: var(--primary-color); border-bottom-color: var(--primary-color); }
.modal-tab-content { display: none; }
.modal-tab-content.active { display: block; }

/* --- 6. TABLES & RESPONSIVE LISTS --- */
.table-wrapper {
	border: 1px solid var(--border-color); border-radius: var(--border-radius);
	overflow-x: auto; background-color: var(--surface-color);
}
.data-table { width: 100%; border-collapse: collapse; }
.data-table th, .data-table td { padding: 1rem; text-align: left; border-bottom: 1px solid var(--border-color); white-space: nowrap; }
.data-table thead th { font-size: 0.8rem; text-transform: uppercase; letter-spacing: 0.05em; color: var(--text-muted-color); background-color: var(--bg-color); }
.mobile-card-list { display: flex; flex-direction: column; gap: 1rem; }
.list-item-card { background-color: var(--surface-color); border: 1px solid var(--border-color); border-radius: var(--border-radius); padding: 1rem; box-shadow: var(--shadow-sm); }
.card-row { display: flex; justify-content: space-between; font-size: 0.9rem; padding: 0.25rem 0; }
.card-actions { margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--border-color); display: flex; flex-wrap: wrap; gap: 0.5rem; }
.desktop-table-wrapper { display: none; }

@media ( min-width : 992px) {
	.mobile-card-list { display: none !important; }
	.desktop-table-wrapper { display: block !important; }
}

/* --- 7. UTILITY & PAGE-SPECIFIC --- */
.login-page-container {
    display: flex; align-items: center; justify-content: center;
    width: 100%; min-height: 100vh; padding: 1rem;
    background: var(--bg-color);
}
.login-box {
    width: 100%; max-width: 400px; padding: 2.5rem;
    background-color: var(--surface-color);
    border-radius: var(--border-radius); box-shadow: var(--shadow-md);
}
.table-controls {
    display: flex; flex-wrap: wrap; justify-content: space-between;
    align-items: center; gap: 1rem; margin-bottom: 1.5rem;
}
.error-page-container {
	display: flex; flex-direction: column; align-items: center;
	justify-content: center; text-align: center;
	min-height: 70vh; padding: 2rem;
}
.error-code { font-size: 5rem; font-weight: 800; line-height: 1; margin: 0; color: var(--text-muted-color); }
.error-page-container h2 { font-size: 1.75rem; border: none; margin: 0 0 1.5rem 0; }
.error-message-text { max-width: 600px; font-size: 1.1rem; line-height: 1.6; margin-bottom: 2rem; }
.cursor { display: inline-block; width: 0.6em; background-color: #fff; animation: blink 1s step-end infinite; }
@keyframes blink { 
    50% { background-color: transparent; } 
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_course_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const contextPath = "${pageContext.request.contextPath}";
    document.querySelectorAll('.js-confirm-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
            showConfirmationModal(message, () => this.submit());
        });
    });

    const modalOverlay = document.getElementById('course-modal');
    const form = document.getElementById('course-modal-form');
    const title = document.getElementById('course-modal-title');
    const actionInput = document.getElementById('course-modal-action');
    const idInput = document.getElementById('course-modal-id');
    const nameInput = document.getElementById('name-modal');
    const abbrInput = document.getElementById('abbreviation-modal');
    const descInput = document.getElementById('description-modal');
    const closeModalBtn = modalOverlay.querySelector('.modal-close-btn');
    
    const closeModal = () => modalOverlay.classList.remove('active');
    
    const openCreateModal = () => {
        form.reset();
        title.textContent = "Neue Lehrgangs-Vorlage anlegen";
        actionInput.value = "create";
        idInput.value = "";
        modalOverlay.classList.add('active');
    };
	
    const openEditModal = async (btn) => {
        form.reset();
        title.textContent = "Lehrgangs-Vorlage bearbeiten";
        actionInput.value = "update";
        const courseId = btn.dataset.id;
        idInput.value = courseId;
        
        try {
            const response = await fetch(`${contextPath}/admin/lehrgaenge?action=getCourseData&id=${courseId}`);
            if(!response.ok) throw new Error('Could not fetch course data');
            const data = await response.json();

            nameInput.value = data.name || '';
            abbrInput.value = data.abbreviation || '';
            descInput.value = data.description || '';

            modalOverlay.classList.add('active');
        } catch(error) {
            console.error("Failed to open edit modal:", error);
            alert("Fehler beim Laden der Vorlagen-Daten.");
        }
    };
    
    document.getElementById('new-course-btn').addEventListener('click', openCreateModal);
    document.querySelectorAll('.edit-course-btn').forEach(btn => {
        btn.addEventListener('click', () => openEditModal(btn));
    });
    
    closeModalBtn.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) closeModal();
    });
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modalOverlay.classList.contains('active')) closeModal();
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_defect_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const defectModal = document.getElementById('defect-modal');
    if (!defectModal) return;

    const modalTitle = document.getElementById('defect-modal-title');
    const itemIdInput = document.getElementById('defect-item-id');
    const defectQtyInput = document.getElementById('defective_quantity');
    const reasonInput = document.getElementById('defect_reason');
    const closeModalBtn = defectModal.querySelector('.modal-close-btn');

    document.querySelectorAll('.defect-modal-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
            itemIdInput.value = btn.dataset.itemId;
            defectQtyInput.value = btn.dataset.currentDefectQty;
            defectQtyInput.max = btn.dataset.maxQty; // Set max based on total quantity
            reasonInput.value = btn.dataset.currentReason;
            defectModal.classList.add('active');
        });
    });

    closeModalBtn.addEventListener('click', () => defectModal.classList.remove('active'));
    defectModal.addEventListener('click', (e) => {
        if (e.target === defectModal) defectModal.classList.remove('active');
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_events_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = "${pageContext.request.contextPath}";
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			showConfirmationModal(this.dataset.confirmMessage || 'Sind Sie sicher?', () => this.submit());
		});
	});

	// --- Modal References ---
	const assignModal = document.getElementById('assign-users-modal');
	const eventModal = document.getElementById('event-modal');
	const reqContainer = document.getElementById('modal-requirements-container');
	const resContainer = document.getElementById('modal-reservations-container');
	const cfContainer = document.getElementById('modal-custom-fields-container');
	const attachmentsList = document.getElementById('modal-attachments-list');

	// --- Data from JSP for dynamic fields ---
	const allCourses = [<c:forEach var="c" items="${allCourses}">{id: ${c.id}, name: "${fn:escapeXml(c.name)}"},</c:forEach>];
	const allItems = [<c:forEach var="i" items="${allItems}">{id: ${i.id}, name: "${fn:escapeXml(i.name)} (verfügbar: ${i.availableQuantity})"},</c:forEach>];

	// --- Assign Users Modal Logic ---
	const assignForm = document.getElementById('assign-users-form');
	const assignModalTitle = document.getElementById('assign-users-modal-title');
	const assignCheckboxes = document.getElementById('user-checkboxes-container');
	const assignEventIdInput = assignForm.querySelector('input[name="eventId"]');

	const openAssignModal = async (btn) => {
		const eventId = btn.dataset.eventId;
		const eventName = btn.dataset.eventName;
		assignModalTitle.textContent = `Team für "${eventName}" zuweisen`;
		assignEventIdInput.value = eventId;
		assignCheckboxes.innerHTML = '<p>Lade Benutzer...</p>';
		assignModal.classList.add('active');
		try {
			// CORRECTED: Fetch from the correct servlet URL.
			const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getAssignmentData&id=${eventId}`);
			if (!response.ok) throw new Error('Could not fetch assignment data.');
			const data = await response.json();
			assignCheckboxes.innerHTML = '';
			if(data.signedUpUsers && data.signedUpUsers.length > 0) {
				data.signedUpUsers.forEach(user => {
					const isChecked = data.assignedUserIds.includes(user.id) ? 'checked' : '';
					assignCheckboxes.innerHTML += `
						<label class="checkbox-label">
							<input type="checkbox" name="userIds" value="${user.id}" ${isChecked}>
							${user.username}
						</label>`;
				});
			} else {
				assignCheckboxes.innerHTML = '<p>Es haben sich noch keine Benutzer für dieses Event angemeldet.</p>';
			}
		} catch (error) {
			assignCheckboxes.innerHTML = '<p class="error-message">Fehler beim Laden der Benutzerdaten.</p>';
			console.error('Error fetching assignment data:', error);
		}
	};
	document.querySelectorAll('.assign-users-btn').forEach(btn => btn.addEventListener('click', () => openAssignModal(btn)));
	assignModal.querySelector('.modal-close-btn').addEventListener('click', () => assignModal.classList.remove('active'));

	// --- Generic Row Creation and Addition Functions ---
	const createRow = (container) => {
		const newRow = document.createElement('div'); newRow.className = 'dynamic-row';
		const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn-small btn-danger';
		removeBtn.innerHTML = '×'; removeBtn.onclick = () => newRow.remove();
		newRow.appendChild(removeBtn); container.appendChild(newRow);
		return newRow;
	};

	const addRequirementRow = (courseId = '', personCount = 1) => {
		const row = createRow(reqContainer);
		const select = document.createElement('select'); select.name = 'requiredCourseId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Lehrgang --</option>' + allCourses.map(c => `<option value="${c.id}">${c.name}</option>`).join('');
		select.value = courseId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'requiredPersons'; input.value = personCount; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

	const addReservationRow = (itemId = '', quantity = 1) => {
		const row = createRow(resContainer);
		const select = document.createElement('select'); select.name = 'itemId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Material --</option>' + allItems.map(i => `<option value="${i.id}">${i.name}</option>`).join('');
		select.value = itemId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'itemQuantity'; input.value = quantity; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

    const addCustomFieldRow = (fieldName = '', fieldType = 'TEXT') => {
        const row = createRow(cfContainer);
        const nameInput = document.createElement('input');
        nameInput.type = 'text';
        nameInput.name = 'customFieldName';
        nameInput.placeholder = 'Frage eingeben (z.B. T-Shirt Größe)';
        nameInput.className = 'form-group';
        nameInput.style.flexGrow = '2';
        nameInput.value = fieldName;

        const typeSelect = document.createElement('select');
        typeSelect.name = 'customFieldType';
        typeSelect.className = 'form-group';
        typeSelect.innerHTML = `<option value="TEXT">Text</option><option value="BOOLEAN">Ja/Nein</option>`;
        typeSelect.value = fieldType;

        row.prepend(nameInput, typeSelect);
    };

	const addAttachmentRow = (id, filename, filepath) => {
        const li = document.createElement('li'); li.id = `attachment-item-${id}`;
        li.innerHTML = `<a href="${contextPath}/download?file=${filepath}" target="_blank">${filename}</a>`;
        const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn btn-small btn-danger-outline';
        removeBtn.innerHTML = '×';
        removeBtn.onclick = () => {
            showConfirmationModal(`Anhang '${filename}' wirklich löschen?`, async () => {
                try {
                    // CORRECTED: Post to the correct servlet URL.
                    const response = await fetch(`${contextPath}/admin/veranstaltungen`, { method: 'POST', body: new URLSearchParams({ action: 'deleteAttachment', id: id}) });
                    if (response.ok) li.remove();
                    else alert('Fehler beim Löschen des Anhangs.');
                } catch(e) {
                     alert('Netzwerkfehler beim Löschen des Anhangs.');
                }
            });
        };
        li.appendChild(removeBtn); attachmentsList.appendChild(li);
    };

	// --- Edit/Create Event Modal Logic ---
	document.getElementById('modal-add-requirement-btn').addEventListener('click', () => addRequirementRow());
	document.getElementById('modal-add-reservation-btn').addEventListener('click', () => addReservationRow());
	document.getElementById('modal-add-custom-field-btn').addEventListener('click', () => addCustomFieldRow());

	const eventForm = document.getElementById('event-modal-form');
	const eventModalTitle = document.getElementById('event-modal-title');
	const actionInput = document.getElementById('event-modal-action');
	const idInput = document.getElementById('event-modal-id');

	const resetEventModal = () => {
		eventForm.reset();
		reqContainer.innerHTML = ''; 
		resContainer.innerHTML = '';
        cfContainer.innerHTML = '';
		attachmentsList.innerHTML = '';
	};

	const openEventModal = () => eventModal.classList.add('active');
	const closeEventModal = () => eventModal.classList.remove('active');
	eventModal.querySelector('.modal-close-btn').addEventListener('click', closeEventModal);
	eventModal.addEventListener('click', e => { if (e.target === eventModal) closeEventModal(); });

	document.getElementById('new-event-btn').addEventListener('click', () => {
		resetEventModal();
		eventModalTitle.textContent = "Neues Event anlegen";
		actionInput.value = "create";
		idInput.value = "";
		openEventModal();
	});

	document.querySelectorAll('.edit-event-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const eventId = btn.dataset.eventId;
			try {
                // CORRECTED: Fetch from the correct servlet URL.
				const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getEventData&id=${eventId}`);
				if (!response.ok) throw new Error('Event data could not be fetched.');
				const event = await response.json();
				resetEventModal();
				eventModalTitle.textContent = "Event bearbeiten";
				actionInput.value = "update";
				idInput.value = event.id;
				eventForm.querySelector('#name-modal').value = event.name || '';
				eventForm.querySelector('#location-modal').value = event.location || '';
				eventForm.querySelector('#leaderUserId-modal').value = event.leaderUserId || '';
				eventForm.querySelector('#eventDateTime-modal').value = event.eventDateTime ? event.eventDateTime.substring(0, 16) : '';
				eventForm.querySelector('#endDateTime-modal').value = event.endDateTime ? event.endDateTime.substring(0, 16) : '';
				eventForm.querySelector('#description-modal').value = event.description || '';
				
				event.skillRequirements?.forEach(req => addRequirementRow(req.requiredCourseId, req.requiredPersons));
				event.reservedItems?.forEach(res => addReservationRow(res.id, res.quantity));
                event.customFields?.forEach(cf => addCustomFieldRow(cf.fieldName, cf.fieldType));
				event.attachments?.forEach(att => addAttachmentRow(att.id, att.filename, att.filepath));
				
				openEventModal();
			} catch (error) {
				console.error('Error opening edit modal:', error);
				alert('Fehler beim Laden der Event-Daten.');
			}
		});
	});
	
	// --- Tab Logic ---
    const tabButtons = eventModal.querySelectorAll('.modal-tab-button');
    const tabContents = eventModal.querySelectorAll('.modal-tab-content');
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            tabButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            tabContents.forEach(content => {
                content.classList.toggle('active', content.id === button.dataset.tab);
            });
        });
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_matrix.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const modalOverlay = document.getElementById('attendance-modal');
    if (!modalOverlay) return;
    
    const modalTitle = document.getElementById('modal-title');
    const modalUserId = document.getElementById('modal-user-id');
    const modalMeetingId = document.getElementById('modal-meeting-id');
    const modalAttended = document.getElementById('modal-attended');
    const modalRemarks = document.getElementById('modal-remarks');
    const closeBtn = modalOverlay.querySelector('.modal-close-btn');

    const openModal = (cell) => {
        const userData = cell.dataset;
        modalTitle.textContent = `Nutzer: ${userData.userName} | Meeting: ${userData.meetingName}`;
        modalUserId.value = userData.userId;
        modalMeetingId.value = userData.meetingId;
        modalRemarks.value = userData.remarks;
        modalAttended.checked = (userData.attended === 'true');
        modalOverlay.classList.add('active');
    };

    const closeModal = () => modalOverlay.classList.remove('active');

    document.querySelectorAll('.qual-cell').forEach(cell => {
        cell.addEventListener('click', () => openModal(cell));
    });

    if (closeBtn) closeBtn.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', (event) => { if (event.target === modalOverlay) closeModal(); });
    document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && modalOverlay.classList.contains('active')) closeModal(); });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_meeting_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = "${pageContext.request.contextPath}";
    // Custom confirmation for delete forms
    document.querySelectorAll('.js-confirm-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
            showConfirmationModal(message, () => this.submit());
        });
    });

    // Modal Logic
    const modal = document.getElementById('meeting-modal');
    if (!modal) return;

    const form = document.getElementById('meeting-modal-form');
    const modalTitle = document.getElementById('meeting-modal-title');
    const actionInput = document.getElementById('meeting-action');
    const idInput = document.getElementById('meeting-id');
    const attachmentsList = document.getElementById('modal-attachments-list');
    const closeModalBtn = modal.querySelector('.modal-close-btn');

    const openModal = () => modal.classList.add('active');
    const closeModal = () => modal.classList.remove('active');

    const resetModal = () => {
        form.reset();
        attachmentsList.innerHTML = '';
    };

    // Open "Create" Modal
    document.getElementById('new-meeting-btn').addEventListener('click', () => {
        resetModal();
        modalTitle.textContent = "Neues Meeting planen";
        actionInput.value = "create";
        idInput.value = "";
        openModal();
    });

    // Open "Edit" Modal
    document.querySelectorAll('.edit-meeting-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
            const meetingId = btn.dataset.meetingId;
            try {
                // CORRECTED: Fetch from the correct servlet URL
                const response = await fetch(`${contextPath}/admin/meetings?action=getMeetingData&id=${meetingId}`);
                if (!response.ok) throw new Error('Meeting data could not be fetched.');
                const data = await response.json();
                const meeting = data.meetingData;
                const attachments = data.attachmentsData;

                resetModal();
                modalTitle.textContent = "Meeting bearbeiten";
                actionInput.value = "update";
                idInput.value = meeting.id;
                form.querySelector('#name-modal').value = meeting.name || '';
                form.querySelector('#location-modal').value = meeting.location || '';
                form.querySelector('#meetingDateTime-modal').value = meeting.meetingDateTime ? meeting.meetingDateTime.substring(0, 16) : '';
                form.querySelector('#endDateTime-modal').value = meeting.endDateTime ? meeting.endDateTime.substring(0, 16) : '';
                form.querySelector('#leader-modal').value = meeting.leaderUserId || '';
                form.querySelector('#description-modal').value = meeting.description || '';

                if (attachments && attachments.length > 0) {
                    attachments.forEach(att => addAttachmentRow(att, meeting.courseId));
                } else {
                    attachmentsList.innerHTML = '<li>Keine Anhänge vorhanden.</li>';
                }

                openModal();
            } catch (error) {
                console.error('Error fetching meeting data:', error);
                alert('Fehler beim Laden der Meeting-Daten.');
            }
        });
    });
	
	const addAttachmentRow = (attachment, courseId) => {
		const li = document.createElement('li');
		li.id = `attachment-item-${attachment.id}`;
		li.innerHTML = `<a href="${contextPath}/download?file=${attachment.filepath}" target="_blank">${attachment.filename}</a> (Rolle: ${attachment.requiredRole})`;
		const removeBtn = document.createElement('button');
		removeBtn.type = 'button';
		removeBtn.className = 'btn btn-small btn-danger-outline';
		removeBtn.innerHTML = '&times;';
		removeBtn.onclick = () => {
			showConfirmationModal(`Anhang '${attachment.filename}' wirklich löschen?`, () => {
				const deleteForm = document.createElement('form');
				deleteForm.method = 'post';
                // CORRECTED: Form action should point to the correct servlet URL
				deleteForm.action = `${contextPath}/admin/meetings`;
				deleteForm.innerHTML = `
					<input type="hidden" name="action" value="deleteAttachment">
					<input type="hidden" name="attachmentId" value="${attachment.id}">
					<input type="hidden" name="courseId" value="${courseId}">
				`;
				document.body.appendChild(deleteForm);
				deleteForm.submit();
			});
		};
		li.appendChild(removeBtn);
		attachmentsList.appendChild(li);
	};

    closeModalBtn.addEventListener('click', closeModal);
    modal.addEventListener('click', e => { if (e.target === modal) closeModal(); });
    document.addEventListener('keydown', e => { if (e.key === 'Escape' && modal.classList.contains('active')) closeModal(); });
	
	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.nextElementSibling;
			if (file && file.size > maxSize) {
				warningElement.style.display = 'block';
				e.target.value = '';
			} else {
				warningElement.style.display = 'none';
			}
		});
	});
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_storage_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.js-confirm-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
            showConfirmationModal(message, () => this.submit());
        });
    });

    // --- Lightbox Logic ---
    const lightbox = document.getElementById('lightbox');
    if (lightbox) {
        const lightboxImage = lightbox.querySelector('img');
        const closeBtn = lightbox.querySelector('.lightbox-close');

        document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
            trigger.addEventListener('click', (e) => {
                e.preventDefault();
                lightbox.style.display = 'block';
                lightboxImage.src = trigger.dataset.src;
            });
        });

        const closeLightbox = () => { lightbox.style.display = 'none'; };
        if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
        lightbox.addEventListener('click', (e) => { if(e.target === lightbox) { closeLightbox(); } });
        document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && lightbox.style.display === 'block') closeLightbox(); });
    }

    // --- Edit/Create Modal Logic ---
    const itemModal = document.getElementById('item-modal');
    if (itemModal) {
        const form = itemModal.querySelector('form');
        const title = itemModal.querySelector('h3');
        const actionInput = form.querySelector('input[name="action"]');
        const idInput = form.querySelector('input[name="id"]');
        const closeModalBtn = itemModal.querySelector('.modal-close-btn');

        document.getElementById('new-item-btn').addEventListener('click', () => {
            form.reset();
            title.textContent = 'Neuen Lagerartikel anlegen';
            actionInput.value = 'create';
            itemModal.classList.add('active');
        });

        document.querySelectorAll('.edit-item-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                form.reset();
                const fetchUrl = btn.dataset.fetchUrl;
                try {
                    const response = await fetch(fetchUrl);
                    if (!response.ok) throw new Error('Could not fetch item data.');
                    const itemData = await response.json();

                    title.textContent = 'Lagerartikel bearbeiten';
                    actionInput.value = 'update';
                    idInput.value = itemData.id;
                    form.querySelector('#name-modal').value = itemData.name || '';
                    form.querySelector('#location-modal').value = itemData.location || '';
                    form.querySelector('#cabinet-modal').value = itemData.cabinet || '';
                    form.querySelector('#compartment-modal').value = itemData.compartment || '';
                    form.querySelector('#quantity-modal').value = itemData.quantity;
                    form.querySelector('#maxQuantity-modal').value = itemData.maxQuantity;
                    form.querySelector('#weight_kg-modal').value = itemData.weightKg || '';
                    form.querySelector('#price_eur-modal').value = itemData.priceEur || '';
                    itemModal.classList.add('active');
                } catch (error) {
                    console.error("Failed to open edit modal:", error);
                    alert("Fehler beim Laden der Artikeldaten.");
                }
            });
        });
        closeModalBtn.addEventListener('click', () => itemModal.classList.remove('active'));
    }

    // --- Defect Modal Logic ---
    const defectModal = document.getElementById('defect-modal');
    if (defectModal) {
        const modalTitle = defectModal.querySelector('h3');
        const itemIdInput = defectModal.querySelector('#defect-item-id');
        const defectQtyInput = defectModal.querySelector('#defective_quantity');
        const reasonInput = defectModal.querySelector('#defect_reason');
        const closeModalBtn = defectModal.querySelector('.modal-close-btn');

        document.querySelectorAll('.defect-modal-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
                itemIdInput.value = btn.dataset.itemId;
                defectQtyInput.value = btn.dataset.currentDefectQty;
                defectQtyInput.max = btn.dataset.maxQty;
                reasonInput.value = btn.dataset.currentReason;
                defectModal.classList.add('active');
            });
        });
        closeModalBtn.addEventListener('click', () => defectModal.classList.remove('active'));
    }
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_system.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const apiUrl = "${pageContext.request.contextPath}/api/admin/system-stats";

	const cpuProgress = document.getElementById('cpu-progress');
	const cpuText = document.getElementById('cpu-text');
	const ramProgress = document.getElementById('ram-progress');
	const ramText = document.getElementById('ram-text');
	const diskProgress = document.getElementById('disk-progress');
	const diskText = document.getElementById('disk-text');
	const uptimeText = document.getElementById('uptime-text');
	const batteryCard = document.getElementById('battery-card');
	const batteryProgress = document.getElementById('battery-progress');
	const batteryText = document.getElementById('battery-text');

	const formatGigaBytes = (gb) => {
		if (gb === 0) return '0 GB';
		if (gb < 1) return `${(gb * 1024).toFixed(0)} MB`;
		return `${gb.toFixed(2)} GB`;
	};

	const updateUI = (stats) => {
		const cpuPercent = stats.cpuLoad.toFixed(1);
		cpuProgress.style.width = cpuPercent + '%';
		cpuText.textContent = cpuPercent + '%';

		if (stats.totalMemory > 0) {
			const ramPercent = (stats.usedMemory / stats.totalMemory) * 100;
			ramProgress.style.width = ramPercent.toFixed(1) + '%';
			ramText.textContent = `${formatGigaBytes(stats.usedMemory)} / ${formatGigaBytes(stats.totalMemory)}`;
		}

		if (stats.totalDiskSpace > 0) {
			const diskPercent = (stats.usedDiskSpace / stats.totalDiskSpace) * 100;
			diskProgress.style.width = diskPercent.toFixed(1) + '%';
			diskText.textContent = `${formatGigaBytes(stats.usedDiskSpace)} / ${formatGigaBytes(stats.totalDiskSpace)}`;
		}

		uptimeText.textContent = stats.uptime;

		if (stats.batteryPercentage >= 0) {
			batteryCard.style.display = 'block';
			const batteryPercent = stats.batteryPercentage;
			batteryProgress.style.width = batteryPercent + '%';
			batteryText.textContent = batteryPercent + '%';
		} else {
			batteryCard.style.display = 'none';
		}
	};

	const fetchStats = async () => {
		try {
			const response = await fetch(apiUrl);
			if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
			const data = await response.json();
			updateUI(data);
		} catch (error) {
			console.error("Could not fetch system stats:", error);
			cpuText.textContent = "Fehler";
			ramText.textContent = "Fehler";
			diskText.textContent = "Fehler";
			uptimeText.textContent = "Fehler";
		}
	};

	fetchStats();
	let intervalId = setInterval(fetchStats, 5000);

	document.addEventListener("visibilitychange", () => {
		if (document.hidden) {
			clearInterval(intervalId);
		} else {
			fetchStats();
			intervalId = setInterval(fetchStats, 5000);
		}
	});
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_users.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(event) {
			event.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const passwordAlert = document.getElementById('password-reset-alert');
	if (passwordAlert) {
		const passwordElement = passwordAlert.querySelector('strong.copyable-password');
		if(passwordElement) {
			navigator.clipboard.writeText(passwordElement.textContent)
                .then(() => console.log('Password copied to clipboard'))
                .catch(err => console.error('Failed to copy password:', err));
		}
	}

	const modal = document.getElementById('user-modal');
	const form = document.getElementById('user-modal-form');
	const title = document.getElementById('user-modal-title');
	const actionInput = form.querySelector('input[name="action"]');
	const idInput = form.querySelector('input[name="userId"]');
	const usernameInput = form.querySelector('#username-modal');
	const passwordInput = form.querySelector('#password-modal');
	const passwordGroup = form.querySelector('#password-group');
	const roleInput = form.querySelector('#role-modal');
	const classYearInput = form.querySelector('#classYear-modal');
	const classNameInput = form.querySelector('#className-modal');
	const emailInput = form.querySelector('#email-modal');
	const closeModalBtn = modal.querySelector('.modal-close-btn');

	const closeModal = () => modal.classList.remove('active');

    const newUserBtn = document.getElementById('new-user-btn');
    if(newUserBtn) {
        newUserBtn.addEventListener('click', () => {
		    form.reset();
		    title.textContent = "Neuen Benutzer anlegen";
		    actionInput.value = "create";
		    idInput.value = "";
		    passwordInput.required = true;
		    passwordGroup.style.display = 'block';
            roleInput.value = "3"; // Default to NUTZER
		    modal.classList.add('active');
		    usernameInput.focus();
	    });
    }

	document.querySelectorAll('.edit-user-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			form.reset();
			const fetchUrl = btn.dataset.fetchUrl;
			try {
				const response = await fetch(fetchUrl);
				if (!response.ok) throw new Error('Could not fetch user data');
				const data = await response.json();

				title.textContent = `Benutzer bearbeiten: ${data.username}`;
				actionInput.value = "update";
				idInput.value = data.id;
				usernameInput.value = data.username || '';
				roleInput.value = data.roleId || '3';
				classYearInput.value = data.classYear || '';
				classNameInput.value = data.className || '';
                emailInput.value = data.email || '';
				passwordInput.required = false;
				passwordGroup.style.display = 'none';
				modal.classList.add('active');
			} catch (error) {
				console.error('Failed to open edit modal:', error);
				alert('Benutzerdaten konnten nicht geladen werden.');
			}
		});
	});

	closeModalBtn.addEventListener('click', closeModal);
	modal.addEventListener('click', (event) => { if (event.target === modal) closeModal(); });
	document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && modal.classList.contains('active')) closeModal(); });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\logout.js
========================================================================

setTimeout(function() {
	window.location.href = "/views/auth/login.jsp";
}, 5000); 

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error401.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const statusText = document.getElementById('scanner-status');
    const light = document.getElementById('scanner-light');
    const progress = document.getElementById('scanner-progress');
    const redirectContainer = document.getElementById('redirect-container');

    const steps = [
        { text: 'SCANNE...', color: '#ffc107', lightColor: '#ffc107', duration: 1500, progress: 50 },
        { text: 'KEINE ID', color: '#dc3545', lightColor: '#dc3545', duration: 1000, progress: 80 },
        { text: 'ZUGRIFF?', color: '#dc3545', lightColor: '#dc3545', duration: 800, progress: 100 },
        { text: 'VERWEIGERT', color: '#dc3545', lightColor: '#dc3545', duration: 2000, progress: 100 }
    ];

    let currentStep = 0;

    function runScan() {
        if(currentStep >= steps.length) {
            redirectContainer.style.opacity = '1';
            return;
        }

        const step = steps[currentStep];
        statusText.textContent = step.text;
        statusText.style.color = step.color;
        light.style.background = step.lightColor;
        light.style.boxShadow = `0 0 10px ${step.lightColor}`;
        progress.style.width = `${step.progress}%`;
        progress.style.backgroundColor = step.lightColor;

        currentStep++;
        setTimeout(runScan, step.duration);
    }

    setTimeout(runScan, 500); // Initial delay
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error404.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const terminalBody = document.getElementById('terminal-body');
    const homeLinkContainer = document.getElementById('home-link-container');
    const requestUri = "${fn:escapeXml(pageContext.errorData.requestURI)}";

    async function type(text, element, delay = 50) {
        for (const char of text) {
            element.textContent += char;
            terminalBody.scrollTop = terminalBody.scrollHeight;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
    
    async function addLine(text, className, delay = 20) {
        const p = document.createElement('p');
        if (className) p.className = className;
        terminalBody.appendChild(p);
        await type(text, p, delay);
    }

    async function runSequence() {
        const p1 = document.createElement('p');
        terminalBody.appendChild(p1);

        const prompt1 = document.createElement('span');
        prompt1.className = 'prompt';
        await type('user@technik-team:~$ ', prompt1, 20);
        p1.appendChild(prompt1);

        const command1 = document.createElement('span');
        command1.className = 'command';
        await type('ls -l ' + requestUri, command1, 50);
        p1.appendChild(command1);

        await new Promise(resolve => setTimeout(resolve, 500));

        await addLine('ls: cannot access \'' + requestUri + '\': No such file or directory', 'error', 15);
        await new Promise(resolve => setTimeout(resolve, 800));

        await addLine('Tipp: Kehren Sie mit dem folgenden Befehl zur Startseite zurück:', 'info', 25);
        await new Promise(resolve => setTimeout(resolve, 300));
        
        const p_link = document.createElement('p');
        terminalBody.appendChild(p_link);
        
        const prompt2 = document.createElement('span');
        prompt2.className = 'prompt';
        await type('user@technik-team:~$ ', prompt2, 20);
        p_link.appendChild(prompt2);

        const homeLink = document.createElement('a');
        homeLink.href = "${pageContext.request.contextPath}/home";
        homeLink.className = 'link';
        p_link.appendChild(homeLink);
        await type('cd /home', homeLink, 80);
        
        const cursor = document.createElement('span');
        cursor.className = 'cursor';
        cursor.innerHTML = ' ';
        p_link.appendChild(cursor);

        homeLinkContainer.style.opacity = '1';
    }

    runSequence();
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error500.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const diagBtn = document.getElementById('diagnostic-btn');
    const output = document.getElementById('diagnostic-output');

    const steps = [
        { text: 'Initialisiere Diagnose-Protokoll...', type: 'info', icon: 'fas fa-cogs' },
        { text: 'Pr�fe Speicher-Integrit�t...', type: 'info', icon: 'fas fa-memory' },
        { text: '[OK] RAM Module antworten.', type: 'ok', icon: 'fas fa-check-circle' },
        { text: 'Verbinde mit Kernel...', type: 'info', icon: 'fas fa-project-diagram' },
        { text: '[WARN] Kernel antwortet langsam. Kaffee-Level kritisch.', type: 'warn', icon: 'fas fa-exclamation-triangle' },
        { text: 'Lade KI-Logikmodule...', type: 'info', icon: 'fas fa-brain' },
        { text: '[FAIL] Logikmodul "Hamster im Laufrad" hat die Arbeit niedergelegt.', type: 'fail', icon: 'fas fa-times-circle' },
        { text: 'Versuche Workaround: Mehr Glitzer-Effekte laden...', type: 'warn', icon: 'fas fa-magic' },
        { text: '[FAIL] Glitzer-Puffer �bergelaufen.', type: 'fail', icon: 'fas fa-times-circle' },
        { text: '--------------------------------', type: 'info', icon: '' },
        { text: 'Diagnose abgeschlossen. Fehler gefunden.', type: 'fail', icon: 'fas fa-skull-crossbones' }
    ];

    let isRunning = false;
    
    // Function to simulate typing text into an element
    async function typeText(element, text, delay = 20) {
        for (let i = 0; i < text.length; i++) {
            element.innerHTML += text.charAt(i);
            output.scrollTop = output.scrollHeight;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }

    diagBtn.addEventListener('click', async () => {
        if (isRunning) return;
        
        isRunning = true;
        diagBtn.disabled = true;
        diagBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Diagnose l�uft...';
        output.innerHTML = ''; // Clear previous output

        for (const step of steps) {
            const line = document.createElement('p');
            line.className = step.type;
            const iconHtml = step.icon ? `<i class="${step.icon}" style="margin-right: 8px;"></i>` : '';
            line.innerHTML = `${iconHtml}`;
            output.appendChild(line);
            
            // Type out the text for the current line
            await typeText(line, step.text);

            await new Promise(resolve => setTimeout(resolve, 300)); // Pause between lines
        }
        
        // Add final cursor
        const finalLine = document.createElement('p');
        finalLine.innerHTML = '> <span class="cursor">�</span>';
        output.appendChild(finalLine);
        output.scrollTop = output.scrollHeight;

        diagBtn.disabled = false;
        diagBtn.innerHTML = '<i class="fas fa-tasks"></i> Diagnose erneut starten';
        isRunning = false;
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error503.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const output = document.getElementById('reboot-output');
    const progress = document.getElementById('reboot-progress');

    const steps = [
        { text: 'System check initiated...', delay: 100, progress: 10 },
        { text: 'Checking memory modules... [OK]', delay: 300, progress: 20 },
        { text: 'Checking CPU cores... [OK]', delay: 300, progress: 30 },
        { text: 'Pinging gateway... [NO RESPONSE]', delay: 1000, progress: 40 },
        { text: 'Server overload detected. Reason: Too many requests.', delay: 500, progress: 50 },
        { text: 'Flushing request queue...', delay: 1500, progress: 70 },
        { text: 'Initializing reboot sequence...', delay: 500, progress: 80 },
        { text: 'System will be back online shortly.', delay: 1000, progress: 100 },
        { text: 'Redirecting to login page...', delay: 2000, progress: 100 }
    ];

    let stepIndex = 0;

    function runSequence() {
        if (stepIndex >= steps.length) {
            // CORRECTED: Redirect must point to the /login servlet URL
            window.location.href = "${pageContext.request.contextPath}/login";
            return;
        }

        const step = steps[stepIndex];
        const p = document.createElement('p');
        p.textContent = step.text;
        output.appendChild(p);
        output.scrollTop = output.scrollHeight;

        progress.style.width = `${step.progress}%`;
        
        stepIndex++;
        setTimeout(runSequence, step.delay);
    }

    runSequence();
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\calendar.js
========================================================================


========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\collaborative_editor.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const editor = document.getElementById('editor');
    const statusIndicator = document.getElementById('status-indicator');
    const apiUrl = "${pageContext.request.contextPath}/api/document";
    let debounceTimer;

    const saveContent = () => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const content = editor.value;
            statusIndicator.textContent = 'Speichere...';
            fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'text/plain; charset=utf-8' },
                body: content
            }).then(response => {
                if (response.ok) {
                    statusIndicator.textContent = 'Gespeichert';
                } else {
                    statusIndicator.textContent = 'Fehler beim Speichern!';
                    statusIndicator.style.color = 'var(--danger-color)';
                }
            }).catch(err => {
                 statusIndicator.textContent = 'Netzwerkfehler!';
                 statusIndicator.style.color = 'var(--danger-color)';
            });
        }, 500);
    };

    const fetchContent = () => {
        fetch(apiUrl)
            .then(response => {
                if (!response.ok) throw new Error("Server response not OK");
                return response.text();
            })
            .then(newContent => {
                if (document.activeElement !== editor && editor.value !== newContent) {
                    const cursorPos = editor.selectionStart;
                    editor.value = newContent;
                    editor.selectionStart = editor.selectionEnd = cursorPos;
                }
            }).catch(err => {
                console.error("Error fetching document content:", err);
                statusIndicator.textContent = 'Fehler beim Laden!';
                statusIndicator.style.color = 'var(--danger-color)';
            });
    };
    
    editor.addEventListener('input', saveContent);

    const pollInterval = setInterval(fetchContent, 3000);
    fetchContent(); 
    
    window.addEventListener('beforeunload', () => {
        clearInterval(pollInterval);
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\eventDetails.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
const contextPath = "${pageContext.request.contextPath}";
const eventId = "${event.id}";
const currentUserId = "${sessionScope.user.id}";
const isAdmin = "${sessionScope.user.role}" === "ADMIN";

if (!eventId) {
	console.error("Event ID is missing from the page model. Real-time features disabled.");
	return;
}

// --- Admin-specific JS for task management ---
if (isAdmin) {
	const assignModal = document.getElementById('assign-task-modal');
	if (assignModal) {
		const modalTaskIdInput = document.getElementById('modal-task-id');
		const modalCloseBtn = assignModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.assign-task-btn').forEach(btn => {
			btn.addEventListener('click', (e) => {
				const taskId = e.currentTarget.dataset.taskId;
				if (taskId) {
					modalTaskIdInput.value = taskId;
					assignModal.classList.add('active');
				}
			});
		});

		if (modalCloseBtn) modalCloseBtn.addEventListener('click', () => assignModal.classList.remove('active'));
		assignModal.addEventListener('click', e => { if (e.target === assignModal) assignModal.classList.remove('active'); });
	}

	document.querySelectorAll('.delete-task-btn').forEach(btn => {
		btn.addEventListener('click', (e) => {
			e.preventDefault();
			const button = e.currentTarget;
			const taskId = button.dataset.taskId;
			const taskDesc = button.dataset.taskDesc;
			const taskItem = document.getElementById(`task-item-${taskId}`);

			if (taskId) {
				showConfirmationModal(`Aufgabe "${taskDesc}" wirklich löschen?`, () => {
					fetch(contextPath + '/admin/tasks?taskId=' + taskId, { method: 'DELETE' })
						.then(res => {
							if (res.ok) {
								taskItem.remove();
							} else {
								alert('Löschen fehlgeschlagen!');
							}
						});
				});
			}
		});
	});
}

// --- User-specific JS for completing tasks ---
document.querySelectorAll('.task-checkbox').forEach(checkbox => {
	checkbox.addEventListener('change', (e) => {
		const taskId = e.target.dataset.taskId;
		const params = new URLSearchParams({ taskId: taskId, status: e.target.checked ? 'ERLEDIGT' : 'OFFEN' });
		fetch(contextPath + '/task-action', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: params })
			.then(res => {
				if (res.ok) {
					if (e.target.checked) e.target.closest('li').style.display = 'none';
				} else { e.target.checked = !e.target.checked; alert('Status konnte nicht aktualisiert werden.'); }
			}).catch(() => { e.target.checked = !e.target.checked; alert('Netzwerkfehler.'); });
	});
});

// --- JS for Event Chat (if present) ---
const chatBox = document.getElementById('chat-box');
if (chatBox) {
	const chatForm = document.getElementById('chat-form');
	const chatInput = document.getElementById('chat-message-input');

	const fetchMessages = () => {
		fetch(contextPath + '/api/event-chat?eventId=' + eventId)
			.then(res => {
				if (!res.ok) { throw new Error(`HTTP error! status: ${res.status}`); }
				return res.json();
			})
			.then(messages => {
				chatBox.innerHTML = '';
				if (messages && messages.length > 0) {
					messages.forEach(msg => {
						const p = document.createElement('p');
						p.style.marginBottom = '0.25rem';
						if (msg.userId == currentUserId) p.style.textAlign = 'right';

						const strong = document.createElement('strong');
						strong.textContent = msg.username + ': ';
						if (msg.userId == currentUserId) strong.style.color = 'var(--primary-color)';

						p.appendChild(strong);
						p.appendChild(document.createTextNode(msg.messageText));
						chatBox.appendChild(p);
					});
				} else {
					const p = document.createElement('p');
					p.textContent = 'Noch keine Nachrichten.';
					p.style.cssText = 'color:var(--text-muted-color); text-align: center; padding-top: 1rem;';
					chatBox.appendChild(p);
				}
				chatBox.scrollTop = chatBox.scrollHeight;
			}).catch(error => console.error("Error fetching chat messages:", error));
	};

	chatForm.addEventListener('submit', (e) => {
		e.preventDefault();
		const message = chatInput.value.trim();
		if (message) {
			const formData = new URLSearchParams({ eventId: eventId, messageText: message });
			fetch(contextPath + '/api/event-chat', { method: 'POST', headers: { 'Content-Type': 'application/x-www-form-urlencoded' }, body: formData })
				.then(res => {
					if (res.ok) {
						chatInput.value = '';
						fetchMessages();
					} else {
						alert('Nachricht konnte nicht gesendet werden.');
					}
				})
				.catch(() => alert('Netzwerkfehler beim Senden.'));
		}
	});

	setInterval(fetchMessages, 3000);
	fetchMessages();
}
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\events.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.js-confirm-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            showConfirmationModal(this.dataset.confirmMessage || 'Sind Sie sicher?', () => this.submit());
        });
    });

    const signupModal = document.getElementById('signup-modal');
    const signupModalTitle = document.getElementById('signup-modal-title');
    const signupEventIdInput = document.getElementById('signup-event-id');
    const customFieldsContainer = document.getElementById('custom-fields-container');
    const closeModalBtn = signupModal.querySelector('.modal-close-btn');
	const contextPath = document.body.dataset.contextPath || '';

    const openSignupModal = async (btn) => {
        const eventId = btn.dataset.eventId;
        const eventName = btn.dataset.eventName;

        signupModalTitle.textContent = `Anmeldung für: ${eventName}`;
        signupEventIdInput.value = eventId;
        customFieldsContainer.innerHTML = '<p>Lade Anmelde-Optionen...</p>';
        signupModal.classList.add('active');

        try {
            // UPDATED: Fetch from the new, correct public API endpoint
            const response = await fetch(`${contextPath}/api/public/event-custom-fields?eventId=${eventId}`);
            if (!response.ok) throw new Error('Could not fetch custom fields for the event.');
            
            const customFields = await response.json();
            
            customFieldsContainer.innerHTML = '';
            if (customFields && customFields.length > 0) {
                customFields.forEach(field => {
                    const fieldGroup = document.createElement('div');
                    fieldGroup.className = 'form-group';
                    let fieldHtml = `<label for="customfield_${field.id}">${field.fieldName}</label>`;
                    if (field.fieldType === 'BOOLEAN') {
                        fieldHtml += `<select name="customfield_${field.id}" id="customfield_${field.id}" class="form-control"><option value="true">Ja</option><option value="false">Nein</option></select>`;
                    } else { 
                        fieldHtml += `<input type="text" name="customfield_${field.id}" id="customfield_${field.id}" class="form-control">`;
                    }
                    fieldGroup.innerHTML = fieldHtml;
                    customFieldsContainer.appendChild(fieldGroup);
                });
            } else {
                 customFieldsContainer.innerHTML = '<p>Für dieses Event sind keine weiteren Angaben nötig.</p>';
            }
        } catch (error) {
            console.error('Failed to load custom fields:', error);
            customFieldsContainer.innerHTML = '<p class="error-message">Fehler beim Laden der Anmelde-Optionen.</p>';
        }
    };
    
    document.querySelectorAll('.signup-btn').forEach(btn => btn.addEventListener('click', () => openSignupModal(btn)));
    closeModalBtn.addEventListener('click', () => signupModal.classList.remove('active'));
    signupModal.addEventListener('click', (e) => {
        if (e.target === signupModal) signupModal.classList.remove('active');
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\lager.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const transactionModal = document.getElementById('transaction-modal');
    if (transactionModal) {
        const modalTitle = document.getElementById('transaction-modal-title');
        const modalItemId = document.getElementById('transaction-item-id');
        const closeModalBtn = transactionModal.querySelector('.modal-close-btn');

        const openModal = (btn) => {
            modalTitle.textContent = `${btn.dataset.itemName}: Entnehmen / Einräumen`;
            modalItemId.value = btn.dataset.itemId;
            transactionModal.classList.add('active');
        };

        const closeModal = () => transactionModal.classList.remove('active');
        document.querySelectorAll('.transaction-btn').forEach(btn => btn.addEventListener('click', () => openModal(btn)));
        closeModalBtn.addEventListener('click', closeModal);
        transactionModal.addEventListener('click', e => { if (e.target === transactionModal) closeModal(); });
    }
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\storage_item_details.jsp
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const closeBtn = document.querySelector('.lightbox-close');

    document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
        trigger.addEventListener('click', (e) => {
            e.preventDefault();
            lightbox.style.display = 'block';
            lightboxImage.src = trigger.querySelector('img').src;
        });
    });

    if (closeBtn) closeBtn.addEventListener('click', () => { lightbox.style.display = 'none'; });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\main.js
========================================================================

/**
 * Main JavaScript file for the TechnikTeam application.
 * This file is included on every page and handles global user interface logic.
 */
document.addEventListener('DOMContentLoaded', () => {

	const contextPath = document.body.dataset.contextPath || '';

	// --- 1. Mobile Navigation Toggle Logic ---
	const navToggle = document.querySelector('.mobile-nav-toggle');
	const pageOverlay = document.querySelector('.page-overlay');
	if (navToggle) {
		navToggle.addEventListener('click', (e) => {
			e.stopPropagation();
			document.body.classList.toggle('nav-open');
		});
	}
	if (pageOverlay) {
		pageOverlay.addEventListener('click', () => {
			document.body.classList.remove('nav-open');
		});
	}

	// --- 2. Active Navigation Link Highlighting ---
	const currentPath = window.location.pathname;
	const navLinks = document.querySelectorAll('.sidebar-nav a');
	let bestMatch = null;
	let maxMatchLength = 0;

	navLinks.forEach(link => {
		const linkPath = new URL(link.href).pathname;
		if (linkPath && currentPath.startsWith(linkPath)) {
			// Give preference to exact matches
			if (currentPath === linkPath) {
				maxMatchLength = linkPath.length + 100; // Prioritize exact match
				bestMatch = link;
			} else if (linkPath.length > maxMatchLength) {
				maxMatchLength = linkPath.length;
				bestMatch = link;
			}
		}
	});

	if (bestMatch) {
		bestMatch.classList.add('active-nav-link');
	}

	// --- 3. Theme Switcher Logic ---
	const themeSwitch = document.getElementById('theme-toggle');
	const currentTheme = localStorage.getItem('theme') || 'light';
	document.documentElement.setAttribute('data-theme', currentTheme);
	if (themeSwitch) {
		if (currentTheme === 'dark') {
			themeSwitch.checked = true;
		}
		themeSwitch.addEventListener('change', (e) => {
			const newTheme = e.target.checked ? 'dark' : 'light';
			document.documentElement.setAttribute('data-theme', newTheme);
			localStorage.setItem('theme', newTheme);
		});
	}

	// --- 4. Global Confirmation Modal Logic ---
	const confirmationModalElement = document.createElement('div');
	confirmationModalElement.className = 'modal-overlay';
	confirmationModalElement.id = 'confirmation-modal';
	confirmationModalElement.innerHTML = `
        <div class="modal-content" style="max-width: 450px;">
            <h3 id="confirmation-title">Bestätigung erforderlich</h3>
            <p id="confirmation-message" style="margin: 1.5rem 0; font-size: 1.1rem;"></p>
            <div style="display: flex; justify-content: flex-end; gap: 1rem;">
                <button id="confirmation-btn-cancel" class="btn" style="background-color: var(--text-muted-color);">Abbrechen</button>
                <button id="confirmation-btn-confirm" class="btn btn-danger">Bestätigen</button>
            </div>
        </div>`;
	document.body.appendChild(confirmationModalElement);

	const messageElement = document.getElementById('confirmation-message');
	const confirmBtn = document.getElementById('confirmation-btn-confirm');
	const cancelBtn = document.getElementById('confirmation-btn-cancel');

	let onConfirmCallback = null;

	window.showConfirmationModal = (message, onConfirm) => {
		messageElement.textContent = message;
		onConfirmCallback = onConfirm;
		confirmationModalElement.classList.add('active');
	};

	const closeConfirmModal = () => {
		confirmationModalElement.classList.remove('active');
		onConfirmCallback = null;
	};

	confirmBtn.addEventListener('click', () => {
		if (typeof onConfirmCallback === 'function') onConfirmCallback();
		closeConfirmModal();
	});

	cancelBtn.addEventListener('click', closeConfirmModal);
	confirmationModalElement.addEventListener('click', (e) => {
		if (e.target === confirmationModalElement) closeConfirmModal();
	});

	// Attach confirmation to logout link
	// main.js
	const logoutLink = document.getElementById('logout-link');
	if (logoutLink) {
		logoutLink.addEventListener('click', (event) => {
			event.preventDefault();
			showConfirmationModal(
				'Möchten Sie sich wirklich ausloggen?',
				() => { window.location.href = logoutLink.href; }
			);
		});
	}

	// --- 5. Server-Sent Events (SSE) Notification Logic ---
	if (document.body.dataset.isLoggedIn === 'true' && window.EventSource) {
		const eventSource = new EventSource(`${contextPath}/notifications`);
		eventSource.onopen = () => console.log("SSE connection established.");
		eventSource.onmessage = (event) => {
			console.log("SSE message received:", event.data);
			showBrowserNotification(event.data);
		};
		eventSource.onerror = (err) => {
			console.error("SSE connection error.", err);
			eventSource.close();
		};
	}

	function showBrowserNotification(message) {
		if (!("Notification" in window)) {
			console.warn("This browser does not support desktop notifications.");
			return;
		}
		if (Notification.permission === "granted") {
			new Notification("Technik Team Update", { body: message, icon: `${contextPath}/images/logo.png` });
		} else if (Notification.permission !== "denied") {
			Notification.requestPermission().then((permission) => {
				if (permission === "granted") {
					new Notification("Technik Team Update", { body: message, icon: `${contextPath}/images/logo.png` });
				}
			});
		}
	}
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_course_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lehrgangs-Vorlagen" />
</c:import>

<h1>Lehrgangs-Vorlagen verwalten</h1>
<p>Dies sind die übergeordneten Lehrgänge. Einzelne Termine
	(Meetings) werden für jede Vorlage separat verwaltet.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" id="new-course-btn" class="btn">Neue
		Lehrgangs-Vorlage anlegen</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Tabelle filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<div class="table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name der Vorlage</th>
				<th class="sortable" data-sort-type="string">Abkürzung (für
					Matrix)</th>
				<th style="width: 450px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty courseList}">
				<tr>
					<td colspan="3" style="text-align: center;">Es wurden noch
						keine Lehrgangs-Vorlagen erstellt.</td>
				</tr>
			</c:if>
			<c:forEach var="course" items="${courseList}">
				<tr>
					<td><c:out value="${course.name}" /></td>
					<td><c:out value="${course.abbreviation}" /></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><a
						href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
						class="btn btn-small btn-success">Meetings verwalten</a>
						<button type="button" class="btn btn-small edit-course-btn"
							data-id="${course.id}">Vorlage bearbeiten</button>
						<form action="${pageContext.request.contextPath}/admin/lehrgaenge"
							method="post" class="js-confirm-form"
							data-confirm-message="Vorlage '${fn:escapeXml(course.name)}' wirklich löschen? Alle zugehörigen Meetings und Qualifikationen werden auch gelöscht!">
							<input type="hidden" name="action" value="delete"> <input
								type="hidden" name="id" value="${course.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- MODAL FOR CREATE/EDIT COURSE -->
<div class="modal-overlay" id="course-modal">
	<div class="modal-content">
		<button class="modal-close-btn">×</button>
		<h3 id="course-modal-title">Lehrgangs-Vorlage</h3>
		<form id="course-modal-form"
			action="${pageContext.request.contextPath}/admin/lehrgaenge"
			method="post">
			<input type="hidden" name="action" id="course-modal-action">
			<input type="hidden" name="id" id="course-modal-id">
			<div class="form-group">
				<label for="name-modal">Name der Vorlage</label><input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="form-group">
				<label for="abbreviation-modal">Abkürzung (max. 10 Zeichen)</label><input
					type="text" id="abbreviation-modal" name="abbreviation"
					maxlength="10" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Allgemeine Beschreibung</label>
				<textarea id="description-modal" name="description" rows="4"></textarea>
			</div>
			<button type="submit" class="btn">Vorlage Speichern</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/admin/admin_course_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_dashboard.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Dashboard" />
</c:import>

<h1>
	Willkommen im Admin-Bereich,
	<c:out value="${sessionScope.user.username}" />
	!
</h1>
<p>Hier können Sie die Anwendung verwalten. Wählen Sie eine Option
	aus der Navigation oder nutzen Sie den Schnellzugriff.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-rocket"></i> Schnellzugriff
		</h2>
		<ul style="list-style: none; padding: 0;">
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/veranstaltungen">Neue
					Veranstaltung anlegen</a></li>
			<li style="padding: 0.5rem 0;">
				<%-- CORRECTED: Link points to /admin/mitglieder --%> <a
				href="${pageContext.request.contextPath}/admin/mitglieder">Neuen
					Benutzer erstellen</a>
			</li>
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/lager">Neuen
					Lagerartikel anlegen</a></li>
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/lehrgaenge">Neue
					Lehrgangs-Vorlage erstellen</a></li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-chart-bar"></i> System-Statistiken
		</h2>
		<p style="font-size: 1.1rem; margin-bottom: 0.5rem;">
			Anzahl registrierter Benutzer: <strong><c:out
					value="${userCount}" /></strong>
		</p>
		<p style="font-size: 1.1rem;">
			Anzahl aktiver Events: <strong><c:out
					value="${activeEventCount}" /></strong>
		</p>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-exclamation-triangle text-warning"></i> Defekte
			Artikel
		</h2>
		<p>
			Es sind aktuell <strong><c:out
					value="${fn:length(defectiveItems)}" /></strong> Artikel als defekt
			gemeldet.
		</p>
		<a href="${pageContext.request.contextPath}/admin/defekte"
			class="btn btn-small" style="margin-top: 1rem;">Defekte anzeigen</a>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-history"></i> Letzte Aktionen
		</h2>
		<p>Die letzten Log-Einträge des Systems.</p>
		<a href="${pageContext.request.contextPath}/admin/log"
			class="btn btn-small" style="margin-top: 1rem;">Komplettes Log
			ansehen</a>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_defect_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Defekte Artikel" />
</c:import>

<h1>
	<i class="fas fa-wrench"></i> Defekte Artikel verwalten
</h1>
<p>Hier sind alle Artikel gelistet, von denen mindestens ein
	Exemplar als defekt markiert wurde.</p>

<%-- CORRECTED: The path is now absolute from the context root. --%>
<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Defekt / Gesamt</th>
				<th>Grund</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty defectiveItems}">
				<tr>
					<td colspan="4" style="text-align: center;">Aktuell sind keine
						Artikel als defekt gemeldet.</td>
				</tr>
			</c:if>
			<c:forEach var="item" items="${defectiveItems}">
				<tr>
					<td><c:out value="${item.name}" /></td>
					<td><c:out value="${item.defectiveQuantity}" /> / <c:out
							value="${item.quantity}" /></td>
					<td><c:out value="${item.defectReason}" /></td>
					<td>
						<button class="btn btn-small btn-success defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}">Status
							bearbeiten</button>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Modal for updating defect status -->
<div class="modal-overlay" id="defect-modal">
	<div class="modal-content">
		<button class="modal-close-btn">×</button>
		<h3 id="defect-modal-title">Defekt-Status bearbeiten</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="action" value="updateDefect"> <input
				type="hidden" name="id" id="defect-item-id"> <input
				type="hidden" name="returnTo" value="defekte">
			<div class="form-group">
				<label for="defective_quantity">Anzahl defekter Artikel</label><input
					type="number" name="defective_quantity" id="defective_quantity"
					min="0" required>
			</div>
			<div class="form-group">
				<label for="defect_reason">Grund (optional)</label>
				<textarea name="defect_reason" id="defect_reason" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">Speichern</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/admin/admin_defect_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_events_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Eventverwaltung" />
</c:import>

<h1>
	<i class="fas fa-calendar-check"></i> Eventverwaltung
</h1>
<p>Hier können Sie Events erstellen, bearbeiten, Personal zuweisen
	und den Status verwalten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn" id="new-event-btn">
		<i class="fas fa-plus"></i> Neues Event anlegen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Tabelle filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<div class="table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th class="sortable" data-sort-type="string">Zeitraum</th>
				<th class="sortable" data-sort-type="string">Status</th>
				<th style="width: 450px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty eventList}">
				<tr>
					<td colspan="4" style="text-align: center;">Keine Events
						gefunden.</td>
				</tr>
			</c:if>
			<c:forEach var="event" items="${eventList}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}">${event.name}</a></td>
					<td>${event.formattedEventDateTimeRange}</td>
					<td><span
						class="status-badge ${event.status == 'KOMPLETT' or event.status == 'ZUGEWIESEN' ? 'status-ok' : event.status == 'LAUFEND' ? 'status-warn' : event.status == 'ABGESCHLOSSEN' ? 'status-info' : 'status-info'}">${event.status}</span></td>
					<td style="display: flex; gap: 5px; flex-wrap: wrap;">
						<button type="button" class="btn btn-small edit-event-btn"
							data-event-id="${event.id}">Bearbeiten</button> <c:if
							test="${event.status != 'ABGESCHLOSSEN'}">
							<button type="button"
								class="btn btn-small btn-success assign-users-btn"
								data-event-id="${event.id}"
								data-event-name="${fn:escapeXml(event.name)}">Zuweisen</button>
							<c:if
								test="${event.status == 'GEPLANT' || event.status == 'KOMPLETT'}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich starten? Der Chat wird aktiviert.">
									<input type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="LAUFEND">
									<button type="submit" class="btn btn-small btn-warning">Starten</button>
								</form>
							</c:if>
							<c:if test="${event.status == 'LAUFEND'}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich abschließen?">
									<input type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="ABGESCHLOSSEN">
									<button type="submit" class="btn btn-small"
										style="background-color: var(--text-muted-color);">Abschließen</button>
								</form>
							</c:if>
						</c:if>
						<form
							action="${pageContext.request.contextPath}/admin/veranstaltungen"
							method="post" class="inline-form js-confirm-form"
							data-confirm-message="Soll das Event '${fn:escapeXml(event.name)}' wirklich endgültig gelöscht werden?">
							<input type="hidden" name="action" value="delete"><input
								type="hidden" name="id" value="${event.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<%@ include file="/WEB-INF/jspf/event_modals.jspf"%>
<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/admin/admin_events_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_files.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Datei- & Kategorienverwaltung" />
</c:import>

<h1>
	<i class="fas fa-folder-open"></i> Datei- & Kategorienverwaltung
</h1>
<p>Verwalten Sie hier alle hochgeladenen Dateien und deren
	Kategorien.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="file-manager-layout">
	<div class="card file-manager-categories">
		<h2>Kategorien</h2>
		<ul class="category-list">
			<c:forEach var="cat" items="${allCategories}">
				<li data-category-id="${cat.id}"><i class="fas fa-folder"></i>
					<c:out value="${cat.name}" /></li>
			</c:forEach>
		</ul>
		<hr>
		<h4 style="margin-top: 1rem;">Kategorie-Aktionen</h4>
		<form action="<c:url value='/admin/categories/create'/>" method="post">
			<div class="form-group">
				<label for="newCategoryName">Neue Kategorie erstellen</label> <input
					type="text" name="categoryName" id="newCategoryName" required>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-plus"></i> Erstellen
			</button>
		</form>
	</div>
	<div class="file-manager-content">
		<div id="section-placeholder" class="card"
			style="text-align: center; padding: 3rem; border-style: dashed;">
			<i class="fas fa-arrow-left fa-2x"
				style="color: var(--text-muted-color); margin-bottom: 1rem;"></i>
			<p style="font-size: 1.2rem; color: var(--text-muted-color);">Bitte
				wählen Sie links eine Kategorie aus.</p>
		</div>
		<div id="dynamic-content-area"></div>
	</div>
</div>

<template id="category-section-template">
	<div class="file-category-section">
		<div class="card">
			<h2>
				<i class="fas fa-file-alt"></i> Dateien in "<span
					class="category-name"></span>"
			</h2>
			<ul class="file-list"></ul>
		</div>
		<div class="card">
			<h2>
				<i class="fas fa-upload"></i> Datei zu "<span class="category-name"></span>"
				hochladen
			</h2>
			<form action="<c:url value='/admin/files'/>" method="post"
				enctype="multipart/form-data">
				<input type="hidden" name="categoryId" class="category-id-input">
				<div class="form-group">
					<label>Datei auswählen</label><input type="file" name="file"
						class="file-input" data-max-size="20971520" required><small
						class="file-size-warning" style="color: red; display: none;">Datei
						ist zu groß! (Max. 20 MB)</small>
				</div>
				<div class="form-group">
					<label>Sichtbar für</label><select name="requiredRole"><option
							value="NUTZER" selected>Alle Nutzer</option>
						<option value="ADMIN">Nur Admins</option></select>
				</div>
				<button type="submit" class="btn">
					<i class="fas fa-cloud-upload-alt"></i> Hochladen
				</button>
			</form>
		</div>
		<div class="card">
			<h2>
				<i class="fas fa-edit"></i> Kategorie "<span class="category-name"></span>"
				verwalten
			</h2>
			<div class="category-actions-grid">
				<form action="<c:url value='/admin/categories/update'/>"
					method="post" class="category-action-form">
					<input type="hidden" name="categoryId" class="category-id-input">
					<div class="form-group">
						<label>Umbenennen</label><input type="text" name="categoryName"
							class="category-name-input" required>
					</div>
					<button type="submit" class="btn btn-small">
						<i class="fas fa-save"></i> Umbenennen
					</button>
				</form>
				<form action="<c:url value='/admin/categories/delete'/>"
					method="post" class="category-action-form js-confirm-form"
					data-confirm-message="Kategorie wirklich löschen? Zugehörige Dateien verlieren ihre Kategoriezuordnung.">
					<input type="hidden" name="categoryId" class="category-id-input">
					<div class="form-group">
						<label>Löschen</label>
						<p>
							<small>Zugehörige Dateien verlieren ihre
								Kategoriezuordnung.</small>
						</p>
					</div>
					<button type="submit" class="btn btn-small btn-danger">
						<i class="fas fa-trash-alt"></i> Endgültig Löschen
					</button>
				</form>
			</div>
		</div>
	</div>
</template>

<template id="file-item-template">
	<li>
		<div class="file-info">
			<a href="#" class="file-download-link" title="Datei herunterladen"></a>
			<small class="file-meta"></small>
		</div>
		<form action="<c:url value='/admin/files'/>" method="post"
			class="js-confirm-form"
			data-confirm-message="Datei wirklich löschen?">
			<input type="hidden" name="action" value="delete"><input
				type="hidden" name="fileId" class="file-id-input">
			<button type="submit" class="btn btn-small btn-danger-outline"
				title="Löschen">
				<i class="fas fa-trash-alt"></i>
			</button>
		</form>
	</li>
</template>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script>
document.addEventListener('DOMContentLoaded', () => {
    // Data from JSP to JS
    const groupedFiles = {
        <c:forEach var="entry" items="${groupedFiles}" varStatus="status">
            "<c:out value="${entry.key}"/>": [
                <c:forEach var="file" items="${entry.value}" varStatus="fileStatus">
                    { id: ${file.id}, filename: "${fn:replace(file.filename, '"', '\\"')}", filepath: "${fn:replace(file.filepath, '"', '\\"')}", requiredRole: "${file.requiredRole}" }
                    ${!fileStatus.last ? ',' : ''}
                </c:forEach>
            ]
            ${!status.last ? ',' : ''}
        </c:forEach>
    };

    const allCategories = [
        <c:forEach var="cat" items="${allCategories}" varStatus="status">
            { id: ${cat.id}, name: "${fn:replace(cat.name, '"', '\\"')}" }
            ${!status.last ? ',' : ''}
        </c:forEach>
    ];

    const categoryListItems = document.querySelectorAll('.category-list li');
    const dynamicContentArea = document.getElementById('dynamic-content-area');
    const placeholder = document.getElementById('section-placeholder');
    const sectionTemplate = document.getElementById('category-section-template');
    const fileItemTemplate = document.getElementById('file-item-template');
    const contextPath = "${pageContext.request.contextPath}";

    const switchCategoryView = (categoryId) => {
        dynamicContentArea.innerHTML = '';
        placeholder.style.display = 'none';
        categoryListItems.forEach(item => item.classList.remove('active'));

        if (!categoryId) {
            placeholder.style.display = 'block';
            return;
        }

        const category = allCategories.find(c => c.id == categoryId);
        if (!category) return;

        // Activate the selected category list item
        const activeLi = document.querySelector(`.category-list li[data-category-id='${categoryId}']`);
        if(activeLi) activeLi.classList.add('active');

        // Clone and populate the main section template
        const sectionClone = sectionTemplate.content.cloneNode(true);
        sectionClone.querySelectorAll('.category-name').forEach(el => el.textContent = category.name);
        sectionClone.querySelectorAll('.category-id-input').forEach(el => el.value = category.id);
        sectionClone.querySelector('.category-name-input').value = category.name;

        // Populate the file list
        const fileList = sectionClone.querySelector('.file-list');
        const filesForCategory = groupedFiles[category.name] || [];

        if (filesForCategory.length > 0) {
            filesForCategory.forEach(file => {
                const fileItemClone = fileItemTemplate.content.cloneNode(true);
                const downloadLink = fileItemClone.querySelector('.file-download-link');
                // CORRECTED LINE: Use standard string concatenation to avoid EL conflict
                downloadLink.href = contextPath + '/download?file=' + encodeURIComponent(file.filepath);
                downloadLink.textContent = file.filename;
                fileItemClone.querySelector('.file-meta').textContent = `(Sichtbar für: ${file.requiredRole})`;
                fileItemClone.querySelector('.file-id-input').value = file.id;
                
                const fileForm = fileItemClone.querySelector('form');
                fileForm.dataset.confirmMessage = `Datei '${file.filename}' wirklich löschen?`;
                fileForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    showConfirmationModal(this.dataset.confirmMessage, () => this.submit());
                });
                
                fileList.appendChild(fileItemClone);
            });
        } else {
            fileList.innerHTML = '<li style="justify-content: center; color: var(--text-muted-color);">Keine Dateien in dieser Kategorie.</li>';
        }

        dynamicContentArea.appendChild(sectionClone);
        
        // Re-attach file size validation and confirmation to the newly added forms
        attachFileSizeValidator(dynamicContentArea.querySelector('.file-input'));
        dynamicContentArea.querySelectorAll('.js-confirm-form').forEach(form => {
             form.addEventListener('submit', function(e) {
                e.preventDefault();
                showConfirmationModal(this.dataset.confirmMessage, () => this.submit());
            });
        });
    };
    
    const attachFileSizeValidator = (input) => {
        if (!input) return;
        input.addEventListener('change', (e) => {
            const file = e.target.files[0];
            const maxSize = parseInt(e.target.dataset.maxSize, 10);
            const warningElement = e.target.nextElementSibling;
            if (file && file.size > maxSize) {
                warningElement.style.display = 'block';
                e.target.value = '';
            } else {
                warningElement.style.display = 'none';
            }
        });
    };

    categoryListItems.forEach(item => {
        item.addEventListener('click', () => {
            switchCategoryView(item.dataset.categoryId);
        });
    });
    
    // Initial view
    switchCategoryView(null);
});
</script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_log.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Log" />
</c:import>

<h1>Admin Aktions-Protokoll</h1>

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Nach Details, Name oder Aktion filtern..."
			style="width: 100%;" aria-label="Protokoll filtern">
	</div>
</div>

<div class="table-wrapper">
	<table class="data-table searchable-table">
		<thead>
			<tr>
				<th>Wann</th>
				<th>Wer</th>
				<th>Aktionstyp</th>
				<th>Details</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="log" items="${logs}">
				<tr>
					<td><c:out value="${log.formattedActionTimestamp}" /> Uhr</td>
					<td><c:out value="${log.adminUsername}" /></td>
					<td><c:out value="${log.actionType}" /></td>
					<td><c:out value="${log.details}" /></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_matrix.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="../../jspf/main_header.jspf">
	<c:param name="pageTitle" value="Qualifikations-Matrix" />
</c:import>

<h1>
	<i class="fas fa-th-list"></i> Qualifikations-Matrix
</h1>
<p>Klicken Sie auf eine Zelle, um die Teilnahme an einem Meeting zu
	bearbeiten. Die Kopfzeile und die Benutzerleiste bleiben beim Scrollen
	fixiert.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th rowspan="2" class="sticky-header sticky-col"
					style="vertical-align: middle; left: 0; z-index: 15;">Nutzer /
					Lehrgang ↓</th>
				<c:forEach var="course" items="${allCourses}">
					<th colspan="${fn:length(meetingsByCourse[course.id])}"
						class="sticky-header" style="text-align: center;"><a
						href="${pageContext.request.contextPath}/admin/lehrgaenge"
						title="Vorlagen verwalten">${course.abbreviation}</a></th>
				</c:forEach>
			</tr>
			<tr>
				<c:forEach var="course" items="${allCourses}">
					<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
						<th class="sticky-header"
							style="text-align: center; min-width: 120px;"><a
							href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
							title="Meetings für '${course.name}' verwalten">${meeting.name}</a>
						</th>
					</c:forEach>
				</c:forEach>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="user" items="${allUsers}">
				<tr>
					<td class="sticky-col" style="font-weight: 500; left: 0;">
						<%-- CORRECTED: The link must point to the correct servlet URL for user details. --%>
						<a
						href="${pageContext.request.contextPath}/admin/mitglieder?action=details&id=${user.id}">${user.username}</a>
					</td>
					<c:forEach var="course" items="${allCourses}">
						<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
							<c:set var="attendanceKey" value="${user.id}-${meeting.id}" />
							<c:set var="attendance" value="${attendanceMap[attendanceKey]}" />
							<td class="qual-cell" data-user-id="${user.id}"
								data-user-name="${user.username}"
								data-meeting-id="${meeting.id}"
								data-meeting-name="${course.name} - ${meeting.name}"
								data-attended="${not empty attendance && attendance.attended}"
								data-remarks="${not empty attendance ? attendance.remarks : ''}"
								style="text-align: center; font-weight: bold; cursor: pointer;"
								title="Klicken zum Bearbeiten"><c:choose>
									<c:when test="${not empty attendance && attendance.attended}">
										<span class="text-success" style="font-size: 1.2rem;">✔</span>
									</c:when>
									<c:otherwise>
										<span class="text-muted">-</span>
									</c:otherwise>
								</c:choose></td>
						</c:forEach>
					</c:forEach>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Attendance Modal -->
<div class="modal-overlay" id="attendance-modal">
	<div class="modal-content">
		<button class="modal-close-btn">×</button>
		<h3>Teilnahme bearbeiten</h3>
		<p id="modal-title" style="font-weight: bold; margin-bottom: 1rem;"></p>
		<form action="${pageContext.request.contextPath}/admin/teilnahme"
			method="post">
			<input type="hidden" name="returnTo" value="matrix"> <input
				type="hidden" name="userId" id="modal-user-id"> <input
				type="hidden" name="meetingId" id="modal-meeting-id">
			<div class="form-group"
				style="display: flex; align-items: center; gap: 1rem;">
				<label for="modal-attended" style="margin-bottom: 0;">Teilgenommen:</label>
				<input type="checkbox" id="modal-attended" name="attended"
					value="true" style="width: auto; height: 1.5rem;">
			</div>
			<div class="form-group">
				<label for="modal-remarks">Bemerkungen:</label>
				<textarea name="remarks" id="modal-remarks" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/admin/admin_matrix.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_meeting_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Meetings für ${parentCourse.name}" />
</c:import>

<h1>
	Meetings für "
	<c:out value="${parentCourse.name}" />
	"
</h1>
<a href="${pageContext.request.contextPath}/admin/lehrgaenge"
	style="margin-bottom: 1rem; display: inline-block;">« Zurück zu
	allen Vorlagen</a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn" id="new-meeting-btn">Neues
		Meeting planen</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Tabelle filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<c:if test="${empty meetings}">
	<div class="card">
		<p>Für diesen Lehrgang wurden noch keine Meetings geplant.</p>
	</div>
</c:if>

<div class="desktop-table-wrapper">
	<table class="desktop-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Meeting-Name</th>
				<th class="sortable" data-sort-type="string">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Leitung</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="meeting" items="${meetings}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/meeting/details?id=${meeting.id}"><c:out
								value="${meeting.name}" /></a></td>
					<td><c:out value="${meeting.formattedMeetingDateTimeRange}" /></td>
					<td><c:out
							value="${empty meeting.leaderUsername ? 'N/A' : meeting.leaderUsername}" /></td>
					<td style="display: flex; gap: 0.5rem;">
						<button type="button" class="btn btn-small edit-meeting-btn"
							data-meeting-id="${meeting.id}">Bearbeiten & Anhänge</button>
						<form action="${pageContext.request.contextPath}/admin/meetings"
							method="post" class="inline-form js-confirm-form"
							data-confirm-message="Meeting '${fn:escapeXml(meeting.name)}' wirklich löschen?">
							<input type="hidden" name="action" value="delete"> <input
								type="hidden" name="courseId" value="${parentCourse.id}">
							<input type="hidden" name="meetingId" value="${meeting.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- MODAL FOR CREATE/EDIT MEETING -->
<div class="modal-overlay" id="meeting-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button class="modal-close-btn">×</button>
		<h3 id="meeting-modal-title">Meeting</h3>
		<form id="meeting-modal-form"
			action="${pageContext.request.contextPath}/admin/meetings"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="action" id="meeting-action"> <input
				type="hidden" name="courseId" value="${parentCourse.id}"> <input
				type="hidden" name="id" id="meeting-id">
			<div class="form-group">
				<label for="name-modal">Name des Meetings</label><input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="responsive-form-grid">
				<div class="form-group">
					<label for="meetingDateTime-modal">Beginn</label><input
						type="datetime-local" id="meetingDateTime-modal"
						name="meetingDateTime" required>
				</div>
				<div class="form-group">
					<label for="endDateTime-modal">Ende (optional)</label><input
						type="datetime-local" id="endDateTime-modal" name="endDateTime">
				</div>
			</div>
			<div class="responsive-form-grid">
				<div class="form-group">
					<label for="location-modal">Ort</label><input type="text"
						id="location-modal" name="location">
				</div>
				<div class="form-group">
					<label for="leader-modal">Leitende Person</label><select
						name="leaderUserId" id="leader-modal"><option value="">(Keine)</option>
						<c:forEach var="user" items="${allUsers}">
							<option value="${user.id}"><c:out
									value="${user.username}" /></option>
						</c:forEach></select>
				</div>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>
			<div class="card"
				style="margin-top: 1rem; padding: 1rem; background-color: var(--bg-color);">
				<h4 class="card-title" style="border: none; padding: 0;">Anhänge</h4>
				<ul id="modal-attachments-list" class="details-list"
					style="margin-bottom: 1rem;"></ul>
				<div class="form-group">
					<label for="attachment-modal">Neuen Anhang hochladen</label><input
						type="file" name="attachment" id="attachment-modal"
						class="file-input" data-max-size="20971520"><small
						class="file-size-warning" style="color: red; display: none;">Datei
						ist zu groß! (Max. 20 MB)</small>
				</div>
				<div class="form-group">
					<label for="requiredRole-modal">Sichtbar für</label><select
						name="requiredRole" id="requiredRole-modal"><option
							value="NUTZER" selected>Alle Nutzer</option>
						<option value="ADMIN">Nur Admins</option></select>
				</div>
			</div>
			<button type="submit" class="btn" style="margin-top: 1.5rem;">Speichern</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/admin/admin_meeting_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_reports.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Berichte & Analysen" />
</c:import>

<h1>
	<i class="fas fa-chart-pie"></i> Berichte & Analysen
</h1>
<p>Hier finden Sie zusammengefasste Daten und Analysen über die
	Anwendungsnutzung.</p>

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">Event-Berichte</h2>
		<ul class="details-list">
			<li><a
				href="<c:url value='/admin/reports?report=event_participation'/>">Teilnahme-Zusammenfassung</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt die
					Anzahl der Anmeldungen pro Event.</p></li>
		</ul>
	</div>
	<div class="card">
		<h2 class="card-title">Benutzer-Berichte</h2>
		<ul class="details-list">
			<li><a
				href="<c:url value='/admin/reports?report=user_activity'/>">Benutzeraktivität</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt, wie
					aktiv einzelne Benutzer sind.</p></li>
		</ul>
	</div>
	<div class="card">
		<h2 class="card-title">Lager-Berichte</h2>
		<ul class="details-list">
			<li><a
				href="<c:url value='/admin/reports?report=inventory_usage'/>">Nutzungsfrequenz</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt,
					welche Artikel am häufigsten entnommen werden.</p></li>
			<li><span>Gesamtwert des Lagers</span> <span
				style="font-weight: bold;"> <fmt:setLocale value="de_DE" /> <fmt:formatNumber
						value="${totalInventoryValue}" type="currency" />
			</span></li>
		</ul>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_storage_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lagerverwaltung" />
</c:import>

<h1>
	<i class="fas fa-warehouse"></i> Lagerverwaltung
</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-item-btn">
		<i class="fas fa-plus"></i> Neuen Artikel anlegen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Tabelle filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<div class="table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th>Bild</th>
				<th class="sortable" data-sort-type="string">Ort</th>
				<th class="sortable" data-sort-type="number">Verfügbar</th>
				<th class="sortable" data-sort-type="number">Defekt</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="item" items="${storageList}">
				<tr
					class="${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
					<td><a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
								value="${item.name}" /></a></td>
					<td style="text-align: center;"><c:if
							test="${not empty item.imagePath}">
							<button class="btn btn-small btn-info lightbox-trigger"
								data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
								title="Bild anzeigen">
								<i class="fas fa-image"></i>
							</button>
						</c:if></td>
					<td><c:out value="${item.location}" /></td>
					<td><c:out value="${item.availableQuantity}" /></td>
					<td><c:out value="${item.defectiveQuantity}" /></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
						<button type="button"
							class="btn btn-small btn-warning edit-item-btn"
							data-fetch-url="<c:url value='/admin/lager?action=getItemData&id=${item.id}'/>">Bearbeiten</button>
						<c:set var="qrData">
							<c:url value="/lager/actions?id=${item.id}" />
						</c:set> <a
						href="https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${fn:escapeXml(qrData)}"
						target="_blank" class="btn btn-small btn-secondary">QR-Code</a>
						<button class="btn btn-small defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-max-qty="${item.quantity}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}">Defekt</button>
						<form action="<c:url value='/admin/lager'/>" method="post"
							class="js-confirm-form"
							data-confirm-message="Artikel '${fn:escapeXml(item.name)}' wirklich löschen?">
							<input type="hidden" name="action" value="delete"> <input
								type="hidden" name="id" value="${item.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close">×</span><img class="lightbox-content"
		id="lightbox-image">
</div>

<%@ include file="/WEB-INF/jspf/storage_modals.jspf"%>
<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/admin/admin_storage_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_system.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Systemstatus" />
</c:import>

<h1>
	<i class="fas fa-server"></i> Systemstatus
</h1>
<p>Live-Statistiken des Servers. Die Daten werden alle 5 Sekunden
	aktualisiert.</p>

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-microchip"></i> CPU Auslastung
		</h2>
		<div class="progress-bar-container">
			<div id="cpu-progress" class="progress-bar"></div>
		</div>
		<p id="cpu-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-memory"></i> Arbeitsspeicher (RAM)
		</h2>
		<div class="progress-bar-container">
			<div id="ram-progress" class="progress-bar"></div>
		</div>
		<p id="ram-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-hdd"></i> Festplattenspeicher
		</h2>
		<div class="progress-bar-container">
			<div id="disk-progress" class="progress-bar"></div>
		</div>
		<p id="disk-text" class="progress-text">Lade...</p>
	</div>
	<div class="card" id="battery-card" style="display: none;">
		<h2 class="card-title">
			<i class="fas fa-battery-half"></i> Akku
		</h2>
		<div class="progress-bar-container">
			<div id="battery-progress" class="progress-bar"></div>
		</div>
		<p id="battery-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-clock"></i> Server Uptime
		</h2>
		<p id="uptime-text"
			style="font-size: 1.5rem; font-weight: 500; color: var(--primary-color); text-align: center;">Lade...</p>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/admin/admin_system.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_users.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Benutzerverwaltung" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />

<h1>
	<i class="fas fa-users-cog"></i> Benutzerverwaltung
</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:set var="hasPermission" value="false" />
	<c:forEach var="p" items="${userPermissions}">
		<c:if test="${p == 'USER_CREATE'}">
			<c:set var="hasPermission" value="${true}" />
		</c:if>
	</c:forEach>
	<c:if test="${hasPermission}">
		<button type="button" class="btn" id="new-user-btn">
			<i class="fas fa-user-plus"></i> Neuen Benutzer anlegen
		</button>
	</c:if>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Benutzer filtern..." aria-label="Benutzer filtern">
	</div>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-list">
	<c:forEach var="user" items="${requestScope.userList}">
		<div class="list-item-card"
			data-searchable-content="${user.username} ${user.roleName}">
			<h3 class="card-title">${user.username}</h3>
			<div class="card-row">
				<span>Rolle:</span> <span>${user.roleName}</span>
			</div>
			<div class="card-actions">
				<c:set var="hasPermission" value="false" />
				<c:forEach var="p" items="${userPermissions}">
					<c:if test="${p == 'USER_UPDATE'}">
						<c:set var="hasPermission" value="${true}" />
					</c:if>
				</c:forEach>
				<c:if test="${hasPermission}">
					<%-- CORRECTED: The data-fetch-url must point to the correct servlet URL --%>
					<button type="button" class="btn btn-small edit-user-btn"
						data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
				</c:if>
				<a
					href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
					class="btn btn-small">Details</a>
				<c:if test="${sessionScope.user.id != user.id}">
					<c:set var="hasPermission" value="false" />
					<c:forEach var="p" items="${userPermissions}">
						<c:if test="${p == 'USER_DELETE'}">
							<c:set var="hasPermission" value="${true}" />
						</c:if>
					</c:forEach>
					<c:if test="${hasPermission}">
						<form action="<c:url value='/admin/mitglieder'/>" method="post"
							class="js-confirm-form"
							data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
							<input type="hidden" name="action" value="delete"><input
								type="hidden" name="userId" value="${user.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</c:if>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="number">ID</th>
				<th class="sortable" data-sort-type="string">Benutzername</th>
				<th class="sortable" data-sort-type="string">Rolle</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="user" items="${requestScope.userList}">
				<tr>
					<td>${user.id}</td>
					<td>${user.username}</td>
					<td>${user.roleName}</td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><c:set
							var="hasPermission" value="false" /> <c:forEach var="p"
							items="${userPermissions}">
							<c:if test="${p == 'USER_UPDATE'}">
								<c:set var="hasPermission" value="${true}" />
							</c:if>
						</c:forEach> <c:if test="${hasPermission}">
							<%-- CORRECTED: The data-fetch-url must point to the correct servlet URL --%>
							<button type="button" class="btn btn-small edit-user-btn"
								data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
						</c:if> <a
						href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
						class="btn btn-small">Details</a> <c:if
							test="${sessionScope.user.id != user.id}">
							<c:set var="hasPermission" value="false" />
							<c:forEach var="p" items="${userPermissions}">
								<c:if test="${p == 'USER_DELETE'}">
									<c:set var="hasPermission" value="${true}" />
								</c:if>
							</c:forEach>
							<c:if test="${hasPermission}">
								<form action="<c:url value='/admin/mitglieder'/>" method="post"
									class="js-confirm-form"
									data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
									<input type="hidden" name="action" value="delete"><input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-danger">Löschen</button>
								</form>
							</c:if>
							<c:set var="hasPermission" value="false" />
							<c:forEach var="p" items="${userPermissions}">
								<c:if test="${p == 'USER_PASSWORD_RESET'}">
									<c:set var="hasPermission" value="${true}" />
								</c:if>
							</c:forEach>
							<c:if test="${hasPermission}">
								<form action="<c:url value='/admin/mitglieder'/>" method="post"
									class="js-confirm-form"
									data-confirm-message="Passwort für '${fn:escapeXml(user.username)}' zurücksetzen? Das neue Passwort wird angezeigt.">
									<input type="hidden" name="action" value="resetPassword"><input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-warning">Passwort
										Reset</button>
								</form>
							</c:if>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<%@ include file="/WEB-INF/jspf/user_modals.jspf"%>
<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/admin/admin_users.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_user_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle"
		value="Benutzerdetails: ${userToView.username}" />
</c:import>

<h1>
	Benutzerdetails:
	<c:out value="${userToView.username}" />
</h1>
<%-- CORRECTED: The link must point back to the main user management servlet URL. --%>
<a href="${pageContext.request.contextPath}/admin/mitglieder"
	style="display: inline-block; margin-bottom: 1rem;"> « Zurück zur
	Benutzerliste </a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="responsive-dashboard-grid">
	<div class="card">
		<h2 class="card-title">Stammdaten</h2>
		<ul class="details-list">
			<li><strong>Benutzername:</strong> <c:out
					value="${userToView.username}" /></li>
			<li><strong>Rolle:</strong> <c:out
					value="${userToView.roleName}" /></li>
			<li><strong>Jahrgang:</strong> <c:out
					value="${userToView.classYear}" /></li>
			<li><strong>Klasse:</strong> <c:out
					value="${userToView.className}" /></li>
			<li><strong>E-Mail:</strong> <c:out
					value="${not empty userToView.email ? userToView.email : 'Nicht hinterlegt'}" /></li>
			<li><strong>Registriert seit:</strong> <c:out
					value="${userToView.formattedCreatedAt}" /> Uhr</li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Event-Teilnahmehistorie</h2>
		<div class="table-wrapper"
			style="max-height: 450px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Event</th>
						<th>Datum</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty eventHistory}">
						<tr>
							<td colspan="3" style="text-align: center;">Keine
								Event-Historie vorhanden.</td>
						</tr>
					</c:if>
					<c:forEach var="event" items="${eventHistory}">
						<tr>
							<td><a
								href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
										value="${event.name}" /></a></td>
							<td><c:out value="${event.formattedEventDateTime}" /> Uhr</td>
							<td><c:out value="${event.userAttendanceStatus}" /></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
</div>

<style>
.details-list {
	list-style-type: none;
	padding-left: 0;
}

.details-list li {
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
	display: flex;
	justify-content: space-between;
}

.details-list li:last-child {
	border-bottom: none;
}
</style>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\report_display.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Bericht: ${reportTitle}" />
</c:import>

<h1>${reportTitle}</h1>
<div class="table-controls">
	<a href="<c:url value='/admin/reports'/>" class="btn btn-secondary"><i
		class="fas fa-arrow-left"></i> Zurück zur Berichtsübersicht</a> <a
		href="?report=${param.report}&export=csv" class="btn btn-success"><i
		class="fas fa-file-csv"></i> Als CSV exportieren</a>
</div>

<div class="table-wrapper">
	<c:if test="${not empty reportData}">
		<table class="data-table">
			<thead>
				<tr>
					<c:forEach var="header" items="${reportData[0].keySet()}">
						<th><c:out value="${fn:replace(header, '_', ' ')}" /></th>
					</c:forEach>
				</tr>
			</thead>
			<tbody>
				<c:forEach var="row" items="${reportData}">
					<tr>
						<c:forEach var="key" items="${reportData[0].keySet()}">
							<td><c:out value="${row[key]}" /></td>
						</c:forEach>
					</tr>
				</c:forEach>
			</tbody>
		</table>
	</c:if>
	<c:if test="${empty reportData}">
		<p style="text-align: center; padding: 2rem;">Keine Daten für
			diesen Bericht verfügbar.</p>
	</c:if>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\auth\login.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Anmeldung" />
	<c:param name="showNav" value="false" />
</c:import>

<div class="login-page-container">
	<div class="login-box">
		<h1>
			<i class="fas fa-bolt"></i> TechnikTeam
		</h1>
		<c:if test="${not empty errorMessage}">
			<p class="error-message">
				<c:out value="${errorMessage}" />
			</p>
		</c:if>
		<form action="<c:url value='/login'/>" method="post">
			<div class="form-group">
				<label for="username">Benutzername</label> <input type="text"
					id="username" name="username" required autocomplete="username"
					autofocus>
			</div>
			<div class="form-group">
				<label for="password">Passwort</label> <input type="password"
					id="password" name="password" required
					autocomplete="current-password">
			</div>
			<button type="submit" class="btn" style="width: 100%;">Anmelden</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\auth\logout.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Logout" />
	<c:param name="showNav" value="false" />
</c:import>

<div style="text-align: center; margin-top: 5rem; padding: 2rem;">
	<h1>
		<c:out value="${not empty username ? username : 'Du'}" />
		, du wurdest erfolgreich ausgeloggt!
	</h1>
	<p>Du wirst in 5 Sekunden automatisch zur Login-Seite
		weitergeleitet.</p>
	<p>
		<a href="${pageContext.request.contextPath}/login">Jetzt zur
			Login-Seite</a>
	</p>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/auth/logout.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error400.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="400 - Fehlerhafte Anfrage" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--info-color);">400</h1>
	<h2>Fehlerhafte Anfrage</h2>
	<p class="error-message-text">Der Server konnte die Anfrage
		aufgrund einer fehlerhaften Syntax nicht verstehen. Das
		Protokolldroiden-System analysiert die Übertragung.</p>

	<div class="protocol-droid-console">
		<div class="droid-eye"></div>
		<pre id="droid-output"></pre>
	</div>

	<div id="redirect-container"
		style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
		<a href="javascript:history.back()" class="btn btn-secondary"> <i
			class="fas fa-arrow-left"></i> Einen Schritt zurück
		</a>
	</div>
</div>

<style>
/* Add these styles to your main CSS or keep them here */
.protocol-droid-console {
	width: 100%;
	max-width: 600px;
	background: #e9ecef;
	color: #343a40;
	border: 3px solid #adb5bd;
	border-radius: 8px;
	font-family: 'Courier New', Courier, monospace;
	position: relative;
	padding-top: 50px;
}

[data-theme="dark"] .protocol-droid-console {
	background: #212529;
	color: #ced4da;
	border-color: #495057;
}

.droid-eye {
	position: absolute;
	top: 15px;
	left: 50%;
	transform: translateX(-50%);
	width: 20px;
	height: 20px;
	background: #dc3545;
	border-radius: 50%;
	box-shadow: 0 0 10px #f87171;
	animation: eye-scan 4s linear infinite;
}

@
keyframes eye-scan { 0%, 100% {
	background: #dc3545;
}

50
%
{
background
:
#ffc107;
}
}
#droid-output {
	padding: 1rem;
	height: 200px;
	overflow-y: auto;
	text-align: left;
	white-space: pre-wrap;
	word-break: break-all;
}
</style>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script>
document.addEventListener('DOMContentLoaded', () => {
    const output = document.getElementById('droid-output');
    const redirectContainer = document.getElementById('redirect-container');

    // CORRECTION: Removed the line that accessed the non-existent 'method' property.
    const lines = [
        'INITIATING DATASTREAM ANALYSIS...',
        'PACKET RECEIVED. SIZE: ${pageContext.request.contentLength > 0 ? pageContext.request.contentLength : "UNKNOWN"} BYTES.',
        'PARSING HEADER... [OK]',
        'ANALYSING PAYLOAD...',
        '    > SCANNING FOR SYNTAX VIOLATIONS...',
        '    > ERROR! UNEXPECTED TOKEN OR MALFORMED PARAMETER DETECTED.',
        '    > CORRUPTION LEVEL: MODERATE.',
        'CONCLUSION: ANFRAGE NICHT VERARBEITBAR. DATENINTEGRITÄT KOMPROMITTIERT.',
        'EMPFEHLUNG: ZURÜCKKEHREN UND ANFRAGE NEU FORMULIEREN.',
        ''
    ];

    let lineIndex = 0;
    
    function printLine() {
        if (lineIndex < lines.length) {
            const p = document.createElement('p');
            p.textContent = lines[lineIndex];
            output.appendChild(p);
            output.scrollTop = output.scrollHeight;
            lineIndex++;
            setTimeout(printLine, Math.random() * 200 + 50);
        } else {
             redirectContainer.style.opacity = '1';
        }
    }

    printLine();
});
</script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error401.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="401 - Nicht autorisiert" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--danger-color);">401</h1>
	<h2>Nicht Autorisiert</h2>
	<p class="error-message-text">Für den Zugriff auf diese Ressource
		ist eine Authentifizierung erforderlich. Ihre Anmeldeinformationen
		fehlen oder sind ungültig.</p>

	<div class="card-scanner">
		<div class="scanner-light" id="scanner-light"></div>
		<div class="card-slot">
			<div class="card-content">
				<p>STATUS:</p>
				<h3 id="scanner-status">BEREIT</h3>
				<div class="progress-bar-container"
					style="height: 10px; margin-top: 1rem;">
					<div id="scanner-progress" class="progress-bar"></div>
				</div>
			</div>
		</div>
	</div>

	<div id="redirect-container"
		style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
		<%-- CORRECTED: Link must point to the /login servlet URL --%>
		<a href="${pageContext.request.contextPath}/login"
			class="btn btn-success"> <i class="fas fa-sign-in-alt"></i> Zur
			Anmeldeseite
		</a>
	</div>
</div>

<style>
/* Add these styles to your main CSS or keep them here */
.card-scanner {
	width: 100%;
	max-width: 350px;
	background: #343a40;
	padding: 1.5rem;
	border-radius: 10px;
	box-shadow: inset 0 0 15px #000;
}

.scanner-light {
	height: 10px;
	background: #28a745;
	border-radius: 5px;
	margin-bottom: 1.5rem;
	box-shadow: 0 0 10px #28a745;
}

.card-slot {
	background: #161b22;
	border: 2px solid #495057;
	border-radius: 8px;
	padding: 1.5rem;
	color: #fff;
}

#scanner-status {
	color: #ffc107;
	font-size: 2rem;
	letter-spacing: 2px;
	margin: 0;
}
</style>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script type="text/javascript" src="/js/error/error401.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error403.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="403 - Zugriff Verweigert" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--warning-color);">403</h1>
	<h2>Zugriff Verweigert</h2>
	<p class="error-message-text">Ihre Zugriffsebene ist für die
		angeforderte Ressource nicht ausreichend. Das Sicherheitsprotokoll
		wurde aktiviert.</p>

	<!-- Interactive Security Console -->
	<div class="security-console">
		<div class="console-header">
			<span>SYSTEM SECURITY DAEMON - PROTOKOLL</span>
		</div>
		<pre id="console-body"></pre>
	</div>

	<div id="redirect-container"
		style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
		<a href="${pageContext.request.contextPath}/home"
			class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
			Startseite
		</a>
	</div>
</div>

<style>
.error-page-container {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	min-height: 70vh;
	padding: 2rem;
}

.error-code {
	font-size: 5rem;
	font-weight: 800;
	line-height: 1;
	margin: 0;
}

.error-page-container h2 {
	font-size: 1.75rem;
	border: none;
	margin: 0 0 1.5rem 0;
}

.error-message-text {
	max-width: 600px;
	font-size: 1.1rem;
	line-height: 1.6;
	margin-bottom: 2rem;
}

.security-console {
	width: 100%;
	max-width: 700px;
	background: #000;
	border-radius: 6px;
	border: 1px solid var(--warning-color);
	box-shadow: 0 0 15px rgba(255, 193, 7, 0.3);
	font-family: monospace, monospace;
}

.console-header {
	background: #333;
	padding: 8px 12px;
	border-top-left-radius: 5px;
	border-top-right-radius: 5px;
	color: var(--warning-color);
	font-weight: bold;
	text-align: left;
}

#console-body {
	padding: 1rem;
	height: 250px;
	overflow-y: auto;
	text-align: left;
	white-space: pre-wrap;
	word-break: break-all;
}

#console-body .ok {
	color: var(--success-color);
}

#console-body .fail {
	color: var(--danger-color);
}

#console-body .info {
	color: var(--info-color);
}

#console-body .warn {
	color: var(--warning-color);
}

.cursor {
	display: inline-block;
	width: 0.6em;
	background-color: var(--warning-color);
	animation: blink 1s step-end infinite;
}

@
keyframes blink { 50% {
	background-color: transparent;
}
}
</style>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script>
document.addEventListener('DOMContentLoaded', () => {
    const consoleBody = document.getElementById('console-body');
    const redirectContainer = document.getElementById('redirect-container');
    const username = "${fn:escapeXml(sessionScope.user.username)}";
    const role = "${fn:escapeXml(sessionScope.user.roleName)}";
    const requestUri = "${fn:escapeXml(pageContext.errorData.requestURI)}";

    let currentLine;

    async function type(text, delay = 25) {
        for (const char of text) {
            currentLine.innerHTML += char;
            consoleBody.scrollTop = consoleBody.scrollHeight;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
        currentLine.innerHTML = currentLine.innerHTML.replace('<span class="cursor"></span>', ''); 
        consoleBody.innerHTML += '\n'; // New line
    }
    
    async function addLine(text, className = '') {
        currentLine = document.createElement('span');
        if(className) currentLine.className = className;
        consoleBody.appendChild(currentLine);
        await type(text + ' <span class="cursor"></span>');
    }

    async function runSequence() {
        await addLine('[INFO] Eingehender Request erkannt...', 'info');
        await new Promise(resolve => setTimeout(resolve, 300));
        await addLine(`[INFO] Ziel-Ressource: ${requestUri}`, 'info');
        await new Promise(resolve => setTimeout(resolve, 400));
        await addLine('[INFO] Starte Identitäts-Scan...', 'info');
        await new Promise(resolve => setTimeout(resolve, 500));

        // CORRECTION: Added the 'ok' class to make this line green.
        await addLine(`[OK]   ... Subjekt identifiziert: "${username}"`, 'ok');

        await new Promise(resolve => setTimeout(resolve, 200));
        await addLine(`[OK]   ... Zugehörigkeit/Rolle: [${role}]`, 'ok');
        await new Promise(resolve => setTimeout(resolve, 400));
        await addLine('[WARN] Prüfe Berechtigungs-Matrix für Ziel-Ressource...', 'warn');
        await new Promise(resolve => setTimeout(resolve, 800));
        await addLine('[FAIL] >>> ZUGRIFF VERWEIGERT <<<', 'fail');
        await new Promise(resolve => setTimeout(resolve, 200));
        await addLine('[FAIL] >>> Erforderliche Berechtigung nicht im Token des Subjekts gefunden.', 'fail');
        await new Promise(resolve => setTimeout(resolve, 500));
        await addLine('[INFO] Aktion protokolliert. Sicherheits-Subsystem wird heruntergefahren.', 'info');
        
        currentLine = document.createElement('span');
        consoleBody.appendChild(currentLine);
        currentLine.innerHTML = '> <span class="cursor"></span>';

        redirectContainer.style.opacity = '1';

        setTimeout(() => {
            window.location.href = "${pageContext.request.contextPath}/home";
        }, 5000);
    }

    runSequence();
});
</script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error404.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="404 - Seite nicht gefunden" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code">404</h1>
	<h2>Ressource nicht gefunden</h2>
	<p class="error-message-text">
		Sie haben sich im Dateisystem verirrt. Die angeforderte Ressource
		wurde nicht gefunden. <br>Das Systemprotokoll unten zeigt weitere
		Details.
	</p>

	<div class="terminal-window">
		<div class="terminal-header">
			<div class="terminal-buttons">
				<span class="term-btn close"></span><span class="term-btn min"></span><span
					class="term-btn max"></span>
			</div>
			<span>bash -- technik-team</span>
		</div>
		<div id="terminal-body"></div>
	</div>

	<div id="home-link-container"
		style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
		<a href="${pageContext.request.contextPath}/home"
			class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
			Startseite
		</a>
	</div>
</div>

<style>
.terminal-window {
	width: 100%;
	max-width: 650px;
	background: #000;
	border-radius: 8px;
	box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
	font-family: monospace, monospace;
}

.terminal-header {
	background: #333;
	padding: 8px;
	border-top-left-radius: 8px;
	border-top-right-radius: 8px;
	display: flex;
	align-items: center;
	color: #ccc;
	font-size: 0.9em;
}

.terminal-buttons {
	display: flex;
	gap: 6px;
	margin-right: 12px;
}

.term-btn {
	display: block;
	width: 12px;
	height: 12px;
	border-radius: 50%;
}

.term-btn.close {
	background: #ff5f56;
}

.term-btn.min {
	background: #ffbd2e;
}

.term-btn.max {
	background: #27c93f;
}

#terminal-body {
	padding: 1rem;
	height: 200px;
	overflow-y: auto;
	text-align: left;
}

#terminal-body p {
	margin: 0;
	white-space: pre-wrap;
	word-break: break-all;
}

#terminal-body .prompt {
	color: var(--success-color);
}

#terminal-body .command {
	color: #fff;
}

#terminal-body .error {
	color: var(--danger-color);
}

#terminal-body .info {
	color: var(--info-color);
}

#terminal-body .link {
	color: var(--success-color);
	text-decoration: underline;
	cursor: pointer;
}

#terminal-body .cursor {
	background-color: #fff;
}
</style>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script type="text/javascript" src="/js/error/error404.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error500.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<%--
  error500.jsp - REDESIGNED & INTERACTIVE
  
  A creative "Internal Server Error" page featuring a simulated diagnostic tool with a realistic typing effect.
--%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="500 - Interner Fehler" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--danger-color);">500</h1>
	<h2>Systemfehler im Hauptrechner</h2>
	<p class="error-message-text">Ein unerwarteter Fehler ist
		aufgetreten und unser System ist ins Stolpern geraten. Starten Sie die
		automatische Systemdiagnose, um den Fehler zu analysieren.</p>

	<!-- Interactive Diagnostic Tool -->
	<div class="diagnostic-container">
		<button id="diagnostic-btn" class="btn btn-warning">
			<i class="fas fa-tasks"></i> Diagnose starten
		</button>
		<div id="diagnostic-output" class="diagnostic-console">
			<!-- Terminal content will be generated by script -->
		</div>
	</div>

	<a href="${pageContext.request.contextPath}/home"
		class="btn btn-primary" style="margin-top: 1.5rem;"> <i
		class="fas fa-home"></i> Flucht zur Startseite
	</a>
</div>

<%-- Hidden Debug Info --%>
<!--
    Exception Details: Request URI: ${pageContext.errorData.requestURI}, Servlet: ${pageContext.errorData.servletName}, Exception: ${pageContext.exception.message}
-->

<style>
.error-page-container {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	min-height: 70vh;
	padding: 2rem;
}

.error-code {
	font-size: 5rem;
	font-weight: 800;
	line-height: 1;
	margin: 0;
}

.error-page-container h2 {
	font-size: 1.75rem;
	border: none;
	margin-top: 0;
	margin-bottom: 1.5rem;
}

.error-message-text {
	max-width: 600px;
	font-size: 1.1rem;
	line-height: 1.6;
}

.diagnostic-container {
	width: 100%;
	max-width: 600px;
	margin-top: 2rem;
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	padding: 1rem;
	background: var(--bg-color);
}

.diagnostic-console {
	font-family: monospace;
	text-align: left;
	height: 220px;
	overflow-y: auto;
	background-color: #000;
	color: #0f0;
	padding: 1rem;
	margin-top: 1rem;
	border-radius: 4px;
	border: 1px solid #333;
}

.diagnostic-console p {
	margin: 0;
	white-space: pre-wrap;
}

.diagnostic-console .fail {
	color: #ff4d4d;
}

.diagnostic-console .warn {
	color: #f0b72f;
}

.diagnostic-console .ok {
	color: #56d364;
}

.diagnostic-console .info {
	color: #79c0ff;
}

.cursor {
	display: inline-block;
	width: 0.6em;
	background-color: #0f0;
	animation: blink 1s step-end infinite;
}

@
keyframes blink { 50% {
	background-color: transparent;
}
}
</style>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script type="text/javascript" src="/js/error/error500.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error503.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="503 - Dienst nicht verfügbar" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: #ff8c00;">503</h1>
	<h2>Dienst Nicht Verfügbar</h2>
	<p class="error-message-text">Der Server ist zurzeit überlastet
		oder wird gewartet. Bitte versuchen Sie es in Kürze erneut. Das System
		versucht einen Neustart.</p>

	<div class="reboot-console">
		<pre id="reboot-output"></pre>
		<div class="progress-bar-container"
			style="margin-top: 1rem; background: #333;">
			<div id="reboot-progress" class="progress-bar"
				style="background: var(--success-color);"></div>
		</div>
	</div>
</div>

<style>
.reboot-console {
	width: 100%;
	max-width: 700px;
	background: #000;
	color: #0f0;
	border-radius: 6px;
	font-family: monospace;
	padding: 1rem;
}

#reboot-output {
	height: 250px;
	overflow-y: hidden;
	text-align: left;
	white-space: pre-wrap;
}
</style>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script type="text/javascript" src="/js/error/error503.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error_generic.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="Fehler" />
</c:import>

<c:set var="statusCode" value="${pageContext.errorData.statusCode}" />

<c:set var="errorMessage"
	value="Ein unerwarteter Fehler ist aufgetreten." />
<c:choose>
	<c:when test="${statusCode == 402}">
		<c:set var="errorMessage"
			value="Zahlung erforderlich. (Dieser Code ist für die zukünftige Verwendung reserviert.)" />
	</c:when>
	<c:when test="${statusCode == 405}">
		<c:set var="errorMessage"
			value="Methode nicht erlaubt. Die verwendete HTTP-Methode (z.B. GET, POST) ist für diese Ressource nicht zulässig." />
	</c:when>
	<c:when test="${statusCode == 406}">
		<c:set var="errorMessage"
			value="Nicht akzeptabel. Der Server kann keine Antwort generieren, die den Kriterien des Clients entspricht." />
	</c:when>
	<c:when test="${statusCode == 408}">
		<c:set var="errorMessage"
			value="Anfrage-Zeitüberschreitung. Der Server hat zu lange auf eine Antwort gewartet." />
	</c:when>
	<c:when test="${statusCode == 409}">
		<c:set var="errorMessage"
			value="Konflikt. Die Anfrage konnte wegen eines Konflikts mit dem aktuellen Zustand der Ressource nicht abgeschlossen werden." />
	</c:when>
	<c:when test="${statusCode == 410}">
		<c:set var="errorMessage"
			value="Verschwunden. Die angeforderte Ressource ist nicht mehr verfügbar und wird es auch in Zukunft nicht sein." />
	</c:when>
	<c:when test="${statusCode == 501}">
		<c:set var="errorMessage"
			value="Nicht implementiert. Der Server erkennt die Anfragemethode nicht oder kann sie nicht erfüllen." />
	</c:when>
	<c:when test="${statusCode == 502}">
		<c:set var="errorMessage"
			value="Bad Gateway. Der Server hat als Gateway oder Proxy eine ungültige Antwort vom Upstream-Server erhalten." />
	</c:when>
	<c:when test="${statusCode == 504}">
		<c:set var="errorMessage"
			value="Gateway-Zeitüberschreitung. Der Server hat als Gateway oder Proxy keine rechtzeitige Antwort erhalten." />
	</c:when>
</c:choose>

<div class="error-page-container">
	<h1 class="error-code">${statusCode}</h1>
	<h2>${errorMessage}</h2>
	<p class="error-message-text">Wenn Sie glauben, dass dies ein
		Fehler ist, kontaktieren Sie bitte den Administrator.</p>
	<a href="${pageContext.request.contextPath}/home"
		class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
		Startseite
	</a>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\calendar.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<%-- CORRECTED: The import path is now absolute from the context root. --%>
<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Kalender" />
</c:import>

<h1>
	<i class="fas fa-calendar-alt"></i> Kalender
</h1>
<p>
	Übersicht aller anstehenden Veranstaltungen und Lehrgänge. <a
		href="<c:url value='/public/calendar.ics'/>"
		class="btn btn-small btn-info" style="margin-left: 1rem;"> <i
		class="fas fa-rss"></i> Kalender abonnieren
	</a>
</p>

<div class="card">
	<div id="calendar"></div>
</div>

<link
	href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.css'
	rel='stylesheet' />
<script
	src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.js'></script>
<script
	src='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/locales/de.js'></script>

<%-- CORRECTED: The import path is now absolute from the context root. --%>
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script>
document.addEventListener('DOMContentLoaded', function() {
	var calendarEl = document.getElementById('calendar');
	var calendar = new FullCalendar.Calendar(calendarEl, {
		initialView: 'dayGridMonth',
		locale: 'de',
		headerToolbar: {
			left: 'prev,next today',
			center: 'title',
			right: 'dayGridMonth,timeGridWeek,listWeek'
		},
		events: '${pageContext.request.contextPath}/api/calendar/entries',
		eventClick: function(info) {
			info.jsEvent.preventDefault(); // don't let the browser navigate
			if (info.event.url) {
				window.open(info.event.url, "_self");
			}
		}
	});
	calendar.render();
});
</script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\collaborative_editor.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<%--
  This page now imports the standard header and footer to be
  fully integrated into the application's UI.
--%>

<%-- CORRECTED: The import path is now absolute from the context root. --%>
<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Gemeinsamer Editor" />
	<c:param name="navType" value="user" />
</c:import>

<h1>
	<i class="fas fa-edit"></i> Gemeinsamer Notizblock
</h1>
<p>Änderungen werden automatisch für alle Benutzer gespeichert und
	angezeigt.</p>

<div class="card">
	<textarea id="editor" class="form-group"
		style="width: 100%; height: 60vh; font-family: monospace; font-size: 16px; margin: 0; background-color: var(--surface-color);"
		placeholder="Lade Inhalt..."></textarea>
	<div id="status-indicator"
		style="text-align: right; font-style: italic; color: var(--text-muted-color); padding-top: 5px; min-height: 1.2em;"></div>
</div>

<script type="text/javascript" src="/js/public/collaborative_editor.js"></script>
<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\dateien.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Dateien" />
</c:import>

<h1>Dateien & Dokumente</h1>

<%-- CORRECTED: The path is now absolute from the context root. --%>
<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<c:if test="${empty fileData}">
	<div class="card">
		<p>Es sind keine Dateien oder Dokumente verfügbar.</p>
	</div>
</c:if>

<c:forEach var="categoryEntry" items="${fileData}">
	<div class="card">
		<h2>
			<c:out value="${categoryEntry.key}" />
		</h2>
		<ul style="list-style: none; padding-left: 0;">
			<c:forEach var="file" items="${categoryEntry.value}" varStatus="loop">
				<li
					style="padding: 0.75rem 0; ${!loop.last ? 'border-bottom: 1px solid var(--border-color);' : ''}">
					<c:choose>
						<c:when test="${file.id == -1}">
							<a href="${pageContext.request.contextPath}/editor-page"
								style="font-weight: 600;"><c:out value="${file.filename}" /></a>
						</c:when>
						<c:otherwise>
							<a
								href="${pageContext.request.contextPath}/download?file=${file.filepath}"><c:out
									value="${file.filename}" /></a>
						</c:otherwise>
					</c:choose>
				</li>
			</c:forEach>
		</ul>
	</div>
</c:forEach>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\eventDetails.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/header.jspf">
	<c:param name="pageTitle" value="Event Details" />
</c:import>

<div class="details-container">

	<div
		style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap; margin-bottom: 0.5rem;">
		<h1>
			<c:out value="${event.name}" />
		</h1>
		<c:if test="${not empty event.status}">
			<c:set var="statusClass"
				value="${event.status == 'KOMPLETT' or event.status == 'ZUGEWIESEN' ? 'status-ok' : event.status == 'LAUFEND' ? 'status-warn' : event.status == 'ABGESCHLOSSEN' ? 'status-info' : 'status-info'}" />
			<span class="status-badge ${statusClass}"><c:out
					value="${event.status}" /></span>
		</c:if>
	</div>

	<p class="details-subtitle">
		<strong>Zeitraum:</strong>
		<c:out value="${event.formattedEventDateTimeRange}" />
		<c:if test="${not empty event.location}">
			<span style="margin-left: 1rem;"><strong>Ort:</strong> <c:out
					value="${event.location}" /></span>
		</c:if>
	</p>

	<c:if
		test="${event.status == 'LAUFEND' and (isUserAssigned or sessionScope.user.role == 'ADMIN')}">
		<div class="dashboard-grid">
			<div class="card">
				<h2 class="card-title">Aufgaben</h2>
				<c:if test="${sessionScope.user.role == 'ADMIN'}">
					<div id="admin-task-manager">
						<ul id="task-list-admin" style="list-style: none; padding: 0;">
							<c:if test="${empty event.eventTasks}">
								<li>Noch keine Aufgaben erstellt.</li>
							</c:if>
							<c:forEach var="task" items="${event.eventTasks}">
								<li id="task-item-${task.id}"
									style="display: flex; justify-content: space-between; align-items: center; padding: 0.5rem 0;">
									<div style="flex-grow: 1;">
										<strong><c:out value="${task.description}" /></strong><br>
										<small>Zugewiesen: <c:out
												value="${not empty task.assignedUsernames ? task.assignedUsernames : 'Niemand'}" />
										</small>
									</div>
									<div style="display: flex; gap: 0.5rem; flex-shrink: 0;">
										<span
											class="status-badge ${task.status == 'ERLEDIGT' ? 'status-ok' : 'status-warn'}"><c:out
												value="${task.status}" /></span>
										<button class="btn btn-small assign-task-btn"
											data-task-id="${task.id}">Zuweisen</button>
										<button class="btn btn-small btn-danger delete-task-btn"
											data-task-id="${task.id}"
											data-task-desc="${fn:escapeXml(task.description)}">×</button>
									</div>
								</li>
							</c:forEach>
						</ul>
						<form action="${pageContext.request.contextPath}/admin/tasks"
							method="post"
							style="margin-top: 1rem; border-top: 1px solid var(--border-color); padding-top: 1rem;">
							<input type="hidden" name="action" value="create"> <input
								type="hidden" name="eventId" value="${event.id}">
							<div class="form-group">
								<label for="task-description">Neue Aufgabe</label> <input
									type="text" name="description" id="task-description" required
									placeholder="z.B. Mischpult aufbauen">
							</div>
							<button type="submit" class="btn btn-small">Aufgabe
								erstellen</button>
						</form>
					</div>
				</c:if>
				<c:if test="${sessionScope.user.role != 'ADMIN'}">
					<ul id="task-list-user" style="list-style: none; padding: 0;">
						<c:if test="${empty event.eventTasks}">
							<li>Keine Aufgaben vorhanden.</li>
						</c:if>
						<c:forEach var="task" items="${event.eventTasks}">
							<c:if
								test="${fn:contains(task.assignedUsernames, sessionScope.user.username) and task.status == 'OFFEN'}">
								<li id="task-item-user-${task.id}"><label
									style="display: flex; align-items: center; gap: 0.5rem; width: 100%; cursor: pointer;">
										<input type="checkbox" class="task-checkbox"
										data-task-id="${task.id}"
										style="width: auto; height: 1.2rem; flex-shrink: 0;">
										<span><c:out value="${task.description}" /></span>
								</label></li>
							</c:if>
						</c:forEach>
					</ul>
				</c:if>
			</div>
			<div class="card">
				<h2 class="card-title">Event-Chat</h2>
				<div id="chat-box"
					style="height: 300px; overflow-y: auto; border: 1px solid var(--border-color); padding: 0.5rem; margin-bottom: 1rem; background: var(--bg-color);"></div>
				<form id="chat-form" style="display: flex; gap: 0.5rem;">
					<input type="text" id="chat-message-input" class="form-group"
						style="flex-grow: 1; margin: 0;"
						placeholder="Nachricht eingeben...">
					<button type="submit" class="btn">Senden</button>
				</form>
			</div>
		</div>
	</c:if>

	<div class="dashboard-grid">
		<div class="card">
			<h2 class="card-title">Beschreibung</h2>
			<p>
				<c:out
					value="${not empty event.description ? event.description : 'Keine Beschreibung für dieses Event vorhanden.'}" />
			</p>
		</div>
		<div class="card">
			<h2 class="card-title">Benötigter Personalbedarf</h2>
			<ul style="list-style: none; padding: 0;">
				<c:if test="${empty event.skillRequirements}">
					<li>Keine speziellen Qualifikationen benötigt.</li>
				</c:if>
				<c:forEach var="req" items="${event.skillRequirements}">
					<li><strong><c:out value="${req.courseName}" />:</strong> <c:out
							value="${req.requiredPersons}" /> Person(en) benötigt</li>
				</c:forEach>
			</ul>
		</div>
		<div class="card">
			<h2 class="card-title">Reserviertes Material</h2>
			<ul style="list-style: none; padding: 0;">
				<c:if test="${empty event.reservedItems}">
					<li>Kein Material für dieses Event reserviert.</li>
				</c:if>
				<c:forEach var="item" items="${event.reservedItems}">
					<li><c:out value="${item.name}" /> <span><c:out
								value="${item.quantity}" />x</span></li>
				</c:forEach>
			</ul>
		</div>
		<div class="card">
			<h2 class="card-title">Anhänge</h2>
			<ul style="list-style: none; padding: 0;">
				<c:if test="${empty event.attachments}">
					<li>Keine Anhänge für dieses Event vorhanden.</li>
				</c:if>
				<c:forEach var="att" items="${event.attachments}">
					<li><a
						href="${pageContext.request.contextPath}/download?file=${att.filepath}"><c:out
								value="${att.filename}" /></a></li>
				</c:forEach>
			</ul>
		</div>
	</div>

	<div class="card">
		<h2 class="card-title">Zugewiesenes Team</h2>
		<ul style="list-style: none; padding: 0;">
			<c:if test="${empty event.assignedAttendees}">
				<li>Noch kein Team zugewiesen.</li>
			</c:if>
			<c:forEach var="attendee" items="${event.assignedAttendees}">
				<li><a
					href="${pageContext.request.contextPath}/admin/users?action=details&id=${attendee.id}"><c:out
							value="${attendee.username}" /></a></li>
			</c:forEach>
		</ul>
	</div>

	<div style="margin-top: 2rem;">
		<a href="${pageContext.request.contextPath}/events" class="btn">Zurück
			zur Event-Übersicht</a>
	</div>
</div>

<div class="modal-overlay" id="assign-task-modal">
	<div class="modal-content">
		<button class="modal-close-btn">×</button>
		<h3>Aufgabe zuweisen</h3>
		<form action="${pageContext.request.contextPath}/admin/tasks"
			method="post">
			<input type="hidden" name="action" value="assign"> <input
				type="hidden" name="eventId" value="${event.id}"> <input
				type="hidden" name="taskId" id="modal-task-id">
			<div class="form-group">
				<label>Verfügbare Teammitglieder</label>
				<div id="modal-user-checkboxes"
					style="display: flex; flex-direction: column; gap: 0.5rem;">
					<c:forEach var="user" items="${assignedUsers}">
						<label><input type="checkbox" name="userIds"
							value="${user.id}"> <c:out value="${user.username}" /></label>
					</c:forEach>
				</div>
			</div>
			<button type="submit" class="btn">Zuweisung speichern</button>
		</form>
	</div>
</div>

<style>
.details-subtitle {
	font-size: 1.1rem;
	color: var(--text-muted-color);
	margin-bottom: 1.5rem;
}

.details-list li {
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.details-list li:last-child {
	border-bottom: none;
}
</style>
<script type="text/javascript" src="/js/public/eventDetails.js"></script>
<c:import url="/WEB-INF/jspf/footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\events.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<%-- CORRECTED: Import uses absolute path and correct filename --%>
<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Veranstaltungen" />
</c:import>

<h1>Anstehende Veranstaltungen</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter" placeholder="Events filtern..."
			style="width: 100%;" aria-label="Events filtern">
	</div>
</div>

<c:if test="${empty events}">
	<div class="card">
		<p>Für dich stehen derzeit keine Veranstaltungen an, für die du
			qualifiziert bist.</p>
	</div>
</c:if>

<div class="table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Veranstaltung</th>
				<th class="sortable" data-sort-type="date">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Dein Status</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="event" items="${events}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
								value="${event.name}" /></a></td>
					<td data-sort-value="${event.eventDateTime}"><c:out
							value="${event.formattedEventDateTimeRange}" /></td>
					<td><c:choose>
							<c:when test="${event.userAttendanceStatus == 'ZUGEWIESEN'}">
								<strong class="text-success">Zugewiesen</strong>
							</c:when>
							<c:when test="${event.userAttendanceStatus == 'ANGEMELDET'}">
								<span class="text-success">Angemeldet</span>
							</c:when>
							<c:when test="${event.userAttendanceStatus == 'ABGEMELDET'}">
								<span class="text-danger">Abgemeldet</span>
							</c:when>
							<c:otherwise>Offen</c:otherwise>
						</c:choose></td>
					<td><c:if test="${event.userAttendanceStatus != 'ZUGEWIESEN'}">
							<div style="display: flex; gap: 0.5rem;">
								<c:if
									test="${event.userAttendanceStatus == 'OFFEN' or event.userAttendanceStatus == 'ABGEMELDET'}">
									<button type="button"
										class="btn btn-small btn-success signup-btn"
										data-event-id="${event.id}"
										data-event-name="${fn:escapeXml(event.name)}">Anmelden</button>
								</c:if>
								<c:if test="${event.userAttendanceStatus == 'ANGEMELDET'}">
									<form action="${pageContext.request.contextPath}/event-action"
										method="post" class="js-confirm-form"
										data-confirm-message="Wirklich vom Event '${fn:escapeXml(event.name)}' abmelden?">
										<input type="hidden" name="eventId" value="${event.id}">
										<button type="submit" name="action" value="signoff"
											class="btn btn-small btn-danger">Abmelden</button>
									</form>
								</c:if>
							</div>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Signup Modal -->
<div class="modal-overlay" id="signup-modal">
	<div class="modal-content">
		<button class="modal-close-btn">×</button>
		<h3 id="signup-modal-title">Anmeldung</h3>
		<form id="signup-form"
			action="${pageContext.request.contextPath}/event-action"
			method="post">
			<input type="hidden" name="action" value="signup"> <input
				type="hidden" name="eventId" id="signup-event-id">
			<div id="custom-fields-container"></div>
			<button type="submit" class="btn btn-success"
				style="margin-top: 1rem;">Anmeldung bestätigen</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<%-- CORRECTED: Import uses absolute path and correct filename --%>
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/public/events.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\feedback_form.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/header.jspf">
	<c:param name="pageTitle" value="Feedback geben" />
</c:import>

<div style="max-width: 700px; margin: auto;">
	<div class="card">
		<h1>
			Feedback für:
			<c:out value="${event.name}" />
		</h1>
		<p>Dein Feedback hilft uns, zukünftige Events zu verbessern.</p>

		<form action="${pageContext.request.contextPath}/feedback"
			method="post">
			<input type="hidden" name="action" value="submitResponse"> <input
				type="hidden" name="formId" value="${form.id}">

			<div class="form-group">
				<label>Gesamteindruck (1 = schlecht, 5 = super)</label>
				<div class="star-rating">
					<input type="radio" id="star5" name="rating" value="5" required /><label
						for="star5" title="5 Sterne"></label> <input type="radio"
						id="star4" name="rating" value="4" /><label for="star4"
						title="4 Sterne"></label> <input type="radio" id="star3"
						name="rating" value="3" /><label for="star3" title="3 Sterne"></label>
					<input type="radio" id="star2" name="rating" value="2" /><label
						for="star2" title="2 Sterne"></label> <input type="radio"
						id="star1" name="rating" value="1" /><label for="star1"
						title="1 Stern"></label>
				</div>
			</div>

			<div class="form-group">
				<label for="comments">Kommentare & Verbesserungsvorschläge</label>
				<textarea id="comments" name="comments" rows="5"></textarea>
			</div>

			<button type="submit" class="btn">Feedback absenden</button>
		</form>
	</div>
</div>

<style>
.star-rating {
	display: flex;
	flex-direction: row-reverse;
	justify-content: flex-end;
	font-size: 2em;
}

.star-rating input {
	display: none;
}

.star-rating label {
	color: #ccc;
	cursor: pointer;
	transition: color 0.2s;
}

.star-rating label:before {
	content: '★';
}

.star-rating input:checked ~ label, .star-rating:not(:checked)>label:hover,
	.star-rating:not(:checked)>label:hover ~ label {
	color: #ffc107;
}
</style>

<c:import url="/WEB-INF/jspf/footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\home.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Home" />
</c:import>

<h1>
	Willkommen zurück,
	<c:out value="${sessionScope.user.username}" />
	!
</h1>
<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">Deine nächsten 3 Veranstaltungen</h2>
		<c:choose>
			<c:when test="${not empty upcomingEvents}">
				<ul style="list-style: none; padding-left: 0;">
					<c:forEach var="event" items="${upcomingEvents}" varStatus="loop">
						<li
							style="padding: 0.5rem 0; ${!loop.last ? 'border-bottom: 1px solid var(--border-color);' : ''}">
							<a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
									value="${event.name}" /></a> <br> <small><c:out
									value="${event.formattedEventDateTimeRange}" /></small>
						</li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Keine anstehenden Veranstaltungen.</p>
			</c:otherwise>
		</c:choose>
		<%-- CORRECTED: Link points to /veranstaltungen as per servlet mapping. --%>
		<a href="${pageContext.request.contextPath}/veranstaltungen"
			class="btn btn-small" style="margin-top: 1rem;">Alle
			Veranstaltungen anzeigen</a>
	</div>
	<div class="card">
		<h2 class="card-title">Deine nächsten 3 Lehrgänge/Meetings</h2>
		<c:choose>
			<c:when test="${not empty upcomingMeetings}">
				<ul style="list-style: none; padding-left: 0;">
					<c:forEach var="meeting" items="${upcomingMeetings}"
						varStatus="loop">
						<li
							style="padding: 0.5rem 0; ${!loop.last ? 'border-bottom: 1px solid var(--border-color);' : ''}">
							<a
							href="${pageContext.request.contextPath}/meeting/details?id=${meeting.id}"><c:out
									value="${meeting.name}" /></a> <br> <small><c:out
									value="${meeting.formattedMeetingDateTimeRange}" /></small>
						</li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Keine anstehenden Lehrgänge.</p>
			</c:otherwise>
		</c:choose>
		<a href="${pageContext.request.contextPath}/lehrgaenge"
			class="btn btn-small" style="margin-top: 1rem;">Alle Lehrgänge
			anzeigen</a>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />F

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\lager.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<%-- CORRECTED: Import uses absolute path and correct filename --%>
<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lager" />
</c:import>

<h1>
	<i class="fas fa-boxes"></i> Lagerübersicht
</h1>
<p>Hier finden Sie eine Übersicht aller erfassten Artikel im Lager.
	Klicken Sie auf einen Artikelnamen für Details und Verlauf.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Alle Artikel filtern..." aria-label="Lager filtern">
	</div>
</div>

<c:if test="${empty storageData}">
	<div class="card">
		<p>Derzeit sind keine Artikel im Lager erfasst.</p>
	</div>
</c:if>

<c:forEach var="locationEntry" items="${storageData}">
	<div class="card">
		<h2>
			<i class="fas fa-map-marker-alt"></i>
			<c:out value="${locationEntry.key}" />
		</h2>
		<div class="table-wrapper">
			<table class="data-table searchable-table">
				<thead>
					<tr>
						<th>Gerät</th>
						<th>Status</th>
						<th>Inhaber</th>
						<th>Verfügbar</th>
						<th>Defekt</th>
						<th>Aktion</th>
					</tr>
				</thead>
				<tbody>
					<c:forEach var="item" items="${locationEntry.value}">
						<tr
							class="${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
							<td><a href="<c:url value='/lager/details?id=${item.id}'/>"
								title="Details für ${item.name} ansehen"><c:out
										value="${item.name}" /></a></td>
							<td><c:choose>
									<c:when test="${item.status == 'CHECKED_OUT'}">
										<span class="status-badge status-warn">Entnommen</span>
									</c:when>
									<c:when test="${item.status == 'MAINTENANCE'}">
										<span class="status-badge status-info">Wartung</span>
									</c:when>
									<c:otherwise>
										<span class="status-badge status-ok">Im Lager</span>
									</c:otherwise>
								</c:choose></td>
							<td><c:out
									value="${not empty item.currentHolderUsername ? item.currentHolderUsername : '-'}" /></td>
							<td>${item.availableQuantity}/${item.quantity}</td>
							<td>${item.defectiveQuantity}</td>
							<td>
								<button class="btn btn-small transaction-btn btn-primary"
									data-item-id="${item.id}"
									data-item-name="${fn:escapeXml(item.name)}"
									data-max-qty="${item.availableQuantity}"
									${item.availableQuantity <= 0 && item.status != 'CHECKED_OUT' ? 'disabled' : ''}>
									Aktion</button>
							</td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
</c:forEach>

<%@ include file="/WEB-INF/jspf/storage_modals.jspf"%>
<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/public/lager.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\lehrgaenge.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lehrgänge" />
</c:import>

<h1>Anstehende Lehrgänge & Meetings</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Lehrgänge filtern..." style="width: 100%;"
			aria-label="Lehrgänge filtern">
	</div>
</div>

<c:if test="${empty meetings}">
	<div class="card">
		<p>Derzeit stehen keine Lehrgänge oder Meetings an.</p>
	</div>
</c:if>

<div class="table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Meeting</th>
				<th class="sortable" data-sort-type="string">Gehört zu Kurs</th>
				<th class="sortable" data-sort-type="date">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Dein Status</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="meeting" items="${meetings}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/meeting/details?id=${meeting.id}"><c:out
								value="${meeting.name}" /></a></td>
					<td><c:out value="${meeting.parentCourseName}" /></td>
					<td data-sort-value="${meeting.meetingDateTime}"><c:out
							value="${meeting.formattedMeetingDateTimeRange}" /></td>
					<td><c:choose>
							<c:when test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
								<span style="color: var(--success-color);">Angemeldet</span>
							</c:when>
							<c:when test="${meeting.userAttendanceStatus == 'ABGEMELDET'}">
								<span style="color: var(--danger-color);">Abgemeldet</span>
							</c:when>
							<c:otherwise>Offen</c:otherwise>
						</c:choose></td>
					<td>
						<form action="${pageContext.request.contextPath}/meeting-action"
							method="post" style="display: flex; gap: 0.5rem;">
							<input type="hidden" name="meetingId" value="${meeting.id}">
							<c:if test="${meeting.userAttendanceStatus != 'ANGEMELDET'}">
								<button type="submit" name="action" value="signup"
									class="btn btn-small btn-success">Anmelden</button>
							</c:if>
							<c:if test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
								<button type="submit" name="action" value="signoff"
									class="btn btn-small btn-danger">Abmelden</button>
							</c:if>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\meetingDetails.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<%-- CORRECTED: Import uses absolute path and correct filename --%>
<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Meeting-Details" />
</c:import>

<div style="max-width: 800px; margin: 0 auto;">
	<h1>
		<c:out value="${meeting.name}" />
	</h1>
	<p
		style="color: var(--text-muted-color); margin-top: -1rem; margin-bottom: 2rem;">
		Teil des Lehrgangs: <strong><c:out
				value="${meeting.parentCourseName}" /></strong>
	</p>

	<div class="card">
		<h2>Details</h2>
		<ul style="list-style: none; padding: 0;">
			<li
				style="padding: 0.75rem 0; border-bottom: 1px solid var(--border-color); display: flex; justify-content: space-between;"><strong>Termin:</strong>
				<c:out value="${meeting.formattedMeetingDateTimeRange}" /></li>
			<li
				style="padding: 0.75rem 0; border-bottom: 1px solid var(--border-color); display: flex; justify-content: space-between;"><strong>Ort:</strong>
				<c:out
					value="${not empty meeting.location ? meeting.location : 'N/A'}" /></li>
			<li
				style="padding: 0.75rem 0; display: flex; justify-content: space-between;"><strong>Leitung:</strong>
				<c:out
					value="${not empty meeting.leaderUsername ? meeting.leaderUsername : 'N/A'}" /></li>
		</ul>
	</div>

	<div class="card">
		<h2>Beschreibung</h2>
		<p>
			<c:out
				value="${not empty meeting.description ? meeting.description : 'Keine Beschreibung vorhanden.'}" />
		</p>
	</div>

	<div class="card">
		<h2>Anhänge</h2>
		<c:choose>
			<c:when test="${not empty attachments}">
				<ul style="list-style: none; padding: 0;">
					<c:forEach var="att" items="${attachments}">
						<li
							style="padding: 0.75rem 0; border-bottom: 1px solid var(--border-color); display: flex; justify-content: space-between; align-items: center;"><a
							href="${pageContext.request.contextPath}/download?file=${att.filepath}"><c:out
									value="${att.filename}" /></a> <c:if
								test="${sessionScope.user.roleName == 'ADMIN'}">
								<small
									style="color: var(--text-muted-color); margin-left: 1rem;">(Sichtbar
									für: <c:out value="${att.requiredRole}" />)
								</small>
							</c:if></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Für dieses Meeting gibt es keine Anhänge.</p>
			</c:otherwise>
		</c:choose>
	</div>

	<a href="${pageContext.request.contextPath}/lehrgaenge" class="btn"
		style="margin-top: 1rem;"> « Zurück zur Übersicht </a>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\passwort.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/header.jspf">
	<c:param name="pageTitle" value="Passwort ändern" />
	<c:param name="navType" value="user" />
</c:import>

<div style="max-width: 600px; margin: auto;">
	<div class="card">
		<h1>Passwort ändern</h1>

		<c:if test="${not empty successMessage}">
			<p class="success-message">
				<c:out value="${successMessage}" />
			</p>
		</c:if>
		<c:if test="${not empty errorMessage}">
			<p class="error-message">
				<c:out value="${errorMessage}" />
			</p>
		</c:if>

		<form action="${pageContext.request.contextPath}/passwort"
			method="post">
			<div class="form-group">
				<label for="currentPassword">Aktuelles Passwort</label> <input
					type="password" id="currentPassword" name="currentPassword"
					required autocomplete="current-password">
			</div>
			<div class="form-group">
				<label for="newPassword">Neues Passwort</label> <input
					type="password" id="newPassword" name="newPassword" required
					autocomplete="new-password">
			</div>
			<div class="form-group">
				<label for="confirmPassword">Neues Passwort bestätigen</label> <input
					type="password" id="confirmPassword" name="confirmPassword"
					required autocomplete="new-password">
			</div>
			<button type="submit" class="btn">Passwort speichern</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\profile.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Mein Profil" />
</c:import>

<h1>Mein Profil</h1>
<p>Hier finden Sie eine Übersicht Ihrer Daten, Qualifikationen und
	Aktivitäten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="responsive-dashboard-grid">
	<div class="card">
		<h2 class="card-title">Stammdaten</h2>
		<ul class="details-list">
			<li><strong>Benutzername:</strong> <c:out
					value="${sessionScope.user.username}" /></li>
			<li><strong>Rolle:</strong> <c:out
					value="${sessionScope.user.roleName}" /></li>
			<li><strong>Jahrgang:</strong> <c:out
					value="${sessionScope.user.classYear}" /></li>
			<li><strong>Klasse:</strong> <c:out
					value="${sessionScope.user.className}" /></li>
			<li><strong>E-Mail:</strong> <c:out
					value="${not empty sessionScope.user.email ? sessionScope.user.email : 'Nicht hinterlegt'}" /></li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Meine Qualifikationen</h2>
		<div class="table-wrapper"
			style="max-height: 400px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Lehrgang</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty qualifications}">
						<tr>
							<td colspan="2">Keine Qualifikationen erworben.</td>
						</tr>
					</c:if>
					<c:forEach var="qual" items="${qualifications}">
						<tr>
							<td><c:out value="${qual.courseName}" /></td>
							<td><c:out value="${qual.status}" /></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
</div>

<div class="card">
	<h2 class="card-title">Meine Event-Historie</h2>
	<div class="table-wrapper" style="max-height: 500px; overflow-y: auto;">
		<table class="data-table">
			<thead>
				<tr>
					<th>Event</th>
					<th>Datum</th>
					<th>Dein Status</th>
					<th>Feedback</th>
				</tr>
			</thead>
			<tbody>
				<c:if test="${empty eventHistory}">
					<tr>
						<td colspan="4">Keine Event-Historie vorhanden.</td>
					</tr>
				</c:if>
				<c:forEach var="event" items="${eventHistory}">
					<tr>
						<td>
							<a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
									value="${event.name}" /></a>
						</td>
						<td><c:out value="${event.formattedEventDateTime}" /> Uhr</td>
						<td><c:out value="${event.userAttendanceStatus}" /></td>
						<td><c:if
								test="${event.status == 'ABGESCHLOSSEN' && event.userAttendanceStatus == 'ZUGEWIESEN'}">
								<a
									href="${pageContext.request.contextPath}/feedback?action=submit&eventId=${event.id}"
									class="btn btn-small">Feedback geben</a>
							</c:if></td>
					</tr>
				</c:forEach>
			</tbody>
		</table>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\qr_action.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Lager-Aktion</title>
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet"
	href="${pageContext.request.contextPath}/css/style.css">
<style>
body {
	display: flex;
	justify-content: center;
	align-items: center;
	min-height: 100vh;
}

.action-container {
	text-align: center;
	width: 90%;
	max-width: 400px;
}

.item-name {
	font-size: 1.5rem;
	font-weight: bold;
	margin-bottom: 2rem;
}

.action-buttons {
	display: grid;
	grid-template-columns: 1fr;
	gap: 1rem;
}

.action-btn {
	font-size: 1.2rem;
	padding: 1.5rem;
}
</style>
</head>
<body>
	<div class="action-container card">
		<p>Aktion für:</p>
		<h1 class="item-name">
			<c:out value="${item.name}" />
		</h1>
		<form action="${pageContext.request.contextPath}/lager/transaktion"
			method="post">
			<input type="hidden" name="itemId" value="${item.id}"> <input
				type="hidden" name="quantity" value="1"> <input
				type="hidden" name="redirectUrl"
				value="${pageContext.request.contextPath}/storage-item-action?id=${item.id}">

			<div class="form-group">
				<label for="notes">Notiz (optional)</label> <input type="text"
					name="notes" id="notes" placeholder="z.B. für Event XYZ">
			</div>
			<div class="form-group">
				<label for="eventId">Zuweisen zu Event (optional)</label> <select
					name="eventId" id="eventId">
					<option value="">Kein Event</option>
					<c:forEach var="event" items="${activeEvents}">
						<option value="${event.id}">${event.name}</option>
					</c:forEach>
				</select>
			</div>

			<div class="action-buttons">
				<button type="submit" name="type" value="checkout"
					class="btn btn-danger action-btn"
					${item.availableQuantity <= 0 ? 'disabled' : ''}>
					<i class="fas fa-sign-out-alt"></i> 1 Stk. Entnehmen
				</button>
				<button type="submit" name="type" value="checkin"
					class="btn btn-success action-btn">
					<i class="fas fa-sign-in-alt"></i> 1 Stk. Einräumen
				</button>
			</div>
		</form>
		<c:if test="${not empty sessionScope.successMessage}">
			<p class="success-message" style="margin-top: 1rem;">${sessionScope.successMessage}</p>
			<c:remove var="successMessage" scope="session" />
		</c:if>
		<c:if test="${not empty sessionScope.errorMessage}">
			<p class="error-message" style="margin-top: 1rem;">${sessionScope.errorMessage}</p>
			<c:remove var="errorMessage" scope="session" />
		</c:if>
	</div>
</body>
</html>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\storage_item_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/header.jspf">
	<c:param name="pageTitle" value="Artikeldetails: ${item.name}" />
</c:import>

<h1>
	<i class="fas fa-cube"></i> Artikeldetails
</h1>

<div class="dashboard-grid"
	style="grid-template-columns: 1fr 2fr; align-items: flex-start;">

	<div class="card">
		<h2 class="card-title">${item.name}</h2>
		<c:if test="${not empty item.imagePath}">
			<a href="#" class="lightbox-trigger"><img
				src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
				alt="${item.name}"
				style="width: 100%; border-radius: var(--border-radius); margin-bottom: 1rem; cursor: zoom-in;"></a>
		</c:if>
		<ul class="details-list">
			<li><strong>Allg. Status:</strong> <span
				class="status-badge ${item.availabilityStatusCssClass}">${item.availabilityStatus}</span></li>
			<li><strong>Verfügbar:</strong> ${item.availableQuantity} /
				${item.quantity}</li>
			<li><strong>Defekt:</strong> ${item.defectiveQuantity}</li>
			<li><strong>Tracking-Status:</strong> <c:choose>
					<c:when test="${item.status == 'CHECKED_OUT'}">
						<span class="status-badge status-warn">Entnommen</span>
					</c:when>
					<c:when test="${item.status == 'MAINTENANCE'}">
						<span class="status-badge status-info">Wartung</span>
					</c:when>
					<c:otherwise>
						<span class="status-badge status-ok">Im Lager</span>
					</c:otherwise>
				</c:choose></li>
			<c:if test="${not empty item.currentHolderUsername}">
				<li><strong>Aktueller Inhaber:</strong>
					${item.currentHolderUsername}</li>
			</c:if>
			<li><strong>Ort:</strong> ${item.location}</li>
			<li><strong>Schrank:</strong> ${not empty item.cabinet ? item.cabinet : 'N/A'}</li>
			<li><strong>Fach:</strong> ${not empty item.compartment ? item.compartment : 'N/A'}</li>
		</ul>
		<div style="margin-top: 2rem;">
			<%-- CORRECTED: The link should go to /lager as per the servlet mapping --%>
			<a href="<c:url value='/lager'/>" class="btn btn-small"><i
				class="fas fa-arrow-left"></i> Zur Lagerübersicht</a>
		</div>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-history"></i> Verlauf / Chronik
		</h2>
		<div class="table-wrapper" style="max-height: 60vh; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Wann</th>
						<th>Aktion</th>
						<th>Wer</th>
						<th>Notiz</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty history}">
						<tr>
							<td colspan="4" style="text-align: center;">Kein Verlauf für
								diesen Artikel vorhanden.</td>
						</tr>
					</c:if>
					<c:forEach var="entry" items="${history}">
						<tr>
							<td>${entry.transactionTimestampLocaleString}</td>
							<td><span
								class="status-badge ${entry.quantityChange > 0 ? 'status-ok' : 'status-danger'}">${entry.quantityChange > 0 ? '+' : ''}${entry.quantityChange}</span></td>
							<td>${entry.username}</td>
							<td>${not empty entry.notes ? entry.notes : '-'}</td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
</div>

<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close">×</span><img class="lightbox-content"
		id="lightbox-image">
</div>

<c:import url="/WEB-INF/jspf/footer.jspf" />
<script type="text/javascript" src="/js/public/storage_item_details.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\web.xml
========================================================================

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"
	version="5.0">

	<display-name>TechnikTeam Web Application</display-name>

	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>

	<welcome-file-list>
		<welcome-file>/views/auth/login.jsp</welcome-file>
	</welcome-file-list>

	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<url-pattern>*.jspf</url-pattern>
			<el-ignored>false</el-ignored>
		</jsp-property-group>
	</jsp-config>

	<!-- Custom Error Pages -->
	<error-page>
		<error-code>400</error-code>
		<location>/views/error/error400.jsp</location>
	</error-page>
	<error-page>
		<error-code>401</error-code>
		<location>/views/error/error401.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/views/error/error403.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/views/error/error404.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/views/error/error500.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/views/error/error500.jsp</location>
	</error-page>

</web-app>
