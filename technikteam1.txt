
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\EventDetailsServlet.java
========================================================================

package de.technikteam.servlet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.EventAttachmentDAO;
import de.technikteam.dao.EventChatDAO;
import de.technikteam.dao.EventDAO;
import de.technikteam.dao.EventTaskDAO;
import de.technikteam.dao.InventoryKitDAO;
import de.technikteam.dao.StorageDAO;
import de.technikteam.model.Event;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@WebServlet("/veranstaltungen/details")
public class EventDetailsServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(EventDetailsServlet.class);
	private EventDAO eventDAO;
	private EventTaskDAO taskDAO;
	private EventChatDAO chatDAO;
	private EventAttachmentDAO attachmentDAO;
	private StorageDAO storageDAO;
	private InventoryKitDAO kitDAO;
	private Gson gson;

	@Override
	public void init() {
		eventDAO = new EventDAO();
		taskDAO = new EventTaskDAO();
		chatDAO = new EventChatDAO();
		attachmentDAO = new EventAttachmentDAO();
		storageDAO = new StorageDAO();
		kitDAO = new InventoryKitDAO();
		gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		try {
			int eventId = Integer.parseInt(request.getParameter("id"));
			logger.info("Event details requested for ID: {} by user '{}'", eventId, user.getUsername());
			Event event = eventDAO.getEventById(eventId);

			if (event == null) {
				logger.warn("Event with ID {} not found. Redirecting to 404.", eventId);
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Event nicht gefunden.");
				return;
			}

			boolean isGlobalAdmin = user.getPermissions().contains("TASK_MANAGE");
			boolean isEventLeader = user.getId() == event.getLeaderUserId();
			boolean hasTaskManagementPermission = isGlobalAdmin || isEventLeader;
			request.setAttribute("hasTaskManagementPermission", hasTaskManagementPermission);

			String userRoleForAttachments = (hasTaskManagementPermission) ? "ADMIN" : "NUTZER";

			event.setAttachments(attachmentDAO.getAttachmentsForEvent(eventId, userRoleForAttachments));
			event.setSkillRequirements(eventDAO.getSkillRequirementsForEvent(eventId));
			event.setReservedItems(eventDAO.getReservedItemsForEvent(eventId));

			List<User> assignedUsers = eventDAO.getAssignedUsersForEvent(eventId);
			event.setAssignedAttendees(assignedUsers);

			event.setEventTasks(taskDAO.getTasksForEvent(eventId));
			if ("LAUFEND".equalsIgnoreCase(event.getStatus())) {
				event.setChatMessages(chatDAO.getMessagesForEvent(eventId));
			} else {
				event.setChatMessages(new ArrayList<>());
			}

			Set<Integer> assignedUserIds = assignedUsers.stream().map(User::getId).collect(Collectors.toSet());
			boolean isUserAssigned = assignedUserIds.contains(user.getId());
			request.setAttribute("isUserAssigned", isUserAssigned);

			request.setAttribute("event", event);

			if (hasTaskManagementPermission) {
				request.setAttribute("assignedUsersJson", gson.toJson(assignedUsers));
				request.setAttribute("allItemsJson", gson.toJson(storageDAO.getAllItems()));
				request.setAttribute("allKitsJson", gson.toJson(kitDAO.getAllKits()));
				request.setAttribute("tasksJson", gson.toJson(event.getEventTasks()));
			} else {
				// Ensure JSON data is never null to prevent JSP errors
				request.setAttribute("assignedUsersJson", "[]");
				request.setAttribute("allItemsJson", "[]");
				request.setAttribute("allKitsJson", "[]");
				request.setAttribute("tasksJson", "[]");
			}

			logger.debug("Forwarding to eventDetails.jsp for event '{}'", event.getName());
			request.getRequestDispatcher("/views/public/eventDetails.jsp").forward(request, response);

		} catch (NumberFormatException e) {
			logger.error("Invalid event ID format in request.", e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Event-ID.");
		} catch (Exception e) {
			logger.error("An unexpected error occurred while fetching event details.", e);
			response.sendRedirect(request.getContextPath() + "/error500");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\EventServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import java.util.List;

import de.technikteam.dao.EventDAO;
import de.technikteam.model.Event;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Mapped to `/veranstaltungen`, this servlet is responsible for the main event
 * listing page for a logged-in user. It fetches a list of all upcoming events
 * for which the user is qualified, along with their specific attendance status
 * for each event (e.g., ZUGEWIESEN, ANGEMELDET, OFFEN). It then passes this
 * data to `events.jsp`.
 */
// CORRECTED: The servlet mapping is changed to /veranstaltungen to match all links and user expectations.
@WebServlet("/veranstaltungen")
public class EventServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(EventServlet.class);
	private EventDAO eventDAO;

	public void init() {
		eventDAO = new EventDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		logger.info("Fetching upcoming events for user '{}' (ID: {})", user.getUsername(), user.getId());

		// The DAO method intelligently calculates the most relevant status for the
		// user.
		List<Event> events = eventDAO.getUpcomingEventsForUser(user, 0); // 0 means no limit

		request.setAttribute("events", events);
		logger.debug("Found {} upcoming events for user '{}'. Forwarding to veranstaltungen.jsp.", events.size(),
				user.getUsername());
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/events.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\FeedbackServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.FeedbackDAO;
import de.technikteam.model.Event;
import de.technikteam.model.FeedbackForm;
import de.technikteam.model.FeedbackResponse;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

@WebServlet("/feedback")
public class FeedbackServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private FeedbackDAO feedbackDAO;
	private EventDAO eventDAO;

	@Override
	public void init() {
		feedbackDAO = new FeedbackDAO();
		eventDAO = new EventDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		String action = request.getParameter("action") == null ? "list" : request.getParameter("action");

		try {
			switch (action) {
			case "submit":
				showSubmitForm(request, response, user);
				break;
			case "view":
				viewFeedbackResults(request, response);
				break;
			default:
				// Default action will now redirect to profile, as the listing is integrated
				// there.
				response.sendRedirect(request.getContextPath() + "/profil");
				break;
			}
		} catch (Exception e) {
			throw new ServletException(e);
		}
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		String action = request.getParameter("action");

		if ("createForm".equals(action)) {
			int eventId = Integer.parseInt(request.getParameter("eventId"));
			Event event = eventDAO.getEventById(eventId);
			FeedbackForm form = new FeedbackForm();
			form.setEventId(eventId);
			form.setTitle("Feedback für Event: " + (event != null ? event.getName() : "Unbekannt"));
			feedbackDAO.createFeedbackForm(form);
			AdminLogService.log(user.getUsername(), "CREATE_FEEDBACK_FORM",
					"Feedback-Formular für Event-ID " + eventId + " erstellt.");
			response.sendRedirect(request.getContextPath() + "/admin/veranstaltungen");

		} else if ("submitResponse".equals(action)) {
			int formId = Integer.parseInt(request.getParameter("formId"));
			int rating = Integer.parseInt(request.getParameter("rating"));
			String comments = request.getParameter("comments");

			FeedbackResponse feedbackResponse = new FeedbackResponse();
			feedbackResponse.setFormId(formId);
			feedbackResponse.setUserId(user.getId());
			feedbackResponse.setRating(rating);
			feedbackResponse.setComments(comments);

			feedbackDAO.saveFeedbackResponse(feedbackResponse);
			request.getSession().setAttribute("successMessage", "Vielen Dank für dein Feedback!");
			response.sendRedirect(request.getContextPath() + "/profil");
		}
	}

	private void showSubmitForm(HttpServletRequest request, HttpServletResponse response, User user)
			throws ServletException, IOException {
		int eventId = Integer.parseInt(request.getParameter("eventId"));
		Event event = eventDAO.getEventById(eventId);
		FeedbackForm form = feedbackDAO.getFeedbackFormForEvent(eventId);

		if (form == null) {
			request.getSession().setAttribute("errorMessage", "Für dieses Event wurde noch kein Feedback angefordert.");
			response.sendRedirect(request.getContextPath() + "/profil");
			return;
		}

		if (feedbackDAO.hasUserSubmittedFeedback(form.getId(), user.getId())) {
			request.getSession().setAttribute("infoMessage", "Du hast bereits Feedback für dieses Event abgegeben.");
			response.sendRedirect(request.getContextPath() + "/profil");
			return;
		}

		request.setAttribute("event", event);
		request.setAttribute("form", form);
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/feedback_form.jsp").forward(request, response);
	}

	private void viewFeedbackResults(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		int eventId = Integer.parseInt(request.getParameter("eventId"));
		Event event = eventDAO.getEventById(eventId);
		FeedbackForm form = feedbackDAO.getFeedbackFormForEvent(eventId);

		if (form != null) {
			List<FeedbackResponse> responses = feedbackDAO.getResponsesForForm(form.getId());
			request.setAttribute("responses", responses);
		}

		request.setAttribute("event", event);
		// CORRECTED: Forward to a (currently non-existent but logically correct)
		// results page.
		// For now, let's assume it should have been named feedback_results.jsp.
		// If this file does not exist, it will 404, but the servlet logic is now
		// correct.
		request.getRequestDispatcher("/views/public/feedback_results.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\FileServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import de.technikteam.dao.FileDAO;
import de.technikteam.model.File;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Mapped to `/dateien`, this servlet handles the display of the main files and
 * documents page for users. It fetches all files the user is permitted to see,
 * grouped by category. In a unique step, it programmatically injects a
 * "virtual" file entry that links to the collaborative live editor, placing it
 * in a specific category for a seamless user experience.
 */
@WebServlet("/dateien")
public class FileServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(FileServlet.class);
	private FileDAO fileDAO;

	@Override
	public void init() {
		fileDAO = new FileDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		User user = (User) request.getSession().getAttribute("user");
		logger.info("File page requested by user '{}' (Role: {})", user.getUsername(), user.getRoleName());

		// 1. Fetch files from the database, already filtered by the user's role in the
		// DAO.
		Map<String, List<File>> fileData = fileDAO.getAllFilesGroupedByCategory(user);

		// 2. Create our "virtual" file object for the collaborative editor.
		File collaborativeFile = new File();
		collaborativeFile.setId(-1); // Use a special ID to identify it in the JSP.
		collaborativeFile.setFilename("Gemeinsamer Notizblock (Live-Editor)");
		collaborativeFile.setFilepath(null); // No physical file path.

		// 3. Add the virtual file to a specific category. If the category doesn't
		// exist, create it.
		String virtualCategoryName = "Allgemeine Dokumente";
		List<File> generalFiles = fileData.computeIfAbsent(virtualCategoryName, k -> new ArrayList<>());
		generalFiles.add(0, collaborativeFile); // Add to the beginning of the list.

		// 4. Send the modified map to the JSP.
		request.setAttribute("fileData", fileData);
		logger.debug("Forwarding file data (including virtual editor link) to dateien.jsp.");
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/dateien.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\HomeServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.EventTaskDAO;
import de.technikteam.dao.MeetingDAO;
import de.technikteam.model.Event;
import de.technikteam.model.EventTask;
import de.technikteam.model.Meeting;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@WebServlet("/home")
public class HomeServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(HomeServlet.class);
	private EventDAO eventDAO;
	private EventTaskDAO eventTaskDAO;
	private MeetingDAO meetingDAO;

	@Override
	public void init() {
		eventDAO = new EventDAO();
		eventTaskDAO = new EventTaskDAO();
		meetingDAO = new MeetingDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		logger.info("Home page requested by user '{}'. Fetching dashboard data.", user.getUsername());

		List<Event> assignedEvents = eventDAO.getAssignedEventsForUser(user.getId(), 5);
		List<EventTask> openTasks = eventTaskDAO.getOpenTasksForUser(user.getId());
		List<Event> upcomingEvents = eventDAO.getUpcomingEventsForUser(user, 5);

		logger.debug("Fetched {} assigned events, {} open tasks, and {} general upcoming events.",
				assignedEvents.size(), openTasks.size(), upcomingEvents.size());

		request.setAttribute("assignedEvents", assignedEvents);
		request.setAttribute("openTasks", openTasks);
		request.setAttribute("upcomingEvents", upcomingEvents);

		logger.debug("Forwarding to the correct home.jsp path.");
		request.getRequestDispatcher("/views/public/home.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\IcalServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.MeetingDAO;
import de.technikteam.model.Event;
import de.technikteam.model.Meeting;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import net.fortuna.ical4j.data.CalendarOutputter;
import net.fortuna.ical4j.model.Calendar;
import net.fortuna.ical4j.model.component.VEvent;
import net.fortuna.ical4j.model.property.Description;
import net.fortuna.ical4j.model.property.DtEnd;
import net.fortuna.ical4j.model.property.DtStart;
import net.fortuna.ical4j.model.property.Location;
import net.fortuna.ical4j.model.property.ProdId;
import net.fortuna.ical4j.model.property.Summary;
import net.fortuna.ical4j.model.property.Url;
import net.fortuna.ical4j.model.property.Version;
import net.fortuna.ical4j.util.RandomUidGenerator;

// Import the required iCal4j DateTime class
import net.fortuna.ical4j.model.DateTime;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Date;
import java.util.List;

@WebServlet("/public/calendar.ics")
public class IcalServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private EventDAO eventDAO;
	private MeetingDAO meetingDAO;

	@Override
	public void init() {
		eventDAO = new EventDAO();
		meetingDAO = new MeetingDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			Calendar calendar = new Calendar();
			calendar.getProperties().add(new ProdId("-//TechnikTeam Calendar//iCal4j 3.2.4//DE"));
			calendar.getProperties().add(Version.VERSION_2_0);

			RandomUidGenerator uidGenerator = new RandomUidGenerator();
			String baseUrl = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()
					+ request.getContextPath();
			ZoneId systemZone = ZoneId.systemDefault();

			// Add Events
			List<Event> events = eventDAO.getAllActiveAndUpcomingEvents();
			for (Event event : events) {
				VEvent vEvent = new VEvent();
				vEvent.getProperties().add(uidGenerator.generateUid());

				// FINAL CORRECTION: Convert to java.util.Date and wrap in iCal4j's DateTime
				// object.
				if (event.getEventDateTime() != null) {
					ZonedDateTime zdtStart = event.getEventDateTime().atZone(systemZone);
					Date utilDateStart = Date.from(zdtStart.toInstant());
					vEvent.getProperties().add(new DtStart(new DateTime(utilDateStart)));
				}
				if (event.getEndDateTime() != null) {
					ZonedDateTime zdtEnd = event.getEndDateTime().atZone(systemZone);
					Date utilDateEnd = Date.from(zdtEnd.toInstant());
					vEvent.getProperties().add(new DtEnd(new DateTime(utilDateEnd)));
				}

				vEvent.getProperties().add(new Summary(event.getName()));
				if (event.getDescription() != null)
					vEvent.getProperties().add(new Description(event.getDescription()));
				if (event.getLocation() != null)
					vEvent.getProperties().add(new Location(event.getLocation()));
				try {
					vEvent.getProperties().add(new Url(new URI(baseUrl + "/eventDetails?id=" + event.getId())));
				} catch (URISyntaxException ignored) {
				}
				calendar.getComponents().add(vEvent);
			}

			// Add Meetings
			List<Meeting> meetings = meetingDAO.getAllUpcomingMeetings();
			for (Meeting meeting : meetings) {
				String title = meeting.getParentCourseName() + ": " + meeting.getName();
				VEvent vMeeting = new VEvent();
				vMeeting.getProperties().add(uidGenerator.generateUid());

				// FINAL CORRECTION: Apply the same robust conversion here.
				if (meeting.getMeetingDateTime() != null) {
					ZonedDateTime zdtStart = meeting.getMeetingDateTime().atZone(systemZone);
					Date utilDateStart = Date.from(zdtStart.toInstant());
					vMeeting.getProperties().add(new DtStart(new DateTime(utilDateStart)));
				}
				if (meeting.getEndDateTime() != null) {
					ZonedDateTime zdtEnd = meeting.getEndDateTime().atZone(systemZone);
					Date utilDateEnd = Date.from(zdtEnd.toInstant());
					vMeeting.getProperties().add(new DtEnd(new DateTime(utilDateEnd)));
				}

				vMeeting.getProperties().add(new Summary(title));
				if (meeting.getDescription() != null)
					vMeeting.getProperties().add(new Description(meeting.getDescription()));
				if (meeting.getLocation() != null)
					vMeeting.getProperties().add(new Location(meeting.getLocation()));
				try {
					vMeeting.getProperties().add(new Url(new URI(baseUrl + "/meetingDetails?id=" + meeting.getId())));
				} catch (URISyntaxException ignored) {
				}
				calendar.getComponents().add(vMeeting);
			}

			response.setContentType("text/calendar; charset=utf-8");
			response.setHeader("Content-Disposition", "inline; filename=\"technikteam-calendar.ics\"");
			CalendarOutputter outputter = new CalendarOutputter();
			outputter.output(calendar, response.getOutputStream());

		} catch (Exception e) {
			throw new ServletException("Error generating iCal feed", e);
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\ImageServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import de.technikteam.config.AppConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * Mapped to `/image`, this servlet acts as a secure proxy to serve images. It
 * prevents direct filesystem access by taking a `file` parameter, locating the
 * image within a designated `images` subdirectory in the main upload path, and
 * then streaming it to the browser. It sets the `Content-Disposition: inline`
 * header so the image is displayed directly on the web page rather than
 * downloaded.
 */
@WebServlet("/image")
public class ImageServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(ImageServlet.class);

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String filename = request.getParameter("file");
		if (filename == null || filename.isEmpty()) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing 'file' parameter.");
			return;
		}

		try {
			filename = URLDecoder.decode(filename, StandardCharsets.UTF_8.toString());
		} catch (IllegalArgumentException e) {
			logger.warn("Could not decode filename: {}", filename, e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid filename encoding.");
			return;
		}

		// Prevent path traversal
		if (filename.contains("..")) {
			logger.warn("Potential path traversal attack detected for image filename: {}", filename);
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied.");
			return;
		}

		// Construct the full path to the image file inside the 'images' subdirectory
		File imageFile = new File(AppConfig.UPLOAD_DIRECTORY + File.separator + "images", filename);

		if (!imageFile.exists() || !imageFile.isFile()) {
			logger.warn("Image not found at path: {}", imageFile.getAbsolutePath());
			response.sendError(HttpServletResponse.SC_NOT_FOUND, "Image not found.");
			return;
		}

		// Determine content type (MIME type) from file extension
		String contentType = getServletContext().getMimeType(imageFile.getName());
		if (contentType == null) {
			contentType = "application/octet-stream"; // Fallback if type is unknown
		}

		response.setContentType(contentType);
		response.setContentLengthLong(imageFile.length());

		// The 'inline' header tells the browser to display the file, not to download
		// it.
		response.setHeader("Content-Disposition", "inline; filename=\"" + imageFile.getName() + "\"");

		logger.debug("Serving image: {} with content type {}", imageFile.getAbsolutePath(), contentType);

		// Stream the file content to the response
		try (FileInputStream inStream = new FileInputStream(imageFile);
				OutputStream outStream = response.getOutputStream()) {

			byte[] buffer = new byte[4096];
			int bytesRead;

			while ((bytesRead = inStream.read(buffer)) != -1) {
				outStream.write(buffer, 0, bytesRead);
			}
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\LoginServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.UserDAO;
import de.technikteam.model.NavigationItem;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

@WebServlet("/login")
public class LoginServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(LoginServlet.class);
	private UserDAO userDAO;

	@Override
	public void init() {
		userDAO = new UserDAO();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws IOException, ServletException {
		String username = request.getParameter("username");
		String password = request.getParameter("password");
		logger.info("Login attempt for username: {}", username);

		User user = userDAO.validateUser(username, password);

		if (user != null) {
			HttpSession session = request.getSession();
			session.setAttribute("user", user);

			List<NavigationItem> navigationItems = buildNavigationForUser(user.getPermissions());
			session.setAttribute("navigationItems", navigationItems);

			logger.info("Login successful for user: {}. Role: {}. Redirecting to home.", user.getUsername(),
					user.getRoleName());
			response.sendRedirect(request.getContextPath() + "/home");
		} else {
			logger.warn("Login failed for username: {}. Invalid credentials.", username);
			request.setAttribute("errorMessage", "Benutzername oder Passwort ungültig.");
			request.getRequestDispatcher("/views/auth/login.jsp").forward(request, response);
		}
	}

	private List<NavigationItem> buildNavigationForUser(Set<String> permissions) {
		List<NavigationItem> allPossibleItems = new ArrayList<>();

		// User Section
		allPossibleItems.add(new NavigationItem("Dashboard", "/home", "fa-home", null));
		allPossibleItems.add(new NavigationItem("Lehrgänge", "/lehrgaenge", "fa-graduation-cap", null));
		allPossibleItems.add(new NavigationItem("Veranstaltungen", "/veranstaltungen", "fa-calendar-check", null));
		allPossibleItems.add(new NavigationItem("Lager", "/lager", "fa-boxes", null));
		allPossibleItems.add(new NavigationItem("Dateien", "/dateien", "fa-folder-open", null));
		allPossibleItems.add(new NavigationItem("Kalender", "/kalender", "fa-calendar-alt", null));

		// Admin Section
		allPossibleItems.add(
				new NavigationItem("Admin Dashboard", "/admin/dashboard", "fa-tachometer-alt", "ACCESS_ADMIN_PANEL"));
		allPossibleItems.add(new NavigationItem("Benutzer", "/admin/mitglieder", "fa-users-cog", "ACCESS_ADMIN_PANEL"));
		allPossibleItems
				.add(new NavigationItem("Events", "/admin/veranstaltungen", "fa-calendar-plus", "ACCESS_ADMIN_PANEL"));
		allPossibleItems.add(new NavigationItem("Lager", "/admin/lager", "fa-warehouse", "ACCESS_ADMIN_PANEL"));
		allPossibleItems.add(new NavigationItem("Dateien", "/admin/dateien", "fa-file-upload", "ACCESS_ADMIN_PANEL"));
		allPossibleItems
				.add(new NavigationItem("Lehrgangs-Vorlagen", "/admin/lehrgaenge", "fa-book", "ACCESS_ADMIN_PANEL"));
		allPossibleItems.add(new NavigationItem("Kit-Verwaltung", "/admin/kits", "fa-box-open", "ACCESS_ADMIN_PANEL"));
		allPossibleItems
				.add(new NavigationItem("Defekte Artikel", "/admin/defekte", "fa-wrench", "ACCESS_ADMIN_PANEL"));
		allPossibleItems.add(new NavigationItem("Quali-Matrix", "/admin/matrix", "fa-th-list", "ACCESS_ADMIN_PANEL"));
		allPossibleItems.add(new NavigationItem("Berichte", "/admin/berichte", "fa-chart-pie", "ACCESS_ADMIN_PANEL"));
		allPossibleItems
				.add(new NavigationItem("Aktions-Log", "/admin/log", "fa-clipboard-list", "ACCESS_ADMIN_PANEL"));
		allPossibleItems.add(new NavigationItem("System", "/admin/system", "fa-server", "ACCESS_ADMIN_PANEL"));

		List<NavigationItem> accessibleItems = new ArrayList<>();
		for (NavigationItem item : allPossibleItems) {
			if (item.getRequiredPermission() == null || permissions.contains(item.getRequiredPermission())) {
				accessibleItems.add(item);
			}
		}
		return accessibleItems;
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.getRequestDispatcher("/views/auth/login.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\LogoutServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

@WebServlet("/logout")
public class LogoutServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(LogoutServlet.class);

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession(false);
		String username = "Gast";

		if (session != null) {
			if (session.getAttribute("username") != null) {
				username = (String) session.getAttribute("username");
			}
			logger.info("Logging out user: {}. Invalidating session.", username);
			session.invalidate();
		} else {
			logger.warn("Logoutservlet called but no active session found.");
		}

		request.setAttribute("username", username);
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/auth/logout.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\MeetingActionServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.MeetingAttendanceDAO;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;

/**
 * Mapped to `/meeting-action`, this servlet processes POST requests from the
 * main course/meeting listing page (`lehrgaenge.jsp`). It allows a logged-in
 * user to either sign up for (`signup`) or sign off from (`signoff`) a specific
 * meeting by updating the `meeting_attendance` table via the
 * `MeetingAttendanceDAO`.
 */
@WebServlet("/meeting-action")
public class MeetingActionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(MeetingActionServlet.class);
	private MeetingAttendanceDAO attendanceDAO;

	@Override
	public void init() {
		attendanceDAO = new MeetingAttendanceDAO();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		String action = request.getParameter("action");
		String meetingIdParam = request.getParameter("meetingId");

		if (user == null || action == null || meetingIdParam == null) {
			logger.warn("Invalid request to MeetingActionServlet. Missing user, action, or meetingId.");
			response.sendRedirect(request.getContextPath() + "/lehrgaenge");
			return;
		}

		try {
			int meetingId = Integer.parseInt(meetingIdParam);
			logger.info("User '{}' (ID: {}) performing action '{}' on meeting ID {}", user.getUsername(), user.getId(),
					action, meetingId);

			if ("signup".equals(action)) {
				// The DAO method handles both new signups and re-signups.
				attendanceDAO.setAttendance(user.getId(), meetingId, true, "");
				request.getSession().setAttribute("successMessage", "Erfolgreich zum Meeting angemeldet.");
			} else if ("signoff".equals(action)) {
				attendanceDAO.setAttendance(user.getId(), meetingId, false, "");
				request.getSession().setAttribute("successMessage", "Erfolgreich vom Meeting abgemeldet.");
			}
		} catch (NumberFormatException e) {
			logger.error("Invalid meeting ID format in MeetingActionServlet.", e);
			request.getSession().setAttribute("errorMessage", "Ungültige Meeting-ID.");
		}

		// Redirect back to the meeting list page to show the updated status.
		response.sendRedirect(request.getContextPath() + "/lehrgaenge");
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\MeetingDetailsServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.MeetingAttachmentDAO;
import de.technikteam.dao.MeetingDAO;
import de.technikteam.model.Meeting;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;

/**
 * Mapped to `/meetingDetails`, this servlet handles GET requests to display the
 * detailed view of a single course meeting. It fetches the core meeting data as
 * well as any associated file attachments, applying role-based filtering for
 * the attachments. The collected data is then forwarded to
 * `meetingDetails.jsp`.
 */
@WebServlet("/meeting/details")
public class MeetingDetailsServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(MeetingDetailsServlet.class);
	private MeetingDAO meetingDAO;
	private MeetingAttachmentDAO attachmentDAO;

	@Override
	public void init() {
		meetingDAO = new MeetingDAO();
		attachmentDAO = new MeetingAttachmentDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		String meetingIdParam = request.getParameter("id");
		if (meetingIdParam == null || meetingIdParam.isEmpty()) {
			logger.warn("Bad request to MeetingDetailsServlet: missing ID parameter.");
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Meeting-ID fehlt.");
			return;
		}

		try {
			int meetingId = Integer.parseInt(meetingIdParam);
			User user = (User) request.getSession().getAttribute("user");
			logger.info("Meeting details for ID {} requested by user '{}'", meetingId, user.getUsername());

			Meeting meeting = meetingDAO.getMeetingById(meetingId);

			if (meeting == null) {
				logger.warn("Meeting with ID {} not found.", meetingId);
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Meeting nicht gefunden.");
				return;
			}

			// If current user is the leader, they act as an ADMIN for viewing attachments
			String attachmentUserRole = user.getRoleName();
			if (user.getId() == meeting.getLeaderUserId()) {
				attachmentUserRole = "ADMIN";
				logger.debug("User {} is leader of meeting {}. Granting admin view for attachments.",
						user.getUsername(), meetingId);
			}

			// Fetch attachments for the meeting, respecting the user's role (or leader
			// override)
			request.setAttribute("attachments", attachmentDAO.getAttachmentsForMeeting(meetingId, attachmentUserRole));
			request.setAttribute("meeting", meeting);

			logger.debug("Forwarding to meetingDetails.jsp for meeting '{}'", meeting.getName());
			// CORRECTED: Forward to the actual JSP file path.
			request.getRequestDispatcher("/views/public/meetingDetails.jsp").forward(request, response);

		} catch (NumberFormatException e) {
			logger.error("Invalid meeting ID format: {}", meetingIdParam, e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Meeting-ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\MeetingServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.MeetingDAO;
import de.technikteam.model.Meeting;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;

/**
 * Mapped to `/lehrgaenge`, this servlet is responsible for the main
 * course/meeting listing page for a logged-in user. It fetches a list of all
 * upcoming meetings and enriches each one with the user's specific attendance
 * status (e.g., ANGEMELDET, ABGEMELDET, OFFEN). This data is then passed to
 * `lehrgaenge.jsp` for rendering.
 */
// CORRECTED: The servlet mapping was /meeting, but all links and context point to /lehrgaenge.
@WebServlet("/lehrgaenge")
public class MeetingServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(MeetingServlet.class);
	private MeetingDAO meetingDAO;

	@Override
	public void init() {
		meetingDAO = new MeetingDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		logger.info("Fetching upcoming meetings for user '{}' (ID: {})", user.getUsername(), user.getId());

		List<Meeting> meetings = meetingDAO.getUpcomingMeetingsForUser(user);

		request.setAttribute("meetings", meetings);
		logger.debug("Found {} upcoming meetings. Forwarding to lehrgaenge.jsp.", meetings.size());
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/lehrgaenge.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\NotificationServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import de.technikteam.service.NotificationService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Mapped to `/notifications`, this servlet is the entry point for clients
 * wanting to receive real-time updates via Server-Sent Events (SSE). On a GET
 * request, it establishes a persistent connection by setting the appropriate
 * headers and registering the client's asynchronous context with the singleton
 * `NotificationService`. It requires an active user session to connect.
 */
@WebServlet(urlPatterns = "/notifications", asyncSupported = true)
public class NotificationServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(NotificationServlet.class);

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		HttpSession session = request.getSession(false);
		if (session == null || session.getAttribute("user") == null) {
			logger.warn("Unauthorized attempt to connect to SSE stream. No session.");
			response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
			return;
		}

		// FIX: Get User object and then username for correct logging
		de.technikteam.model.User user = (de.technikteam.model.User) session.getAttribute("user");
		logger.info("Client '{}' connecting to SSE stream.", user.getUsername());

		// Set headers for Server-Sent Events
		response.setContentType("text/event-stream");
		response.setCharacterEncoding("UTF-8");
		response.setHeader("Cache-Control", "no-cache");
		response.setHeader("Connection", "keep-alive");

		// Register the client with the notification service
		NotificationService.getInstance().register(request);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\PackKitServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.InventoryKitDAO;
import de.technikteam.dao.StorageDAO;
import de.technikteam.model.InventoryKit;
import de.technikteam.model.InventoryKitItem;
import de.technikteam.model.StorageItem;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;
import java.util.Optional;

@WebServlet("/pack-kit")
public class PackKitServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(PackKitServlet.class);

	private InventoryKitDAO kitDAO;

	@Override
	public void init() {
		kitDAO = new InventoryKitDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String kitIdParam = request.getParameter("kitId");
		if (kitIdParam == null || kitIdParam.isEmpty()) {
			logger.warn("Pack kit page requested with no kitId.");
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Kit-ID fehlt.");
			return;
		}

		try {
			int kitId = Integer.parseInt(kitIdParam);
			InventoryKit kit = kitDAO.getKitById(kitId);

			if (kit == null) {
				logger.warn("Pack kit page requested for non-existent kitId: {}", kitId);
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Kit nicht gefunden.");
				return;
			}

			// Fetch the items that belong to the kit template
			List<InventoryKitItem> kitItems = kitDAO.getItemsForKit(kitId);

			request.setAttribute("kit", kit);
			request.setAttribute("kitItems", kitItems);

			request.getRequestDispatcher("/views/public/pack_kit.jsp").forward(request, response);

		} catch (NumberFormatException e) {
			logger.error("Invalid kitId format: {}", kitIdParam, e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Kit-ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\PasswordServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import de.technikteam.dao.UserDAO;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * Mapped to `/passwort`, this servlet allows a logged-in user to change their
 * own password. It handles GET requests by displaying the change form
 * (`passwort.jsp`) and POST requests by processing the password change. This
 * includes validating the user's current password and ensuring the new password
 * confirmation matches before updating the database via `UserDAO`.
 */
@WebServlet("/passwort")
public class PasswordServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(PasswordServlet.class);
	private UserDAO userDAO;

	public void init() {
		userDAO = new UserDAO();
		logger.info("PasswordServlet initialized.");
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		logger.debug("GET request received, showing password change form.");
		request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			response.sendRedirect(request.getContextPath() + "/login");
			return;
		}

		logger.info("Password change attempt for user: {}", user.getUsername());

		String currentPassword = request.getParameter("currentPassword");
		String newPassword = request.getParameter("newPassword");
		String confirmPassword = request.getParameter("confirmPassword");

		// Validate that the user knows their current password
		User authenticatedUser = userDAO.validateUser(user.getUsername(), currentPassword);
		if (authenticatedUser == null) {
			logger.warn("Password change failed for {}: incorrect current password.", user.getUsername());
			request.setAttribute("errorMessage", "Das aktuelle Passwort ist nicht korrekt.");
			request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
			return;
		}

		if (!newPassword.equals(confirmPassword)) {
			logger.warn("Password change failed for {}: new passwords do not match.", user.getUsername());
			request.setAttribute("errorMessage", "Die neuen Passwörter stimmen nicht überein.");
			request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
			return;
		}

		if (newPassword.trim().isEmpty()) {
			logger.warn("Password change failed for {}: new password is empty.", user.getUsername());
			request.setAttribute("errorMessage", "Das neue Passwort darf nicht leer sein.");
			request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
			return;
		}

		boolean success = userDAO.changePassword(user.getId(), newPassword);
		if (success) {
			logger.info("Password successfully changed for user: {}", user.getUsername());
			request.setAttribute("successMessage", "Ihr Passwort wurde erfolgreich geändert.");
		} else {
			logger.error("Password change failed for {} due to a DAO error.", user.getUsername());
			request.setAttribute("errorMessage", "Ein interner Fehler ist aufgetreten. Bitte versuchen Sie es erneut.");
		}
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/passwort.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\ProfileServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.UserDAO;
import de.technikteam.dao.UserQualificationsDAO;
import de.technikteam.model.Event;
import de.technikteam.model.User;
import de.technikteam.model.UserQualification;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.util.List;

@WebServlet("/profil")
public class ProfileServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private EventDAO eventDAO;
	private UserQualificationsDAO qualificationsDAO;
	private UserDAO userDAO;

	@Override
	public void init() {
		eventDAO = new EventDAO();
		qualificationsDAO = new UserQualificationsDAO();
		userDAO = new UserDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			response.sendRedirect(request.getContextPath() + "/login");
			return;
		}

		List<Event> eventHistory = eventDAO.getEventHistoryForUser(user.getId());
		List<UserQualification> qualifications = qualificationsDAO.getQualificationsForUser(user.getId());

		request.setAttribute("eventHistory", eventHistory);
		request.setAttribute("qualifications", qualifications);

		request.getRequestDispatcher("/views/public/profile.jsp").forward(request, response);
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute("user");
		String chatColor = request.getParameter("chatColor");

		if (user != null && chatColor != null) {
			if (userDAO.updateUserChatColor(user.getId(), chatColor)) {
				user.setChatColor(chatColor);
				session.setAttribute("user", user);
				session.setAttribute("successMessage", "Chat-Farbe erfolgreich gespeichert!");
			} else {
				session.setAttribute("errorMessage", "Farbe konnte nicht gespeichert werden.");
			}
		}
		response.sendRedirect(request.getContextPath() + "/profil");
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageHistoryApiServlet.java
========================================================================

package de.technikteam.servlet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.StorageLogDAO;
import de.technikteam.model.StorageLogEntry;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

/**
 * Provides a JSON API to fetch the usage history for a specific storage item.
 */
@WebServlet("/api/storage-history")
public class StorageHistoryApiServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = LogManager.getLogger(StorageHistoryApiServlet.class);
    private StorageLogDAO logDAO;
    private Gson gson;

    @Override
    public void init() {
        logDAO = new StorageLogDAO();
        gson = new GsonBuilder()
                .registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter())
                .create();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            int itemId = Integer.parseInt(request.getParameter("itemId"));
            logger.debug("API request for storage history for item ID: {}", itemId);
            List<StorageLogEntry> history = logDAO.getHistoryForItem(itemId);

            String jsonResponse = gson.toJson(history);
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            response.getWriter().write(jsonResponse);

        } catch (NumberFormatException e) {
            logger.warn("Bad request to storage history API: invalid or missing itemId");
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid or missing itemId.");
        }
    }
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageItemActionServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.StorageDAO;
import de.technikteam.model.Event;
import de.technikteam.model.StorageItem;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

@WebServlet("/lager/aktionen")
public class StorageItemActionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private StorageDAO storageDAO;
	private EventDAO eventDAO;

	@Override
	public void init() {
		storageDAO = new StorageDAO();
		eventDAO = new EventDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			int itemId = Integer.parseInt(request.getParameter("id"));
			StorageItem item = storageDAO.getItemById(itemId);
			List<Event> activeEvents = eventDAO.getActiveEvents();

			if (item == null) {
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Artikel nicht gefunden.");
				return;
			}
			request.setAttribute("item", item);
			request.setAttribute("activeEvents", activeEvents);
			// CORRECTED: Forward to the actual JSP file path.
			request.getRequestDispatcher("/views/public/qr_action.jsp").forward(request, response);
		} catch (NumberFormatException e) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Artikel-ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageItemDetailsServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.MaintenanceLogDAO;
import de.technikteam.dao.StorageDAO;
import de.technikteam.dao.StorageLogDAO;
import de.technikteam.model.MaintenanceLogEntry;
import de.technikteam.model.StorageItem;
import de.technikteam.model.StorageLogEntry;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;

/**
 * Mapped to `/lager/details`, this servlet now displays a comprehensive,
 * public-facing detail page for a single inventory item. It fetches the item's
 * core data AND its full transaction history ("chronic"), forwarding both to
 * `storage_item_details.jsp` for rendering a unified view.
 */
@WebServlet("/lager/details")
public class StorageItemDetailsServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(StorageItemDetailsServlet.class);
	private StorageDAO storageDAO;
	private StorageLogDAO storageLogDAO;
	private MaintenanceLogDAO maintenanceLogDAO;

	@Override
	public void init() {
		storageDAO = new StorageDAO();
		storageLogDAO = new StorageLogDAO();
		maintenanceLogDAO = new MaintenanceLogDAO();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			int itemId = Integer.parseInt(request.getParameter("id"));
			logger.info("Comprehensive storage item details requested for ID: {}", itemId);

			StorageItem item = storageDAO.getItemById(itemId);

			if (item == null) {
				logger.warn("Storage item with ID {} not found.", itemId);
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Artikel nicht gefunden.");
				return;
			}

			// Fetch the transaction history for the item
			List<StorageLogEntry> history = storageLogDAO.getHistoryForItem(itemId);
			List<MaintenanceLogEntry> maintenanceHistory = maintenanceLogDAO.getHistoryForItem(itemId);

			request.setAttribute("item", item);
			request.setAttribute("history", history);
			request.setAttribute("maintenanceHistory", maintenanceHistory);

			logger.debug("Forwarding to storage_item_details.jsp for item '{}' with {} history entries.",
					item.getName(), history.size());
			request.getRequestDispatcher("/views/public/storage_item_details.jsp").forward(request, response);

		} catch (NumberFormatException e) {
			logger.error("Invalid storage item ID format in request.", e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Artikel-ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageServlet.java
========================================================================

package de.technikteam.servlet;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.StorageDAO;
import de.technikteam.model.Event;
import de.technikteam.model.StorageItem;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * This servlet, mapped to `/lager`, is responsible for displaying the main
 * inventory/storage page for users. On a GET request, it fetches all storage
 * items from the database, grouped by their physical location, and forwards
 * this structured data to `/views/public/lager.jsp` for rendering.
 */
@WebServlet("/lager")
public class StorageServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(StorageServlet.class);
	private StorageDAO storageDAO;
	private EventDAO eventDAO;

	public void init() {
		storageDAO = new StorageDAO();
		eventDAO = new EventDAO();
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		logger.info("Main storage page requested. Fetching all items.");

		// Fetch all items, grouped by their location (e.g., "Erdgeschoss",
		// "Lagercontainer").
		Map<String, List<StorageItem>> storageData = storageDAO.getAllItemsGroupedByLocation();
		List<Event> activeEvents = eventDAO.getActiveEvents();

		request.setAttribute("storageData", storageData);
		request.setAttribute("activeEvents", activeEvents);
		logger.debug("Forwarding {} location groups to /views/public/lager.jsp.", storageData.size());
		// CORRECTED: Forward to the actual JSP file path.
		request.getRequestDispatcher("/views/public/lager.jsp").forward(request, response);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\StorageTransactionServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventDAO;
import de.technikteam.dao.StorageDAO;
import de.technikteam.dao.StorageLogDAO;
import de.technikteam.model.Event;
import de.technikteam.model.StorageItem;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/lager/transaktion")
public class StorageTransactionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(StorageTransactionServlet.class);
	private StorageDAO storageDAO;
	private StorageLogDAO storageLogDAO;
	private EventDAO eventDAO;

	@Override
	public void init() {
		storageDAO = new StorageDAO();
		storageLogDAO = new StorageLogDAO();
		eventDAO = new EventDAO();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		String redirectUrl = request.getParameter("redirectUrl");
		if (redirectUrl == null || redirectUrl.isEmpty()) {
			redirectUrl = request.getContextPath() + "/lager";
		}

		try {
			int itemId = Integer.parseInt(request.getParameter("itemId"));
			int quantity = Integer.parseInt(request.getParameter("quantity"));
			String type = request.getParameter("type"); // "checkout" or "checkin"
			String notes = request.getParameter("notes");
			Integer eventId = null;
			try {
				String eventIdParam = request.getParameter("eventId");
				if (eventIdParam != null && !eventIdParam.isEmpty()) {
					eventId = Integer.parseInt(eventIdParam);
					if (eventId == 0)
						eventId = null;
				}
			} catch (NumberFormatException e) {
				// Ignore if not provided or invalid
			}

			int quantityChange = "checkin".equals(type) ? quantity : -quantity;
			logger.info("Processing storage transaction by user '{}': item ID {}, quantity change {}",
					user.getUsername(), itemId, quantityChange);

			boolean success = false;
			StorageItem item = storageDAO.getItemById(itemId);

			if (item == null) {
				throw new ServletException("Item with ID " + itemId + " not found.");
			}

			if ("checkout".equals(type)) {
				if (item.getAvailableQuantity() < quantity) {
					request.getSession().setAttribute("errorMessage",
							"Entnahme fehlgeschlagen: Nicht genügend Artikel verfügbar.");
				} else {
					success = storageDAO.performCheckout(itemId, quantity, user.getId(), eventId);
				}
			} else if ("checkin".equals(type)) {
				// FIX: Correctly check against max quantity BEFORE attempting the transaction.
				if (item.getMaxQuantity() > 0 && (item.getQuantity() + quantity > item.getMaxQuantity())) {
					int availableSpace = item.getMaxQuantity() - item.getQuantity();
					if (availableSpace > 0) {
						request.getSession().setAttribute("errorMessage",
								"Einräumen fehlgeschlagen: Es ist nur Platz für " + availableSpace
										+ " weitere Artikel.");
					} else {
						request.getSession().setAttribute("errorMessage",
								"Einräumen fehlgeschlagen: Das Lager für diesen Artikel ist bereits voll.");
					}
				} else {
					success = storageDAO.performCheckin(itemId, quantity);
				}
			}

			if (success) {
				String finalNotes = notes;
				if ("checkout".equals(type) && eventId != null) {
					Event event = eventDAO.getEventById(eventId);
					if (event != null) {
						String autoNote = "Für Event: " + event.getName();
						finalNotes = (notes != null && !notes.trim().isEmpty()) ? autoNote + " - " + notes : autoNote;
					}
				}

				storageLogDAO.logTransaction(itemId, user.getId(), quantityChange, finalNotes,
						eventId != null ? eventId : 0);

				String itemName = item.getName();
				String action = "checkin".equals(type) ? "eingeräumt" : "entnommen";
				String logDetails = String.format("%d x '%s' (ID: %d) %s. Notiz: %s", quantity, itemName, itemId,
						action, finalNotes);
				AdminLogService.log(user.getUsername(), "STORAGE_TRANSACTION", logDetails);

				request.getSession().setAttribute("successMessage",
						"Erfolgreich " + quantity + " Stück " + action + ".");
			} else {
				if (request.getSession().getAttribute("errorMessage") == null) {
					request.getSession().setAttribute("errorMessage",
							"Transaktion fehlgeschlagen. Bitte erneut versuchen.");
				}
			}

		} catch (NumberFormatException e) {
			logger.error("Invalid number format in storage transaction request.", e);
			request.getSession().setAttribute("errorMessage", "Fehler: Ungültiges Zahlenformat.");
		} catch (SQLException e) {
			logger.error("SQL error during storage transaction.", e);
			request.getSession().setAttribute("errorMessage", "Datenbankfehler bei der Transaktion: " + e.getMessage());
		}

		response.sendRedirect(redirectUrl);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\TaskActionServlet.java
========================================================================

package de.technikteam.servlet;

import de.technikteam.dao.EventTaskDAO;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;

@WebServlet("/task-action")
public class TaskActionServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(TaskActionServlet.class);
	private EventTaskDAO taskDAO;

	@Override
	public void init() {
		taskDAO = new EventTaskDAO();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		String action = request.getParameter("action");

		if (user == null || action == null) {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
			return;
		}

		try {
			int taskId = Integer.parseInt(request.getParameter("taskId"));
			logger.info("User '{}' is performing action '{}' on task ID {}", user.getUsername(), action, taskId);

			switch (action) {
			case "updateStatus":
				String status = request.getParameter("status");
				if (taskDAO.updateTaskStatus(taskId, status)) {
					response.setStatus(HttpServletResponse.SC_OK);
				} else {
					response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
							"Status konnte nicht aktualisiert werden.");
				}
				break;
			case "claim":
				if (taskDAO.claimTask(taskId, user.getId())) {
					response.sendRedirect(request.getHeader("Referer"));
				} else {
					request.getSession().setAttribute("errorMessage",
							"Aufgabe konnte nicht übernommen werden (vielleicht schon voll?).");
					response.sendRedirect(request.getHeader("Referer"));
				}
				break;
			case "unclaim":
				if (taskDAO.unclaimTask(taskId, user.getId())) {
					response.sendRedirect(request.getHeader("Referer"));
				} else {
					request.getSession().setAttribute("errorMessage", "Aufgabe konnte nicht zurückgegeben werden.");
					response.sendRedirect(request.getHeader("Referer"));
				}
				break;
			default:
				response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Unbekannte Aktion.");
				break;
			}
		} catch (NumberFormatException e) {
			logger.error("Invalid task ID format in request.", e);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid task ID.");
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\DaoUtils.java
========================================================================

package de.technikteam.util;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

/**
 * A utility class for common Data Access Object (DAO) helper methods.
 */
public class DaoUtils {

    /**
     * Private constructor to prevent instantiation.
     */
    private DaoUtils() {
    }

    /**
     * Checks if a ResultSet contains a column with the given name
     * (case-insensitive).
     *
     * @param rs         The ResultSet to check.
     * @param columnName The name of the column.
     * @return true if the column exists, false otherwise.
     * @throws SQLException If a database error occurs.
     */
    public static boolean hasColumn(ResultSet rs, String columnName) throws SQLException {
        ResultSetMetaData rsmd = rs.getMetaData();
        int columns = rsmd.getColumnCount();
        for (int x = 1; x <= columns; x++) {
            if (columnName.equalsIgnoreCase(rsmd.getColumnName(x))) {
                return true;
            }
        }
        return false;
    }
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\ServletUtils.java
========================================================================

package de.technikteam.util;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;
import jakarta.servlet.http.Part;

/**
 * A utility class for common Servlet helper methods.
 */
public class ServletUtils {

	/**
	 * Private constructor to prevent instantiation.
	 */
	private ServletUtils() {
	}

	/**
	 * Extracts the string value from a `multipart/form-data` part.
	 *
	 * @param part The Part object to extract the value from.
	 * @return The string value of the part, or null if the part is null.
	 * @throws IOException if an I/O error occurs.
	 */
	public static String getPartValue(Part part) throws IOException {
		if (part == null) {
			return null;
		}
		try (InputStream inputStream = part.getInputStream();
				Scanner scanner = new Scanner(inputStream, StandardCharsets.UTF_8.name())) {
			return scanner.useDelimiter("\\A").hasNext() ? scanner.next() : "";
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\ChatSessionManager.java
========================================================================

package de.technikteam.websocket;

import jakarta.websocket.Session;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;

public class ChatSessionManager {
	private static final Logger logger = LogManager.getLogger(ChatSessionManager.class);
	private static final ChatSessionManager INSTANCE = new ChatSessionManager();

	// Map<EventID, Set<Session>>
	private final Map<String, Set<Session>> sessionsByEvent = new ConcurrentHashMap<>();

	private ChatSessionManager() {
	}

	public static ChatSessionManager getInstance() {
		return INSTANCE;
	}

	public void addSession(String eventId, Session session) {
		sessionsByEvent.computeIfAbsent(eventId, k -> new CopyOnWriteArraySet<>()).add(session);
	}

	public void removeSession(String eventId, Session session) {
		Set<Session> sessions = sessionsByEvent.get(eventId);
		if (sessions != null) {
			sessions.remove(session);
			if (sessions.isEmpty()) {
				sessionsByEvent.remove(eventId);
			}
		}
	}

	public void broadcast(String eventId, String message) {
		Set<Session> sessions = sessionsByEvent.get(eventId);
		if (sessions != null) {
			logger.debug("Broadcasting to {} sessions in event chat [{}].", sessions.size(), eventId);
			for (Session session : sessions) {
				if (session.isOpen()) {
					try {
						session.getBasicRemote().sendText(message);
					} catch (IOException e) {
						logger.error("Error broadcasting to session {}:", session.getId(), e);
					}
				}
			}
		}
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\EventChatSocket.java
========================================================================

package de.technikteam.websocket;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.EventChatDAO;
import de.technikteam.model.EventChatMessage;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import jakarta.websocket.*;
import jakarta.websocket.server.PathParam;
import jakarta.websocket.server.ServerEndpoint;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@ServerEndpoint(value = "/ws/chat/{eventId}", configurator = GetHttpSessionConfigurator.class)
public class EventChatSocket {

	private static final Logger logger = LogManager.getLogger(EventChatSocket.class);
	private static final EventChatDAO chatDAO = new EventChatDAO();
	private static final Gson gson = new GsonBuilder()
			.registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();

	@OnOpen
	public void onOpen(Session session, @PathParam("eventId") String eventId, EndpointConfig config) {
		User user = (User) config.getUserProperties().get("user");
		if (user == null) {
			try {
				session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, "Authentication required."));
			} catch (IOException e) {
				logger.error("Error closing unauthenticated WebSocket session.", e);
			}
			return;
		}
		session.getUserProperties().put("user", user);
		ChatSessionManager.getInstance().addSession(eventId, session);
	}

	@OnMessage
	public void onMessage(Session session, String message, @PathParam("eventId") String eventId) {
		User user = (User) session.getUserProperties().get("user");
		if (user == null)
			return;

		try {
			Map<String, Object> messageMap = gson.fromJson(message, Map.class);
			String type = (String) messageMap.get("type");
			Map<String, Object> payload = (Map<String, Object>) messageMap.get("payload");

			switch (type) {
			case "new_message":
				handleNewMessage(user, eventId, payload);
				break;
			case "update_message":
				handleUpdateMessage(user, eventId, payload);
				break;
			case "delete_message":
				handleDeleteMessage(user, eventId, payload);
				break;
			default:
				logger.warn("Unknown WebSocket message type received: {}", type);
			}
		} catch (JsonSyntaxException e) {
			logger.error("Error processing message from user '{}'. Invalid JSON format.", user.getUsername(), e);
		}
	}

	private void handleNewMessage(User user, String eventId, Map<String, Object> payload) {
		String messageText = (String) payload.get("messageText");
		EventChatMessage newMessage = new EventChatMessage();
		newMessage.setEventId(Integer.parseInt(eventId));
		newMessage.setUserId(user.getId());
		newMessage.setUsername(user.getUsername());
		newMessage.setMessageText(messageText);

		EventChatMessage savedMessage = chatDAO.postMessage(newMessage);

		if (savedMessage != null) {
			savedMessage.setChatColor(user.getChatColor()); // Add user's color to broadcast
			Map<String, Object> broadcastPayload = Map.of("type", "new_message", "payload", savedMessage);
			ChatSessionManager.getInstance().broadcast(eventId, gson.toJson(broadcastPayload));
		}
	}

	private void handleDeleteMessage(User user, String eventId, Map<String, Object> payload) {
		int messageId = ((Double) payload.get("messageId")).intValue();
		boolean isAdmin = user.getPermissions().contains("ACCESS_ADMIN_PANEL");

		if (chatDAO.deleteMessage(messageId, user.getId(), isAdmin)) {
			if (isAdmin && user.getId() != ((Double) payload.get("originalUserId")).intValue()) {
				String logDetails = String.format("Admin '%s' deleted a chat message (ID: %d) in event chat (ID: %s).",
						user.getUsername(), messageId, eventId);
				AdminLogService.log(user.getUsername(), "DELETE_CHAT_MESSAGE", logDetails);
			}

			Map<String, Object> broadcastPayload = Map.of("type", "message_soft_deleted", "payload",
					Map.of("messageId", messageId, "originalUsername", payload.get("originalUsername"),
							"deletedByUsername", user.getUsername()));
			ChatSessionManager.getInstance().broadcast(eventId, gson.toJson(broadcastPayload));
		}
	}

	private void handleUpdateMessage(User user, String eventId, Map<String, Object> payload) {
		int messageId = ((Double) payload.get("messageId")).intValue();
		String newText = (String) payload.get("newText");

		if (chatDAO.updateMessage(messageId, user.getId(), newText)) {
			Map<String, Object> broadcastPayload = Map.of("type", "message_updated", "payload",
					Map.of("messageId", messageId, "newText", newText));
			ChatSessionManager.getInstance().broadcast(eventId, gson.toJson(broadcastPayload));
		}
	}

	@OnClose
	public void onClose(Session session, CloseReason reason, @PathParam("eventId") String eventId) {
		User user = (User) session.getUserProperties().get("user");
		String username = (user != null) ? user.getUsername() : "[unauthenticated]";
		ChatSessionManager.getInstance().removeSession(eventId, session);
	}

	@OnError
	public void onError(Session session, Throwable throwable, @PathParam("eventId") String eventId) {
		logger.error("WebSocket ERROR in event [{}]:", eventId, throwable);
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\GetHttpSessionConfigurator.java
========================================================================

package de.technikteam.websocket;

import de.technikteam.model.User;
import jakarta.servlet.http.HttpSession;
import jakarta.websocket.HandshakeResponse;
import jakarta.websocket.server.HandshakeRequest;
import jakarta.websocket.server.ServerEndpointConfig;

public class GetHttpSessionConfigurator extends ServerEndpointConfig.Configurator {
	
	@Override
	public void modifyHandshake(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response) {
	    HttpSession httpSession = (HttpSession) request.getHttpSession();
	    if (httpSession != null) {
	        User user = (User) httpSession.getAttribute("user");
	        if (user != null) {
	            sec.getUserProperties().put("user", user);
	        }
	    }
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\log4j2.xml
========================================================================

<?xml version="1.0" encoding="UTF-8"?>
<!-- Log4j2 Configuration File This file controls all logging behavior for 
	the application. It defines where log messages are sent (appenders) and at 
	what detail level (loggers). It's configured to log to both the server console 
	(for live debugging in Eclipse) and a rolling file on the server's filesystem 
	for persistent records. -->
<Configuration status="WARN">
	<Properties>
		<!-- Use the 'catalina.base' system property provided by Tomcat to create 
			the logs folder in a guaranteed writable location relative to the server 
			instance (e.g., .../wst.server.core/tmp0/logs). This avoids permission issues 
			with writing to the source directory. -->
		<Property name="log-path">${sys:catalina.base}/logs</Property>
	</Properties>

	<Appenders>
		<!-- Console Appender: Sends log output to SYSTEM_OUT, which is typically 
			visible in the Eclipse Console view. -->
		<Console name="Console" target="SYSTEM_OUT">
			<!-- Pattern includes: timestamp, thread name, log level, logger name 
				(abbreviated), the log message, and a newline. -->
			<PatternLayout
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
		</Console>

		<!-- Rolling File Appender: Writes logs to a file. It "rolls over" (creates 
			a new file) based on time (daily) or size (10 MB), keeping a maximum of 10 
			old log files compressed in .gz format. -->
		<RollingFile name="RollingFile"
			fileName="${log-path}/technik-team-app.log"
			filePattern="${log-path}/technik-team-app-%d{MM-dd-yyyy}-%i.log.gz">
			<PatternLayout>
				<Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} -
					%msg%n</Pattern>
			</PatternLayout>
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="10 MB" />
			</Policies>
			<DefaultRolloverStrategy max="10" />
		</RollingFile>
	</Appenders>

	<Loggers>
		<!-- Application-specific Logger: Logs all messages from the 'de.technikteam' 
			package and its sub-packages at the DEBUG level or higher (DEBUG, INFO, WARN, 
			ERROR, FATAL). 'additivity="false"' prevents these messages from being passed 
			up to the root logger, avoiding duplicate output. -->
		<Logger name="de.technikteam" level="debug" additivity="false">
			<AppenderRef ref="Console" />
			<AppenderRef ref="RollingFile" />
		</Logger>

		<!-- Root Logger: This is the catch-all logger for all other libraries 
			used in the project (e.g., Tomcat, HikariCP, etc.). Setting it to WARN reduces 
			log noise by only showing important warnings and errors from third-party 
			code. -->
		<Root level="warn">
			<AppenderRef ref="Console" />
			<AppenderRef ref="RollingFile" />
		</Root>
	</Loggers>
</Configuration>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\css\style.css
========================================================================

/* =================================================================== */
/*  TECHNIKTEAM DESIGN V3 (Component-Based & Modern)                   */
/* =================================================================== */

/* --- 1. THEME & COLOR PALETTE --- */
:root {
	--primary-color: #007bff;
	--primary-color-hover: #0056b3;
	--primary-color-light: rgba(0, 123, 255, 0.1);
	--bg-color: #f8f9fa;
	--surface-color: #ffffff;
	--text-color: #212529;
	--heading-color: #002B5B; /* Dark, rich blue for headings */
	--text-muted-color: #6c757d;
	--border-color: #dee2e6;
	--success-color: #28a745;
	--danger-color: #dc3545;
	--warning-color: #ffc107;
	--info-color: #0dcaf0;
	--shadow-sm: 0 1px 2px 0 rgb(0 0 0/ 0.05);
	--shadow-md: 0 4px 6px -1px rgb(0 0 0/ 0.1), 0 2px 4px -2px
		rgb(0 0 0/ 0.1);
	--shadow-lg: 0 10px 15px -3px rgb(0 0 0/ 0.1), 0 4px 6px -4px
		rgb(0 0 0/ 0.1);
	--sidebar-width: 260px;
	--header-height: 64px;
	--border-radius: 8px;
	--sidebar-bg: var(--surface-color);
	--sidebar-border: var(--border-color);
	--sidebar-text-color: #343a40;
	--sidebar-text-muted: #6c757d;
	--sidebar-icon-color: #6c757d;
	--sidebar-hover-bg: #e9ecef;
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
	--sidebar-active-text: var(--primary-color);
	--sidebar-active-icon: var(--primary-color);
}

[data-theme="dark"] {
	--primary-color: #58a6ff;
	--primary-color-hover: #80b6ff;
	--primary-color-light: rgba(88, 166, 255, 0.15);
	--bg-color: #0d1117;
	--surface-color: #161b22;
	--text-color: #c9d1d9;
	--heading-color: var(--primary-color);
	/* Vibrant blue for dark mode headings */
	--text-muted-color: #8b949e;
	--border-color: #30363d;
	--success-color: #56d364;
	--danger-color: #f87171;
	--warning-color: #f0b72f;
	--info-color: #67d4ed;
	--sidebar-bg: #161b22;
	--sidebar-border: #30363d;
	--sidebar-text-color: #c9d1d9;
	--sidebar-text-muted: #8b949e;
	--sidebar-icon-color: #8b949e;
	--sidebar-hover-bg: #21262d;
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
	--sidebar-active-text: var(--primary-color);
	--sidebar-active-icon: var(--primary-color);
}

/* --- 2. BASE & TYPOGRAPHY --- */
*, *::before, *::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

html {
	scroll-behavior: smooth;
}

body {
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
		"Helvetica Neue", Arial, sans-serif;
	background-color: var(--bg-color);
	color: var(--text-color);
	line-height: 1.6;
	transition: background-color 0.3s, color 0.3s;
}

h1, h2, h3, h4 {
	color: var(--heading-color);
	line-height: 1.3;
}

h1 {
	font-size: clamp(1.8rem, 5vw, 2.2rem);
	font-weight: 700;
	margin-bottom: 1rem;
}

h2 {
	font-size: clamp(1.2rem, 4vw, 1.5rem);
	margin-bottom: 1.25rem;
	padding-bottom: 0.75rem;
	border-bottom: 1px solid var(--border-color);
	font-weight: 600;
}

h3 {
	font-size: 1.25rem;
	margin-bottom: 1rem;
	font-weight: 600;
}

a {
	color: var(--primary-color);
	text-decoration: none;
	transition: color 0.2s;
}

a:hover {
	text-decoration: underline;
	color: var(--primary-color-hover);
}

.text-success {
	color: var(--success-color) !important;
}

.text-danger {
	color: var(--danger-color) !important;
}

/* --- 3. LAYOUT & CONTAINERS --- */
.main-content-wrapper {
	transition: margin-left 0.3s ease-in-out;
}

.main-content {
	padding: 1.5rem;
	max-width: 1600px;
	margin-left: auto;
	margin-right: auto;
}

.card {
	background: var(--surface-color);
	border-radius: var(--border-radius);
	padding: 1.5rem;
	margin-bottom: 1.5rem;
	box-shadow: var(--shadow-sm);
	border: 1px solid var(--border-color);
	transition: all .3s;
}

.card:hover {
	box-shadow: var(--shadow-md);
}

.card-title {
	border: none;
	padding: 0;
	margin-bottom: 1rem;
}

.dashboard-grid, .responsive-dashboard-grid {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	gap: 1.5rem;
}

/* --- 4. NAVIGATION --- */
.sidebar {
	position: fixed;
	top: 0;
	left: calc(-1 * var(--sidebar-width));
	width: var(--sidebar-width);
	height: 100%;
	background: var(--sidebar-bg);
	border-right: 1px solid var(--sidebar-border);
	z-index: 1010;
	transition: left 0.3s ease-in-out, background-color 0.3s, border-color
		0.3s;
	display: flex;
	flex-direction: column;
}

body.nav-open .sidebar {
	left: 0;
	box-shadow: var(--shadow-md);
}

.sidebar-header {
	display: flex;
	align-items: center;
	gap: 0.75rem;
	padding: 0 1.5rem;
	height: var(--header-height);
	flex-shrink: 0;
}

.sidebar-header .logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--heading-color);
	text-decoration: none;
}

.sidebar-header .logo i {
	color: var(--primary-color);
}

.sidebar-nav {
	list-style: none;
	flex-grow: 1;
	overflow-y: auto;
	padding: 0.5rem 0;
}

.sidebar-nav a {
	display: flex;
	align-items: center;
	gap: 1rem;
	padding: 0.9rem 1.5rem;
	color: var(--sidebar-text-muted);
	font-weight: 500;
	transition: all 0.2s;
	border-left: 4px solid transparent;
	white-space: nowrap;
	text-decoration: none;
}

.sidebar-nav a i.fa-fw {
	width: 20px;
	text-align: center;
	color: var(--sidebar-icon-color);
	transition: color 0.2s;
}

.sidebar-nav a:hover {
	color: var(--text-color);
	background-color: var(--sidebar-hover-bg);
}

.sidebar-nav a:hover i.fa-fw {
	color: var(--primary-color);
}

.sidebar-nav a.active-nav-link {
	color: var(--sidebar-active-text);
	font-weight: 600;
	border-left-color: var(--sidebar-active-border);
	background-color: var(--sidebar-active-bg);
}

.sidebar-nav a.active-nav-link i.fa-fw {
	color: var(--sidebar-active-icon);
}

.sidebar-nav .nav-section-title {
	padding: 1.5rem 1.5rem 0.5rem;
	font-size: 0.8rem;
	font-weight: 600;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	color: var(--text-muted-color);
}

.user-actions {
	padding: 1rem 1.5rem;
	border-top: 1px solid var(--sidebar-border);
	flex-shrink: 0;
}

.user-info {
	font-weight: 500;
	margin-bottom: 1rem;
	font-size: 0.9rem;
	color: var(--text-muted-color);
}

.user-info strong {
	color: var(--text-color);
}

.mobile-header {
	display: flex;
	align-items: center;
	justify-content: space-between;
	height: var(--header-height);
	background-color: var(--surface-color);
	padding: 0 1rem;
	position: sticky;
	top: 0;
	z-index: 1000;
	border-bottom: 1px solid var(--border-color);
}

.mobile-nav-toggle {
	background: none;
	border: none;
	cursor: pointer;
	padding: 0.5rem;
	z-index: 1020;
}

.mobile-nav-toggle .line {
	width: 25px;
	height: 3px;
	background-color: var(--text-color);
	margin: 5px 0;
	border-radius: 3px;
	transition: all 0.3s;
}

body.nav-open .mobile-nav-toggle .line-1 {
	transform: rotate(45deg) translate(5px, 6px);
}

body.nav-open .mobile-nav-toggle .line-2 {
	opacity: 0;
}

body.nav-open .mobile-nav-toggle .line-3 {
	transform: rotate(-45deg) translate(5px, -6px);
}

.mobile-logo {
	font-weight: 600;
	font-size: 1.2rem;
	color: var(--heading-color);
	text-decoration: none;
}

.page-overlay {
	display: none;
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: rgba(0, 0, 0, 0.5);
	z-index: 1005;
}

body.nav-open .page-overlay {
	display: block;
}

@media ( min-width : 992px) {
	.mobile-header, .page-overlay {
		display: none !important;
	}
	.sidebar {
		left: 0;
	}
	.main-content-wrapper {
		margin-left: var(--sidebar-width);
	}
}

/* --- 5. COMPONENTS --- */

/* Buttons */
.btn {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	gap: 0.5rem;
	padding: 0.6rem 1.2rem;
	background-color: var(--primary-color);
	color: #fff;
	border: 1px solid transparent;
	border-radius: 6px;
	cursor: pointer;
	font-weight: 500;
	transition: all 0.2s;
	text-align: center;
	text-decoration: none;
}

.btn:hover {
	background-color: var(--primary-color-hover);
	color: #fff;
	text-decoration: none;
	transform: translateY(-1px);
}

.btn:disabled {
	background-color: var(--text-muted-color);
	cursor: not-allowed;
	transform: none;
}

.btn.btn-danger {
	background-color: var(--danger-color);
}

.btn.btn-danger-outline {
	background-color: transparent;
	border-color: var(--danger-color);
	color: var(--danger-color);
}

.btn.btn-danger-outline:hover {
	background-color: var(--danger-color);
	color: #fff;
}

.btn.btn-success {
	background-color: var(--success-color);
}

.btn.btn-secondary {
	background-color: var(--text-muted-color);
}

.btn-small {
	padding: 0.4rem 0.8rem;
	font-size: 0.875rem;
}

/* Messages & Banners */
.success-message, .error-message, .info-message, .password-reset-alert {
	padding: 1rem;
	margin-bottom: 1.5rem;
	border-radius: var(--border-radius);
	font-weight: 500;
	display: flex;
	align-items: center;
	gap: 0.75rem;
	color: #fff;
}

.success-message {
	background-color: var(--success-color);
}

.error-message {
	background-color: var(--danger-color);
}

.info-message, .password-reset-alert {
	background-color: var(--info-color);
	color: #000;
}

.password-reset-alert strong {
	cursor: pointer;
	text-decoration: underline;
}

/* Forms & Inputs */
.form-group {
	margin-bottom: 1.25rem;
}

.form-group label {
	display: block;
	margin-bottom: 0.5rem;
	font-weight: 500;
	color: var(--text-muted-color);
}

.form-group input, .form-group select, .form-group textarea {
	width: 100%;
	padding: 0.75rem;
	border: 1px solid var(--border-color);
	border-radius: 6px;
	background-color: var(--surface-color);
	color: var(--text-color);
	font-size: 1rem;
	transition: border-color 0.2s, box-shadow 0.2s;
}

.form-group input:focus, .form-group select:focus, .form-group textarea:focus
	{
	outline: none;
	border-color: var(--primary-color);
	box-shadow: 0 0 0 3px var(--primary-color-light);
}

.form-group input[type="file"] {
	background-color: var(--bg-color);
}

.file-size-warning {
	color: var(--danger-color);
	display: none;
	font-size: 0.875rem;
	margin-top: 0.5rem;
}

/* Modals */
.modal-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgba(0, 0, 0, 0.6);
	display: none;
	justify-content: center;
	align-items: center;
	z-index: 2000;
}

.modal-overlay.active {
	display: flex;
}

.modal-content {
	background-color: var(--surface-color);
	padding: 2rem;
	border-radius: var(--border-radius);
	width: 90%;
	max-width: 600px;
	max-height: 90vh;
	overflow-y: auto;
	position: relative;
	box-shadow: var(--shadow-lg);
}

.modal-close-btn {
	position: absolute;
	top: 1rem;
	right: 1rem;
	background: none;
	border: none;
	font-size: 1.5rem;
	cursor: pointer;
	color: var(--text-muted-color);
}

.modal-tabs {
	display: flex;
	border-bottom: 1px solid var(--border-color);
	margin-bottom: 1.5rem;
}

.modal-tab-button {
	padding: 0.75rem 1rem;
	border: none;
	background: none;
	cursor: pointer;
	font-size: 1rem;
	font-weight: 500;
	color: var(--text-muted-color);
	border-bottom: 3px solid transparent;
	transition: all 0.2s;
}

.modal-tab-button.active {
	color: var(--primary-color);
	border-bottom-color: var(--primary-color);
}

.modal-tab-content {
	display: none;
}

.modal-tab-content.active {
	display: block;
}

.dynamic-row {
	display: flex;
	gap: 0.5rem;
	align-items: center;
	margin-bottom: 0.5rem;
}

.dynamic-row .form-group {
	flex-grow: 1;
	margin-bottom: 0;
}

.dynamic-row .btn-small {
	flex-shrink: 0;
}

/* --- 6. TABLES & RESPONSIVE LISTS --- */
.table-wrapper {
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	overflow-x: auto;
	background-color: var(--surface-color);
}

.data-table {
	width: 100%;
	border-collapse: collapse;
}

.data-table th, .data-table td {
	padding: 1rem;
	text-align: left;
	border-bottom: 1px solid var(--border-color);
	white-space: nowrap;
	vertical-align: middle;
}

.data-table thead th {
	font-size: 0.8rem;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	color: var(--text-muted-color);
	background-color: var(--bg-color);
}

.data-table tbody tr:hover {
	background-color: var(--bg-color);
}

.mobile-card-list {
	display: flex;
	flex-direction: column;
	gap: 1rem;
}

.list-item-card {
	background-color: var(--surface-color);
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	padding: 1rem;
	box-shadow: var(--shadow-sm);
}

.list-item-card .card-title {
	margin-bottom: 0.5rem;
	font-size: 1.1rem;
}

.card-row {
	display: flex;
	justify-content: space-between;
	font-size: 0.9rem;
	padding: 0.4rem 0;
	border-bottom: 1px solid var(--border-color);
}

.card-row:last-of-type {
	border-bottom: none;
}

.card-actions {
	margin-top: 1rem;
	padding-top: 1rem;
	border-top: 1px solid var(--border-color);
	display: flex;
	flex-wrap: wrap;
	gap: 0.5rem;
}

.desktop-table-wrapper {
	display: none;
}

@media ( min-width : 992px) {
	.mobile-card-list {
		display: none !important;
	}
	.desktop-table-wrapper {
		display: block !important;
	}
}

/* --- 7. UTILITY & PAGE-SPECIFIC --- */

/* Login Page */
.login-page-container {
	display: flex;
	align-items: center;
	justify-content: center;
	width: 100%;
	min-height: 100vh;
	padding: 1rem;
	background: var(--bg-color);
}

.login-box {
	width: 100%;
	max-width: 400px;
	padding: 2.5rem;
	background-color: var(--surface-color);
	border-radius: var(--border-radius);
	box-shadow: var(--shadow-md);
}

/* Table Controls */
.table-controls {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	align-items: center;
	gap: 1rem;
	margin-bottom: 1.5rem;
}

/* Status Badges */
.status-badge {
	padding: 0.25em 0.6em;
	font-size: 0.8rem;
	font-weight: 600;
	border-radius: 20px;
	text-transform: uppercase;
}

.status-ok {
	background-color: var(--success-color);
	color: #fff;
}

.status-warn {
	background-color: var(--warning-color);
	color: #000;
}

.status-danger {
	background-color: var(--danger-color);
	color: #fff;
}

.status-info {
	background-color: var(--text-muted-color);
	color: #fff;
}

/* Details List (for User/Event Details) */
.details-list {
	list-style-type: none;
	padding-left: 0;
}

.details-list li {
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.details-list li:last-child {
	border-bottom: none;
}

.details-subtitle {
	font-size: 1.1rem;
	color: var(--text-muted-color);
	margin-bottom: 1.5rem;
}

/* Star Rating (for Feedback Form) */
.star-rating {
	display: flex;
	flex-direction: row-reverse;
	justify-content: flex-end;
	font-size: 2em;
}

.star-rating input {
	display: none;
}

.star-rating label {
	color: #ccc;
	cursor: pointer;
	transition: color 0.2s;
}

.star-rating label:before {
	content: '★';
}

.star-rating input:checked ~ label, .star-rating:not(:checked)>label:hover,
	.star-rating:not(:checked)>label:hover ~ label {
	color: #ffc107;
}

/* File Manager (admin_files.jsp) */
.file-manager-layout {
	display: grid;
	gap: 1.5rem;
}

@media ( min-width : 992px) {
	.file-manager-layout {
		grid-template-columns: 300px 1fr;
	}
}

.category-list {
	list-style: none;
	padding: 0;
}

.category-list li {
	padding: 0.75rem;
	cursor: pointer;
	border-radius: 6px;
	transition: background-color 0.2s;
	display: flex;
	align-items: center;
	gap: 0.75rem;
}

.category-list li.active {
	background-color: var(--primary-color-light);
	font-weight: 600;
	color: var(--primary-color);
}

.category-list li:hover:not(.active) {
	background-color: var(--bg-color);
}

.file-list {
	list-style: none;
	padding: 0;
}

.file-list li {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
}

.file-list li:last-child {
	border-bottom: none;
}

.file-info {
	flex-grow: 1;
}

.file-info .file-meta {
	display: block;
	font-size: 0.8rem;
	color: var(--text-muted-color);
}

.category-actions-grid {
	display: grid;
	grid-template-columns: 1fr;
	gap: 1.5rem;
}

@media ( min-width : 768px) {
	.category-actions-grid {
		grid-template-columns: 1fr 1fr;
	}
}

/* QR Action Page */
.qr-action-body {
	display: flex;
	justify-content: center;
	align-items: center;
	min-height: 100vh;
	background-color: var(--bg-color);
}

.qr-action-container {
	text-align: center;
	width: 90%;
	max-width: 400px;
}

.qr-action-item-name {
	font-size: 1.5rem;
	font-weight: bold;
	margin-bottom: 2rem;
}

.qr-action-buttons {
	display: grid;
	grid-template-columns: 1fr;
	gap: 1rem;
}

.qr-action-btn {
	font-size: 1.2rem;
	padding: 1.5rem;
}

/* Lightbox */
.lightbox-overlay {
	display: none;
	position: fixed;
	z-index: 3000;
	padding: 1rem;
	justify-content: center;
	align-items: center;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
	overflow: auto;
	background-color: rgba(0, 0, 0, 0.8);
}

.lightbox-content {
	margin: auto;
	display: block;
	width: auto;
	height: auto;
	max-width: 90vw;
	max-height: 90vh;
}

.lightbox-close {
	position: absolute;
	top: 15px;
	right: 35px;
	color: #f1f1f1;
	font-size: 40px;
	font-weight: bold;
	transition: 0.3s;
}

.lightbox-close:hover, .lightbox-close:focus {
	color: #bbb;
	text-decoration: none;
	cursor: pointer;
}

/* Matrix Table */
.data-table .sticky-header {
	position: sticky;
	top: 0;
	z-index: 10;
}

.data-table .sticky-col {
	position: sticky;
	left: 0;
	background-color: var(--surface-color);
	z-index: 5;
}

.data-table .qual-cell[data-attended="true"] {
	color: var(--success-color);
}

/* Progress Bars (System Page) */
.progress-bar-container {
	width: 100%;
	background-color: var(--border-color);
	border-radius: 8px;
	overflow: hidden;
	height: 25px;
}

.progress-bar {
	height: 100%;
	background-color: var(--primary-color);
	transition: width 0.5s ease-in-out;
}

.progress-text {
	text-align: center;
	font-weight: 500;
	margin-top: 0.5rem;
}

/* NEW: Storage Page Redesign Styles */
.item-name-cell {
	display: flex;
	align-items: center;
	gap: 0.75rem;
}

.camera-btn {
	background: transparent;
	border: 1px solid var(--border-color);
	color: var(--text-muted-color);
	padding: 0.2rem 0.5rem;
	line-height: 1;
	border-radius: 4px;
}

.camera-btn:hover {
	background: var(--bg-color);
	color: var(--primary-color);
	border-color: var(--primary-color);
}

.inventory-details, .item-status-details {
	display: block;
	font-size: 0.85rem;
	color: var(--text-muted-color);
}

/* --- 8. ERROR PAGES --- */
.error-page-container {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	min-height: 70vh;
	padding: 2rem;
}

.error-code {
	font-size: 5rem;
	font-weight: 800;
	line-height: 1;
	margin: 0;
	color: var(--text-muted-color);
}

.error-page-container h2 {
	font-size: 1.75rem;
	border: none;
	margin: 0 0 1.5rem 0;
}

.error-message-text {
	max-width: 600px;
	font-size: 1.1rem;
	line-height: 1.6;
	margin-bottom: 2rem;
}

.cursor {
	display: inline-block;
	width: 0.6em;
	background-color: #fff;
	animation: blink 1s step-end infinite;
}

/* Error 400 */
.protocol-droid-console {
	width: 100%;
	max-width: 600px;
	background: #e9ecef;
	color: #343a40;
	border: 3px solid #adb5bd;
	border-radius: 8px;
	font-family: 'Courier New', Courier, monospace;
	position: relative;
	padding-top: 50px;
}

[data-theme="dark"] .protocol-droid-console {
	background: #212529;
	color: #ced4da;
	border-color: #495057;
}

.droid-eye {
	position: absolute;
	top: 15px;
	left: 50%;
	transform: translateX(-50%);
	width: 20px;
	height: 20px;
	background: #dc3545;
	border-radius: 50%;
	box-shadow: 0 0 10px #f87171;
	animation: eye-scan 4s linear infinite;
}

#droid-output {
	padding: 1rem;
	height: 200px;
	overflow-y: auto;
	text-align: left;
	white-space: pre-wrap;
	word-break: break-all;
}

/* Error 401 */
.card-scanner {
	width: 100%;
	max-width: 350px;
	background: #343a40;
	padding: 1.5rem;
	border-radius: 10px;
	box-shadow: inset 0 0 15px #000;
}

.scanner-light {
	height: 10px;
	background: #28a745;
	border-radius: 5px;
	margin-bottom: 1.5rem;
	box-shadow: 0 0 10px #28a745;
}

.card-slot {
	background: #161b22;
	border: 2px solid #495057;
	border-radius: 8px;
	padding: 1.5rem;
	color: #fff;
}

#scanner-status {
	color: #ffc107;
	font-size: 2rem;
	letter-spacing: 2px;
	margin: 0;
}

#scanner-progress {
	transition: width 0.5s ease-in-out;
}

/* Error 403 */
.security-console {
	width: 100%;
	max-width: 700px;
	background: #000;
	border-radius: 6px;
	border: 1px solid var(--warning-color);
	box-shadow: 0 0 15px rgba(255, 193, 7, 0.3);
	font-family: monospace, monospace;
}

.console-header {
	background: #333;
	padding: 8px 12px;
	border-top-left-radius: 5px;
	border-top-right-radius: 5px;
	color: var(--warning-color);
	font-weight: bold;
	text-align: left;
}

#console-body {
	padding: 1rem;
	height: 250px;
	overflow-y: auto;
	text-align: left;
	white-space: pre-wrap;
	word-break: break-all;
	color: #fff;
}

#console-body .ok {
	color: var(--success-color);
}

#console-body .fail {
	color: var(--danger-color);
}

#console-body .info {
	color: var(--info-color);
}

#console-body .warn {
	color: var(--warning-color);
}

#console-body .cursor {
	background-color: var(--warning-color);
}

/* Error 404 */
.terminal-window {
	width: 100%;
	max-width: 650px;
	background: #000;
	border-radius: 8px;
	box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
	font-family: monospace, monospace;
}

.terminal-header {
	background: #333;
	padding: 8px;
	border-top-left-radius: 8px;
	border-top-right-radius: 8px;
	display: flex;
	align-items: center;
	color: #ccc;
	font-size: 0.9em;
}

.terminal-buttons {
	display: flex;
	gap: 6px;
	margin-right: 12px;
}

.term-btn {
	display: block;
	width: 12px;
	height: 12px;
	border-radius: 50%;
}

.term-btn.close {
	background: #ff5f56;
}

.term-btn.min {
	background: #ffbd2e;
}

.term-btn.max {
	background: #27c93f;
}

.terminal-body {
	padding: 1rem;
	height: 200px;
	overflow-y: auto;
	text-align: left;
}

#terminal-body p {
	margin: 0;
	white-space: pre-wrap;
	word-break: break-all;
	color: #fff;
}

#terminal-body .prompt {
	color: var(--success-color);
}

#terminal-body .command {
	color: #fff;
}

#terminal-body .error {
	color: var(--danger-color);
}

#terminal-body .info {
	color: var(--info-color);
}

#terminal-body .link {
	color: var(--success-color);
	text-decoration: underline;
	cursor: pointer;
}

#terminal-body .cursor {
	background-color: #fff;
}

/* Error 500 */
.diagnostic-container {
	width: 100%;
	max-width: 600px;
	margin-top: 2rem;
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	padding: 1rem;
	background: var(--surface-color);
}

.diagnostic-console {
	font-family: monospace;
	text-align: left;
	height: 220px;
	overflow-y: auto;
	background-color: #000;
	color: #0f0;
	padding: 1rem;
	margin-top: 1rem;
	border-radius: 4px;
	border: 1px solid #333;
}

.diagnostic-console p {
	margin: 0;
	white-space: pre-wrap;
}

.diagnostic-console .fail {
	color: #ff4d4d;
}

.diagnostic-console .warn {
	color: #f0b72f;
}

.diagnostic-console .ok {
	color: #56d364;
}

.diagnostic-console .info {
	color: #79c0ff;
}

.diagnostic-console .cursor {
	background-color: #0f0;
}

/* Error 503 */
.reboot-console {
	width: 100%;
	max-width: 700px;
	background: #000;
	color: #0f0;
	border-radius: 6px;
	font-family: monospace;
	padding: 1rem;
}

#reboot-output {
	height: 250px;
	overflow-y: hidden;
	text-align: left;
	white-space: pre-wrap;
}

#reboot-progress {
	transition: width 0.5s ease-in-out;
}

/* --- 9. KEYFRAME ANIMATIONS --- */
@keyframes eye-scan { 0%, 100% {
	background: var(--danger-color);
}

50%
{
background
:
var(
--warning-color
);
}
}
@keyframes blink { 50% {
	background-color: transparent;
}

}

/* =================================================================== */
/*  10. CHAT INTERFACE (Combined & Final)                              */
/* =================================================================== */
.chat-message-container {
	display: flex;
	align-items: center;
	margin-bottom: 0.75rem;
	position: relative;
	max-width: 90%; /* Prevent bubbles from taking the full width */
	align-self: flex-start; /* Default alignment for others' messages */
}

.chat-message-container.current-user {
	/* DEFINITIVE FIX: This pushes the entire container to the right */
	align-self: flex-end;
}

.chat-bubble {
	padding: 0.6rem 0.9rem;
	border-radius: 18px;
	word-wrap: break-word;
	border: 1px solid transparent;
}

.chat-bubble.current-user-bubble {
	background-color: var(--primary-color) !important;
	color: #fff !important;
	border-color: var(--primary-color) !important;
}

.chat-username {
	display: block;
	font-size: 0.8rem;
	font-weight: 700;
	margin-bottom: 0.2rem;
}

.chat-text {
	display: block;
	font-size: 1rem;
	line-height: 1.4;
}

.chat-timestamp {
	display: block;
	font-size: 0.75rem;
	margin-top: 0.3rem;
	text-align: right;
}

.chat-edited-marker {
	font-size: 0.7em;
	font-style: italic;
	color: inherit;
}

.chat-options {
	opacity: 0;
	transition: opacity 0.2s;
	display: flex;
	gap: 0.25rem;
	background-color: var(--surface-color);
	padding: 0.25rem;
	border-radius: 20px;
	box-shadow: var(--shadow-md);
	margin: 0 0.5rem;
}

.chat-message-container:hover .chat-options {
	opacity: 1;
}

/* Controls the order of [bubble] and [options] */
.chat-message-container {
	flex-direction: row;
}

.chat-message-container.current-user {
	flex-direction: row-reverse;
}

.chat-option-btn {
	background: none;
	border: none;
	cursor: pointer;
	color: var(--text-muted-color);
	width: 28px;
	height: 28px;
	border-radius: 50%;
	display: flex;
	align-items: center;
	justify-content: center;
}

.chat-option-btn:hover {
	background-color: var(--bg-color);
	color: var(--text-color);
}

.chat-edit-input {
	width: 100%;
	padding: 0.2rem 0.4rem;
	border: 1px solid var(--primary-color);
	border-radius: 4px;
	background: var(--surface-color);
	color: var(--text-color);
	font-family: inherit;
	font-size: 1rem;
}

/* Updated style for deleted messages */
.chat-bubble.deleted {
	font-style: italic;
	opacity: 0.7;
}

.chat-deleted-info {
	font-size: 0.9em;
}

/* New rule for the parent chat box */
#chat-box {
	display: flex;
	flex-direction: column;
}

/* =================================================================== */
/*  11. SIDEBAR CONTROLS                                               */
/* =================================================================== */
.sidebar-controls {
	display: flex;
	justify-content: space-between;
	align-items: center;
	gap: 1rem;
	margin-bottom: 1rem;
}

.sidebar-controls .btn {
	flex-grow: 1;
}

/* Theme Switcher Styles */
.theme-switcher {
	display: flex;
	align-items: center;
	gap: 0.5rem;
	color: var(--text-muted-color);
}

.theme-switcher .switch {
	position: relative;
	display: inline-block;
	width: 44px;
	height: 24px;
}

/* Hide the default HTML checkbox */
.theme-switcher .switch input {
	opacity: 0;
	width: 0;
	height: 0;
}

/* The slider track */
.theme-switcher .slider {
	position: absolute;
	cursor: pointer;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: #ccc;
	transition: .4s;
	border-radius: 24px; /* Make it pill-shaped */
}

/* The sliding circle */
.theme-switcher .slider:before {
	position: absolute;
	content: "";
	height: 18px;
	width: 18px;
	left: 3px;
	bottom: 3px;
	background-color: white;
	transition: .4s;
	border-radius: 50%;
}

/* Change the track color when checked (dark mode) */
.theme-switcher input:checked+.slider {
	background-color: var(--primary-color);
}

/* Move the circle to the right when checked */
.theme-switcher input:checked+.slider:before {
	transform: translateX(20px);
}

/* =================================================================== */
/*  12. PRINT STYLES                                                   */
/* =================================================================== */
@media print {
	.sidebar, .mobile-header, .no-print {
		display: none !important;
	}
	.main-content-wrapper, .main-content {
		margin-left: 0 !important;
		padding: 0 !important;
	}
	body {
		background-color: #fff;
		color: #000;
	}
	.card {
		box-shadow: none;
		border: 1px solid #ccc;
		page-break-inside: avoid;
	}
	a {
		text-decoration: none;
		color: #000;
	}
	h1, h2, h3 {
		color: #000;
	}
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_course_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const contextPath = "${pageContext.request.contextPath}";
    document.querySelectorAll('.js-confirm-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
            showConfirmationModal(message, () => this.submit());
        });
    });

    const modalOverlay = document.getElementById('course-modal');
    const form = document.getElementById('course-modal-form');
    const title = document.getElementById('course-modal-title');
    const actionInput = document.getElementById('course-modal-action');
    const idInput = document.getElementById('course-modal-id');
    const nameInput = document.getElementById('name-modal');
    const abbrInput = document.getElementById('abbreviation-modal');
    const descInput = document.getElementById('description-modal');
    const closeModalBtn = modalOverlay.querySelector('.modal-close-btn');
    
    const closeModal = () => modalOverlay.classList.remove('active');
    
    const openCreateModal = () => {
        form.reset();
        title.textContent = "Neue Lehrgangs-Vorlage anlegen";
        actionInput.value = "create";
        idInput.value = "";
        modalOverlay.classList.add('active');
    };
	
    const openEditModal = async (btn) => {
        form.reset();
        title.textContent = "Lehrgangs-Vorlage bearbeiten";
        actionInput.value = "update";
        const courseId = btn.dataset.id;
        idInput.value = courseId;
        
        try {
            const response = await fetch(`${contextPath}/admin/lehrgaenge?action=getCourseData&id=${courseId}`);
            if(!response.ok) throw new Error('Could not fetch course data');
            const data = await response.json();

            nameInput.value = data.name || '';
            abbrInput.value = data.abbreviation || '';
            descInput.value = data.description || '';

            modalOverlay.classList.add('active');
        } catch(error) {
            console.error("Failed to open edit modal:", error);
            alert("Fehler beim Laden der Vorlagen-Daten.");
        }
    };
    
    document.getElementById('new-course-btn').addEventListener('click', openCreateModal);
    document.querySelectorAll('.edit-course-btn').forEach(btn => {
        btn.addEventListener('click', () => openEditModal(btn));
    });
    
    closeModalBtn.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) closeModal();
    });
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modalOverlay.classList.contains('active')) closeModal();
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_defect_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const defectModal = document.getElementById('defect-modal');
    if (!defectModal) return;

    const modalTitle = document.getElementById('defect-modal-title');
    const itemIdInput = document.getElementById('defect-item-id');
    const defectQtyInput = document.getElementById('defective_quantity');
    const reasonInput = document.getElementById('defect_reason');
    const closeModalBtn = defectModal.querySelector('.modal-close-btn');

    document.querySelectorAll('.defect-modal-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
            itemIdInput.value = btn.dataset.itemId;
            defectQtyInput.value = btn.dataset.currentDefectQty;
            defectQtyInput.max = btn.dataset.maxQty; // Set max based on total quantity
            reasonInput.value = btn.dataset.currentReason;
            defectModal.classList.add('active');
        });
    });

    closeModalBtn.addEventListener('click', () => defectModal.classList.remove('active'));
    defectModal.addEventListener('click', (e) => {
        if (e.target === defectModal) defectModal.classList.remove('active');
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_events_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			showConfirmationModal(this.dataset.confirmMessage || 'Sind Sie sicher?', () => this.submit());
		});
	});

	// --- Modal References ---
	const assignModal = document.getElementById('assign-users-modal');
	const eventModal = document.getElementById('event-modal');
	const reqContainer = document.getElementById('modal-requirements-container');
	const resContainer = document.getElementById('modal-reservations-container');
	const cfContainer = document.getElementById('modal-custom-fields-container');
	const attachmentsList = document.getElementById('modal-attachments-list');
	const kitSelect = document.getElementById('kit-selection-modal');

	// --- Data from JSP for dynamic fields ---
	const allCourses = JSON.parse(document.getElementById('allCoursesData').textContent);
	const allItems = JSON.parse(document.getElementById('allItemsData').textContent);

	// --- Assign Users Modal Logic ---
	const assignForm = document.getElementById('assign-users-form');
	const assignModalTitle = document.getElementById('assign-users-modal-title');
	const assignCheckboxes = document.getElementById('user-checkboxes-container');
	const assignEventIdInput = assignForm.querySelector('input[name="eventId"]');

	const openAssignModal = async (btn) => {
		const eventId = btn.dataset.eventId;
		const eventName = btn.dataset.eventName;
		assignModalTitle.textContent = `Team für "${eventName}" zuweisen`;
		assignEventIdInput.value = eventId;
		assignCheckboxes.innerHTML = '<p>Lade Benutzer...</p>';
		assignModal.classList.add('active');
		try {
			const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getAssignmentData&id=${eventId}`);
			if (!response.ok) throw new Error('Could not fetch assignment data.');
			const data = await response.json();
			assignCheckboxes.innerHTML = '';
			if (data.signedUpUsers && data.signedUpUsers.length > 0) {
				data.signedUpUsers.forEach(user => {
					const isChecked = data.assignedUserIds.includes(user.id) ? 'checked' : '';
					assignCheckboxes.innerHTML += `
						<label class="checkbox-label">
							<input type="checkbox" name="userIds" value="${user.id}" ${isChecked}>
							${user.username}
						</label>`;
				});
			} else {
				assignCheckboxes.innerHTML = '<p>Es haben sich noch keine Benutzer für dieses Event angemeldet.</p>';
			}
		} catch (error) {
			assignCheckboxes.innerHTML = '<p class="error-message">Fehler beim Laden der Benutzerdaten.</p>';
			console.error('Error fetching assignment data:', error);
		}
	};
	document.querySelectorAll('.assign-users-btn').forEach(btn => btn.addEventListener('click', () => openAssignModal(btn)));
	assignModal.querySelector('.modal-close-btn').addEventListener('click', () => assignModal.classList.remove('active'));

	// --- Generic Row Creation and Addition Functions ---
	const createRow = (container) => {
		const newRow = document.createElement('div'); newRow.className = 'dynamic-row';
		const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn-small btn-danger';
		removeBtn.innerHTML = '×'; removeBtn.onclick = () => newRow.remove();
		newRow.appendChild(removeBtn); container.appendChild(newRow);
		return newRow;
	};

	const addRequirementRow = (courseId = '', personCount = 1) => {
		const row = createRow(reqContainer);
		const select = document.createElement('select'); select.name = 'requiredCourseId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Lehrgang --</option>' + allCourses.map(c => `<option value="${c.id}">${c.name}</option>`).join('');
		select.value = courseId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'requiredPersons'; input.value = personCount; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

	const addReservationRow = (itemId = '', quantity = 1) => {
		const row = createRow(resContainer);
		const select = document.createElement('select'); select.name = 'itemId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Material --</option>' + allItems.map(i => `<option value="${i.id}">${i.name}</option>`).join('');
		select.value = itemId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'itemQuantity'; input.value = quantity; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

	const addCustomFieldRow = (fieldName = '', fieldType = 'TEXT') => {
		const row = createRow(cfContainer);
		const nameInput = document.createElement('input');
		nameInput.type = 'text';
		nameInput.name = 'customFieldName';
		nameInput.placeholder = 'Frage eingeben (z.B. T-Shirt Größe)';
		nameInput.className = 'form-group';
		nameInput.style.flexGrow = '2';
		nameInput.value = fieldName;

		const typeSelect = document.createElement('select');
		typeSelect.name = 'customFieldType';
		typeSelect.className = 'form-group';
		typeSelect.innerHTML = `<option value="TEXT">Text</option><option value="BOOLEAN">Ja/Nein</option>`;
		typeSelect.value = fieldType;

		row.prepend(nameInput, typeSelect);
	};

	const addAttachmentRow = (id, filename, filepath) => {
		const li = document.createElement('li'); li.id = `attachment-item-${id}`;
		li.innerHTML = `<a href="${contextPath}/download?file=${filepath}" target="_blank">${filename}</a>`;
		const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn btn-small btn-danger-outline';
		removeBtn.innerHTML = '×';
		removeBtn.onclick = () => {
			showConfirmationModal(`Anhang '${filename}' wirklich löschen?`, async () => {
				try {
					const response = await fetch(`${contextPath}/admin/veranstaltungen`, { method: 'POST', body: new URLSearchParams({ action: 'deleteAttachment', id: id }) });
					if (response.ok) li.remove();
					else alert('Fehler beim Löschen des Anhangs.');
				} catch (e) {
					alert('Netzwerkfehler beim Löschen des Anhangs.');
				}
			});
		};
		li.appendChild(removeBtn); attachmentsList.appendChild(li);
	};

	// --- Kit Selection Logic ---
	if (kitSelect) {
		kitSelect.addEventListener('change', async () => {
			const kitId = kitSelect.value;
			if (!kitId) return;

			try {
				const response = await fetch(`${contextPath}/admin/kits?action=getKitItems&id=${kitId}`);
				if (!response.ok) throw new Error('Could not fetch kit items');
				const items = await response.json();
				items.forEach(item => addReservationRow(item.itemId, item.quantity));
			} catch (e) {
				console.error("Error fetching kit items:", e);
				alert("Fehler beim Laden der Kit-Inhalte.");
			}
			// Reset selection to allow re-adding the same kit
			kitSelect.value = '';
		});
	}

	// --- Edit/Create Event Modal Logic ---
	document.getElementById('modal-add-requirement-btn').addEventListener('click', () => addRequirementRow());
	document.getElementById('modal-add-reservation-btn').addEventListener('click', () => addReservationRow());
	document.getElementById('modal-add-custom-field-btn').addEventListener('click', () => addCustomFieldRow());

	const eventForm = document.getElementById('event-modal-form');
	const eventModalTitle = document.getElementById('event-modal-title');
	const actionInput = document.getElementById('event-modal-action');
	const idInput = document.getElementById('event-modal-id');

	const resetEventModal = () => {
		eventForm.reset();
		reqContainer.innerHTML = '';
		resContainer.innerHTML = '';
		cfContainer.innerHTML = '';
		attachmentsList.innerHTML = '';
	};

	const openEventModal = () => eventModal.classList.add('active');
	const closeEventModal = () => eventModal.classList.remove('active');
	eventModal.querySelector('.modal-close-btn').addEventListener('click', closeEventModal);
	eventModal.addEventListener('click', e => { if (e.target === eventModal) closeEventModal(); });

	document.getElementById('new-event-btn').addEventListener('click', () => {
		resetEventModal();
		eventModalTitle.textContent = "Neues Event anlegen";
		actionInput.value = "create";
		idInput.value = "";
		openEventModal();
	});

	document.querySelectorAll('.edit-event-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const eventId = btn.dataset.eventId;
			try {
				const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getEventData&id=${eventId}`);
				if (!response.ok) throw new Error('Event data could not be fetched.');
				const event = await response.json();
				resetEventModal();
				eventModalTitle.textContent = "Event bearbeiten";
				actionInput.value = "update";
				idInput.value = event.id;
				eventForm.querySelector('#name-modal').value = event.name || '';
				eventForm.querySelector('#location-modal').value = event.location || '';
				eventForm.querySelector('#leaderUserId-modal').value = event.leaderUserId || '';
				eventForm.querySelector('#eventDateTime-modal').value = event.eventDateTime ? event.eventDateTime.substring(0, 16) : '';
				eventForm.querySelector('#endDateTime-modal').value = event.endDateTime ? event.endDateTime.substring(0, 16) : '';
				eventForm.querySelector('#description-modal').value = event.description || '';

				event.skillRequirements?.forEach(req => addRequirementRow(req.requiredCourseId, req.requiredPersons));
				event.reservedItems?.forEach(res => addReservationRow(res.id, res.quantity));
				event.customFields?.forEach(cf => addCustomFieldRow(cf.fieldName, cf.fieldType));
				event.attachments?.forEach(att => addAttachmentRow(att.id, att.filename, att.filepath));

				openEventModal();
			} catch (error) {
				console.error('Error opening edit modal:', error);
				alert('Fehler beim Laden der Event-Daten.');
			}
		});
	});

	// --- Tab Logic ---
	const tabButtons = eventModal.querySelectorAll('.modal-tab-button');
	const tabContents = eventModal.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_kits.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const kitModal = document.getElementById('kit-modal');
	if (kitModal) {
		const form = kitModal.querySelector('form');
		const title = kitModal.querySelector('h3');
		const actionInput = form.querySelector('input[name="action"]');
		const idInput = form.querySelector('input[name="id"]');
		const nameInput = form.querySelector('#name-modal');
		const descInput = form.querySelector('#description-modal');
		const locationInput = form.querySelector('#location-modal');
		const closeModalBtn = kitModal.querySelector('.modal-close-btn');

		const openModal = () => kitModal.classList.add('active');
		const closeModal = () => kitModal.classList.remove('active');

		const newKitBtn = document.getElementById('new-kit-btn');
		if (newKitBtn) {
			newKitBtn.addEventListener('click', () => {
				form.reset();
				title.textContent = 'Neues Kit anlegen';
				actionInput.value = 'create';
				idInput.value = '';
				locationInput.parentElement.style.display = 'block';
				openModal();
			});
		}

		document.querySelectorAll('.edit-kit-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				form.reset();
				title.textContent = 'Kit bearbeiten';
				actionInput.value = 'update';
				idInput.value = btn.dataset.kitId;
				nameInput.value = btn.dataset.kitName;
				descInput.value = btn.dataset.kitDesc;
				locationInput.value = btn.dataset.kitLocation || '';
				locationInput.parentElement.style.display = 'block';
				openModal();
			});
		});

		if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
		kitModal.addEventListener('click', e => { if (e.target === kitModal) closeModal(); });
	}

	const allItems = JSON.parse(document.getElementById('allItemsData').textContent);

	const updateQuantityMax = (selectElement) => {
		const quantityInput = selectElement.nextElementSibling;
		const selectedItemId = parseInt(selectElement.value, 10);
		const selectedItem = allItems.find(item => item.id === selectedItemId);
		if (selectedItem) {
			quantityInput.max = selectedItem.availableQuantity;
			quantityInput.title = `Maximal verfügbar: ${selectedItem.availableQuantity}`;
		} else {
			quantityInput.removeAttribute('max');
			quantityInput.title = '';
		}
	};

	document.querySelectorAll('.kit-header').forEach(header => {
		header.addEventListener('click', () => {
			const content = header.nextElementSibling;
			const icon = header.querySelector('.toggle-icon');
			const isOpening = content.style.display !== 'block';

			content.style.display = isOpening ? 'block' : 'none';
			icon.classList.toggle('fa-chevron-down', !isOpening);
			icon.classList.toggle('fa-chevron-up', isOpening);

			if (isOpening) {
				content.querySelectorAll('select[name="itemIds"]').forEach(updateQuantityMax);
			}
		});
	});

	const createItemRow = () => {
		const row = document.createElement('div');
		row.className = 'dynamic-row';

		const select = document.createElement('select');
		select.name = 'itemIds';
		select.className = 'form-group';
		select.innerHTML = '<option value="">-- Artikel auswählen --</option>' +
			allItems.map(item => `<option value="${item.id}">${item.name}</option>`).join('');

		const quantityInput = document.createElement('input');
		quantityInput.type = 'number';
		quantityInput.name = 'quantities';
		quantityInput.value = '1';
		quantityInput.min = '1';
		quantityInput.className = 'form-group';
		quantityInput.style.maxWidth = '100px';

		const removeBtn = document.createElement('button');
		removeBtn.type = 'button';
		removeBtn.className = 'btn btn-small btn-danger btn-remove-kit-item-row';
		removeBtn.title = 'Zeile entfernen';
		removeBtn.innerHTML = '×';

		row.appendChild(select);
		row.appendChild(quantityInput);
		row.appendChild(removeBtn);

		return row;
	};

	document.body.addEventListener('click', e => {
		const addBtn = e.target.closest('.btn-add-kit-item-row');
		const removeBtn = e.target.closest('.btn-remove-kit-item-row');

		if (!addBtn && !removeBtn) {
			return;
		}

		e.preventDefault();

		if (addBtn) {
			const containerId = addBtn.dataset.containerId;
			const container = document.getElementById(containerId);
			if (container) {
				const noItemsMsg = container.querySelector('.no-items-message');
				if (noItemsMsg) noItemsMsg.remove();
				container.appendChild(createItemRow());
			}
		} else if (removeBtn) {
			const row = removeBtn.closest('.dynamic-row');
			const container = row.parentElement;

			// Show confirmation modal before removing the row
			showConfirmationModal("Diesen Artikel wirklich aus dem Kit entfernen?", () => {
				row.remove();

				if (container && container.children.length === 0) {
					const p = document.createElement('p');
					p.className = 'no-items-message';
					p.textContent = 'Dieses Kit ist leer. Fügen Sie einen Artikel hinzu.';
					container.appendChild(p);
				}
			});
		}
	});

	document.body.addEventListener('change', e => {
		if (e.target.matches('select[name="itemIds"]')) {
			updateQuantityMax(e.target);
		}
	});
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_matrix.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const modalOverlay = document.getElementById('attendance-modal');
    if (!modalOverlay) return;
    
    const modalTitle = document.getElementById('modal-title');
    const modalUserId = document.getElementById('modal-user-id');
    const modalMeetingId = document.getElementById('modal-meeting-id');
    const modalAttended = document.getElementById('modal-attended');
    const modalRemarks = document.getElementById('modal-remarks');
    const closeBtn = modalOverlay.querySelector('.modal-close-btn');

    const openModal = (cell) => {
        const userData = cell.dataset;
        modalTitle.textContent = `Nutzer: ${userData.userName} | Meeting: ${userData.meetingName}`;
        modalUserId.value = userData.userId;
        modalMeetingId.value = userData.meetingId;
        modalRemarks.value = userData.remarks;
        modalAttended.checked = (userData.attended === 'true');
        modalOverlay.classList.add('active');
    };

    const closeModal = () => modalOverlay.classList.remove('active');

    document.querySelectorAll('.qual-cell').forEach(cell => {
        cell.addEventListener('click', () => openModal(cell));
    });

    if (closeBtn) closeBtn.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', (event) => { if (event.target === modalOverlay) closeModal(); });
    document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && modalOverlay.classList.contains('active')) closeModal(); });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_meeting_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = "${pageContext.request.contextPath}";
    // Custom confirmation for delete forms
    document.querySelectorAll('.js-confirm-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
            showConfirmationModal(message, () => this.submit());
        });
    });

    // Modal Logic
    const modal = document.getElementById('meeting-modal');
    if (!modal) return;

    const form = document.getElementById('meeting-modal-form');
    const modalTitle = document.getElementById('meeting-modal-title');
    const actionInput = document.getElementById('meeting-action');
    const idInput = document.getElementById('meeting-id');
    const attachmentsList = document.getElementById('modal-attachments-list');
    const closeModalBtn = modal.querySelector('.modal-close-btn');

    const openModal = () => modal.classList.add('active');
    const closeModal = () => modal.classList.remove('active');

    const resetModal = () => {
        form.reset();
        attachmentsList.innerHTML = '';
    };

    // Open "Create" Modal
    document.getElementById('new-meeting-btn').addEventListener('click', () => {
        resetModal();
        modalTitle.textContent = "Neues Meeting planen";
        actionInput.value = "create";
        idInput.value = "";
        openModal();
    });

    // Open "Edit" Modal
    document.querySelectorAll('.edit-meeting-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
            const meetingId = btn.dataset.meetingId;
            try {
                // CORRECTED: Fetch from the correct servlet URL
                const response = await fetch(`${contextPath}/admin/meetings?action=getMeetingData&id=${meetingId}`);
                if (!response.ok) throw new Error('Meeting data could not be fetched.');
                const data = await response.json();
                const meeting = data.meetingData;
                const attachments = data.attachmentsData;

                resetModal();
                modalTitle.textContent = "Meeting bearbeiten";
                actionInput.value = "update";
                idInput.value = meeting.id;
                form.querySelector('#name-modal').value = meeting.name || '';
                form.querySelector('#location-modal').value = meeting.location || '';
                form.querySelector('#meetingDateTime-modal').value = meeting.meetingDateTime ? meeting.meetingDateTime.substring(0, 16) : '';
                form.querySelector('#endDateTime-modal').value = meeting.endDateTime ? meeting.endDateTime.substring(0, 16) : '';
                form.querySelector('#leader-modal').value = meeting.leaderUserId || '';
                form.querySelector('#description-modal').value = meeting.description || '';

                if (attachments && attachments.length > 0) {
                    attachments.forEach(att => addAttachmentRow(att, meeting.courseId));
                } else {
                    attachmentsList.innerHTML = '<li>Keine Anhänge vorhanden.</li>';
                }

                openModal();
            } catch (error) {
                console.error('Error fetching meeting data:', error);
                alert('Fehler beim Laden der Meeting-Daten.');
            }
        });
    });
	
	const addAttachmentRow = (attachment, courseId) => {
		const li = document.createElement('li');
		li.id = `attachment-item-${attachment.id}`;
		li.innerHTML = `<a href="${contextPath}/download?file=${attachment.filepath}" target="_blank">${attachment.filename}</a> (Rolle: ${attachment.requiredRole})`;
		const removeBtn = document.createElement('button');
		removeBtn.type = 'button';
		removeBtn.className = 'btn btn-small btn-danger-outline';
		removeBtn.innerHTML = '&times;';
		removeBtn.onclick = () => {
			showConfirmationModal(`Anhang '${attachment.filename}' wirklich löschen?`, () => {
				const deleteForm = document.createElement('form');
				deleteForm.method = 'post';
                // CORRECTED: Form action should point to the correct servlet URL
				deleteForm.action = `${contextPath}/admin/meetings`;
				deleteForm.innerHTML = `
					<input type="hidden" name="action" value="deleteAttachment">
					<input type="hidden" name="attachmentId" value="${attachment.id}">
					<input type="hidden" name="courseId" value="${courseId}">
				`;
				document.body.appendChild(deleteForm);
				deleteForm.submit();
			});
		};
		li.appendChild(removeBtn);
		attachmentsList.appendChild(li);
	};

    closeModalBtn.addEventListener('click', closeModal);
    modal.addEventListener('click', e => { if (e.target === modal) closeModal(); });
    document.addEventListener('keydown', e => { if (e.key === 'Escape' && modal.classList.contains('active')) closeModal(); });
	
	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.nextElementSibling;
			if (file && file.size > maxSize) {
				warningElement.style.display = 'block';
				e.target.value = '';
			} else {
				warningElement.style.display = 'none';
			}
		});
	});
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_reports.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const eventTrendCanvas = document.getElementById('eventTrendChart');
	const userActivityCanvas = document.getElementById('userActivityChart');

	// Function to render a line chart for event trends
	if (eventTrendCanvas && typeof eventTrendData !== 'undefined' && eventTrendData.length > 0) {
		const labels = eventTrendData.map(d => d.month);
		const data = eventTrendData.map(d => d.count);

		new Chart(eventTrendCanvas.getContext('2d'), {
			type: 'line',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl Events pro Monat',
					data: data,
					fill: true,
					borderColor: 'rgb(0, 123, 255)',
					backgroundColor: 'rgba(0, 123, 255, 0.1)',
					tension: 0.1
				}]
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					y: {
						beginAtZero: true,
						ticks: {
							stepSize: 1
						}
					}
				}
			}
		});
	} else if (eventTrendCanvas) {
		eventTrendCanvas.parentElement.innerHTML = '<p>Nicht genügend Daten für den Event-Trend vorhanden.</p>';
	}

	// Function to render a bar chart for user activity
	if (userActivityCanvas && typeof userActivityData !== 'undefined' && userActivityData.length > 0) {
		const labels = userActivityData.map(d => d.username);
		const data = userActivityData.map(d => d.participation_count);

		new Chart(userActivityCanvas.getContext('2d'), {
			type: 'bar',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl zugewiesener Events',
					data: data,
					backgroundColor: 'rgba(0, 123, 255, 0.6)',
					borderColor: 'rgb(0, 123, 255)',
					borderWidth: 1
				}]
			},
			options: {
				indexAxis: 'y', // Horizontal bars
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					x: {
						beginAtZero: true,
						ticks: {
							stepSize: 1
						}
					}
				},
				plugins: {
					legend: {
						display: false
					}
				}
			}
		});
	} else if (userActivityCanvas) {
		userActivityCanvas.parentElement.innerHTML = '<p>Nicht genügend Daten für Benutzeraktivität vorhanden.</p>';
	}
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_storage_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	// --- Lightbox Logic (Standardized) ---
	const lightbox = document.getElementById('lightbox');
	if (lightbox) {
		const lightboxImage = document.getElementById('lightbox-image');
		const closeBtn = lightbox.querySelector('.lightbox-close');

		// This listener works for both <a> and <button> triggers
		document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
			trigger.addEventListener('click', (e) => {
				e.preventDefault();
				lightboxImage.src = trigger.dataset.src;
				lightbox.style.display = 'flex';
			});
		});

		const closeLightbox = () => {
			lightbox.style.display = 'none';
			lightboxImage.src = ''; // Clear src to stop loading
		};

		if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
		lightbox.addEventListener('click', (e) => {
			if (e.target === lightbox) {
				closeLightbox();
			}
		});
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && lightbox.style.display === 'flex') {
				closeLightbox();
			}
		});
	}

	// --- Edit/Create Modal Logic ---
	const itemModal = document.getElementById('item-modal');
	if (itemModal) {
		const form = itemModal.querySelector('form');
		const title = itemModal.querySelector('h3');
		const actionInput = form.querySelector('input[name="action"]');
		const idInput = form.querySelector('input[name="id"]');
		const closeModalBtn = itemModal.querySelector('.modal-close-btn');

		document.getElementById('new-item-btn').addEventListener('click', () => {
			form.reset();
			title.textContent = 'Neuen Lagerartikel anlegen';
			actionInput.value = 'create';
			itemModal.classList.add('active');
		});

		document.querySelectorAll('.edit-item-btn').forEach(btn => {
			btn.addEventListener('click', async () => {
				form.reset();
				const fetchUrl = btn.dataset.fetchUrl;
				try {
					const response = await fetch(fetchUrl);
					if (!response.ok) throw new Error('Could not fetch item data.');
					const itemData = await response.json();

					title.textContent = 'Lagerartikel bearbeiten';
					actionInput.value = 'update';
					idInput.value = itemData.id;
					form.querySelector('#name-modal').value = itemData.name || '';
					form.querySelector('#location-modal').value = itemData.location || '';
					form.querySelector('#cabinet-modal').value = itemData.cabinet || '';
					form.querySelector('#compartment-modal').value = itemData.compartment || '';
					form.querySelector('#quantity-modal').value = itemData.quantity;
					form.querySelector('#maxQuantity-modal').value = itemData.maxQuantity;
					form.querySelector('#weight_kg-modal').value = itemData.weightKg || '';
					form.querySelector('#price_eur-modal').value = itemData.priceEur || '';
					itemModal.classList.add('active');
				} catch (error) {
					console.error("Failed to open edit modal:", error);
					alert("Fehler beim Laden der Artikeldaten.");
				}
			});
		});
		closeModalBtn.addEventListener('click', () => itemModal.classList.remove('active'));
	}

	// --- Defect Modal Logic ---
	const defectModal = document.getElementById('defect-modal');
	if (defectModal) {
		const modalTitle = defectModal.querySelector('h3');
		const itemIdInput = defectModal.querySelector('#defect-item-id');
		const defectQtyInput = defectModal.querySelector('#defective_quantity');
		const reasonInput = defectModal.querySelector('#defect_reason');
		const closeModalBtn = defectModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.defect-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
				itemIdInput.value = btn.dataset.itemId;
				defectQtyInput.value = btn.dataset.currentDefectQty;
				defectQtyInput.max = btn.dataset.maxQty;
				reasonInput.value = btn.dataset.currentReason;
				defectModal.classList.add('active');
			});
		});
		closeModalBtn.addEventListener('click', () => defectModal.classList.remove('active'));
	}

	// --- Maintenance Modal Logic ---
	const maintenanceModal = document.getElementById('maintenance-modal');
	if (maintenanceModal) {
		const modalTitle = maintenanceModal.querySelector('h3');
		const itemIdInput = maintenanceModal.querySelector('#maintenance-item-id');
		const closeModalBtn = maintenanceModal.querySelector('.modal-close-btn');
		const statusSelect = maintenanceModal.querySelector('#maintenance-status');

		document.querySelectorAll('.maintenance-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Wartungs-Status für "${btn.dataset.itemName}"`;
				itemIdInput.value = btn.dataset.itemId;
				statusSelect.value = btn.dataset.currentStatus;
				maintenanceModal.classList.add('active');
			});
		});

		closeModalBtn.addEventListener('click', () => maintenanceModal.classList.remove('active'));
	}
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_system.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const apiUrl = `${contextPath}/api/admin/system-stats`;

	const cpuProgress = document.getElementById('cpu-progress');
	const cpuText = document.getElementById('cpu-text');
	const ramProgress = document.getElementById('ram-progress');
	const ramText = document.getElementById('ram-text');
	const diskProgress = document.getElementById('disk-progress');
	const diskText = document.getElementById('disk-text');
	const uptimeText = document.getElementById('uptime-text');
	const batteryCard = document.getElementById('battery-card');
	const batteryProgress = document.getElementById('battery-progress');
	const batteryText = document.getElementById('battery-text');

	const formatGigaBytes = (gb) => {
		if (gb === 0) return '0 GB';
		if (gb < 1) return `${(gb * 1024).toFixed(0)} MB`;
		return `${gb.toFixed(2)} GB`;
	};

	const updateUI = (stats) => {
		const cpuPercent = stats.cpuLoad.toFixed(1);
		cpuProgress.style.width = cpuPercent + '%';
		cpuText.textContent = cpuPercent + '%';

		if (stats.totalMemory > 0) {
			const ramPercent = (stats.usedMemory / stats.totalMemory) * 100;
			ramProgress.style.width = ramPercent.toFixed(1) + '%';
			ramText.textContent = `${formatGigaBytes(stats.usedMemory)} / ${formatGigaBytes(stats.totalMemory)}`;
		}

		if (stats.totalDiskSpace > 0) {
			const diskPercent = (stats.usedDiskSpace / stats.totalDiskSpace) * 100;
			diskProgress.style.width = diskPercent.toFixed(1) + '%';
			diskText.textContent = `${formatGigaBytes(stats.usedDiskSpace)} / ${formatGigaBytes(stats.totalDiskSpace)}`;
		}

		uptimeText.textContent = stats.uptime;

		if (stats.batteryPercentage >= 0) {
			batteryCard.style.display = 'block';
			const batteryPercent = stats.batteryPercentage;
			batteryProgress.style.width = batteryPercent + '%';
			batteryText.textContent = batteryPercent + '%';
		} else {
			batteryCard.style.display = 'none';
		}
	};

	const fetchStats = async () => {
		try {
			const response = await fetch(apiUrl);
			if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
			const data = await response.json();
			updateUI(data);
		} catch (error) {
			console.error("Could not fetch system stats:", error);
			cpuText.textContent = "Fehler";
			ramText.textContent = "Fehler";
			diskText.textContent = "Fehler";
			uptimeText.textContent = "Fehler";
		}
	};

	fetchStats();
	let intervalId = setInterval(fetchStats, 5000);

	document.addEventListener("visibilitychange", () => {
		if (document.hidden) {
			clearInterval(intervalId);
		} else {
			fetchStats();
			intervalId = setInterval(fetchStats, 5000);
		}
	});
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_users.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(event) {
			event.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const passwordAlert = document.getElementById('password-reset-alert');
	if (passwordAlert) {
		const passwordElement = passwordAlert.querySelector('strong.copyable-password');
		if(passwordElement) {
			navigator.clipboard.writeText(passwordElement.textContent)
                .then(() => console.log('Password copied to clipboard'))
                .catch(err => console.error('Failed to copy password:', err));
		}
	}

	const modal = document.getElementById('user-modal');
	const form = document.getElementById('user-modal-form');
	const title = document.getElementById('user-modal-title');
	const actionInput = form.querySelector('input[name="action"]');
	const idInput = form.querySelector('input[name="userId"]');
	const usernameInput = form.querySelector('#username-modal');
	const passwordInput = form.querySelector('#password-modal');
	const passwordGroup = form.querySelector('#password-group');
	const roleInput = form.querySelector('#role-modal');
	const classYearInput = form.querySelector('#classYear-modal');
	const classNameInput = form.querySelector('#className-modal');
	const emailInput = form.querySelector('#email-modal');
	const closeModalBtn = modal.querySelector('.modal-close-btn');

	const closeModal = () => modal.classList.remove('active');

    const newUserBtn = document.getElementById('new-user-btn');
    if(newUserBtn) {
        newUserBtn.addEventListener('click', () => {
		    form.reset();
		    title.textContent = "Neuen Benutzer anlegen";
		    actionInput.value = "create";
		    idInput.value = "";
		    passwordInput.required = true;
		    passwordGroup.style.display = 'block';
            roleInput.value = "3"; // Default to NUTZER
		    modal.classList.add('active');
		    usernameInput.focus();
	    });
    }

	document.querySelectorAll('.edit-user-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			form.reset();
			const fetchUrl = btn.dataset.fetchUrl;
			try {
				const response = await fetch(fetchUrl);
				if (!response.ok) throw new Error('Could not fetch user data');
				const data = await response.json();

				title.textContent = `Benutzer bearbeiten: ${data.username}`;
				actionInput.value = "update";
				idInput.value = data.id;
				usernameInput.value = data.username || '';
				roleInput.value = data.roleId || '3';
				classYearInput.value = data.classYear || '';
				classNameInput.value = data.className || '';
                emailInput.value = data.email || '';
				passwordInput.required = false;
				passwordGroup.style.display = 'none';
				modal.classList.add('active');
			} catch (error) {
				console.error('Failed to open edit modal:', error);
				alert('Benutzerdaten konnten nicht geladen werden.');
			}
		});
	});

	closeModalBtn.addEventListener('click', closeModal);
	modal.addEventListener('click', (event) => { if (event.target === modal) closeModal(); });
	document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && modal.classList.contains('active')) closeModal(); });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\logout.js
========================================================================

setTimeout(function() {
	window.location.href = "/views/auth/login.jsp";
}, 5000); 

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error401.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const statusText = document.getElementById('scanner-status');
    const light = document.getElementById('scanner-light');
    const progress = document.getElementById('scanner-progress');
    const redirectContainer = document.getElementById('redirect-container');

    const steps = [
        { text: 'SCANNE...', color: '#ffc107', lightColor: '#ffc107', duration: 1500, progress: 50 },
        { text: 'KEINE ID', color: '#dc3545', lightColor: '#dc3545', duration: 1000, progress: 80 },
        { text: 'ZUGRIFF?', color: '#dc3545', lightColor: '#dc3545', duration: 800, progress: 100 },
        { text: 'VERWEIGERT', color: '#dc3545', lightColor: '#dc3545', duration: 2000, progress: 100 }
    ];

    let currentStep = 0;

    function runScan() {
        if(currentStep >= steps.length) {
            redirectContainer.style.opacity = '1';
            return;
        }

        const step = steps[currentStep];
        statusText.textContent = step.text;
        statusText.style.color = step.color;
        light.style.background = step.lightColor;
        light.style.boxShadow = `0 0 10px ${step.lightColor}`;
        progress.style.width = `${step.progress}%`;
        progress.style.backgroundColor = step.lightColor;

        currentStep++;
        setTimeout(runScan, step.duration);
    }

    setTimeout(runScan, 500); // Initial delay
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error404.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const terminalBody = document.getElementById('terminal-body');
    const homeLinkContainer = document.getElementById('home-link-container');
    const requestUri = "${fn:escapeXml(pageContext.errorData.requestURI)}";

    async function type(text, element, delay = 50) {
        for (const char of text) {
            element.textContent += char;
            terminalBody.scrollTop = terminalBody.scrollHeight;
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }
    
    async function addLine(text, className, delay = 20) {
        const p = document.createElement('p');
        if (className) p.className = className;
        terminalBody.appendChild(p);
        await type(text, p, delay);
    }

    async function runSequence() {
        const p1 = document.createElement('p');
        terminalBody.appendChild(p1);

        const prompt1 = document.createElement('span');
        prompt1.className = 'prompt';
        await type('user@technik-team:~$ ', prompt1, 20);
        p1.appendChild(prompt1);

        const command1 = document.createElement('span');
        command1.className = 'command';
        await type('ls -l ' + requestUri, command1, 50);
        p1.appendChild(command1);

        await new Promise(resolve => setTimeout(resolve, 500));

        await addLine('ls: cannot access \'' + requestUri + '\': No such file or directory', 'error', 15);
        await new Promise(resolve => setTimeout(resolve, 800));

        await addLine('Tipp: Kehren Sie mit dem folgenden Befehl zur Startseite zurück:', 'info', 25);
        await new Promise(resolve => setTimeout(resolve, 300));
        
        const p_link = document.createElement('p');
        terminalBody.appendChild(p_link);
        
        const prompt2 = document.createElement('span');
        prompt2.className = 'prompt';
        await type('user@technik-team:~$ ', prompt2, 20);
        p_link.appendChild(prompt2);

        const homeLink = document.createElement('a');
        homeLink.href = "${pageContext.request.contextPath}/home";
        homeLink.className = 'link';
        p_link.appendChild(homeLink);
        await type('cd /home', homeLink, 80);
        
        const cursor = document.createElement('span');
        cursor.className = 'cursor';
        cursor.innerHTML = ' ';
        p_link.appendChild(cursor);

        homeLinkContainer.style.opacity = '1';
    }

    runSequence();
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error500.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const diagBtn = document.getElementById('diagnostic-btn');
	const output = document.getElementById('diagnostic-output');

	const steps = [
		{ text: 'Initialisiere Diagnose-Protokoll...', type: 'info', icon: 'fas fa-cogs' },
		{ text: 'Prüfe Speicher-Integrität...', type: 'info', icon: 'fas fa-memory' },
		{ text: '[OK] RAM Module antworten.', type: 'ok', icon: 'fas fa-check-circle' },
		{ text: 'Verbinde mit Kernel...', type: 'info', icon: 'fas fa-project-diagram' },
		{ text: '[WARN] Kernel antwortet langsam. Kaffee-Level kritisch.', type: 'warn', icon: 'fas fa-exclamation-triangle' },
		{ text: 'Lade KI-Logikmodule...', type: 'info', icon: 'fas fa-brain' },
		{ text: '[FAIL] Logikmodul "Hamster im Laufrad" hat die Arbeit niedergelegt.', type: 'fail', icon: 'fas fa-times-circle' },
		{ text: 'Versuche Workaround: Mehr Glitzer-Effekte laden...', type: 'warn', icon: 'fas fa-magic' },
		{ text: '[FAIL] Glitzer-Puffer übergelaufen.', type: 'fail', icon: 'fas fa-times-circle' },
		{ text: '--------------------------------', type: 'info', icon: '' },
		{ text: 'Diagnose abgeschlossen. Fehler gefunden.', type: 'fail', icon: 'fas fa-skull-crossbones' }
	];

	let isRunning = false;

	// Function to simulate typing text into an element
	async function typeText(element, text, delay = 20) {
		for (let i = 0; i < text.length; i++) {
			element.innerHTML += text.charAt(i);
			output.scrollTop = output.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
	}

	diagBtn.addEventListener('click', async () => {
		if (isRunning) return;

		isRunning = true;
		diagBtn.disabled = true;
		diagBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Diagnose läuft...';
		output.innerHTML = ''; // Clear previous output

		for (const step of steps) {
			const line = document.createElement('p');
			line.className = step.type;
			const iconHtml = step.icon ? `<i class="${step.icon}" style="margin-right: 8px;"></i>` : '';
			line.innerHTML = `${iconHtml}`;
			output.appendChild(line);

			// Type out the text for the current line
			await typeText(line, step.text);

			await new Promise(resolve => setTimeout(resolve, 300)); // Pause between lines
		}

		// Add final cursor
		const finalLine = document.createElement('p');
		finalLine.innerHTML = '> <span class="cursor"> </span>';
		output.appendChild(finalLine);
		output.scrollTop = output.scrollHeight;

		diagBtn.disabled = false;
		diagBtn.innerHTML = '<i class="fas fa-tasks"></i> Diagnose erneut starten';
		isRunning = false;
	});
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error503.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const output = document.getElementById('reboot-output');
    const progress = document.getElementById('reboot-progress');

    const steps = [
        { text: 'System check initiated...', delay: 100, progress: 10 },
        { text: 'Checking memory modules... [OK]', delay: 300, progress: 20 },
        { text: 'Checking CPU cores... [OK]', delay: 300, progress: 30 },
        { text: 'Pinging gateway... [NO RESPONSE]', delay: 1000, progress: 40 },
        { text: 'Server overload detected. Reason: Too many requests.', delay: 500, progress: 50 },
        { text: 'Flushing request queue...', delay: 1500, progress: 70 },
        { text: 'Initializing reboot sequence...', delay: 500, progress: 80 },
        { text: 'System will be back online shortly.', delay: 1000, progress: 100 },
        { text: 'Redirecting to login page...', delay: 2000, progress: 100 }
    ];

    let stepIndex = 0;

    function runSequence() {
        if (stepIndex >= steps.length) {
            // CORRECTED: Redirect must point to the /login servlet URL
            window.location.href = "${pageContext.request.contextPath}/login";
            return;
        }

        const step = steps[stepIndex];
        const p = document.createElement('p');
        p.textContent = step.text;
        output.appendChild(p);
        output.scrollTop = output.scrollHeight;

        progress.style.width = `${step.progress}%`;
        
        stepIndex++;
        setTimeout(runSequence, step.delay);
    }

    runSequence();
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\calendar.js
========================================================================

document.addEventListener('DOMContentLoaded', function() {
	const calendarEl = document.getElementById('calendar');
	const contextPath = document.body.dataset.contextPath || '';

	if (!calendarEl) {
		console.error("Calendar element not found!");
		return;
	}

	const calendar = new FullCalendar.Calendar(calendarEl, {
		initialView: 'dayGridMonth',
		locale: 'de',
		headerToolbar: {
			left: 'prev,next today',
			center: 'title',
			right: 'dayGridMonth,timeGridWeek,listWeek'
		},
		events: `${contextPath}/api/calendar/entries`,
		eventClick: function(info) {
			info.jsEvent.preventDefault(); // don't let the browser navigate
			if (info.event.url) {
				window.open(info.event.url, "_self");
			}
		},
		eventTimeFormat: { // German time format
			hour: '2-digit',
			minute: '2-digit',
			meridiem: false,
			hour12: false
		}
	});
	calendar.render();
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\collaborative_editor.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const editor = document.getElementById('editor');
    const statusIndicator = document.getElementById('status-indicator');
    const apiUrl = "${pageContext.request.contextPath}/api/document";
    let debounceTimer;

    const saveContent = () => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            const content = editor.value;
            statusIndicator.textContent = 'Speichere...';
            fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'text/plain; charset=utf-8' },
                body: content
            }).then(response => {
                if (response.ok) {
                    statusIndicator.textContent = 'Gespeichert';
                } else {
                    statusIndicator.textContent = 'Fehler beim Speichern!';
                    statusIndicator.style.color = 'var(--danger-color)';
                }
            }).catch(err => {
                 statusIndicator.textContent = 'Netzwerkfehler!';
                 statusIndicator.style.color = 'var(--danger-color)';
            });
        }, 500);
    };

    const fetchContent = () => {
        fetch(apiUrl)
            .then(response => {
                if (!response.ok) throw new Error("Server response not OK");
                return response.text();
            })
            .then(newContent => {
                if (document.activeElement !== editor && editor.value !== newContent) {
                    const cursorPos = editor.selectionStart;
                    editor.value = newContent;
                    editor.selectionStart = editor.selectionEnd = cursorPos;
                }
            }).catch(err => {
                console.error("Error fetching document content:", err);
                statusIndicator.textContent = 'Fehler beim Laden!';
                statusIndicator.style.color = 'var(--danger-color)';
            });
    };
    
    editor.addEventListener('input', saveContent);

    const pollInterval = setInterval(fetchContent, 3000);
    fetchContent(); 
    
    window.addEventListener('beforeunload', () => {
        clearInterval(pollInterval);
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\eventDetails.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const eventId = document.body.dataset.eventId || '';
	const currentUserId = document.body.dataset.userId || '';
	const isAdmin = document.body.dataset.isAdmin === 'true';

	const taskModal = document.getElementById('task-modal');
	if (taskModal) {
		const allUsers = JSON.parse(document.getElementById('allUsersData')?.textContent || '[]');
		const allItems = JSON.parse(document.getElementById('allItemsData')?.textContent || '[]');
		const allKits = JSON.parse(document.getElementById('allKitsData')?.textContent || '[]');
		const allTasks = JSON.parse(document.getElementById('allTasksData')?.textContent || '[]');

		const form = document.getElementById('task-modal-form');
		const title = document.getElementById('task-modal-title');
		const taskIdInput = document.getElementById('task-id-modal');
		const descInput = document.getElementById('task-description-modal');
		const detailsInput = document.getElementById('task-details-modal'); // New details input
		const orderInput = document.getElementById('task-display-order-modal');
		const statusGroup = document.getElementById('task-status-group');
		const statusInput = document.getElementById('task-status-modal');
		const deleteBtn = document.getElementById('delete-task-btn');

		const assignmentTypeRadios = form.querySelectorAll('input[name="assignmentType"]');
		const directFields = document.getElementById('direct-assignment-fields');
		const poolFields = document.getElementById('pool-assignment-fields');
		const requiredPersonsInput = document.getElementById('task-required-persons-modal');
		const userCheckboxesContainer = document.getElementById('task-user-checkboxes');

		const itemsContainer = document.getElementById('task-items-container');
		const kitsContainer = document.getElementById('task-kits-container');

		const createRow = (container, onRemove) => {
			const row = document.createElement('div');
			row.className = 'dynamic-row';
			const removeBtn = document.createElement('button');
			removeBtn.type = 'button';
			removeBtn.className = 'btn-small btn-danger';
			removeBtn.innerHTML = '×';
			removeBtn.onclick = () => onRemove(row);
			row.appendChild(removeBtn);
			container.appendChild(row);
			return row;
		};

		const addItemRow = (item = { id: '', quantity: 1 }) => {
			const row = createRow(itemsContainer, r => r.remove());
			const select = document.createElement('select');
			select.name = 'itemIds';
			select.className = 'form-group';
			select.innerHTML = '<option value="">-- Material --</option>' + allItems.map(i => `<option value="${i.id}" data-max-qty="${i.availableQuantity}">${i.name}</option>`).join('');
			select.value = item.id;

			const input = document.createElement('input');
			input.type = 'number';
			input.name = 'itemQuantities';
			input.value = item.quantity;
			input.min = '1';
			input.className = 'form-group';
			input.style.maxWidth = '100px';

			select.addEventListener('change', () => {
				const selectedOption = select.options[select.selectedIndex];
				const maxQty = selectedOption.dataset.maxQty;
				input.max = maxQty || '';
				if (maxQty) input.title = `Maximal verfügbar: ${maxQty}`;
			});

			row.prepend(select, input);
		};

		const addKitRow = (kit = { id: '' }) => {
			const row = createRow(kitsContainer, r => r.remove());
			const select = document.createElement('select');
			select.name = 'kitIds';
			select.className = 'form-group';
			select.innerHTML = '<option value="">-- Kit --</option>' + allKits.map(k => `<option value="${k.id}">${k.name}</option>`).join('');
			select.value = kit.id;
			row.prepend(select);
		};

		const openModal = () => taskModal.classList.add('active');
		const closeModal = () => taskModal.classList.remove('active');

		const resetModal = () => {
			form.reset();
			taskIdInput.value = '';
			itemsContainer.innerHTML = '';
			kitsContainer.innerHTML = '';
			userCheckboxesContainer.innerHTML = '';
			statusGroup.style.display = 'none';
			deleteBtn.style.display = 'none';
			directFields.style.display = 'block';
			poolFields.style.display = 'none';
			form.querySelector('input[name="assignmentType"][value="direct"]').checked = true;
		};

		document.getElementById('new-task-btn')?.addEventListener('click', () => {
			resetModal();
			title.textContent = 'Neue Aufgabe erstellen';
			allUsers.forEach(user => {
				userCheckboxesContainer.innerHTML += `<label><input type="checkbox" name="userIds" value="${user.id}"> ${user.username}</label>`;
			});
			openModal();
		});

		document.querySelectorAll('.edit-task-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				const taskId = parseInt(btn.dataset.taskId, 10);
				const task = allTasks.find(t => t.id === taskId);
				if (!task) return;

				resetModal();
				title.textContent = 'Aufgabe bearbeiten';
				statusGroup.style.display = 'block';
				deleteBtn.style.display = 'inline-block';

				taskIdInput.value = task.id;
				descInput.value = task.description;
				detailsInput.value = task.details || ''; // Populate details field
				orderInput.value = task.displayOrder;
				statusInput.value = task.status;

				if (task.requiredPersons > 0) {
					form.querySelector('input[name="assignmentType"][value="pool"]').checked = true;
					poolFields.style.display = 'block';
					directFields.style.display = 'none';
					requiredPersonsInput.value = task.requiredPersons;
				} else {
					const assignedIds = new Set(task.assignedUsers.map(u => u.id));
					allUsers.forEach(user => {
						const isChecked = assignedIds.has(user.id) ? 'checked' : '';
						userCheckboxesContainer.innerHTML += `<label><input type="checkbox" name="userIds" value="${user.id}" ${isChecked}> ${user.username}</label>`;
					});
				}

				task.requiredItems?.forEach(item => addItemRow({ id: item.id, quantity: item.quantity }));
				task.requiredKits?.forEach(kit => addKitRow({ id: kit.id }));
				openModal();
			});
		});

		assignmentTypeRadios.forEach(radio => {
			radio.addEventListener('change', () => {
				directFields.style.display = radio.value === 'direct' ? 'block' : 'none';
				poolFields.style.display = radio.value === 'pool' ? 'block' : 'none';
			});
		});

		deleteBtn.addEventListener('click', () => {
			showConfirmationModal('Diese Aufgabe wirklich löschen?', () => {
				const deleteForm = document.createElement('form');
				deleteForm.method = 'post';
				deleteForm.action = `${contextPath}/admin/tasks`;
				deleteForm.innerHTML = `<input type="hidden" name="action" value="delete"><input type="hidden" name="taskId" value="${taskIdInput.value}"><input type="hidden" name="eventId" value="${eventId}">`;
				document.body.appendChild(deleteForm);
				deleteForm.submit();
			});
		});

		document.body.addEventListener('click', e => {
			const addItemBtn = e.target.closest('#add-task-item-btn');
			const addKitBtn = e.target.closest('#add-task-kit-btn');

			if (addItemBtn) {
				addItemRow();
			}
			if (addKitBtn) {
				addKitRow();
			}
		});

		taskModal.querySelector('.modal-close-btn').addEventListener('click', closeModal);
	}

	const taskListContainer = document.getElementById('task-list-container');
	if (taskListContainer) {
		taskListContainer.addEventListener('click', (e) => {
			const markDoneBtn = e.target.closest('.mark-task-done-btn');
			if (markDoneBtn) {
				const taskId = markDoneBtn.dataset.taskId;
				const params = new URLSearchParams();
				params.append('action', 'updateStatus');
				params.append('taskId', taskId);
				params.append('status', 'ERLEDIGT');

				fetch(`${contextPath}/task-action`, {
					method: 'POST',
					body: params
				})
					.then(response => {
						if (response.ok) window.location.reload();
						else alert('Fehler beim Aktualisieren der Aufgabe.');
					})
					.catch(error => {
						console.error("Error updating task status:", error);
						alert('Netzwerkfehler beim Aktualisieren der Aufgabe.');
					});
			}
		});
	}

	// --- Chat Management (unchanged) ---
	const chatBox = document.getElementById('chat-box');
	if (chatBox) {
		const chatForm = document.getElementById('chat-form');
		const chatInput = document.getElementById('chat-message-input');
		const websocketProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
		const websocketUrl = `${websocketProtocol}//${window.location.host}${contextPath}/ws/chat/${eventId}`;
		let socket;

		const connect = () => {
			socket = new WebSocket(websocketUrl);
			socket.onopen = () => fetchMessages();
			socket.onmessage = (event) => {
				const data = JSON.parse(event.data);
				switch (data.type) {
					case 'new_message':
						appendMessage(data.payload);
						break;
					case 'message_soft_deleted':
						handleSoftDelete(data.payload);
						break;
					case 'message_updated':
						const messageTextElement = document.getElementById(`message-text-${data.payload.messageId}`);
						const editedMarkerElement = document.getElementById(`message-edited-marker-${data.payload.messageId}`);
						if (messageTextElement) messageTextElement.textContent = data.payload.newText;
						if (editedMarkerElement) editedMarkerElement.style.display = 'inline';
						break;
				}
			};
			socket.onclose = (event) => console.warn('WebSocket connection closed.', event);
			socket.onerror = (error) => console.error('WebSocket error:', error);
		};

		const getTextColorForBackground = (hexColor) => {
			if (!hexColor || hexColor.length < 7) return '#000000';
			const r = parseInt(hexColor.slice(1, 3), 16);
			const g = parseInt(hexColor.slice(3, 5), 16);
			const b = parseInt(hexColor.slice(5, 7), 16);
			const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
			return luminance > 0.5 ? '#000000' : '#FFFFFF';
		};

		const formatAsLocaleTime = (dateString) => {
			if (!dateString) return '';
			return new Date(dateString).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' });
		};

		const appendMessage = (message) => {
			const isCurrentUser = String(message.userId) === String(currentUserId);

			const container = document.createElement('div');
			container.className = 'chat-message-container';
			container.id = `message-container-${message.id}`;
			if (isCurrentUser) container.classList.add('current-user');

			const bubbleElement = document.createElement('div');
			bubbleElement.className = 'chat-bubble';
			bubbleElement.id = `chat-bubble-${message.id}`;

			const bubbleBackgroundColor = isCurrentUser ? 'var(--primary-color)' : (message.chatColor || '#E9ECEF');
			bubbleElement.style.backgroundColor = bubbleBackgroundColor;
			bubbleElement.style.borderColor = bubbleBackgroundColor;
			bubbleElement.style.color = getTextColorForBackground(bubbleBackgroundColor);

			if (message.isDeleted) {
				renderDeletedState(bubbleElement, message);
			} else {
				renderNormalState(bubbleElement, message, isCurrentUser);
				const optionsMenu = createOptionsMenu(message, isCurrentUser);
				container.appendChild(optionsMenu);
			}

			container.prepend(bubbleElement);
			chatBox.appendChild(container);
			chatBox.scrollTop = chatBox.scrollHeight;
		};

		const renderNormalState = (bubbleElement, message, isCurrentUser) => {
			if (!isCurrentUser) {
				const usernameElement = document.createElement('strong');
				usernameElement.className = 'chat-username';
				usernameElement.style.color = 'black';
				usernameElement.textContent = message.username;
				bubbleElement.appendChild(usernameElement);
			}

			const textElement = document.createElement('span');
			textElement.className = 'chat-text';
			textElement.id = `message-text-${message.id}`;
			textElement.textContent = message.messageText;

			const timeElement = document.createElement('span');
			timeElement.className = 'chat-timestamp';
			timeElement.textContent = formatAsLocaleTime(message.sentAt);
			timeElement.style.color = bubbleElement.style.color === '#FFFFFF' ? 'rgba(255,255,255,0.7)' : 'var(--text-muted-color)';

			const editedMarker = document.createElement('span');
			editedMarker.className = 'chat-edited-marker';
			editedMarker.id = `message-edited-marker-${message.id}`;
			editedMarker.textContent = ' (bearbeitet)';
			editedMarker.style.display = message.edited ? 'inline' : 'none';

			timeElement.prepend(editedMarker);
			bubbleElement.appendChild(textElement);
			bubbleElement.appendChild(timeElement);
		};

		const renderDeletedState = (bubbleElement, message) => {
			let deletedText;
			if (message.username === message.deletedByUsername) {
				deletedText = `Nachricht wurde von ${message.username} gelöscht`;
			} else {
				deletedText = `Nachricht von ${message.username} wurde von ${message.deletedByUsername} gelöscht`;
			}
			bubbleElement.innerHTML = `<span class="chat-deleted-info">${deletedText}</span>`;
			bubbleElement.classList.add('deleted');
		};

		const createOptionsMenu = (message, isCurrentUser) => {
			const optionsMenu = document.createElement('div');
			optionsMenu.className = 'chat-options';
			if (isCurrentUser) {
				const editButton = document.createElement('button');
				editButton.className = 'chat-option-btn';
				editButton.innerHTML = '<i class="fas fa-pencil-alt"></i>';
				editButton.onclick = () => handleEdit(message.id);
				optionsMenu.appendChild(editButton);
			}
			if (isAdmin || isCurrentUser) {
				const deleteButton = document.createElement('button');
				deleteButton.className = 'chat-option-btn';
				deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
				deleteButton.onclick = () => handleDelete(message.id, message.userId, message.username);
				optionsMenu.appendChild(deleteButton);
			}
			return optionsMenu;
		};

		const handleDelete = (messageId, originalUserId, originalUsername) => {
			showConfirmationModal("Nachricht wirklich löschen?", () => {
				socket.send(JSON.stringify({ type: 'delete_message', payload: { messageId, originalUserId, originalUsername } }));
			});
		};

		const handleSoftDelete = (payload) => {
			const bubbleElement = document.getElementById(`chat-bubble-${payload.messageId}`);
			const containerElement = document.getElementById(`message-container-${payload.messageId}`);
			if (bubbleElement && containerElement) {
				containerElement.querySelector('.chat-options')?.remove();

				let deletedText;
				if (payload.originalUsername === payload.deletedByUsername) {
					deletedText = `Nachricht von ${payload.originalUsername} gelöscht`;
				} else {
					deletedText = `Nachricht von ${payload.originalUsername} wurde von ${payload.deletedByUsername} gelöscht`;
				}
				bubbleElement.innerHTML = `<span class="chat-deleted-info">${deletedText}</span>`;
				bubbleElement.classList.add('deleted');
			}
		};

		const handleEdit = (messageId) => {
			const textElement = document.getElementById(`message-text-${messageId}`);
			const currentText = textElement.textContent;
			const editInput = document.createElement('input');
			editInput.type = 'text';
			editInput.value = currentText;
			editInput.className = 'chat-edit-input';

			editInput.onkeydown = (keyboardEvent) => {
				if (keyboardEvent.key === 'Enter') {
					if (editInput.value.trim() && editInput.value !== currentText) {
						socket.send(JSON.stringify({ type: 'update_message', payload: { messageId, newText: editInput.value } }));
					}
					textElement.style.display = 'block';
					editInput.replaceWith(textElement);
				} else if (keyboardEvent.key === 'Escape') {
					textElement.style.display = 'block';
					editInput.replaceWith(textElement);
				}
			};

			textElement.style.display = 'none';
			textElement.parentElement.insertBefore(editInput, textElement);
			editInput.focus();
		};

		const fetchMessages = () => {
			fetch(`${contextPath}/api/event-chat?eventId=${eventId}`)
				.then(response => response.json())
				.then(messages => {
					chatBox.innerHTML = '';
					if (messages && messages.length > 0) messages.forEach(appendMessage);
				}).catch(error => console.error("Error fetching initial chat messages:", error));
		};

		chatForm.addEventListener('submit', (event) => {
			event.preventDefault();
			const messageText = chatInput.value.trim();
			if (messageText && socket && socket.readyState === WebSocket.OPEN) {
				const payload = { type: "new_message", payload: { messageText: messageText } };
				socket.send(JSON.stringify(payload));
				chatInput.value = '';
			}
		});

		connect();
	}
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\events.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.js-confirm-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            showConfirmationModal(this.dataset.confirmMessage || 'Sind Sie sicher?', () => this.submit());
        });
    });

    const signupModal = document.getElementById('signup-modal');
    const signupModalTitle = document.getElementById('signup-modal-title');
    const signupEventIdInput = document.getElementById('signup-event-id');
    const customFieldsContainer = document.getElementById('custom-fields-container');
    const closeModalBtn = signupModal.querySelector('.modal-close-btn');
	const contextPath = document.body.dataset.contextPath || '';

    const openSignupModal = async (btn) => {
        const eventId = btn.dataset.eventId;
        const eventName = btn.dataset.eventName;

        signupModalTitle.textContent = `Anmeldung für: ${eventName}`;
        signupEventIdInput.value = eventId;
        customFieldsContainer.innerHTML = '<p>Lade Anmelde-Optionen...</p>';
        signupModal.classList.add('active');

        try {
            // UPDATED: Fetch from the new, correct public API endpoint
            const response = await fetch(`${contextPath}/api/public/event-custom-fields?eventId=${eventId}`);
            if (!response.ok) throw new Error('Could not fetch custom fields for the event.');
            
            const customFields = await response.json();
            
            customFieldsContainer.innerHTML = '';
            if (customFields && customFields.length > 0) {
                customFields.forEach(field => {
                    const fieldGroup = document.createElement('div');
                    fieldGroup.className = 'form-group';
                    let fieldHtml = `<label for="customfield_${field.id}">${field.fieldName}</label>`;
                    if (field.fieldType === 'BOOLEAN') {
                        fieldHtml += `<select name="customfield_${field.id}" id="customfield_${field.id}" class="form-control"><option value="true">Ja</option><option value="false">Nein</option></select>`;
                    } else { 
                        fieldHtml += `<input type="text" name="customfield_${field.id}" id="customfield_${field.id}" class="form-control">`;
                    }
                    fieldGroup.innerHTML = fieldHtml;
                    customFieldsContainer.appendChild(fieldGroup);
                });
            } else {
                 customFieldsContainer.innerHTML = '<p>Für dieses Event sind keine weiteren Angaben nötig.</p>';
            }
        } catch (error) {
            console.error('Failed to load custom fields:', error);
            customFieldsContainer.innerHTML = '<p class="error-message">Fehler beim Laden der Anmelde-Optionen.</p>';
        }
    };
    
    document.querySelectorAll('.signup-btn').forEach(btn => btn.addEventListener('click', () => openSignupModal(btn)));
    closeModalBtn.addEventListener('click', () => signupModal.classList.remove('active'));
    signupModal.addEventListener('click', (e) => {
        if (e.target === signupModal) signupModal.classList.remove('active');
    });
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\lager.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	// Transaction Modal Logic
	const transactionModal = document.getElementById('transaction-modal');
	if (transactionModal) {
		const modalTitle = document.getElementById('transaction-modal-title');
		const modalItemId = document.getElementById('transaction-item-id');
		const quantityInput = document.getElementById('transaction-quantity');
		const checkoutButton = transactionModal.querySelector('button[value="checkout"]');
		const checkinButton = transactionModal.querySelector('button[value="checkin"]');
		const closeModalBtn = transactionModal.querySelector('.modal-close-btn');

		const openModal = (btn) => {
			modalTitle.textContent = `${btn.dataset.itemName}: Entnehmen / Einräumen`;
			modalItemId.value = btn.dataset.itemId;

			const availableQty = parseInt(btn.dataset.maxQty, 10);
			const currentQty = parseInt(btn.dataset.currentQty, 10);
			const totalMaxQty = parseInt(btn.dataset.totalMaxQty, 10);
			const availableSpace = totalMaxQty > 0 ? totalMaxQty - currentQty : 9999;

			// Set initial state for checkout validation
			quantityInput.max = availableQty;
			quantityInput.title = `Maximal entnehmbar: ${availableQty}`;
			quantityInput.value = 1;

			checkoutButton.disabled = (availableQty <= 0);
			checkinButton.disabled = (totalMaxQty > 0 && currentQty >= totalMaxQty);

			// DYNAMICALLY UPDATE MAX ATTRIBUTE ON HOVER
			checkoutButton.onmouseover = () => {
				quantityInput.max = availableQty;
				quantityInput.title = `Maximal entnehmbar: ${availableQty}`;
			};

			checkinButton.onmouseover = () => {
				quantityInput.max = availableSpace > 0 ? availableSpace : 9999; // Allow large number if no max
				quantityInput.title = `Maximal einräumbar: ${availableSpace}`;
			};

			transactionModal.classList.add('active');
		};

		const closeModal = () => transactionModal.classList.remove('active');
		document.querySelectorAll('.transaction-btn').forEach(btn => btn.addEventListener('click', () => openModal(btn)));
		closeModalBtn.addEventListener('click', closeModal);
		transactionModal.addEventListener('click', e => { if (e.target === transactionModal) closeModal(); });
	}

	// Lightbox Logic
	const lightbox = document.getElementById('lightbox');
	if (lightbox) {
		const lightboxImage = document.getElementById('lightbox-image');
		const closeBtn = lightbox.querySelector('.lightbox-close');

		document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
			trigger.addEventListener('click', (e) => {
				e.preventDefault();
				lightboxImage.src = trigger.dataset.src;
				lightbox.style.display = 'flex';
			});
		});

		const closeLightbox = () => {
			lightbox.style.display = 'none';
			lightboxImage.src = '';
		};

		if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
		lightbox.addEventListener('click', (e) => {
			if (e.target === lightbox) {
				closeLightbox();
			}
		});
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && lightbox.style.display === 'flex') {
				closeLightbox();
			}
		});
	}
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\storage_item_details.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const lightbox = document.getElementById('lightbox');
	if (!lightbox) return;

	const lightboxImage = document.getElementById('lightbox-image');
	const closeBtn = lightbox.querySelector('.lightbox-close');

	document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
		trigger.addEventListener('click', (e) => {
			e.preventDefault();
			lightboxImage.src = trigger.href; // Get src from the anchor's href
			lightbox.style.display = 'flex';
		});
	});

	const closeLightbox = () => { lightbox.style.display = 'none'; };
	if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
	lightbox.addEventListener('click', (e) => { if (e.target === lightbox) closeLightbox(); });
	document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && lightbox.style.display === 'flex') closeLightbox(); });

	// Tab switching logic
	const tabButtons = document.querySelectorAll('.modal-tab-button');
	const tabContents = document.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\main.js
========================================================================

/**
 * Main JavaScript file for the TechnikTeam application.
 * This file is included on every page and handles global user interface logic.
 */
document.addEventListener('DOMContentLoaded', () => {

	const contextPath = document.body.dataset.contextPath || '';

	// --- 1. Mobile Navigation Toggle Logic ---
	const navToggle = document.querySelector('.mobile-nav-toggle');
	const pageOverlay = document.querySelector('.page-overlay');
	if (navToggle) {
		navToggle.addEventListener('click', (event) => {
			event.stopPropagation();
			document.body.classList.toggle('nav-open');
		});
	}
	if (pageOverlay) {
		pageOverlay.addEventListener('click', () => {
			document.body.classList.remove('nav-open');
		});
	}

	// --- 2. Active Navigation Link Highlighting ---
	// This logic is now part of the main_header.jspf and can be simplified or removed
	// if the JSP handles it completely. We keep it as a fallback.
	const currentPath = window.location.pathname;
	document.querySelectorAll('.sidebar-nav a').forEach(link => {
		if (link.getAttribute('href') === currentPath) {
			link.classList.add('active-nav-link');
		}
	});


	// --- 3. Theme Switcher Logic ---
	const themeSwitch = document.getElementById('theme-toggle');
	// Check for saved theme in localStorage, default to 'light'
	const currentTheme = localStorage.getItem('theme') || 'light';
	document.documentElement.setAttribute('data-theme', currentTheme);

	if (themeSwitch) {
		// Set the toggle to the correct initial state
		if (currentTheme === 'dark') {
			themeSwitch.checked = true;
		}
		// Add event listener to handle changes
		themeSwitch.addEventListener('change', (event) => {
			const newTheme = event.target.checked ? 'dark' : 'light';
			document.documentElement.setAttribute('data-theme', newTheme);
			localStorage.setItem('theme', newTheme);
		});
	}

	// --- 4. Global Confirmation Modal Logic ---
	const confirmationModalElement = document.createElement('div');
	confirmationModalElement.className = 'modal-overlay';
	confirmationModalElement.id = 'confirmation-modal';
	confirmationModalElement.innerHTML = `
        <div class="modal-content" style="max-width: 450px;">
            <h3 id="confirmation-title">Bestätigung erforderlich</h3>
            <p id="confirmation-message" style="margin: 1.5rem 0; font-size: 1.1rem;"></p>
            <div style="display: flex; justify-content: flex-end; gap: 1rem;">
                <button id="confirmation-btn-cancel" class="btn" style="background-color: var(--text-muted-color);">Abbrechen</button>
                <button id="confirmation-btn-confirm" class="btn btn-danger">Bestätigen</button>
            </div>
        </div>`;
	document.body.appendChild(confirmationModalElement);

	const messageElement = document.getElementById('confirmation-message');
	const confirmBtn = document.getElementById('confirmation-btn-confirm');
	const cancelBtn = document.getElementById('confirmation-btn-cancel');

	let onConfirmCallback = null;

	window.showConfirmationModal = (message, onConfirm) => {
		messageElement.textContent = message;
		onConfirmCallback = onConfirm;
		confirmationModalElement.classList.add('active');
	};

	const closeConfirmModal = () => {
		confirmationModalElement.classList.remove('active');
		onConfirmCallback = null;
	};

	confirmBtn.addEventListener('click', () => {
		if (typeof onConfirmCallback === 'function') onConfirmCallback();
		closeConfirmModal();
	});

	cancelBtn.addEventListener('click', closeConfirmModal);
	confirmationModalElement.addEventListener('click', (e) => {
		if (e.target === confirmationModalElement) closeConfirmModal();
	});

	// Attach confirmation to logout link
	// main.js
	const logoutLink = document.getElementById('logout-link');
	if (logoutLink) {
		logoutLink.addEventListener('click', (event) => {
			event.preventDefault();
			showConfirmationModal(
				'Möchten Sie sich wirklich ausloggen?',
				() => { window.location.href = logoutLink.href; }
			);
		});
	}

	// --- 5. Server-Sent Events (SSE) Notification Logic ---
	if (document.body.dataset.isLoggedIn === 'true' && window.EventSource) {
		const eventSource = new EventSource(`${contextPath}/notifications`);
		eventSource.onopen = () => console.log("SSE connection established.");
		eventSource.onmessage = (event) => {
			try {
				const data = JSON.parse(event.data);
				console.log("SSE data received:", data);

				if (data.type === 'chat_update') {
					// Fire a custom event that the eventDetails.js can listen for
					const chatUpdateEvent = new CustomEvent('sse_chat_update', { detail: data });
					document.dispatchEvent(chatUpdateEvent);
				} else {
					// Fallback for other potential JSON messages
					showBrowserNotification(data.message || JSON.stringify(data));
				}
			} catch (e) {
				// If it's not JSON, treat it as a plain text notification
				console.log("SSE (plain text) message received:", event.data);
				showBrowserNotification(event.data);
			}
		};
		eventSource.onerror = (err) => {
			console.error("SSE connection error.", err);
			eventSource.close();
		};
	}

	function showBrowserNotification(message) {
		if (!("Notification" in window)) {
			console.warn("This browser does not support desktop notifications.");
			return;
		}
		if (Notification.permission === "granted") {
			new Notification("Technik Team Update", { body: message, icon: `${contextPath}/images/logo.png` });
		} else if (Notification.permission !== "denied") {
			Notification.requestPermission().then((permission) => {
				if (permission === "granted") {
					new Notification("Technik Team Update", { body: message, icon: `${contextPath}/images/logo.png` });
				}
			});
		}
	}
});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\fullcalendar\locales\de.js
========================================================================

(function(e,l){"object"==typeof exports&&"undefined"!=typeof module?l(exports,require("@fullcalendar/core")):"function"==typeof define&&define.amd?define(["exports","@fullcalendar/core"],l):l((e.FullCalendarLocales=e.FullCalendarLocales||{},e.FullCalendarLocales.de={}),e.FullCalendar);})(this,function(e,l){"use strict";var o={code:"de",week:{dow:1,doy:4},buttonText:{prev:"Zurück",next:"Vor",today:"Heute",year:"Jahr",month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},weekText:"W",weekTextLong:"Woche",allDayText:"Ganztägig",moreLinkText:function(e){return"+ weitere "+e},noEventsText:"Keine Ereignisse anzuzeigen"};return l.globalLocales.push(o),e.default=o,Object.defineProperty(e,"__esModule",{value:!0}),e;});

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\fullcalendar\FullCalendar.js
========================================================================


========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\fullcalendar\main.global.min.js
========================================================================

/*!
FullCalendar v5.11.5
Docs & License: https://fullcalendar.io/
(c) 2022 Adam Shaw
*/
var FullCalendar = (function(e) {
	"use strict";
	var t = function(e, n) {
		return (t =
			Object.setPrototypeOf ||
			({ __proto__: [] } instanceof Array &&
				function(e, t) {
					e.__proto__ = t;
				}) ||
			function(e, t) {
				for (var n in t)
					Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
			})(e, n);
	};
	function n(e, n) {
		if ("function" != typeof n && null !== n)
			throw new TypeError(
				"Class extends value " + String(n) + " is not a constructor or null"
			);
		function r() {
			this.constructor = e;
		}
		t(e, n),
			(e.prototype =
				null === n ? Object.create(n) : ((r.prototype = n.prototype), new r()));
	}
	var r = function() {
		return (r =
			Object.assign ||
			function(e) {
				for (var t, n = 1, r = arguments.length; n < r; n++)
					for (var o in (t = arguments[n]))
						Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
				return e;
			}).apply(this, arguments);
	};
	function o(e, t) {
		var n = {};
		for (var r in e)
			Object.prototype.hasOwnProperty.call(e, r) &&
				t.indexOf(r) < 0 &&
				(n[r] = e[r]);
		if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
			var o = 0;
			for (r = Object.getOwnPropertySymbols(e); o < r.length; o++)
				t.indexOf(r[o]) < 0 &&
					Object.prototype.propertyIsEnumerable.call(e, r[o]) &&
					(n[r[o]] = e[r[o]]);
		}
		return n;
	}
	function i(e, t) {
		for (
			var n = 0, r = t.length, o = e.length;
			n < r;
			n++, o++
		)
			e[o] = t[n];
		return e;
	}
	var a = "default",
		s = "5.11.5";
	function l(e) {
		return (
			e instanceof Element || "string" == typeof e || "number" == typeof e
		);
	}
	function u(e) {
		return e;
	}
	var c = {}.hasOwnProperty;
	function d(e, t) {
		return null != e && c.call(e, t);
	}
	function p(e) {
		var t = [];
		for (var n in e) t.push(e[n]);
		return t;
	}
	function f(e, t) {
		return v(e, null, t);
	}
	function h(e, t) {
		return v(e, t, null);
	}
	function v(e, t, n) {
		for (var r = Object.create(e || null), o = 0, i = [t, n]; o < 2; o++) {
			var a = i[o];
			if (a) for (var s in a) r[s] = a[s];
		}
		return r;
	}
	function g(e, t, n) {
		if ((void 0 === n && (n = {}), e === t)) return !0;
		if (e && t && e.constructor === t.constructor) {
			if (Array.isArray(e)) {
				if (e.length !== t.length) return !1;
				for (var o = 0; o < e.length; o++) if (!g(e[o], t[o], n)) return !1;
				return !0;
			}
			if (
				"object" == typeof e &&
				(n.marker ||
					((n.marker = Math.random()), (e[n.marker] = t[n.marker] = !0)),
					e[n.marker] !== t[n.marker])
			)
				return !1;
			for (var i in e)
				if (d(e, i) && !d(t, i)) {
					if (n.marker) {
						delete e[n.marker];
						delete t[n.marker];
					}
					return !1;
				}
			for (var i in t)
				if (d(t, i) && !d(e, i)) {
					if (n.marker) {
						delete e[n.marker];
						delete t[n.marker];
					}
					return !1;
				}
			for (var i in e) if (d(e, i) && !g(e[i], t[i], n)) return !1;
			if (n.marker) {
				delete e[n.marker];
				delete t[n.marker];
			}
			return !0;
		}
		return !1;
	}
	var m = {
		week: 3,
		separator: 0,
		omitZeroMinute: 0,
		meridiem: 0,
		omitCommas: 0,
	};
	function y(e, t) {
		return e.meridiem === t.meridiem && e.hour === t.hour && e.minute === t.minute
			? 1
			: 0;
	}
	function E(e, t) {
		var n = [];
		if (e) for (var r = 0; r < e.length; r++) n.push(t(e[r], r));
		return n;
	}
	function S(e, t) {
		var n = [];
		if (e) for (var r = 0; r < e.length; r++) t(e[r], r) && n.push(e[r]);
		return n;
	}
	function D(e, t) {
		var n = {};
		if (e)
			for (var r = 0; r < e.length; r++) {
				var o = t(e[r], r);
				n[o[0]] = o[1];
			}
		return n;
	}
	function b(e) {
		return e ? !0 === e[0] : [!1];
	}
	function C(e, t) {
		var n = {};
		if (e)
			for (var r in e) {
				var o = t(e[r], r);
				o && (n[r] = o);
			}
		return n;
	}
	function w(e, t) {
		for (var n = 0, r = e; n < r.length; n++) {
			var o = r[n];
			if (o[t]) return o[t];
		}
		return null;
	}
	function R(e, t) {
		return T(e, t);
	}
	function T(e, t) {
		for (var n = 0, r = e.length; n < r; n += 1)
			if (e[n] === t) return e.splice(n, 1), !0;
		return !1;
	}
	function k(e, t) {
		for (var n = e.length, r = t.length, o = 0; o < r; o++) e[(n + o) % r] = t[o];
	}
	function M(e, t) {
		var n = e[t];
		return "function" == typeof n ? n : u;
	}
	function x(e) {
		return e.charAt(0).toUpperCase() + e.slice(1);
	}
	function _(e, t) {
		return (t ? String(t) : "") + e;
	}
	function I(e) {
		return e < 10 ? "0" + e : "" + e;
	}
	function P(e) {
		return e > 999 ? Math.floor(e / 1e3) + "k" : String(e);
	}
	function N(e) {
		return (e + "")
			.replace(/&/g, "&")
			.replace(/</g, "<")
			.replace(/>/g, ">")
			.replace(/'/g, "'")
			.replace(/"/g, """)
			.replace(/\n/g, "<br />"));
	}
	function H(e) {
		return e.replace(/</g, "<").replace(/>/g, ">").replace(/"/g, '"').replace(/'/g, "'").replace(/&/g, "&");
	}
	function O(e) {
		return e.replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi, "");
	}
	function A(e) {
		for (
			var t = [],
			n = "string" == typeof e ? e.split(/\s*,\s*/) : e,
			r = 0,
			o = n;
			r < o.length;
			r++
		) {
			var i = o[r];
			"string" == typeof i ? (t = t.concat(i.split(/\s+/))) : t.push(i);
		}
		return t;
	}
	function U(e) {
		var t;
		return (t =
			"string" == typeof e
				? e.split(/\s*,\s*/)
				: e),
			S(t, function(e) {
				return e;
			});
	}
	function L(e) {
		return Array.isArray(e) ? e : [e];
	}
	function B(e, t, n) {
		for (var r = 0, o = e.length; r < o; r += 1) if (t.call(n, e[r], r, e)) return e[r];
	}
	function V(e, t, n, r) {
		for (var o = 0, i = e.length; o < i; o += 1)
			if (n !== (t ? e[o][t] : e[o])) {
				e.splice(o, r || 0, n);
				break;
			}
	}
	function F(e, t) {
		for (
			var n = 0,
			r = Math.min(e.length, t.length);
			n < r && e[n] === t[n];

		)
			n += 1;
		return n;
	}
	function z(e, t, n) {
		if (t) {
			var r = e.indexOf(t);
			if (r === n) return !0;
			if (n > r) return e.slice(r + 1, n + 1).every(G);
		}
		return !1;
	}
	function G(e) {
		return !e.tagName;
	}
	function j(e) {
		return Array.prototype.slice.call(e);
	}
	function q(e) {
		return Array.isArray(e) ? e : j(e);
	}
	function W(e, t) {
		var n = e.indexOf(t);
		return n > -1 && e.splice(n, 1), e;
	}
	function Y(e) {
		var t = document.createElement("div");
		return (
			(t.innerHTML = e.trim()),
			1 === t.childNodes.length ? t.childNodes[0] : t
		);
	}
	function Z(e, t, n, r) {
		for (var o = 0, i = e; o < i.length; o++) {
			var a = i[o];
			if (a.structure) return Z(a.children, t, n, r);
			r = n(a, t || r);
		}
		return r;
	}
	var K,
		X = 0;
	function J() {
		return String((X += 1));
	}
	function $() {
		document.body.classList.add("fc-not-allowed");
	}
	function Q() {
		document.body.classList.remove("fc-not-allowed");
	}
	function ee(e) {
		e.preventDefault();
	}
	function te(e) {
		return "function" == typeof e ? e() : e;
	}
	function ne(e) {
		return e.join("");
	}
	function re(e) {
		var t = Array.isArray(e[0]) ? e[0] : e;
		return (
			"object" == typeof t[0] && null !== t[0]
				? t.map(function(e) {
					return String(e.id);
				})
				: t
		).join(",");
	}
	function oe(e, t) {
		return (
			(e && t && e.getTime() === t.getTime()) || (!e && !t)
		);
	}
	function ie(e, t) {
		return (
			e && t && e.getFullYear() === t.getFullYear() && e.getMonth() === t.getMonth() && e.getDate() === t.getDate()
		);
	}
	var ae = ["years", "months", "days", "milliseconds"],
		se = /^(?:(\d+)\.)?(\d+):(\d+):(\d+)(?:\.(\d+))?$/;
	function le(e) {
		var t = typeof e;
		return "string" === t
			? se.test(e)
				? {
					years: 0,
					months: 0,
					days: parseInt(RegExp.$1, 10) || 0,
					milliseconds:
						(60 * (60 * (1e3 * (parseInt(RegExp.$2, 10) || 0)) + 1e3 * (parseInt(RegExp.$3, 10) || 0)) + 1e3 * (parseInt(RegExp.$4, 10) || 0) + (parseInt(RegExp.$5, 10) || 0)),
				}
				: null
			: "object" === t && e
				? {
					years: e.years || e.year || 0,
					months: e.months || e.month || 0,
					days: e.days || e.day || 0,
					milliseconds:
						60 *
						(60 * (1e3 * (e.hours || e.hour || 0)) +
							1e3 * (e.minutes || e.minute || 0)) +
						1e3 * (e.seconds || e.second || 0) +
						(e.milliseconds || e.millisecond || e.ms || 0),
				}
				: "number" === t
					? { years: 0, months: 0, days: 0, milliseconds: e }
					: null;
	}
	function ue(e) {
		return {
			years: e.years || 0,
			months: e.months || 0,
			days: e.days || 0,
			milliseconds: e.milliseconds || 0,
		};
	}
	function ce(e) {
		return (
			e.years ||
			e.months ||
			e.days ||
			e.milliseconds
		);
	}
	function de(e) {
		return (
			(36e5 * (e.days * 24) +
				36e5 * e.hours +
				6e4 * e.minutes +
				1e3 * e.seconds +
				e.milliseconds)
		);
	}
	function pe(e, t) {
		return {
			years: e.years + t.years,
			months: e.months + t.months,
			days: e.days + t.days,
			milliseconds: e.milliseconds + t.milliseconds,
		};
	}
	function fe(e, t) {
		return {
			years: e.years - t.years,
			months: e.months - t.months,
			days: e.days - t.days,
			milliseconds: e.milliseconds - t.milliseconds,
		};
	}
	function he(e, t) {
		return {
			years: e.years * t,
			months: e.months * t,
			days: e.days * t,
			milliseconds: e.milliseconds * t,
		};
	}
	function ve(e) {
		var t =
			e.milliseconds > 0
				? (e.milliseconds % 1e3 == 0) ? "second-strict"
					: "millisecond"
				: e.days
					? "day"
					: e.months
						? "month"
						: "year";
		return t ? me(t) : null;
	}
	function ge(e) {
		return JSON.stringify(e);
	}
	function me(e) {
		switch (e) {
			case "year":
				return 1;
			case "month":
				return 2;
			case "day":
				return 3;
			case "hour":
				return 4;
			case "minute":
				return 5;
			case "second":
				return 6;
			default:
				return null;
		}
	}
	function ye(e) {
		return e / 1e3;
	}
	function Ee(e) {
		return e / 6e4;
	}
	function Se(e) {
		return e / 36e5;
	}
	function De(e) {
		return e / 864e5;
	}
	function be(e) {
		return e / 6048e5;
	}
	function Ce(e) {
		return De(e) / 365;
	}
	function we(e, t) {
		return e.getUTCFullYear() === t.getUTCFullYear() && e.getUTCMonth() === t.getUTCMonth() && e.getUTCDate() === t.getUTCDate();
	}
	function Re(e, t) {
		return (
			e.getUTCFullYear() === t.getUTCFullYear() &&
			e.getUTCMonth() === t.getUTCMonth() &&
			e.getUTCDate() === t.getUTCDate() &&
			e.getUTCHours() === t.getUTCHours() &&
			e.getUTCMinutes() === t.getUTCMinutes()
		);
	}
	function Te(e) {
		return new Date(
			e.getUTCFullYear(),
			e.getUTCMonth(),
			e.getUTCDate(),
			e.getUTCHours(),
			e.getUTCMinutes(),
			e.getUTCSeconds(),
			e.getUTCMilliseconds()
		);
	}
	function ke(e, t) {
		return (
			(n = e),
			new Date(
				Date.UTC(
					n.getUTCFullYear(),
					n.getUTCMonth(),
					n.getUTCDate() + t
				)
			)
		);
		var n;
	}
	function Me(e, t) {
		return xe(e, t, 1);
	}
	function xe(e, t, n) {
		var r = e.getUTCFullYear(),
			o = _e(e, r, t * n);
		return o.setUTCDate(1), o;
	}
	function _e(e, t, n) {
		var r = e.getUTCMonth();
		return (
			(r += n),
			new Date(Date.UTC(t, r, 1))
		);
	}
	function Ie(e) {
		return e.getUTCDay();
	}
	var Pe = [
		"sun",
		"mon",
		"tue",
		"wed",
		"thu",
		"fri",
		"sat",
	];
	function Ne(e) {
		return Pe[e];
	}
	var He = 864e5;
	function Oe(e, t) {
		var n = new Date(e.valueOf() - t.valueOf());
		return Math.round(n.valueOf() / He);
	}
	function Ae(e, t) {
		return (e.valueOf() - t.valueOf()) / He;
	}
	function Ue(e, t) {
		var n = Le(e),
			r = Le(t);
		return {
			years: 0,
			months: 0,
			days: Math.round(De(n.valueOf() - r.valueOf())),
			milliseconds: n.valueOf() - r.valueOf(),
		};
	}
	function Le(e) {
		return new Date(e.valueOf() - Be(e));
	}
	function Be(e) {
		return (
			36e5 * e.getUTCHours() +
			6e4 * e.getUTCMinutes() +
			1e3 * e.getUTCSeconds() +
			e.getUTCMilliseconds()
		);
	}
	function Ve(e, t) {
		if (e.getUTCFullYear() === t.getUTCFullYear()) {
			var n = e.getUTCMonth(),
				r = t.getUTCMonth();
			if (n === r) return e.getUTCDate() - t.getUTCDate();
			var o = new Date(Date.UTC(e.getUTCFullYear(), n)),
				i = new Date(Date.UTC(e.getUTCFullYear(), r));
			return Math.round(De(o.valueOf() - i.valueOf()));
		}
		return null;
	}
	function Fe(e) {
		var t = e.getUTCFullYear();
		return new Date(Date.UTC(t + 1, 0, 1)).valueOf() -
			new Date(Date.UTC(t, 0, 1)).valueOf() >
			365 * He;
	}
	var ze,
		Ge = ["years", "months", "days", "milliseconds"],
		je = /^(-?)(?:(\d+)\.)?(\d+):(\d+):(\d+)(?:\.(\d+))?$/;
	function qe(e) {
		var t = typeof e;
		return "string" === t
			? je.test(e)
				? {
					years: 0,
					months: 0,
					days: parseInt(RegExp.$2, 10) || 0,
					milliseconds:
						(60 *
							(60 * (1e3 * (parseInt(RegExp.$3, 10) || 0)) +
								1e3 * (parseInt(RegExp.$4, 10) || 0)) +
							1e3 * (parseInt(RegExp.$5, 10) || 0) +
							(parseInt(RegExp.$6, 10) || 0)) *
						("-" === RegExp.$1 ? -1 : 1),
				}
				: null
			: "object" === t && e
				? {
					years: e.years || e.year || 0,
					months: e.months || e.month || 0,
					days: e.days || e.day || 0,
					milliseconds:
						60 *
						(60 * (1e3 * (e.hours || e.hour || 0)) +
							1e3 * (e.minutes || e.minute || 0)) +
						1e3 * (e.seconds || e.second || 0) +
						(e.milliseconds || e.millisecond || e.ms || 0),
				}
				: "number" === t
					? { years: 0, months: 0, days: 0, milliseconds: e }
					: null;
	}
	function We(e) {
		return JSON.stringify(e);
	}
	function Ye(e, t) {
		return e.years === t.years && e.months === t.months && e.days === t.days && e.milliseconds === t.milliseconds;
	}
	function Ze(e) {
		var t = [];
		return (
			e.years && t.push(e.years + "Y"),
			e.months && t.push(e.months + "M"),
			e.days && t.push(e.days + "D"),
			e.milliseconds &&
			t.push(
				"T" +
				(function(e) {
					var t = Math.floor(e / 36e5),
						n = Math.floor((e % 36e5) / 6e4),
						r = Math.floor((e % 6e4) / 1e3),
						o = e % 1e3;
					return (
						(t > 0 ? t + "H" : "") +
						(n > 0 ? n + "M" : "") +
						(r > 0 || o > 0 ? (r + (o ? "." + I(o) : "")) + "S" : "")
					);
				})(e.milliseconds)
			),
			"P" + t.join("")
		);
	}
	function Ke(e) {
		var t = document.createElement("a");
		return (t.href = e), t;
	}
	function Xe(e, t) {
		if (e.closest) return e.closest(t);
		if (!document.documentElement.contains(e)) return null;
		do {
			if (Je(e, t)) return e;
			e = e.parentElement || e.parentNode;
		} while (null !== e && 1 === e.nodeType);
		return null;
	}
	function Je(e, t) {
		return (e.matches || e.matchesSelector || e.msMatchesSelector).call(e, t);
	}
	function $e(e, t) {
		for (
			var n = e instanceof HTMLElement ? [e] : e, r = [], o = 0;
			o < n.length;
			o += 1
		)
			for (
				var i = n[o].querySelectorAll(t), a = 0;
				a < i.length;
				a += 1
			)
				r.push(i[a]);
		return r;
	}
	(ze = {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
	}),
		["webkit", "moz", "ms", "o"].forEach(function(e) {
			(ze.webkitRequestFullScreen = e + "RequestFullScreen"),
				(ze.webkitExitFullscreen = e + "ExitFullscreen"),
				(ze.fullscreenElement = e + "FullscreenElement"),
				(ze.fullscreenchange = e + "fullscreenchange");
		});
	var Qe = "fullscreenElement";
	function et(e, t, n) {
		e.addEventListener(
			t,
			n.listener,
			n.options
		);
	}
	function tt(e, t, n) {
		e.removeEventListener(
			t,
			n.listener,
			n.options
		);
	}
	function nt(e, t, n) {
		var r =
			"object" == typeof n
				? r
				: { capture: n };
		return {
			listener: function(n) {
				if (!e.el || ("_fcUserEvent" in n && "touchend" === n.type && n._fcUserEvent.isTouch))
					t.call(e, n);
			},
			options: r,
		};
	}
	var rt =
		"undefined" != typeof window && window.getComputedStyle
			? window.getComputedStyle
			: null,
		ot = 1;
	function it(e, t) {
		if (!rt) return !0;
		var n = rt(e);
		if (n && n.getPropertyValue) {
			for (var r = 0, o = t; r < o.length; r++) {
				var i = o[r],
					a = i.split(" ");
				if (
					a.some(function(e) {
						return n.getPropertyValue(e) !== a[0];
					})
				)
					return !1;
			}
			return !0;
		}
		return !1;
	}
	var at,
		st,
		lt = 0,
		ut =
			"undefined" != typeof window &&
			(null === (at = window.navigator) || void 0 === at ? void 0 : at.userAgent) ||
			"",
		ct =
			/Edge/.test(ut) ||
			/Trident.*rv[ :]*11\./.test(ut) ||
			/MSIE/.test(ut),
		dt =
			/Safari/.test(ut) &&
			!/Chrome/.test(ut),
		pt =
			"undefined" != typeof window &&
			(null === (st = window.chrome) || void 0 === st ? void 0 : st.runtime);
	function ft(e) {
		var t = document.createElement("div");
		t.style.position = "absolute";
		t.style.top = "-1000px";
		t.style.left = "0px";
		document.body.appendChild(t);
		var n = e(t),
			r = t.getBoundingClientRect().height;
		return t.parentNode.removeChild(t), n > r;
	}
	var ht =
		ft(function(e) {
			return (
				(e.innerHTML =
					"<div style='height:3px'><div style='height:2px'></div></div>"),
				2 !== e.getBoundingClientRect().height
			);
		}),
		vt =
			ct ||
			ft(function(e) {
				return (
					(e.innerHTML =
						"<table><tr><td></td></tr></table><div style='height:3px'></div>"),
					3 !== e.getBoundingClientRect().height
				);
			});
	var gt = "fc-liquid-hack",
		mt = [
			"fc-daygrid-event",
			"fc-daygrid-block-event",
			"fc-daygrid-dot-event",
		];
	function yt(e, t) {
		if ("auto" === t) {
			if (!vt) return;
			if (e.classList.contains(gt)) return;
			e.classList.add(gt),
				(function(e) {
					for (var t = 0, n = e ? e.getElementsByTagName("th") : []; t < n.length; t++) {
						var r = n[t];
						Et(r);
					}
				})(e),
				e.offsetHeight;
		} else {
			var n;
			(n = e),
				mt.forEach(function(e) {
					n.classList.remove(e);
				}),
				e.classList.remove(gt);
		}
	}
	var Et = ft;
	function St(e) {
		return e.trim().replace(/\u200e/g, "").replace(/\u200f/g, "");
	}
	function Dt(e, t) {
		var n = {},
			r = {},
			o = {},
			i = {},
			a = {},
			s = bt(e.defs);
		for (var l in e.defs) {
			var u = e.defs[l];
			"event" === u.type
				? (n[l] = u)
				: "event-source" === u.type
					? (r[l] = u)
					: "event-ui" === u.type && (i[l] = u);
		}
		for (var l in e.instances) {
			var u = e.instances[l],
				c = s[u.defId];
			u.range && (o[l] = u),
				"event" === c.type
					? (a[l] = u)
					: "event-ui" === c.type &&
					(i[c.defId] = h(i[c.defId], u.ui));
		}
		for (var l in t)
			for (var d in t[l]) {
				var p = t[l][d];
				"event" === (s[p.defId] || {}).type &&
					o[d] &&
					(r[(s[p.defId] || {}).sourceId] || {}).backgroundColor &&
					(p.ui.backgroundColor =
						r[(s[p.defId] || {}).sourceId].backgroundColor);
			}
		return {
			eventDefs: n,
			eventInstances: o,
			eventUiBases: i,
			eventStore: { defs: n, instances: a },
			eventSources: r,
			eventUis: Ct(n, i, t),
			selection: Rt(o, t),
			businessHours: Tt(e, s),
			dateSelection: kt(e.dateSelection),
			eventSelection: Mt(e.eventSelection),
			eventDrag: xt(e.eventDrag),
			eventResize: _t(e.eventResize),
		};
	}
	function bt(e) {
		var t = {};
		for (var n in e) t[n] = e[n];
		return t;
	}
	function Ct(e, t, n) {
		var o = {};
		for (var i in e) {
			var a = wt(i, t, n);
			a.hasUrl && (o[i] = a);
		}
		return o;
	}
	function wt(e, t, n) {
		var o = {},
			i = t[e] || {},
			a = (n[e] || {}).ui;
		return (
			i.display && (o.display = i.display),
			i.classNames && (o.classNames = i.classNames),
			i.backgroundColor && (o.backgroundColor = i.backgroundColor),
			i.borderColor && (o.borderColor = i.borderColor),
			i.textColor && (o.textColor = i.textColor),
			i.extendedProps && (o.extendedProps = i.extendedProps),
			a &&
			a.startEditable &&
			(o.startEditable = a.startEditable),
			a && a.durationEditable && (o.durationEditable = a.durationEditable),
			a && a.constraints && (o.constraints = a.constraints),
			a && a.overlap && (o.overlap = a.overlap),
			a && a.allows && (o.allows = a.allows),
			a && a.backgroundColor && (o.backgroundColor = a.backgroundColor),
			a && a.borderColor && (o.borderColor = a.borderColor),
			a && a.textColor && (o.textColor = a.textColor),
			a && a.classNames && (o.classNames = a.classNames),
			i.url ||
			(o.hasUrl =
				(a && a.url) ||
				r(r({}, o), i).url),
			o
		);
	}
	function Rt(e, t) {
		for (var n in e) if (t[n] && t[n].ui.selected) return n;
		return "";
	}
	function Tt(e, t) {
		var n = e.businessHours,
			o = { defs: {}, instances: {} };
		if (n)
			for (var i in ((n = r(r({}, n), e.businessHours)), n.defs)) {
				var a = n.defs[i];
				t[a.defId] ||
					("businessHours" === a.type
						? (o.defs[i] = a)
						: t[a.defId] &&
						(r[t[a.defId].sourceId] || {}).forceEventColor &&
						(o.defs[i] = a));
			}
		for (var i in n.instances) {
			var s = n.instances[i];
			o.defs[s.defId] && (o.instances[i] = s);
		}
		return o;
	}
	function kt(e) {
		if (e) {
			var t = e.range,
				n = e.allDay,
				o = {};
			return (
				null == n || !1 === n || (o.allDay = n),
				{ range: t, allDay: "allDay" in o }
			);
		}
		return null;
	}
	function Mt(e) {
		return e || null;
	}
	function xt(e) {
		if (e) {
			var t = e.mutatedEvents,
				n = t.defs,
				o = t.instances,
				i = e.isEvent,
				a = e.origPublicEvent;
			return {
				affectedEvents: { defs: n, instances: o },
				mutatedEvents: { defs: n, instances: o },
				isEvent: i,
				origPublicEvent: a,
			};
		}
		return null;
	}
	function _t(e) {
		if (e) {
			var t = e.mutatedEvents,
				n = t.defs,
				o = t.instances,
				i = e.isEvent,
				a = e.origPublicEvent;
			return {
				affectedEvents: e.affectedEvents,
				mutatedEvents: { defs: n, instances: o },
				isEvent: i,
				origPublicEvent: a,
			};
		}
		return null;
	}
	function It(e, t) {
		return { type: "SET_DATE", dateMarker: e, oldDateMarker: t };
	}
	function Pt(e, t) {
		var n =
			e && e.type === t.type && g(e.dateProfile, t.dateProfile),
			r =
				n ||
				(e &&
					e.type === t.type &&
					e.dateProfile);
		return r && delete e.dateProfile, n;
	}
	var Nt = Object.freeze({
		__proto__: null,
		CALENDAR_HEADER_TEXT_FORMATTER: {
			year: "numeric",
			month: "long",
			day: "numeric",
			weekday: "long",
		},
		CALENDAR_FOOTER_TEXT_FORMATTER: { year: "numeric", month: "long" },
		LIST_EVENT_TIME_FORMATTER: {
			hour: "numeric",
			minute: "2-digit",
			meridiem: "short",
		},
		LIST_EVENT_SHORT_TIME_FORMATTER: {
			hour: "numeric",
			minute: "2-digit",
			meridiem: !0,
		},
		LIST_DAY_TEXT_FORMATTER: { weekday: "long" },
		LIST_DAY_SIDE_TEXT_FORMATTER: {
			year: "numeric",
			month: "long",
			day: "numeric",
		},
		AGENDA_WEEK_TEXT_FORMATTER: { weekday: "long" },
		WEEK_TEXT_FORMATTER: { week: "short" },
		DAY_HEADER_TEXT_FORMATTER: { weekday: "long" },
		THUMBNAIL_TEXT_FORMATTER: { week: "narrow" },
		MONTH_DAY_TEXT_FORMATTER: { day: "numeric" },
		YEAR_MONTH_TEXT_FORMATTER: { month: "long" },
		DAY_TEXT_FORMATTER: { day: "numeric", month: "long" },
		DAY_TITLE_FORMATTER: { year: "numeric", month: "long", day: "numeric" },
		EVENT_TIME_FORMATTER: {
			hour: "numeric",
			minute: "2-digit",
			omitZeroMinute: !0,
			meridiem: "narrow",
		},
		EVENT_SHORT_TIME_FORMATTER: {
			hour: "numeric",
			minute: "2-digit",
			meridiem: "narrow",
		},
		WEEK_TIME_FORMATTER: {
			hour: "numeric",
			minute: "2-digit",
			meridiem: !1,
		},
		WEEK_SHORT_TIME_FORMATTER: {
			hour: "numeric",
			minute: "2-digit",
			meridiem: !1,
		},
		WEEK_DAY_FORMATTER: { weekday: "short", day: "numeric", omitCommas: !0 },
		WEEK_HEADER_FORMATTER: {
			day: "numeric",
			month: "long",
			year: "numeric",
			omitCommas: !0,
		},
		DAY_FORMATTER: { day: "numeric", month: "long", omitCommas: !0 },
		MONTH_FORMATTER: { month: "long", year: "numeric", omitCommas: !0 },
		YEAR_FORMATTER: { year: "numeric" },
		NO_TIME_TEXT: "All-day",
		NO_DATE_TEXT: "No date",
		MORE_LINK_TEXT: "more",
		CLOSE_TEXT: "Close",
		PREV_YEAR_TEXT: "Prev year",
		NEXT_YEAR_TEXT: "Next year",
		PREV_MONTH_TEXT: "Prev month",
		NEXT_MONTH_TEXT: "Next month",
		TODAY_TEXT: "Today",
		WEEK_TEXT: "Week",
		DAY_TEXT: "Day",
		MONTH_TEXT: "Month",
		YEAR_TEXT: "Year",
		LIST_TEXT: "List",
	}),
		Ht = {
			en: r({}, Nt),
			fr: {
				CALENDAR_HEADER_TEXT_FORMATTER: {
					year: "numeric",
					month: "long",
					day: "numeric",
					weekday: "long",
				},
				LIST_EVENT_TIME_FORMATTER: {
					hour: "numeric",
					minute: "2-digit",
					meridiem: !1,
				},
				LIST_EVENT_SHORT_TIME_FORMATTER: {
					hour: "numeric",
					minute: "2-digit",
					meridiem: !1,
				},
				NO_TIME_TEXT: "Toute la journée",
				MORE_LINK_TEXT: "plus",
				CLOSE_TEXT: "Fermer",
				PREV_YEAR_TEXT: "Année précédente",
				NEXT_YEAR_TEXT: "Année suivante",
				PREV_MONTH_TEXT: "Mois précédent",
				NEXT_MONTH_TEXT: "Mois suivant",
				TODAY_TEXT: "Aujourd'hui",
				WEEK_TEXT: "Semaine",
				DAY_TEXT: "Jour",
				MONTH_TEXT: "Mois",
				YEAR_TEXT: "Année",
				LIST_TEXT: "Liste",
			},
			de: {
				CALENDAR_HEADER_TEXT_FORMATTER: {
					year: "numeric",
					month: "long",
					day: "numeric",
					weekday: "long",
				},
				LIST_EVENT_TIME_FORMATTER: {
					hour: "numeric",
					minute: "2-digit",
					meridiem: !1,
				},
				LIST_EVENT_SHORT_TIME_FORMATTER: {
					hour: "numeric",
					minute: "2-digit",
					meridiem: !1,
				},
				NO_TIME_TEXT: "Ganztägig",
				MORE_LINK_TEXT: "mehr",
				CLOSE_TEXT: "Schließen",
				PREV_YEAR_TEXT: "Vorheriges Jahr",
				NEXT_YEAR_TEXT: "Nächstes Jahr",
				PREV_MONTH_TEXT: "Vorheriger Monat",
				NEXT_MONTH_TEXT: "Nächster Monat",
				TODAY_TEXT: "Heute",
				WEEK_TEXT: "Woche",
				DAY_TEXT: "Tag",
				MONTH_TEXT: "Monat",
				YEAR_TEXT: "Jahr",
				LIST_TEXT: "Liste",
			},
		};
	function Ot(e) {
		"undefined" == typeof FullCalendarVDom
			? console.error(e)
			: FullCalendarVDom.flushToDom();
	}
	var At,
		Ut,
		Lt,
		Bt,
		Vt,
		Ft,
		zt =
			(n(Gt, (Ut = Mn)),
				(Gt.prototype.remove = function() {
					this.context.dispatch({ type: "REMOVE_EVENT_SOURCE", sourceId: this.internalEventSource.sourceId }),
						this.internalEventSource.remove();
				}),
				(Gt.prototype.refetch = function() {
					this.context.dispatch({ type: "FETCH_EVENT_SOURCES", sourceIds: [this.internalEventSource.sourceId], isRefetch: !0 });
				}),
				Object.defineProperty(Gt.prototype, "id", {
					get: function() {
						return this.internalEventSource.publicId;
					},
					enumerable: !1,
					configurable: !0,
				}),
				Object.defineProperty(Gt.prototype, "url", {
					get: function() {
						return this.internalEventSource.meta.url;
					},
					enumerable: !1,
					configurable: !0,
				}),
				Object.defineProperty(Gt.prototype, "format", {
					get: function() {
						return this.internalEventSource.meta.format;
					},
					enumerable: !1,
					configurable: !0,
				}),
				Gt);
	function Gt(e, t) {
		var n = Ut.call(this, e) || this;
		return (n.internalEventSource = t), n;
	}
	var jt =
		(n(qt, (Lt = Mn)),
			(qt.prototype.setProp = function(e, t) {
				this.context.dispatch({
					type: "SET_EVENT_PROP",
					eventId: this.internalEvent.publicId,
					propName: e,
					propValue: t,
				});
			}),
			(qt.prototype.setExtendedProp = function(e, t) {
				this.context.dispatch({
					type: "SET_EVENT_EXTENDED_PROP",
					eventId: this.internalEvent.publicId,
					fieldName: e,
					fieldValue: t,
				});
			}),
			(qt.prototype.setStart = function(e, t) {
				void 0 === t && (t = {});
				var n = this.context.dateEnv.createMarker(e);
				n &&
					this.context.dispatch({
						type: "MOVE_EVENT_INSTANCES",
						eventId: this.internalEvent.publicId,
						newDate: n,
						instanceId: this.internalEvent.instanceId,
						allDay: this.allDay,
						maintainDuration: t.maintainDuration,
					});
			}),
			(qt.prototype.setEnd = function(e, t) {
				void 0 === t && (t = {});
				var n = null;
				e && (n = this.context.dateEnv.createMarker(e)),
					n &&
					this.context.dispatch({
						type: "SET_EVENT_END",
						eventId: this.internalEvent.publicId,
						endDate: n,
					});
			}),
			(qt.prototype.setDates = function(e, t, n) {
				void 0 === n && (n = {});
				var r = this.context.dateEnv.createMarker(e);
				if (r) {
					var o = null;
					t && (o = this.context.dateEnv.createMarker(t));
					var i = this.allDay;
					"allDay" in n && (i = n.allDay);
					var a = this.internalEvent.instanceId;
					this.context.dispatch({
						type: "MOVE_EVENT_INSTANCES",
						eventId: this.internalEvent.publicId,
						newDate: r,
						instanceId: a,
						endDate: o,
						allDay: i,
						maintainDuration: n.maintainDuration,
					});
				}
			}),
			(qt.prototype.moveStart = function(e) {
				var t = le(e);
				t && this.setStart(pe(this.start, t));
			}),
			(qt.prototype.moveEnd = function(e) {
				var t = le(e);
				t && this.end && this.setEnd(pe(this.end, t));
			}),
			(qt.prototype.moveDates = function(e) {
				var t = le(e);
				t &&
					(this.setDates(pe(this.start, t), this.end ? pe(this.end, t) : null, {
						allDay: this.allDay,
					}),
						(this.internalEvent.instanceId =
							this.internalEvent.instanceId));
			}),
			(qt.prototype.setAllDay = function(e, t) {
				void 0 === t && (t = {});
				var n = this.context.dispatch({
					type: "CHANGE_EVENT_ALL_DAY",
					eventId: this.internalEvent.publicId,
					allDay: e,
					instanceId: this.internalEvent.instanceId,
					maintainDuration: t.maintainDuration,
				});
				return n;
			}),
			(qt.prototype.formatRange = function(e) {
				var t = this.context,
					n = t.dateEnv,
					r = t.options;
				return n.formatRange(this.start, this.end, e, {
					forcedStartTzo: this.startTzo,
					forcedEndTzo: this.endTzo,
					isEndExclusive: this.endExclusive,
					defaultSeparator: r.eventRangeSeparator,
				});
			}),
			(qt.prototype.remove = function() {
				this.context.dispatch({
					type: "REMOVE_EVENT_INSTANCES",
					eventId: this.internalEvent.publicId,
					instanceId: this.internalEvent.instanceId,
				});
			}),
			(qt.prototype.toPlainObject = function(e) {
				void 0 === e && (e = {});
				var t = _n(this.internalEvent, this.context.dateEnv, e.collapseExtendedProps, e.collapseColor),
					n = this.context.options.eventDataTransform;
				return n ? n(t) : t;
			}),
			(qt.prototype.toJSON = function() {
				return this.toPlainObject();
			}),
			Object.defineProperty(qt.prototype, "source", {
				get: function() {
					var e = this.internalEvent.sourceId;
					return e
						? new zt(
							this.context,
							this.context.getCurrentData().eventSources[e]
						)
						: null;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "start", {
				get: function() {
					return this.context.dateEnv.toDate(this.internalEvent.range.start);
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "end", {
				get: function() {
					var e = this.internalEvent.range.end;
					return e ? this.context.dateEnv.toDate(e) : null;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "startStr", {
				get: function() {
					return this.context.dateEnv.formatIso(this.internalEvent.range.start, {
						omitTime: this.allDay,
						forcedTzo: this.startTzo,
					});
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "endStr", {
				get: function() {
					var e = this.internalEvent.range.end;
					return e
						? this.context.dateEnv.formatIso(e, {
							omitTime: this.allDay,
							forcedTzo: this.endTzo,
						})
						: "";
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "id", {
				get: function() {
					return this.internalEvent.publicId;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "groupId", {
				get: function() {
					return this.internalEvent.groupId;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "allDay", {
				get: function() {
					return this.internalEvent.allDay;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "title", {
				get: function() {
					return this.internalEvent.title;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "url", {
				get: function() {
					return this.internalEvent.url;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "display", {
				get: function() {
					return this.internalEvent.ui.display || "auto";
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "startEditable", {
				get: function() {
					return this.internalEvent.ui.startEditable;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "durationEditable", {
				get: function() {
					return this.internalEvent.ui.durationEditable;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "constraint", {
				get: function() {
					return this.internalEvent.ui.constraints[0] || null;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "overlap", {
				get: function() {
					return this.internalEvent.ui.overlap;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "allow", {
				get: function() {
					return this.internalEvent.ui.allows[0] || null;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "backgroundColor", {
				get: function() {
					return this.internalEvent.ui.backgroundColor;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "borderColor", {
				get: function() {
					return this.internalEvent.ui.borderColor;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "textColor", {
				get: function() {
					return this.internalEvent.ui.textColor;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "classNames", {
				get: function() {
					return this.internalEvent.ui.classNames;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(qt.prototype, "extendedProps", {
				get: function() {
					return this.internalEvent.extendedProps;
				},
				enumerable: !1,
				configurable: !0,
			}),
			qt);
	function qt(e, t) {
		var n = Lt.call(this, e) || this;
		return (
			(n.internalEvent = t),
			(n.startTzo =
				e.options.timeZone === t.range.start.timeZone
					? null
					: t.range.start.timeZone),
			(n.endTzo =
				e.options.timeZone === t.range.end.timeZone
					? null
					: t.range.end.timeZone),
			(n.endExclusive = e.options.displayEventEnd),
			n
		);
	}
	var Wt,
		Yt = {
			id: String,
			groupId: String,
			title: String,
			url: String,
			display: String,
			classNames: A,
			extendedProps: u,
		},
		Zt = {
			startEditable: Boolean,
			durationEditable: Boolean,
			constraints: u,
			overlap: u,
			allows: u,
			backgroundColor: String,
			borderColor: String,
			textColor: String,
			classNames: A,
		},
		Kt = {
			id: String,
			start: null,
			end: null,
			date: null,
			allDay: null,
		},
		Xt = r(r(r({}, Yt), Zt), Kt);
	function Jt(e, t) {
		var n = {};
		for (var r in t) {
			var o = t[r],
				i = e[r];
			n[r] =
				null == i
					? o
					: Array.isArray(i)
						? i
						: "object" == typeof i && "object" == typeof o && i && o
							? h(i, o)
							: i;
		}
		return n;
	}
	var $t,
		Qt =
			(n(en, (Bt = Mn)),
				(en.prototype.setOption = function(e, t) {
					this.context.setOption(e, t);
				}),
				(en.prototype.getOption = function(e) {
					return this.context.getOption(e);
				}),
				(en.prototype.getAvailableLocaleCodes = function() {
					return Object.keys(Ht);
				}),
				(en.prototype.on = function(e, t) {
					var n = this.context.emitter;
					n.on(e, t);
				}),
				(en.prototype.off = function(e, t) {
					var n = this.context.emitter;
					n.off(e, t);
				}),
				(en.prototype.trigger = function(e) {
					for (
						var t, n = [], r = 1;
						r < arguments.length;
						r++
					)
						n[r - 1] = arguments[r];
					var o = this.context.emitter;
					return (t = o.trigger).call.apply(t, i([o, e], n));
				}),
				(en.prototype.changeView = function(e, t) {
					var n = this;
					this.batchRendering(function() {
						if ((n.unselect(), t))
							if (t.date)
								n.context.dispatch({ type: "CHANGE_DATE", dateMarker: t.date });
						n.context.dispatch({ type: "CHANGE_VIEW_TYPE", viewType: e });
					});
				}),
				(en.prototype.zoomTo = function(e, t) {
					var n;
					t = t || this.getCurrentData().viewApi.type;
					var r = this.getCurrentData().dateProfileGenerator.build(e, void 0, !0);
					(n = r.isValid ? { date: e, viewType: t } : { viewType: t }),
						this.context.dispatch(n);
				}),
				(en.prototype.batchRendering = function(e) {
					this.context.batchRendering(e);
				}),
				(en.prototype.updateSize = function() {
					this.context.updateSize();
				}),
				(en.prototype.setDates = function(e, t, n) {
					this.context.dateEnv.createMarker(e) &&
						this.context.dispatch({
							type: "CHANGE_DATE",
							dateMarker: e,
							endDate: t,
						});
				}),
				(en.prototype.prev = function() {
					this.context.dispatch({ type: "PREV" });
				}),
				(en.prototype.next = function() {
					this.context.dispatch({ type: "NEXT" });
				}),
				(en.prototype.prevYear = function() {
					this.context.dateProfileGenerator.move(
						this.getCurrentData().dateProfile,
						{ years: -1 }
					);
					var e = this.getCurrentData().currentDate;
					this.context.dispatch({
						type: "CHANGE_DATE",
						dateMarker: this.context.dateEnv.addYears(e, -1),
					});
				}),
				(en.prototype.nextYear = function() {
					this.context.dateProfileGenerator.move(
						this.getCurrentData().dateProfile,
						{ years: 1 }
					);
					var e = this.getCurrentData().currentDate;
					this.context.dispatch({
						type: "CHANGE_DATE",
						dateMarker: this.context.dateEnv.addYears(e, 1),
					});
				}),
				(en.prototype.today = function() {
					this.context.dispatch({ type: "CHANGE_DATE", dateMarker: new Date() });
				}),
				(en.prototype.gotoDate = function(e) {
					this.context.dispatch({ type: "CHANGE_DATE", dateMarker: e });
				}),
				(en.prototype.incrementDate = function(e) {
					var t = le(e);
					t &&
						this.context.dispatch({
							type: "CHANGE_DATE",
							dateMarker: this.context.dateEnv.add(
								this.getCurrentData().currentDate,
								t
							),
						});
				}),
				(en.prototype.getDate = function() {
					return this.context.dateEnv.toDate(
						this.getCurrentData().currentDate
					);
				}),
				(en.prototype.getEvents = function() {
					return rn(
						this.getCurrentData().eventStore,
						this.context
					);
				}),
				(en.prototype.getEventById = function(e) {
					var t = this.getCurrentData().eventStore;
					for (var n in t.defs) {
						var r = t.defs[n];
						if (r.publicId === e)
							for (var o in t.instances) {
								var i = t.instances[o];
								if (i.defId === r.defId)
									return new jt(this.context, {
										def: r,
										instance: i,
									});
							}
					}
					return null;
				}),
				(en.prototype.addEvent = function(e, t) {
					if (e instanceof jt) {
						console.warn("addEvent method doesn't accept an EventApi object. Use toPlainObject instead."),
							(e = e.toPlainObject());
					}
					var n = In(e, "object" == typeof t && t ? t.source : ""),
						r = n.refined,
						o = n.instance;
					return (
						this.context.dispatch({ type: "ADD_EVENTS", eventStore: { defs: { [r.defId]: r }, instances: { [o.instanceId]: o } } }),
						new jt(this.context, { def: r, instance: o })
					);
				}),
				(en.prototype.getEventSources = function() {
					var e = this.getCurrentData().eventSources,
						t = [];
					for (var n in e)
						t.push(new zt(this.context, e[n]));
					return t;
				}),
				(en.prototype.getEventSourceById = function(e) {
					var t = this.getCurrentData().eventSources;
					for (var n in t)
						if (t[n].publicId === e)
							return new zt(this.context, t[n]);
					return null;
				}),
				(en.prototype.addEventSource = function(e) {
					var t = Pn(e, this.context);
					return t
						? (this.context.dispatch({
							type: "ADD_EVENT_SOURCES",
							sources: [t],
						}),
							new zt(this.context, t))
						: null;
				}),
				(en.prototype.refetchEvents = function() {
					this.context.dispatch({ type: "FETCH_EVENT_SOURCES", isRefetch: !0 });
				}),
				(en.prototype.render = function() {
					this.context.render();
				}),
				(en.prototype.destroy = function() {
					this.context.destroy();
				}),
				(en.prototype.select = function(e, t) {
					var n =
						null == t
							? null == e.start
								? { start: e, end: null }
								: e
							: { start: e, end: t },
						o = this.context.dateEnv.createMarkerMeta(
							n.start
						),
						i = n.end
							? this.context.dateEnv.createMarkerMeta(n.end)
							: null,
						a = r(r({}, o), i);
					this.context.dispatch({
						type: "SELECT_DATES",
						selection: { range: a.range, allDay: a.allDay },
					});
				}),
				(en.prototype.unselect = function(e) {
					this.context.dispatch({ type: "UNSELECT_DATES" });
				}),
				Object.defineProperty(en.prototype, "view", {
					get: function() {
						return this.getCurrentData().viewApi;
					},
					enumerable: !1,
					configurable: !0,
				}),
				en);
	function en(e, t, n) {
		var r = Bt.call(this, e) || this;
		return (
			(r.getCurrentData = t),
			(r.dispatch = n),
			r
		);
	}
	var tn =
		(n(nn, (Vt = Mn)),
			(nn.prototype.format = function(e, t) {
				return this.context.dateEnv.format(e, t);
			}),
			(nn.prototype.formatRange = function(e, t, n) {
				return this.context.dateEnv.formatRange(e, t, n);
			}),
			(nn.prototype.formatIso = function(e, t) {
				return this.context.dateEnv.formatIso(e, t);
			}),
			(nn.prototype.toDate = function(e) {
				return this.context.dateEnv.toDate(e);
			}),
			(nn.prototype.startOf = function(e, t) {
				return this.context.dateEnv.startOf(e, t);
			}),
			(nn.prototype.add = function(e, t) {
				return this.context.dateEnv.add(e, t);
			}),
			nn);
	function nn() {
		return (null !== Vt && Vt.apply(this, arguments)) || this;
	}
	var rn = function(e, t) {
		var n = e.instances,
			r = [];
		for (var o in n) {
			var i = n[o],
				a = e.defs[i.defId];
			r.push(
				new jt(t, { def: a, instance: i })
			);
		}
		return r;
	},
		on =
			(n(an, ($t = Mn)),
				an);
	function an() {
		return (null !== $t && $t.apply(this, arguments)) || this;
	}
	var sn =
		(n(ln, (Ft = Mn)),
			Object.defineProperty(ln.prototype, "start", {
				get: function() {
					return this.dateProfile
						? this.context.dateEnv.toDate(this.dateProfile.activeRange.start)
						: null;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(ln.prototype, "end", {
				get: function() {
					return this.dateProfile
						? this.context.dateEnv.toDate(this.dateProfile.activeRange.end)
						: null;
				},
				enumerable: !1,
				configurable: !0,
			}),
			Object.defineProperty(ln.prototype, "title", {
				get: function() {
					return this.dateProfile
						? this.context.dateEnv.format(
							this.dateProfile.renderRange.start,
							this.dateProfile.renderRange.end,
							this.titleFormat,
							{ isEndExclusive: !0 }
						)
						: "";
				},
				enumerable: !1,
				configurable: !0,
			}),
			ln);
	function ln() {
		return (null !== Ft && Ft.apply(this, arguments)) || this;
	}
	function un(e, t) {
		return {
			id: J(),
			deps: e,
			reducers: t,
			contextInit: [],
		};
	}
	var cn,
		dn,
		pn,
		fn,
		hn = { defs: {}, instances: {} },
		vn =
			(null === (cn = e.FullCalendarVDom) || void 0 === cn ? void 0 : cn.Component) ||
			(function() {
				function e(e) {
					(this.context = e), (this.unrenderFuncs = []);
				}
				return (
					(e.prototype.destroy = function() {
						this.unrender();
					}),
					(e.prototype.unrender = function() {
						for (var e = 0, t = this.unrenderFuncs; e < t.length; e++) {
							(0, t[e])();
						}
						this.unrenderFuncs = [];
					}),
					(e.prototype.on = function(e, t) {
						this.context.emitter.on(e, t);
					}),
					(e.prototype.off = function(e, t) {
						this.context.emitter.off(e, t);
					}),
					(e.prototype.trigger = function(e) {
						for (var t, n, r = [], o = 1; o < arguments.length; o++) r[o - 1] = arguments[o];
						return (
							(n = (t = this.context.emitter).trigger).call.apply(
								n,
								i([t, e], r)
							)
						);
					}),
					e
				);
			})(),
		gn =
			((dn = vn),
				n(mn, dn),
				(mn.prototype.render = function(e) {
					this.props = e;
					var t = this.context,
						n = t.options,
						r = t.pluginHooks,
						o = n.content;
					"function" == typeof o &&
						(o = o(new on(this.context, e)));
					var i = (function(e, t) {
						if (e.classNames) return e.classNames;
						var n = [],
							r = t.viewSpec.classNames;
						"function" == typeof r && (r = r(t.viewApi));
						for (var o = 0, i = r; o < i.length; o++) {
							var a = i[o];
							n.push(a);
						}
						return n;
					})(e, this.context);
					this.el
						? this.el.classList.add.apply(this.el.classList, i)
						: (this.el = (function(e, t, n) {
							var r = document.createElement(t);
							return e && r.classList.add.apply(r.classList, e), n && (r.innerHTML = n), r;
						})(i, e.elTag || "div")),
						(function(e, t) {
							if ("function" == typeof t) e.appendChild(t);
							else if ("string" == typeof t)
								e.innerHTML = t;
							else if (t) {
								var n = t,
									r =
										n instanceof Element
											? [n]
											: Array.isArray(n)
												? n
												: j(n);
								r.forEach(function(t) {
									e.appendChild(t);
								});
							}
						})(this.el, o),
						(function(e, t) {
							for (
								var n = [], r = 0, o = t;
								r < o.length;
								r++
							) {
								var i = o[r](e);
								i && n.push(i);
							}
							return function() {
								for (
									var e = 0, t = n;
									e < t.length;
									e++
								) {
									t[e]();
								}
							};
						})(this.el, r.contentInjectionTransformers);
				}),
				(mn.prototype.destroy = function() {
					dn.prototype.destroy.call(this), this.el && (Et(this.el), (this.el = null));
				}),
				mn);
	function mn() {
		return (null !== dn && dn.apply(this, arguments)) || this;
	}
	var yn,
		En,
		Sn =
			((pn = vn),
				n(Dn, pn),
				(Dn.prototype.render = function(e) {
					this.props = e;
					var t = this.context,
						n = t.options;
					this.el ||
						(this.el = Y(
							"<div class='fc-view " +
							(e.extraClassNames || []).join(" ") +
							"'></div>"
						)),
						(this.el.style.display =
							e.isInDom && e.isVisible ? "" : "none"),
						(this.el.innerHTML =
							"<div class='fc-view-harness " +
							(e.isHarnessShort ? "fc-view-harness-active" : "fc-view-harness-passive") +
							"'></div>");
					var o = this.el.firstChild,
						i = n.content;
					"function" == typeof i &&
						(i = i(new on(this.context, e)));
					var a = (function(e, t, n) {
						var o = new gn(n, { elTag: "div", classNames: e.classNames });
						return o.render(t), o;
					})(e, i, this.context),
						s = a.el;
					o && s && o.appendChild(s), this.handleEl(s);
				}),
				(Dn.prototype.destroy = function() {
					this.content && this.content.destroy(),
						this.handleEl(null),
						pn.prototype.destroy.call(this);
				}),
				(Dn.prototype.handleEl = function(e) {
					this.el &&
						this.el !== e &&
						(Et(this.el),
							this.el && this.el.parentNode && this.el.parentNode.removeChild(this.el)),
						(this.el = e);
				}),
				Dn);
	function Dn() {
		return (null !== pn && pn.apply(this, arguments)) || this;
	}
	var bn,
		Cn =
			((fn = vn),
				n(wn, fn),
				(wn.prototype.render = function(e) {
					(this.props = e), this.renderComponent(e.render, e.extraClassNames);
				}),
				wn);
	function wn(e, t) {
		var n = fn.call(this, t) || this;
		return (
			(n.elRef = e),
			(n.renderComponent = function(e, t) {
				var n =
					"function" == typeof e
						? e(
							r(
								r(
									r(
										r(
											{
												view:
													(o =
														n.context.viewApi),
											},
											o
										),
										{
											hookProps:
												n.props,
											isSticky:
												n.props
													.isSticky,
										}
									),
									{
										allDay:
											n.props
												.allDay,
										date: n
											.props.date,
										dateProfile:
											n.props
												.dateProfile,
										todayRange:
											n.props
												.todayRange,
										showDayNumber:
											n.props
												.showDayNumber,
										dayNumberFormat:
											n.props
												.dayNumberFormat,
										extraRenderProps:
											n.props
												.extraRenderProps,
									}
								),
								{
									getters:
										function() {
											return {};
										},
									setters:
										function(e) {
											var t = e.el;
											n.elRef &&
												n.elRef(
													t
												);
										},
								}
							)
						)
						: e,
					o = n.context,
					i = o.options;
				"string" == typeof n && (n = { html: n });
				var a = n,
					s = a.html,
					l = a.rootElRef,
					u =
						(i.content ||
							function() {
								return Y(s);
							})(new on(o));
				if (
					((n.el = u),
						n.rootElRef && n.rootElRef(n.el),
						t && n.el.classList.add.apply(n.el.classList, t),
						n.elRef)
				)
					if ("function" == typeof n.elRef) n.elRef(n.el);
					else {
						var c = n.elRef.current;
						(c && 1 === c.nodeType) || (n.elRef.current = n.el);
					}
			}),
			n
		);
	}
	var Rn =
		((At = vn),
			n(Tn, At),
			(Tn.prototype.render = function(e) {
				(this.inner = this.renderInner(e)),
					this.inner.el &&
					this.inner.el.classList.add.apply(
						this.inner.el.classList,
						e.elClasses || []
					),
					this.inner.el &&
					e.elAttrs &&
					(function(e, t) {
						for (var n in t) e.setAttribute(n, String(t[n]));
					})(this.inner.el, e.elAttrs);
			}),
			(Tn.prototype.destroy = function() {
				this.inner && this.inner.destroy(), At.prototype.destroy.call(this);
			}),
			(Tn.prototype.renderInner = function(e) { }),
			(Tn.addEqualityFuncs = function(e) {
				this.prototype.equalityFuncs = e;
			}),
			Tn);
	function Tn() {
		return (null !== At && At.apply(this, arguments)) || this;
	}
	var kn = "event-render-hooks",
		Mn =
			(Object.defineProperty(xn.prototype, "calendar", {
				get: function() {
					return this.context.calendarApi;
				},
				enumerable: !1,
				configurable: !0,
			}),
				Object.defineProperty(xn.prototype, "view", {
					get: function() {
						return this.context.viewApi;
					},
					enumerable: !1,
					configurable: !0,
				}),
				Object.defineProperty(xn.prototype, "options", {
					get: function() {
						return this.context.options;
					},
					enumerable: !1,
					configurable: !0,
				}),
				Object.defineProperty(xn.prototype, "dateEnv", {
					get: function() {
						return this.context.dateEnv;
					},
					enumerable: !1,
					configurable: !0,
				}),
				xn);
	function xn(e) {
		this.context = e;
	}
	var _n = function(e, t, n, o) {
		var i = e.def,
			a = e.instance,
			s = {},
			l =
				i.defId +
				":" +
				(a ? a.instanceId : "");
		return (
			(s.id = i.publicId),
			(s.groupId = i.groupId),
			(s.allDay = i.allDay),
			(s.title = i.title),
			(s.url = i.url),
			(s.start = t.toDate(a.range.start)),
			(s.end = t.toDate(a.range.end)),
			(s.startStr = t.formatIso(a.range.start, {
				omitTime: i.allDay,
			})),
			(s.endStr = t.formatIso(a.range.end, { omitTime: i.allDay })),
			(s.extendedProps =
				(n ? i : r({}, i)).extendedProps),
			(s.display = i.ui.display || "auto"),
			(s.classNames = i.ui.classNames),
			(s.startEditable = i.ui.startEditable),
			(s.durationEditable = i.ui.durationEditable),
			o &&
			((s.backgroundColor = i.ui.backgroundColor),
				(s.borderColor = i.ui.borderColor),
				(s.textColor = i.ui.textColor)),
			s
		);
	},
		In = function(e, t, n) {
			var o,
				i,
				a,
				s,
				l = Pn(t, n),
				c = (function(e, t) {
					var n,
						o = {},
						i = {};
					for (var a in ((n = Fn(e)), t))
						if (a in n)
							if ("string" == typeof n[a]) {
								var s = t[a];
								s && (o[a] = s(n[a]));
							} else
								o[a] = n[a];
					return { refined: o, extra: i };
				})((i = e), Xt).refined,
				d = c.start,
				p = c.end,
				f = c.date,
				h = c.allDay;
			"string" == typeof d && (d = new Date(d)),
				"string" == typeof p && (p = new Date(p)),
				"string" == typeof f && (f = new Date(f));
			var v = null,
				g = null;
			if (null != d) v = d;
			else {
				if (null == f) return null;
				v = f;
			}
			return (
				(g = p),
				{
					def: (o = r(r({}, c), {
						defId: J(),
						sourceId: l ? l.sourceId : "",
						publicId: c.id,
						groupId: c.groupId,
						allDay: h,
						ui: h(l ? l.ui : null, c),
						extendedProps: r(
							r({}, ((s = e), Wn.reduce(function(e, t) {
								return delete e[t], e;
							}, s)
							)),
							c.extendedProps
						),
					})),
					instance:
						(a = a = {
							instanceId: J(),
							defId: o.defId,
							range: { start: v, end: g },
							forcedStartTzo: null,
							forcedEndTzo: null,
						}),
				}
			);
		},
		Pn = function(e, t, n) {
			if ((void 0 === n && (n = ""), "string" == typeof e)) {
				var o,
					i = t.pluginHooks.eventSourceDefs,
					a = i[e];
				if (a)
					return Pn(
						{ type: e, raw: {} },
						t,
						n
					);
				var s = (function(e, t) {
					var n,
						r = Ke(e);
					if (r.protocol)
						for (n in t) {
							var o = t[n];
							if (o.test(r.protocol)) return o;
						}
				})(e, t.pluginHooks.eventSourceParsers);
				return console.warn("No parsers for " + e + ". Going with raw feed."), Pn({ url: e, format: "json" }, t, n);
			}
			var l,
				u = e,
				c = t.options,
				d = t.dateEnv;
			if (u.type) l = u.type;
			else if (u.url)
				l =
					"json" === u.format
						? "json-feed"
						: (o = u.url)
							.match(/\.ics/i)
							? "ics"
							: o.match(/\.json/i)
								? "json"
								: "json-feed";
			else for (var p in t.pluginHooks.eventSourceDefs) if ("function" == typeof u) {
				l = p;
				break;
			}
			var f = t.pluginHooks.eventSourceDefs[l],
				h = f.parseMeta(u);
			return h ? r(r({ sourceId: n + String(++lt) }, h), { publicId: h.id || "", isFetching: !1, latestFetchId: "" }) : null;
		},
		Nn = Object.freeze({
			__proto__: null,
			parseEvents: In,
			parseEventDef: function(e) {
				return In(e).def;
			},
			parseDateSpan: zn,
			parseEventSource: Pn,
			isDateSpansEqual: function(e, t) {
				return e.allDay === t.allDay && e.range.start.valueOf() === t.range.start.valueOf() && e.range.end.valueOf() === t.range.end.valueOf();
			},
		}),
		Hn = {};
	var On = { week: !0 },
		An = /(?:^|[-_])(\w)/g;
	function Un(e, t) {
		var n = e.sourceId,
			o = e.allDay,
			i = e.range,
			a = t.dateEnv,
			s =
				t.options.eventDisplay ||
				"auto",
			l =
				t.options.displayEventEnd;
		return (
			null != l && !1 === l && (l = null),
			"auto" === s
				? o || de(fe(i.end, i.start)) < 864e5
					? "block"
					: "list-item"
				: "list-item" === s
					? "list-item"
					: "block"
		);
	}
	function Ln(e, t) {
		var n =
			e.startEditable,
			r =
				e.durationEditable;
		return (
			null == n &&
			(n = t.startEditable),
			null == r &&
			(r = t.durationEditable),
			{
				start: n,
				duration: r,
			}
		);
	}
	function Bn(e) {
		return null != e ? e : !0;
	}
	function Vn(e, t) {
		return Array.isArray(e) ? Hn[re(e)] || (Hn[re(e)] = zn(e, t)) : zn(e, t);
	}
	function Fn(e) {
		var t,
			n,
			o = {},
			i = {};
		for (var a in e)
			(t = e[a]),
				(n = a),
				Yt[n]
					? (o[n] = t)
					: Zt[n]
						? (i[n] = t)
						: n in Kt || (o.extendedProps = r(r({}, o.extendedProps || {}), { [n]: t }));
		return o.startEditable, o.durationEditable, o.constraints, o.overlap, o.allows, o.backgroundColor, o.borderColor, o.textColor, o.classNames, { def: o, ui: i };
	}
	function zn(e, t) {
		var n = t.createMarker(e.start),
			r = t.createMarker(e.end);
		if (n && r) return { start: n, end: r };
	}
	var Gn =
		"undefined" != typeof FullCalendarVDom
			? FullCalendarVDom
			: ((En = e),
				(Wt = {}),
			{
				Component: vn,
				createElement: En.createElement,
				render: function(e, t) {
					var n,
						r = new gn(Wt, { elTag: "div" });
					r.render(e),
						(n = r.el),
						t.appendChild(n),
						Ot();
				},
				Fragment: En.Fragment,
			});
	(e.Calendar = (function() {
		function e(e, t) {
			(this.el = e), (this.component = new Sn(this, { extraClassNames: ["fc"] }));
		}
		return (
			(e.prototype.render = function() {
				this.component.render({
					optionOverrides: {},
					calendarApi: {},
					isHeightAuto: !1,
					forPrint: !1,
				});
			}),
			(e.prototype.destroy = function() {
				this.component.destroy();
			}),
			(e.prototype.batchRendering = function(e) { }),
			(e.prototype.updateSize = function() { }),
			e
		);
	})()),
		(e.Component = vn),
		(e.DateEnv = void 0),
		(e.DateProfileGenerator = void 0),
		(e.DayCellContent = Cn),
		(e.DayCellRoot = function(e) {
			return Gn.createElement(
				on.Consumer,
				null,
				function(t) {
					return Gn.createElement(
						Cn,
						r({ context: t }, e)
					);
				}
			);
		}),
		(e.DayHeader = function(e) {
			var t = e.date,
				n = e.dateProfile,
				o = e.todayRange,
				i = e.colSpec,
				a = e.dayHeaderFormat,
				s =
					void 0 === a
						? {
							weekday: "short",
							month: "numeric",
							day: "numeric",
							omitCommas: !0,
						}
						: a;
			return Gn.createElement(
				on.Consumer,
				null,
				function(e) {
					return Gn.createElement(
						Cn,
						{
							context: e,
							date: t,
							dateProfile: n,
							todayRange: o,
							colSpec: i,
							elTag: "th",
						},
						function(e, n, o, i) {
							return Gn.createElement(
								"a",
								r({ "data-navlink": "", className: "fc-col-header-cell-cushion" }, i),
								e.format(t, s)
							);
						}
					);
				}
			);
		}),
		(e.DaySeriesModel = void 0),
		(e.DayTable = void 0),
		(e.DayTableModel = void 0),
		(e.ElementDragging = void 0),
		(e.ElementScrollController = void 0),
		(e.EventApi = jt),
		(e.EventRoot = function(e) {
			return Gn.createElement(
				on.Consumer,
				null,
				function(t) {
					var n = e.event,
						o = e.seg,
						i = Un(n, t),
						a = {
							hookProps: e,
							event: new jt(t, n.def, n.instance),
							isDragging: e.isDragging,
							isResizing: e.isResizing,
							isDateSelecting: e.isDateSelecting,
							isSelected: e.isSelected,
							isPast: e.isPast,
							isFuture: e.isFuture,
							isToday: e.isToday,
						};
					return Gn.createElement(
						Cn,
						{
							context: t,
							elTag: e.elTag,
							elClasses: [
								"fc-event",
								"fc-event-" + n.display,
								o.isStart ? "fc-event-start" : "",
								o.isEnd ? "fc-event-end" : "",
								o.isPast ? "fc-event-past" : "",
								o.isFuture ? "fc-event-future" : "",
								o.isToday ? "fc-event-today" : "",
								o.isSelected ? "fc-event-selected" : "",
								o.isDragging ? "fc-event-dragging" : "",
								o.isResizing ? "fc-event-resizing" : "",
							],
							elStyle: e.elStyle,
							render:
								t.options.eventContent ||
								function(e) {
									return Gn.createElement(
										"div",
										{ className: "fc-event-main" },
										e.timeText &&
										Gn.createElement(
											"div",
											{ className: "fc-event-time" },
											e.timeText
										),
										Gn.createElement(
											"div",
											{ className: "fc-event-title-container" },
											Gn.createElement(
												"div",
												{ className: "fc-event-title" },
												e.event.title || Gn.createElement(Gn.Fragment, null, " ")
											)
										)
									);
								},
						},
						a
					);
				}
			);
		}),
		(e.EventSourceApi = zt),
		(e.FeaturefulElementDragging = void 0),
		(e.Fragment = Gn.Fragment),
		(e.Interaction = void 0),
		(e.MoreLinkRoot = function(e) {
			return Gn.createElement(
				on.Consumer,
				null,
				function(t) {
					return Gn.createElement(
						Cn,
						{ context: t },
						e.children(
							e.allDayDate,
							e.allSegs,
							e.hiddenSegs
						)
					);
				}
			);
		}),
		(e.NowIndicatorRoot = function(e) {
			return Gn.createElement(
				on.Consumer,
				null,
				function(t) {
					return Gn.createElement(
						Cn,
						{ context: t },
						e.children(t, e.date, e.dateProfile)
					);
				}
			);
		}),
		(e.PointerDragging = void 0),
		(e.Popout = gn),
		(e.RecurringType = void 0),
		(e.ScrollResponder = void 0),
		(e.Scroller = void 0),
		(e.SimpleScrollGrid = void 0),
		(e.Slicer = void 0),
		(e.Splitter = void 0),
		(e.StandardEvent = void 0),
		(e.Table = void 0),
		(e.TableDateCell = function(e) {
			var t = e.date,
				n = e.dateProfile,
				o = e.todayRange,
				i = e.colSpec;
			return Gn.createElement(
				on.Consumer,
				null,
				function(e) {
					return Gn.createElement(Cn, {
						context: e,
						date: t,
						dateProfile: n,
						todayRange: o,
						colSpec: i,
						elTag: "td",
					});
				}
			);
		}),
		(e.TableDayCell = function(e) {
			return Gn.createElement(
				on.Consumer,
				null,
				function(t) {
					return Gn.createElement(
						Cn,
						{ context: t },
						e
					);
				}
			);
		}),
		(e.TableRow = void 0),
		(e.Theme = on),
		(e.ViewContextType = on.Provider),
		(e.ViewRoot = Sn),
		(e.WeekNumberRoot = function(e) {
			return Gn.createElement(
				on.Consumer,
				null,
				function(t) {
					return Gn.createElement(
						Cn,
						{ context: t },
						e
					);
				}
			);
		}),
		(e.addDays = ke),
		(e.addDurations = pe),
		(e.addMonths = Me),
		(e.addWeeks = function(e, t) {
			return ke(e, 7 * t);
		}),
		(e.addYears = function(e, t) {
			return xe(e, t, 1);
		}),
		(e.buildClassNameNormalizer = void 0),
		(e.buildDayRanges = void 0),
		(e.buildEventApis = rn),
		(e.buildEventRangeKey = void 0),
		(e.buildEventUrl = void 0),
		(e.buildNavLinkAttrs = void 0),
		(e.buildSegCompare = void 0),
		(e.buildSegTimeText = void 0),
		(e.buildSlatMetas = void 0),
		(e.buildTimeGridDayMatchKey = void 0),
		(e.buildTimeText = void 0),
		(e.buildViewContext = void 0),
		(e.buildViewSpecs = void 0),
		(e.capitaliseFirstLetter = x),
		(e.combineEventUis = void 0),
		(e.compareByFieldSpec = void 0),
		(e.compareByFieldSpecs = void 0),
		(e.compareNumbers = void 0),
		(e.compareObjs = g),
		(e.compileEventUis = void 0),
		(e.computeEarliestSegStart = void 0),
		(e.computeEventDraggable = Ln),
		(e.computeEventEndResizable = function(e, t) {
			return e.durationEditable;
		}),
		(e.computeEventStartResizable = function(e, t) {
			return e.durationEditable;
		}),
		(e.config = {}),
		(e.constrainPoint = void 0),
		(e.createAriaClickAttrs = void 0),
		(e.createContext = function(e) {
			return new on.Provider(e);
		}),
		(e.createDuration = le),
		(e.createElement = Gn.createElement),
		(e.createEmptyEventStore = function() {
			return { defs: {}, instances: {} };
		}),
		(e.createEventInstance = function(e, t, n) {
			return {
				instanceId: J(),
				defId: e,
				range: t,
				forcedStartTzo: null != n ? n.forcedStartTzo : null,
				forcedEndTzo: null != n ? n.forcedEndTzo : null,
			};
		}),
		(e.createEventUi = wt),
		(e.createFormatter = function(e) {
			return new an(e);
		}),
		(e.createPlugin = un),
		(e.createRef = function() {
			return { current: null };
		}),
		(e.diffDates = Ue),
		(e.diffDayAndTime = void 0),
		(e.diffDays = Oe),
		(e.diffPoints = void 0),
		(e.diffWeeks = function(e, t) {
			return Oe(e, t) / 7;
		}),
		(e.diffYears = function(e, t) {
			return Ae(e, t) / 365;
		}),
		(e.disableCursor = $),
		(e.enableCursor = Q),
		(e.eventTupleToStore = function(e, t, n) {
			return {
				defs: { [e.def.defId]: e.def },
				instances: { [e.instance.instanceId]: e.instance },
			};
		}),
		(e.filterEventStoreDefs = void 0),
		(e.filterHash = C),
		(e.findDirectChildren = void 0),
		(e.formatDate = function(e, t) {
			void 0 === t && (t = {});
			var n = new tn(t);
			return n.format(e, t);
		}),
		(e.formatDayString = function(e) {
			return (
				I(e.getUTCFullYear()) +
				"-" +
				I(e.getUTCMonth() + 1) +
				"-" +
				I(e.getUTCDate())
			);
		}),
		(e.formatIsoDay = function(e) {
			return (
				e.getUTCFullYear() +
				"-" +
				I(e.getUTCMonth() + 1) +
				"-" +
				I(e.getUTCDate())
			);
		}),
		(e.formatIsoTimeString = function(e) {
			return I(e.getUTCHours()) + ":" + I(e.getUTCMinutes()) + ":" + I(e.getUTCSeconds());
		}),
		(e.formatShortTime = void 0),
		(e.formatTimeZoneOffset = function(e) {
			var t = e / 60,
				n = Math.abs(t),
				r = Math.floor(n),
				o = Math.round(60 * (n - r));
			return (t < 0 ? "-" : "+") + I(r) + ":" + I(o);
		}),
		(e.getAllowYarnV2 = it),
		(e.getCanVGrowWithinCell = void 0),
		(e.getClippingParents = void 0),
		(e.getDateMeta = void 0),
		(e.getDayClassNames = void 0),
		(e.getDefaultEventEnd = void 0),
		(e.getElSeg = void 0),
		(e.getEventClassNames = Un),
		(e.getEventDef = function(e, t) {
			var n = t.getCurrentData().eventStore;
			for (var r in n.defs) {
				var o = n.defs[r];
				if (o.publicId === e) return o;
			}
			return null;
		}),
		(e.getEventTargetRelatedTo = void 0),
		(e.getEventUis = function(e, t, n) {
			var o = n.getCurrentData(),
				i = o.eventUiBases,
				a = o.eventStore;
			return [h(i[""], i[e]), h(i[""], i[t.sourceId]), i[t.defId]];
		}),
		(e.getIsRtl = function(e) {
			return "rtl" === e.direction;
		}),
		(e.getRectCenter = void 0),
		(e.getRelevantEvents = function(e, t) {
			var n = e.instances[t];
			return n ? { [t]: n } : {};
		}),
		(e.getScrollGridClass = void 0),
		(e.getScrollbarWidths = void 0),
		(e.getSegAnchorAttrs = void 0),
		(e.getSegMeta = function(e, t, n) {
			var r = t.getCurrentData().dateProfile,
				o = e.eventRange.range,
				i =
					o.start < r.activeRange.start
						? r.activeRange.start
						: o.start,
				a =
					o.end > r.activeRange.end
						? r.activeRange.end
						: o.end,
				s = i.valueOf() < a.valueOf();
			return (
				e.eventRange.def.allDay && s && (s = Le(i).valueOf() < Le(a).valueOf()),
				{
					isStart: e.isStart && s,
					isEnd: e.isEnd && s,
					isPast: i < t.getCurrentData().now,
					isFuture: a > t.getCurrentData().now,
					isToday:
						r.currentRange.start <= i &&
						r.currentRange.end > i,
				}
			);
		}),
		(e.getStickyFooterScrollbar = void 0),
		(e.getStickyHeaderDates = function(e) {
			var t = e.options;
			if (t.stickyHeaderDates)
				return (
					"auto" === t.stickyHeaderDates
						? ht
						: t.stickyHeaderDates
				);
		}),
		(e.getWeeksFromInput = U),
		(e.globalPlugins = []),
		(e.greatestDurationDenominator = ve),
		(e.hasShrinkWidth = vt),
		(e.interactionSettingsToStore = void 0),
		(e.intersectRanges = void 0),
		(e.intersectSpans = void 0),
		(e.isArraysEqual = g),
		(e.isDateSpansEqual = void 0),
		(e.isInteractionValid = function(e, t) {
			return (
				(n = e),
				(o = t),
				!(!n.allDay && !o.allDay && Re(n.range.start, o.range.start) && Re(n.range.end, o.range.end))
			);
			var n, o;
		}),
		(e.isPropsEqual = function(e, t, n, o) {
			return (
				!o &&
				(function(e, t) {
					if (e === t) return !0;
					for (var n in e) if (d(e, n) && !(n in t)) return !1;
					for (var n in t) if (d(t, n) && e[n] !== t[n]) return !1;
					return !0;
				})(e, t)
			);
		}),
		(e.isPropsValid = void 0),
		(e.isValuesSimilar = y),
		(e.listenBySelector = function(e, t, n, o, i) {
			function a(e, n) {
				for (var i = e.target, a = []; i && i !== s;) {
					var u = i.parentNode;
					if (Je(i, t)) {
						for (i.fcSeg = n.seg, r.push(i), o.call(l, i, n, u); i !== s;) i = i.parentNode;
						break;
					}
					a.push(i), (i = u);
				}
			}
			var s = e,
				l = {
					el: s,
					listener: function(e) {
						n.call(l, e);
					},
				};
			return et(s, "click", l), function() {
				tt(s, "click", l);
			};
		}),
		(e.mapHash = D),
		(e.memoize = void 0),
		(e.memoizeArraylike = void 0),
		(e.memoizeHashlike = void 0),
		(e.mergeEventStores = function(e, t) {
			return {
				defs: h(e.defs, t.defs),
				instances: h(e.instances, t.instances),
			};
		}),
		(e.multiplyDuration = he),
		(e.parseBusinessHours = void 0),
		(e.parseClassNames = A),
		(e.parseDragMeta = void 0),
		(e.parseEventDef = void 0),
		(e.parseFieldSpecs = Fn),
		(e.parseMarker = void 0),
		(e.pointInsideRect = void 0),
		(e.preventContextMenu = ee),
		(e.preventDefault = ee),
		(e.removeElement = Et),
		(e.removeExact = W),
		(e.render = Gn.render),
		(e.setElAttrs = void 0),
		(e.setElClasses = void 0),
		(e.setElStyle = void 0),
		(e.setRef = void 0),
		(e.sliceEventStore = void 0),
		(e.sliceEvents = void 0),
		(e.sortEventSegs = void 0),
		(e.startOfDay = Le),
		(e.startOfHour = void 0),
		(e.startOfMinute = void 0),
		(e.startOfSecond = void 0),
		(e.subtractDurations = fe),
		(e.svgDesc = void 0),
		(e.svgRect = void 0),
		(e.translateRect = void 0),
		(e.unpromisify = void 0),
		(e.version = s),
		(e.whenTransitionDone = void 0),
		(e.wholeDivideDurations = function(e, t) {
			for (
				var n = null, r = 0;
				r < Ge.length;
				r++
			) {
				var o = Ge[r];
				if (t[o]) {
					var i = e[o] / t[o];
					if (!yn(i) || (null !== n && n !== i)) return null;
					n = i;
				} else if (e[o]) return null;
			}
			return n;
		});
})(this.FullCalendar || (this.FullCalendar = {}));

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\fullcalendar\main.min.css
========================================================================

/*!
FullCalendar v5.11.5
Docs & License: https://fullcalendar.io/
(c) 2022 Adam Shaw
*/
.fc-media-screen {
	max-width: 900px
}

.fc-media-print {
	display: none
}

.fc-liquid-hack .fc-event, .fc-liquid-hack .fc-event-main-frame,
	.fc-liquid-hack .fc-event-time, .fc-liquid-hack .fc-event-title,
	.fc-liquid-hack .fc-timegrid-event-harness, .fc-liquid-hack .fc-timegrid-now-indicator-arrow,
	.fc-liquid-hack .fc-timegrid-now-indicator-line, .fc-liquid-hack td,
	.fc-liquid-hack th {
	box-sizing: content-box
}

.fc {
	direction: ltr;
	text-align: left
}

.fc-rtl {
	text-align: right
}

.fc-h-event .fc-event-main {
	color: #000
}

.fc-h-event .fc-event-main-frame {
	display: flex;
	flex-wrap: wrap
}

.fc-h-event .fc-event-time {
	flex-shrink: 0
}

.fc-h-event .fc-event-title {
	flex-grow: 1;
	flex-shrink: 1;
	min-width: 0
}

.fc-h-event .fc-event-resizer {
	align-self: flex-end
}

.fc-event {
	position: relative;
	display: flex;
	font-size: 1em;
	line-height: 1.4;
	border-radius: .25em
}

.fc-event-main {
	flex-grow: 1;
	flex-shrink: 1;
	min-width: 0
}

.fc-event-main-frame {
	display: flex;
	height: 100%
}

.fc-event-time, .fc-event-title-container {
	flex-shrink: 0
}

.fc-event:focus {
	z-index: 9
}

.fc-event-resizer {
	position: absolute;
	z-index: 4
}

.fc-event.fc-event-dragging, .fc-event:hover {
	z-index: 8
}

.fc-event .fc-event-bg {
	z-index: 1;
	background: var(--fc-event-bg-color, #fff)
}

.fc-event .fc-event-main {
	position: relative;
	z-index: 2;
	color: var(--fc-event-text-color, #000)
}

.fc a[data-navlink] {
	cursor: pointer
}

.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-start),
	.fc-direction-ltr .fc-daygrid-dot-event:not(.fc-event-start) {
	border-top-left-radius: 0;
	border-bottom-left-radius: 0
}

.fc-direction-ltr .fc-daygrid-block-event:not(.fc-event-end),
	.fc-direction-ltr .fc-daygrid-dot-event:not(.fc-event-end) {
	border-top-right-radius: 0;
	border-bottom-right-radius: 0
}

.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-start),
	.fc-direction-rtl .fc-daygrid-dot-event:not(.fc-event-start) {
	border-top-right-radius: 0;
	border-bottom-right-radius: 0
}

.fc-direction-rtl .fc-daygrid-block-event:not(.fc-event-end),
	.fc-direction-rtl .fc-daygrid-dot-event:not(.fc-event-end) {
	border-top-left-radius: 0;
	border-bottom-left-radius: 0
}

.fc-daygrid-event-harness {
	position: relative
}

.fc-daygrid-event.fc-event-mirror {
	position: absolute;
	z-index: 1001
}

.fc-daygrid-block-event {
	display: block
}

.fc-daygrid-block-event, .fc-daygrid-block-event .fc-event-main {
	position: relative
}

.fc-daygrid-block-event .fc-event-main {
	width: 100%
}

.fc-daygrid-block-event .fc-event-time, .fc-daygrid-block-event .fc-event-title
	{
	padding: 0 1px
}

.fc-daygrid-dot-event {
	display: flex;
	align-items: center
}

.fc-daygrid-dot-event .fc-event-main {
	flex-grow: 1;
	flex-shrink: 1;
	min-width: 0;
	overflow: hidden
}

.fc-daygrid-dot-event .fc-event-title {
	overflow: hidden
}

.fc-daygrid-event-dot {
	margin: 0 4px;
	box-sizing: content-box
}

.fc-list-event .fc-event-main-frame, .fc-list-event.fc-event-mirror .fc-event-main-frame
	{
	position: relative;
	z-index: 2;
	height: auto
}

.fc-list-table {
	width: 100%;
	border-collapse: collapse
}

.fc-list-table tr:hover td {
	background-color: rgba(0, 0, 0, .04)
}

.fc-list-day {
	background-color: rgba(0, 0, 0, .07)
}

.fc-list-event.fc-event-mirror {
	box-shadow: 0 2px 5px rgba(0, 0, 0, .3)
}

.fc-timegrid-axis-frame {
	position: sticky;
	top: 0;
	left: 0;
	z-index: 2;
	background: var(--fc-page-bg-color, #fff)
}

.fc-timegrid-col.fc-day-today {
	background-color: rgba(255, 220, 40, .15)
}

.fc-timegrid-event-harness {
	position: absolute
}

.fc-timegrid-event {
	position: absolute;
	left: 0;
	right: 0;
	border-width: 0 1px 1px 1px;
	border-bottom-style: solid;
	border-image: initial;
	border-color: inherit
}

.fc-timegrid-event .fc-event-main {
	padding: 1px 1px 0
}

.fc-timegrid-event .fc-event-time {
	white-space: nowrap;
	font-size: .9em
}

.fc-timegrid-event .fc-event-title {
	overflow: hidden
}

.fc-timegrid-event.fc-event-mirror {
	z-index: 1001
}

.fc-timegrid-event.fc-event-selected:before {
	content: "";
	position: absolute;
	top: -1px;
	left: -1px;
	right: -1px;
	bottom: -1px;
	border: 1px solid #000;
	z-index: -1
}

.fc-timegrid-now-indicator-line {
	position: absolute;
	z-index: 4;
	left: 0;
	right: 0
}

.fc-timegrid-now-indicator-arrow {
	position: absolute;
	z-index: 4;
	margin-top: -6px
}

.fc-timegrid-slots, .fc-timegrid-slots tr {
	height: 1.5em
}

.fc-timegrid-slots td {
	border: 0
}

.fc-timegrid-bg-harness {
	position: absolute;
	top: 0;
	bottom: 0;
	pointer-events: none
}

.fc-timegrid-bg-event {
	position: absolute;
	z-index: 1;
	left: 0;
	right: 0
}

.fc-timegrid-axis-chunk>div {
	position: relative
}

.fc-timegrid-axis-chunk>div>div {
	position: sticky;
	top: 0;
	left: 0
}

.fc-resource {
	position: relative
}

.fc-resource-header-cell {
	position: sticky;
	top: 0;
	left: 0;
	z-index: 2;
	background: var(--fc-page-bg-color, #fff)
}

.fc-resource-header-cell>div {
	position: relative
}

.fc-resource-header-cell>div>div {
	position: sticky;
	left: 0
}

.fc-resource-header-cell .fc-datagrid-cell-cushion,
	.fc-resource-header-cell .fc-datagrid-cell-main {
	display: block
}

.fc-resource.fc-day-today {
	background-color: rgba(255, 220, 40, .15)
}

.fc-resource-timeline-divider {
	position: absolute;
	top: 0;
	bottom: 0;
	z-index: 2
}

.fc-resource-timeline-slots td {
	border-width: 0 1px;
	border-style: solid;
	border-color: transparent
}

.fc-resource-timeline-slots tr:first-child td {
	border-top-width: 1px
}

.fc-resource-timeline .fc-datagrid-cell-frame {
	height: 100%
}

.fc-resource-timeline-lane {
	position: relative
}

.fc-resource-timeline-lane .fc-timegrid-event-harness {
	position: absolute;
	top: 0;
	left: 0;
	right: 0
}

.fc-resource-timeline-lane .fc-timegrid-bg-harness {
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0
}

.fc-resource-timeline-lane-frame {
	position: absolute;
	left: 0;
	right: 0;
	top: 0;
	bottom: 0
}

.fc-vresource-area {
	position: absolute;
	top: 0;
	left: 0;
	height: 100%;
	background: var(--fc-page-bg-color, #fff)
}

.fc-vresource-area .fc-datagrid-cell-frame {
	position: sticky;
	top: 0
}

.fc-vresource-area td, .fc-vresource-area th {
	vertical-align: top
}

.fc-vresource-view .fc-timegrid-axis-frame {
	position: absolute
}

.fc-vresource-view .fc-timegrid-col-frame {
	position: relative
}
/*!
FullCalendar v5.11.5
Docs & License: https://fullcalendar.io/
(c) 2022 Adam Shaw
*/
.fc-theme-bootstrap, .fc-theme-bootstrap5 {
	--fc-event-border-color: #fff
}

.fc-theme-bootstrap5 a:not([href]), .fc-theme-bootstrap a:not([href]) {
	color: inherit;
	text-decoration: inherit
}

.fc-theme-bootstrap5 .table, .fc-theme-bootstrap .table {
	margin-bottom: 0
}

.fc-theme-bootstrap5 .table-bordered thead td, .fc-theme-bootstrap5 .table-bordered thead th,
	.fc-theme-bootstrap .table-bordered thead td, .fc-theme-bootstrap .table-bordered thead th
	{
	border-bottom-width: 2px
}

.fc-theme-bootstrap5 .table-bordered td, .fc-theme-bootstrap5 .table-bordered th,
	.fc-theme-bootstrap .table-bordered td, .fc-theme-bootstrap .table-bordered th
	{
	border: 1px solid #ddd
}

.fc-theme-bootstrap5 td, .fc-theme-bootstrap5 th, .fc-theme-bootstrap td,
	.fc-theme-bootstrap th {
	border: none
}

.fc-theme-bootstrap5 .fc-scrollgrid, .fc-theme-bootstrap .fc-scrollgrid
	{
	border-collapse: separate;
	border: 1px solid #dee2e6
}

.fc-theme-bootstrap5 .fc-scrollgrid, .fc-theme-bootstrap5 .fc-scrollgrid table,
	.fc-theme-bootstrap .fc-scrollgrid, .fc-theme-bootstrap .fc-scrollgrid table
	{
	border-radius: .25rem
}

.fc-theme-bootstrap5 .fc-daygrid-day-number, .fc-theme-bootstrap .fc-daygrid-day-number
	{
	padding: .2em
}

.fc-theme-bootstrap5 .fc-list-table, .fc-theme-bootstrap .fc-list-table
	{
	border: 1px solid #dee2e6
}

.fc-theme-bootstrap5 .fc-list-table td, .fc-theme-bootstrap .fc-list-table td
	{
	border-top: 1px solid #dee2e6
}

.fc-direction-ltr, .fc-direction-rtl, .fc-theme-standard {
	--fc-border-color: #ddd;
	--fc-page-bg-color: #fff;
	--fc-neutral-bg-color: hsla(0, 0%, 96.1%, .65);
	--fc-neutral-text-color: #808080;
	--fc-today-bg-color: rgba(255, 220, 40, .15);
	--fc-highlight-color: rgba(69, 173, 255, .2);
	--fc-event-bg-color: #3788d8;
	--fc-event-border-color: #3788d8;
	--fc-event-text-color: #fff;
	--fc-event-selected-overlay-color: rgba(0, 0, 0, .25);
	--fc-more-link-bg-color: #d0d0d0;
	--fc-more-link-text-color: inherit;
	--fc-event-resizer-thickness: 8px;
	--fc-event-resizer-dot-thickness: 1px;
	--fc-event-resizer-dot-border-width: 1px;
	--fc-event-resizer-dot-border-color: #fff;
	--fc-non-business-color: hsla(0, 0%, 96.1%, .6);
	--fc-bg-event-color: #8fdf82;
	--fc-bg-event-opacity: .3;
	--fc-list-event-dot-width: 10px;
	--fc-list-event-hover-bg-color: #f5f5f5
}

.fc-theme-standard .fc-scrollgrid {
	border: 1px solid var(--fc-border-color)
}

.fc-theme-standard td, .fc-theme-standard th {
	border: 1px solid var(--fc-border-color)
}

.fc-theme-standard .fc-scrollgrid-section-header td, .fc-theme-standard .fc-scrollgrid-section-header th
	{
	border-bottom-width: 0
}

.fc-theme-standard .fc-scrollgrid-section-body table, .fc-theme-standard .fc-scrollgrid-section-body td,
	.fc-theme-standard .fc-scrollgrid-section-body th {
	border-top-width: 0
}

.fc-theme-standard .fc-scrollgrid-section-footer td, .fc-theme-standard .fc-scrollgrid-section-footer th
	{
	border-top-width: 0
}

.fc-theme-standard .fc-scrollgrid-section-liquid td, .fc-theme-standard .fc-scrollgrid-section-liquid th
	{
	border-bottom-width: 0
}
/*!
FullCalendar v5.11.5
Docs & License: https://fullcalendar.io/
(c) 2022 Adam Shaw
*/
.fc-datagrid {
	width: 100%;
	border-collapse: collapse
}

.fc-datagrid-cell-frame {
	position: relative;
	padding: .3em .4em;
	height: 100%
}

.fc-datagrid-cell-cushion {
	display: flex;
	align-items: center
}

.fc-datagrid-cell-main {
	flex-grow: 1;
	flex-shrink: 1;
	min-width: 0
}

.fc-datagrid-cell.fc-datagrid-cell-expander {
	text-align: center
}

.fc-datagrid-expander {
	display: inline-block;
	cursor: pointer;
	font-family: monospace;
	font-size: 1.1em
}

.fc-datagrid-expander-placeholder {
	display: inline-block;
	visibility: hidden
}

.fc-datagrid-expander-content:before {
	content: "\025B8"
}

.fc-datagrid-row.fc-datagrid-row-expanded .fc-datagrid-expander-content:before
	{
	content: "\025BE"
}
/*!
FullCalendar v5.11.5
Docs & License: https://fullcalendar.io/
(c) 2022 Adam Shaw
*/
.fc-scrollgrid {
	width: 100%;
	table-layout: fixed
}

.fc-scrollgrid table {
	border-collapse: collapse;
	border-spacing: 0
}

.fc-scrollgrid-liquid {
	height: 100%
}

.fc-scrollgrid-section>td, .fc-scrollgrid-section>th {
	border-left-width: 0;
	border-right-width: 0;
	vertical-align: top
}

.fc-scrollgrid-section>td:first-child, .fc-scrollgrid-section>th:first-child
	{
	border-left-width: 1px
}

.fc-scrollgrid-section>td:last-child, .fc-scrollgrid-section>th:last-child
	{
	border-right-width: 1px
}

.fc-scrollgrid-section-header>th {
	text-align: center
}

.fc-scrollgrid-section-header, .fc-scrollgrid-section-footer {
	flex-shrink: 0
}

.fc-scrollgrid-section-body {
	position: relative
}

.fc-scrollgrid-section-body, .fc-scrollgrid-section-body>tr>td {
	height: 100%
}

.fc-scrollgrid-section-body.fc-scrollgrid-section-liquid {
	height: 100%
}

.fc-scrollgrid-section-body.fc-scrollgrid-section-liquid>tr {
	height: 100%
}

.fc-scrollgrid-section-body table {
	width: 100%
}

.fc-scrollgrid-section-body>tr:first-child>td {
	border-top-width: 0
}

.fc-scrollgrid-section-body>tr:last-child>td {
	border-bottom-width: 0
}

.fc-scrollgrid-section-body table {
	height: 100%
}

.fc-scrollgrid-section-body>tr {
	height: 0
}

.fc-scrollgrid-section-body>tr>td {
	position: relative
}

.fc-scrollgrid-section-body>tr>td:first-child {
	border-left-width: 0
}

.fc-scrollgrid-section-body>tr>td:last-child {
	border-right-width: 0
}

.fc-scrollgrid-scroller {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	overflow: auto
}

.fc-scrollgrid-scroller-liquid {
	position: relative;
	height: 100%
}

.fc-scrollgrid-col-resizer {
	position: absolute;
	top: 0;
	cursor: col-resize
}

.fc-scrollgrid-col-resizer:after {
	content: "";
	position: absolute;
	top: 0;
	left: -5px;
	right: -5px;
	bottom: -5px
}

.fc-scrollgrid-sync-inner {
	position: relative;
	height: 100%
}

.fc-scrollgrid-sync-table {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	width: 100%;
	height: 100%
}

.fc-scrollgrid-sticky-hacks>td, .fc-scrollgrid-sticky-hacks>th {
	background: var(--fc-page-bg-color, #fff)
}

.fc-scrollgrid-sticky-hacks tr:last-child td,
	.fc-scrollgrid-sticky-hacks tr:last-child th {
	border-bottom: 0
}

.fc-scrollgrid-sticky-hacks .fc-scrollgrid-section-body table {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0
}

.fc-scrollgrid-sticky-hacks .fc-scrollgrid-section-body>tr:not(:first-child)
	{
	visibility: hidden
}

.fc-scrollgrid-sticky-hacks .fc-scrollgrid-section-body>tr>td {
	height: 0
}
/*!
FullCalendar v5.11.5
Docs & License: https://fullcalendar.io/
(c) 2022 Adam Shaw
*/
.fc-popover {
	position: absolute;
	z-index: 1000;
	box-shadow: 0 2px 6px rgba(0, 0, 0, .15)
}

.fc-popover-header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: .5em .75em
}

.fc-popover-title {
	margin: 0
}

.fc-popover-close {
	cursor: pointer;
	opacity: .65;
	font-size: 1.1em
}

.fc-popover-close:hover {
	opacity: 1
}

.fc-popover-body {
	padding: .75em
}

.fc-list {
	border: 1px solid var(--fc-border-color)
}

.fc-list-empty {
	padding: 2em;
	text-align: center
}

.fc-list-empty-cushion {
	margin: 0
}

.fc-list-table thead {
	border-bottom: 1px solid var(--fc-border-color)
}

.fc-list-table th {
	padding: 1em
}

.fc-list-day>th {
	position: sticky;
	top: 0;
	background: var(--fc-page-bg-color, #fff)
}

.fc-list-day-text, .fc-list-day-side-text {
	text-decoration: none
}

.fc-list-day-text:hover, .fc-list-day-side-text:hover {
	text-decoration: underline
}

.fc-list-table td {
	padding: .5em .8em
}

.fc-list-event-graphic {
	padding-right: .5em
}

.fc-list-event-dot {
	border: calc(var(--fc-list-event-dot-width)/2) solid
		var(--fc-event-border-color)
}

.fc-list-event-time {
	white-space: nowrap
}
/*!
FullCalendar v5.11.5
Docs & License: https://fullcalendar.io/
(c) 2022 Adam Shaw
*/
.fc-toolbar {
	display: flex;
	justify-content: space-between;
	align-items: center
}

.fc-toolbar-chunk {
	display: flex;
	position: relative;
	align-items: center
}

.fc-toolbar-title {
	font-size: 1.5em;
	margin: 0
}

.fc-button {
	position: relative;
	display: inline-block;
	padding: .4em .65em;
	margin: 0 .2em;
	font-size: 1em;
	font-family: inherit;
	font-weight: inherit;
	line-height: 1.4;
	text-transform: capitalize;
	border: 1px solid var(--fc-border-color);
	border-radius: .25em;
	background: var(--fc-page-bg-color, #fff);
	color: var(--fc-neutral-text-color, #808080);
	cursor: pointer
}

.fc-button:disabled {
	opacity: .5
}

.fc-button:not(:disabled):active, .fc-button:not(:disabled):hover {
	background: var(--fc-neutral-bg-color, hsla(0, 0%, 96.1%, .65))
}

.fc-button-primary {
	border-width: 0;
	background: var(--fc-button-bg-color, var(--fc-event-bg-color, #3788d8));
	color: var(--fc-button-text-color, var(--fc-event-text-color, #fff))
}

.fc-button-primary:disabled {
	background: var(--fc-button-bg-color, var(--fc-event-bg-color, #3788d8));
	opacity: .5
}

.fc-button-primary:not(:disabled):active, .fc-button-primary:not(:disabled):hover
	{
	background: var(--fc-button-hover-bg-color, var(--fc-event-bg-color, #3788d8))
}

.fc-button-group {
	display: inline-flex;
	position: relative;
	vertical-align: middle
}

.fc-button-group>.fc-button {
	position: relative;
	flex: 1 1 auto
}

.fc-button-group>.fc-button:first-child {
	border-top-right-radius: 0;
	border-bottom-right-radius: 0
}

.fc-button-group>.fc-button:last-child {
	border-top-left-radius: 0;
	border-bottom-left-radius: 0
}

.fc-button-group>.fc-button:not(:first-child) {
	margin-left: -1px
}

.fc-button-group>.fc-button.fc-button-active, .fc-button-group>.fc-button:active,
	.fc-button-group>.fc-button:focus, .fc-button-group>.fc-button:hover {
	z-index: 1
}

.fc-button.fc-button-active {
	background: var(--fc-neutral-bg-color, hsla(0, 0%, 96.1%, .65))
}
/*!
FullCalendar v5.11.5
Docs & License: https://fullcalendar.io/
(c) 2022 Adam Shaw
*/
.fc-view-harness {
	flex-grow: 1;
	position: relative
}

.fc-view-harness-active>.fc-view {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0
}

.fc-view, body, html {
	font-size: 1em
}

.fc-col-header {
	display: flex;
	flex-direction: column;
	position: relative
}

.fc-col-header-cell {
	position: relative
}

.fc .fc-col-header-cell-cushion {
	display: inline-block;
	padding: .2em .4em
}

.fc-daygrid-day-frame {
	position: relative;
	min-height: 100%
}

.fc-daygrid-day-top {
	display: flex
}

.fc-daygrid-day-bottom {
	font-size: .85em;
	padding: 2px
}

.fc-daygrid-day-events {
	position: relative;
	z-index: 1;
	min-height: 1.2em;
	margin-top: 1.5em
}

.fc-daygrid-day-bg {
	position: absolute;
	z-index: 0;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0
}

.fc-daygrid-day-number {
	position: relative;
	z-index: 2;
	padding: .4em
}

.fc-day-today .fc-daygrid-day-number {
	font-weight: 700
}

.fc-daygrid-more-link {
	position: relative;
	z-index: 2;
	cursor: pointer;
	margin-top: 2px;
	padding: 0 2px
}

.fc-event-title-container, .fc-event-time {
	padding: .1em .2em
}

.fc-event-title-container {
	flex-grow: 1;
	flex-shrink: 1;
	min-width: 0
}

.fc-event-end .fc-event-resizer-end, .fc-event-start .fc-event-resizer-start
	{
	cursor: e-resize
}

.fc-rtl .fc-event-end .fc-event-resizer-end, .fc-rtl .fc-event-start .fc-event-resizer-start
	{
	cursor: w-resize
}

.fc-event-resizer-end {
	right: 0;
	border-right-width: var(--fc-event-resizer-thickness, 8px);
	border-top-right-radius: var(--fc-event-resizer-thickness, 8px);
	border-bottom-right-radius: var(--fc-event-resizer-thickness, 8px)
}

.fc-event-resizer-start {
	left: 0;
	border-left-width: var(--fc-event-resizer-thickness, 8px);
	border-top-left-radius: var(--fc-event-resizer-thickness, 8px);
	border-bottom-left-radius: var(--fc-event-resizer-thickness, 8px)
}

.fc-timegrid {
	position: relative
}

.fc-timegrid-container {
	position: relative;
	flex-grow: 1
}

.fc-timegrid-body, .fc-timegrid-head {
	position: relative;
	width: 100%;
	table-layout: fixed
}

.fc-timegrid-slots {
	position: relative;
	z-index: 1
}

.fc-timegrid-cols {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0
}

.fc-timegrid-col {
	position: relative
}

.fc-timegrid-axis {
	vertical-align: middle;
	padding: 0 .5em
}

.fc-timegrid-axis-cushion {
	padding: .3em 0
}

.fc-timegrid-axis-frame-liquid {
	height: 100%
}

.fc-timegrid-slicer {
	position: absolute;
	top: 0;
	left: 0;
	right: 0
}

.fc-timegrid-slicer-events, .fc-timegrid-slicer-non-events {
	position: relative
}

.fc-timegrid-slicer-events {
	z-index: 1
}

.fc-timegrid-slicer-non-events {
	z-index: 0
}

.fc-timegrid-slicer-frame {
	position: absolute;
	top: 0;
	left: 0;
	right: 0
}

.fc-timegrid-slicer-container {
	position: relative
}

.fc-timegrid-slicer-col {
	position: absolute;
	top: 0;
	bottom: 0
}

.fc-timegrid-slicer-col table {
	height: 100%
}

.fc-timegrid-slicer-col table td {
	border: 0
}

.fc-timegrid-event-resizer-end {
	bottom: 0;
	cursor: s-resize
}

.fc-timegrid-event-resizer-start {
	top: 0;
	cursor: n-resize
}

.fc-timegrid-now-indicator-line {
	border-style: solid;
	border-width: 1px 0 0
}

.fc-timegrid-now-indicator-arrow {
	border-style: solid;
	border-width: 6px 0 6px 6px
}

.fc-direction-ltr .fc-timegrid-now-indicator-arrow {
	border-left-color: inherit;
	border-top-color: transparent;
	border-bottom-color: transparent
}

.fc-direction-rtl .fc-timegrid-now-indicator-arrow {
	border-right-color: inherit;
	border-top-color: transparent;
	border-bottom-color: transparent;
	margin-left: -6px;
	border-left-width: 0;
	border-right-width: 6px
}

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_course_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lehrgangs-Vorlagen" />
</c:import>

<h1>Lehrgangs-Vorlagen verwalten</h1>
<p>Dies sind die übergeordneten Lehrgänge. Einzelne Termine
	(Meetings) werden für jede Vorlage separat verwaltet.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" id="new-course-btn" class="btn btn-success">
		<i class="fas fa-plus"></i> Neue Vorlage
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Vorlagen filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<div class="table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name der Vorlage</th>
				<th class="sortable" data-sort-type="string">Abkürzung (für
					Matrix)</th>
				<th style="min-width: 350px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty courseList}">
				<tr>
					<td colspan="3" style="text-align: center;">Es wurden noch
						keine Lehrgangs-Vorlagen erstellt.</td>
				</tr>
			</c:if>
			<c:forEach var="course" items="${courseList}">
				<tr>
					<td><c:out value="${course.name}" /></td>
					<td><c:out value="${course.abbreviation}" /></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><a
						href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
						class="btn btn-small"> <i class="fas fa-calendar-day"></i>
							Meetings
					</a>
						<button type="button"
							class="btn btn-small btn-secondary edit-course-btn"
							data-id="${course.id}">
							<i class="fas fa-edit"></i> Bearbeiten
						</button>
						<form action="${pageContext.request.contextPath}/admin/lehrgaenge"
							method="post" class="js-confirm-form"
							data-confirm-message="Vorlage '${fn:escapeXml(course.name)}' wirklich löschen? Alle zugehörigen Meetings und Qualifikationen werden auch gelöscht!">
							<input type="hidden" name="action" value="delete"> <input
								type="hidden" name="id" value="${course.id}">
							<button type="submit" class="btn btn-small btn-danger">
								<i class="fas fa-trash"></i> Löschen
							</button>
						</form></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- MODAL FOR CREATE/EDIT COURSE -->
<div class="modal-overlay" id="course-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="course-modal-title">Lehrgangs-Vorlage</h3>
		<form id="course-modal-form"
			action="${pageContext.request.contextPath}/admin/lehrgaenge"
			method="post">
			<input type="hidden" name="action" id="course-modal-action">
			<input type="hidden" name="id" id="course-modal-id">
			<div class="form-group">
				<label for="name-modal">Name der Vorlage</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="form-group">
				<label for="abbreviation-modal">Abkürzung (max. 10 Zeichen)</label>
				<input type="text" id="abbreviation-modal" name="abbreviation"
					maxlength="10" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Allgemeine Beschreibung</label>
				<textarea id="description-modal" name="description" rows="4"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Vorlage Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_course_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_dashboard.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Dashboard" />
</c:import>

<h1>
	Willkommen im Admin-Bereich,
	<c:out value="${sessionScope.user.username}" />
	!
</h1>
<p>Hier können Sie die Anwendung verwalten. Wählen Sie eine Option
	aus der Navigation oder nutzen Sie den Schnellzugriff.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-rocket"></i> Schnellzugriff
		</h2>
		<ul style="list-style: none; padding: 0;">
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/veranstaltungen">Neue
					Veranstaltung anlegen</a></li>
			<li style="padding: 0.5rem 0;">
				<%-- CORRECTED: Link points to /admin/mitglieder --%> <a
				href="${pageContext.request.contextPath}/admin/mitglieder">Neuen
					Benutzer erstellen</a>
			</li>
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/lager">Neuen
					Lagerartikel anlegen</a></li>
			<li style="padding: 0.5rem 0;"><a
				href="${pageContext.request.contextPath}/admin/lehrgaenge">Neue
					Lehrgangs-Vorlage erstellen</a></li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-chart-bar"></i> System-Statistiken
		</h2>
		<p style="font-size: 1.1rem; margin-bottom: 0.5rem;">
			Anzahl registrierter Benutzer: <strong><c:out
					value="${userCount}" /></strong>
		</p>
		<p style="font-size: 1.1rem;">
			Anzahl aktiver Events: <strong><c:out
					value="${activeEventCount}" /></strong>
		</p>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-exclamation-triangle text-warning"></i> Defekte
			Artikel
		</h2>
		<p>
			Es sind aktuell <strong><c:out
					value="${fn:length(defectiveItems)}" /></strong> Artikel als defekt
			gemeldet.
		</p>
		<a href="${pageContext.request.contextPath}/admin/defekte"
			class="btn btn-small" style="margin-top: 1rem;">Defekte anzeigen</a>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-history"></i> Letzte Aktionen
		</h2>
		<p>Die letzten Log-Einträge des Systems.</p>
		<a href="${pageContext.request.contextPath}/admin/log"
			class="btn btn-small" style="margin-top: 1rem;">Komplettes Log
			ansehen</a>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_defect_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Defekte Artikel" />
</c:import>

<h1>
	<i class="fas fa-wrench"></i> Defekte Artikel verwalten
</h1>
<p>Hier sind alle Artikel gelistet, von denen mindestens ein
	Exemplar als defekt markiert wurde.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Defekt / Gesamt</th>
				<th>Grund</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty defectiveItems}">
				<tr>
					<td colspan="4" style="text-align: center;">Aktuell sind keine
						Artikel als defekt gemeldet.</td>
				</tr>
			</c:if>
			<c:forEach var="item" items="${defectiveItems}">
				<tr>
					<td><a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
								value="${item.name}" /></a></td>
					<td><c:out value="${item.defectiveQuantity}" /> / <c:out
							value="${item.quantity}" /></td>
					<td><c:out value="${item.defectReason}" /></td>
					<td>
						<button class="btn btn-small btn-warning defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-max-qty="${item.quantity}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}">Status
							bearbeiten</button>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Modal for updating defect status -->
<div class="modal-overlay" id="defect-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="defect-modal-title">Defekt-Status bearbeiten</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="action" value="updateDefect"> <input
				type="hidden" name="id" id="defect-item-id"> <input
				type="hidden" name="returnTo" value="defekte">
			<div class="form-group">
				<label for="defective_quantity">Anzahl defekter Artikel</label> <input
					type="number" name="defective_quantity" id="defective_quantity"
					min="0" required>
			</div>
			<div class="form-group">
				<label for="defect_reason">Grund (optional)</label>
				<textarea name="defect_reason" id="defect_reason" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_defect_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_events_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Eventverwaltung" />
</c:import>

<h1>
	<i class="fas fa-calendar-check"></i> Eventverwaltung
</h1>
<p>Hier können Sie Events erstellen, bearbeiten, Personal zuweisen
	und den Status verwalten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-event-btn">
		<i class="fas fa-plus"></i> Neues Event anlegen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter" placeholder="Events filtern..."
			aria-label="Tabelle filtern">
	</div>
</div>

<c:if test="${empty eventList}">
	<div class="card">
		<p>Keine Events gefunden.</p>
	</div>
</c:if>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-list">
	<c:forEach var="event" items="${eventList}">
		<div class="list-item-card"
			data-searchable-content="${event.name} ${event.status}">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}">${event.name}</a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <span>${event.formattedEventDateTimeRange}</span>
			</div>
			<div class="card-row">
				<span>Status:</span> <span><span
					class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}">${event.status}</span></span>
			</div>
			<div class="card-actions">
				<button type="button" class="btn btn-small edit-event-btn"
					data-event-id="${event.id}">
					<i class="fas fa-edit"></i> Bearbeiten
				</button>
				<c:if test="${event.status != 'ABGESCHLOSSEN'}">
					<button type="button"
						class="btn btn-small btn-success assign-users-btn"
						data-event-id="${event.id}"
						data-event-name="${fn:escapeXml(event.name)}">
						<i class="fas fa-users"></i> Zuweisen
					</button>
				</c:if>
				<form
					action="${pageContext.request.contextPath}/admin/veranstaltungen"
					method="post" class="js-confirm-form"
					data-confirm-message="Soll das Event '${fn:escapeXml(event.name)}' wirklich endgültig gelöscht werden?">
					<input type="hidden" name="action" value="delete"><input
						type="hidden" name="id" value="${event.id}">
					<button type="submit" class="btn btn-small btn-danger">
						<i class="fas fa-trash"></i> Löschen
					</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>


<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th class="sortable" data-sort-type="string">Zeitraum</th>
				<th class="sortable" data-sort-type="string">Status</th>
				<th style="min-width: 450px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="event" items="${eventList}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}">${event.name}</a></td>
					<td>${event.formattedEventDateTimeRange}</td>
					<td><span
						class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}">${event.status}</span></td>
					<td style="display: flex; gap: 5px; flex-wrap: wrap;">
						<button type="button" class="btn btn-small edit-event-btn"
							data-event-id="${event.id}">Bearbeiten</button> <c:if
							test="${event.status != 'ABGESCHLOSSEN'}">
							<button type="button"
								class="btn btn-small btn-success assign-users-btn"
								data-event-id="${event.id}"
								data-event-name="${fn:escapeXml(event.name)}">Zuweisen</button>
							<c:if
								test="${event.status == 'GEPLANT' || event.status == 'KOMPLETT'}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich starten? Der Chat wird aktiviert.">
									<input type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="LAUFEND">
									<button type="submit" class="btn btn-small btn-warning">Starten</button>
								</form>
							</c:if>
							<c:if test="${event.status == 'LAUFEND'}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich abschließen?">
									<input type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="ABGESCHLOSSEN">
									<button type="submit" class="btn btn-small"
										style="background-color: var(--text-muted-color);">Abschließen</button>
								</form>
							</c:if>
						</c:if>
						<form
							action="${pageContext.request.contextPath}/admin/veranstaltungen"
							method="post" class="inline-form js-confirm-form"
							data-confirm-message="Soll das Event '${fn:escapeXml(event.name)}' wirklich endgültig gelöscht werden?">
							<input type="hidden" name="action" value="delete"><input
								type="hidden" name="id" value="${event.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<jsp:include page="/WEB-INF/jspf/event_modals.jspf" />

<script id="allCoursesData" type="application/json">[<c:forEach var="c" items="${allCourses}" varStatus="loop">{"id":${c.id},"name":"<c:out value="${c.name}"/>"}<c:if test="${not loop.last}">,</c:if></c:forEach>]</script>
<script id="allItemsData" type="application/json">[<c:forEach var="i" items="${allItems}" varStatus="loop">{"id":${i.id},"name":"<c:out value="${i.name} (verfügbar: ${i.availableQuantity})"/>"}<c:if test="${not loop.last}">,</c:if></c:forEach>]</script>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_events_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_files.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Datei- & Kategorienverwaltung" />
</c:import>

<h1>
	<i class="fas fa-folder-open"></i> Datei- & Kategorienverwaltung
</h1>
<p>Verwalten Sie hier alle hochgeladenen Dateien und deren
	Kategorien.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid"
	style="grid-template-columns: 1fr 2fr; align-items: start;">

	<div class="card">
		<h2>Aktionen</h2>
		<form
			action="${pageContext.request.contextPath}/admin/dateien/kategorien/erstellen"
			method="post" style="margin-bottom: 2rem;">
			<div class="form-group">
				<label for="newCategoryName">Neue Kategorie erstellen</label> <input
					type="text" name="categoryName" id="newCategoryName" required>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-plus"></i> Erstellen
			</button>
		</form>

		<hr>

		<h3 style="margin-top: 1.5rem;">Datei hochladen</h3>
		<form action="${pageContext.request.contextPath}/admin/dateien"
			method="post" enctype="multipart/form-data">
			<div class="form-group">
				<label for="file">Datei auswählen</label> <input type="file"
					name="file" id="file" class="file-input" data-max-size="20971520"
					required> <small class="file-size-warning">Datei
					ist zu groß! (Max. 20 MB)</small>
			</div>
			<div class="form-group">
				<label for="categoryId">In Kategorie</label> <select
					name="categoryId" id="categoryId" required>
					<option value="">-- Bitte wählen --</option>
					<c:forEach var="cat" items="${allCategories}">
						<option value="${cat.id}">${cat.name}</option>
					</c:forEach>
				</select>
			</div>
			<div class="form-group">
				<label for="requiredRole">Sichtbar für</label> <select
					name="requiredRole" id="requiredRole">
					<option value="NUTZER" selected>Alle Nutzer</option>
					<option value="ADMIN">Nur Admins</option>
				</select>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-cloud-upload-alt"></i> Hochladen
			</button>
		</form>
	</div>

	<div class="card">
		<h2>Vorhandene Dateien nach Kategorie</h2>
		<c:if test="${empty groupedFiles}">
			<p>Es sind keine Kategorien oder Dateien vorhanden.</p>
		</c:if>

		<c:forEach var="categoryEntry" items="${groupedFiles}">
			<div class="category-group" style="margin-bottom: 2rem;">
				<h3
					style="border-bottom: 1px solid var(--border-color); padding-bottom: 0.5rem;">
					<i class="fas fa-folder"></i>
					<c:out value="${categoryEntry.key}" />
				</h3>
				<ul class="file-list">
					<c:if test="${empty categoryEntry.value}">
						<li style="justify-content: center;">Keine Dateien in dieser
							Kategorie.</li>
					</c:if>
					<c:forEach var="file" items="${categoryEntry.value}">
						<li>
							<div class="file-info">
								<a
									href="${pageContext.request.contextPath}/download?file=${fn:escapeXml(file.filepath)}"
									title="Datei herunterladen">${file.filename}</a> <small
									class="file-meta">(Sichtbar für: ${file.requiredRole})</small>
							</div>
							<form action="${pageContext.request.contextPath}/admin/dateien"
								method="post" class="js-confirm-form"
								data-confirm-message="Datei '${fn:escapeXml(file.filename)}' wirklich löschen?">
								<input type="hidden" name="action" value="delete"> <input
									type="hidden" name="fileId" value="${file.id}">
								<button type="submit" class="btn btn-small btn-danger-outline"
									title="Löschen">
									<i class="fas fa-trash-alt"></i>
								</button>
							</form>
						</li>
					</c:forEach>
				</ul>
			</div>
		</c:forEach>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script>
// Script for file size validation and confirmation modals
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.js-confirm-form').forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
            showConfirmationModal(message, () => this.submit());
        });
    });

    document.querySelectorAll('.file-input').forEach(input => {
        input.addEventListener('change', (e) => {
            const file = e.target.files[0];
            const maxSize = parseInt(e.target.dataset.maxSize, 10);
            const warningElement = e.target.nextElementSibling;
            if (file && file.size > maxSize) {
                warningElement.style.display = 'block';
                e.target.value = '';
            } else if (warningElement) {
                warningElement.style.display = 'none';
            }
        });
    });
});
</script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_kits.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Kit-Verwaltung" />
</c:import>

<h1>
	<i class="fas fa-box-open"></i> Kit-Verwaltung
</h1>
<p>Verwalten Sie hier wiederverwendbare Material-Zusammenstellungen
	(Kits oder Koffer).</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-kit-btn">
		<i class="fas fa-plus"></i> Neues Kit anlegen
	</button>
</div>

<div class="card">
	<c:if test="${empty kits}">
		<p>Es wurden noch keine Kits erstellt.</p>
	</c:if>
	<c:forEach var="kit" items="${kits}">
		<div class="kit-container"
			style="border-bottom: 1px solid var(--border-color); padding-bottom: 1.5rem; margin-bottom: 1.5rem;">
			<div class="kit-header"
				style="display: flex; justify-content: space-between; align-items: center; cursor: pointer;">
				<div>
					<h3>
						<i class="fas fa-chevron-down toggle-icon"></i>
						<c:out value="${kit.name}" />
					</h3>
					<p
						style="margin: -0.5rem 0 0 1.75rem; color: var(--text-muted-color);">
						<c:out value="${kit.description}" />
					</p>
				</div>
				<div style="display: flex; gap: 0.5rem;">
					<%-- DEFINITIVE FIX 2: Manually construct the final URL to prevent any JSTL misinterpretation. --%>
					<c:set var="absoluteActionUrl"
						value="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/pack-kit?kitId=${kit.id}" />
					<c:set var="qrApiUrl"
						value="https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${fn:escapeXml(absoluteActionUrl)}" />
					<a href="${qrApiUrl}" target="_blank" class="btn btn-small">QR-Code</a>

					<button type="button"
						class="btn btn-small btn-secondary edit-kit-btn"
						data-kit-id="${kit.id}" data-kit-name="${fn:escapeXml(kit.name)}"
						data-kit-desc="${fn:escapeXml(kit.description)}"
						data-kit-location="${fn:escapeXml(kit.location)}">Bearbeiten</button>
					<form action="${pageContext.request.contextPath}/admin/kits"
						method="post" class="js-confirm-form"
						data-confirm-message="Kit '${fn:escapeXml(kit.name)}' wirklich löschen?">
						<input type="hidden" name="action" value="delete"> <input
							type="hidden" name="id" value="${kit.id}">
						<button type="submit" class="btn btn-small btn-danger">Löschen</button>
					</form>
				</div>
			</div>
			<div class="kit-content"
				style="display: none; padding-left: 2rem; margin-top: 1rem;">

				<form action="${pageContext.request.contextPath}/admin/kits"
					method="post">
					<input type="hidden" name="action" value="updateKitItems">
					<input type="hidden" name="kitId" value="${kit.id}">

					<h4>Inhalt bearbeiten</h4>
					<div id="kit-items-container-${kit.id}" class="kit-items-container">
						<c:if test="${empty kit.items}">
							<p class="no-items-message">Dieses Kit ist leer. Fügen Sie
								einen Artikel hinzu.</p>
						</c:if>
						<c:forEach var="item" items="${kit.items}">
							<div class="dynamic-row">
								<select name="itemIds" class="form-group">
									<c:forEach var="storageItem" items="${allItems}">
										<option value="${storageItem.id}"
											${storageItem.id == item.itemId ? 'selected' : ''}>
											<c:out value="${storageItem.name}" />
										</option>
									</c:forEach>
								</select> <input type="number" name="quantities" value="${item.quantity}"
									min="1" class="form-group" style="max-width: 100px;">
								<button type="button"
									class="btn btn-small btn-danger btn-remove-kit-item-row"
									title="Zeile entfernen">×</button>
							</div>
						</c:forEach>
					</div>

					<div
						style="margin-top: 1rem; display: flex; justify-content: space-between; align-items: center;">
						<button type="button" class="btn btn-small btn-add-kit-item-row"
							data-container-id="kit-items-container-${kit.id}">
							<i class="fas fa-plus"></i> Zeile hinzufügen
						</button>
						<button type="submit" class="btn btn-success">
							<i class="fas fa-save"></i> Kit-Inhalt speichern
						</button>
					</div>
				</form>

			</div>
		</div>
	</c:forEach>
</div>

<!-- Modal for Create/Edit Kit -->
<div class="modal-overlay" id="kit-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3>Kit verwalten</h3>
		<form action="${pageContext.request.contextPath}/admin/kits"
			method="post">
			<input type="hidden" name="action" value=""> <input
				type="hidden" name="id" value="">
			<div class="form-group">
				<label for="name-modal">Name des Kits</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>
			<div class="form-group">
				<label for="location-modal">Physischer Standort des Kits</label> <input
					type="text" id="location-modal" name="location"
					placeholder="z.B. Lager, Schrank 3, Fach A">
			</div>
			<button type="submit" class="btn">Speichern</button>
		</form>
	</div>
</div>

<script id="allItemsData" type="application/json">
[<c:forEach var="i" items="${allItems}" varStatus="loop">{"id": ${i.id},"name": "<c:out value="${fn:escapeXml(i.name)}"/>", "availableQuantity": ${i.availableQuantity}}<c:if test="${not loop.last}">,</c:if></c:forEach>]
</script>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_kits.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_log.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Log" />
</c:import>

<h1>Admin Aktions-Protokoll</h1>

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Nach Details, Name oder Aktion filtern..."
			style="width: 100%;" aria-label="Protokoll filtern">
	</div>
</div>

<div class="table-wrapper">
	<table class="data-table searchable-table">
		<thead>
			<tr>
				<th>Wann</th>
				<th>Wer</th>
				<th>Aktionstyp</th>
				<th>Details</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="log" items="${logs}">
				<tr>
					<td><c:out value="${log.formattedActionTimestamp}" /> Uhr</td>
					<td><c:out value="${log.adminUsername}" /></td>
					<td><c:out value="${log.actionType}" /></td>
					<td><c:out value="${log.details}" /></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_matrix.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Qualifikations-Matrix" />
</c:import>

<h1>
	<i class="fas fa-th-list"></i> Qualifikations-Matrix
</h1>
<p>Klicken Sie auf eine Zelle, um die Teilnahme an einem Meeting zu
	bearbeiten. Die Kopfzeile und die Benutzerleiste bleiben beim Scrollen
	fixiert.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th rowspan="2" class="sticky-header sticky-col"
					style="vertical-align: middle; left: 0; z-index: 15;">Nutzer /
					Lehrgang ↓</th>
				<c:forEach var="course" items="${allCourses}">
					<th colspan="${fn:length(meetingsByCourse[course.id])}"
						class="sticky-header" style="text-align: center;"><a
						href="${pageContext.request.contextPath}/admin/lehrgaenge"
						title="Vorlagen verwalten">${course.abbreviation}</a></th>
				</c:forEach>
			</tr>
			<tr>
				<c:forEach var="course" items="${allCourses}">
					<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
						<th class="sticky-header"
							style="text-align: center; min-width: 120px;"><a
							href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
							title="Meetings für '${course.name}' verwalten">${meeting.name}</a>
						</th>
					</c:forEach>
				</c:forEach>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="user" items="${allUsers}">
				<tr>
					<td class="sticky-col" style="font-weight: 500; left: 0;"><a
						href="${pageContext.request.contextPath}/admin/mitglieder?action=details&id=${user.id}">${user.username}</a>
					</td>
					<c:forEach var="course" items="${allCourses}">
						<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
							<c:set var="attendanceKey" value="${user.id}-${meeting.id}" />
							<c:set var="attendance" value="${attendanceMap[attendanceKey]}" />
							<td class="qual-cell" data-user-id="${user.id}"
								data-user-name="${user.username}"
								data-meeting-id="${meeting.id}"
								data-meeting-name="${course.name} - ${meeting.name}"
								data-attended="${not empty attendance && attendance.attended}"
								data-remarks="${not empty attendance ? attendance.remarks : ''}"
								style="text-align: center; font-weight: bold; cursor: pointer;"
								title="Klicken zum Bearbeiten"><c:choose>
									<c:when test="${not empty attendance && attendance.attended}">
										<span style="font-size: 1.2rem;">✔</span>
									</c:when>
									<c:otherwise>
										<span class="text-muted">-</span>
									</c:otherwise>
								</c:choose></td>
						</c:forEach>
					</c:forEach>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Attendance Modal -->
<div class="modal-overlay" id="attendance-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3>Teilnahme bearbeiten</h3>
		<p id="modal-title" style="font-weight: bold; margin-bottom: 1rem;"></p>
		<form action="${pageContext.request.contextPath}/admin/teilnahme"
			method="post">
			<input type="hidden" name="returnTo" value="matrix"> <input
				type="hidden" name="userId" id="modal-user-id"> <input
				type="hidden" name="meetingId" id="modal-meeting-id">
			<div class="form-group"
				style="display: flex; align-items: center; gap: 1rem;">
				<label for="modal-attended" style="margin-bottom: 0;">Teilgenommen:</label>
				<input type="checkbox" id="modal-attended" name="attended"
					value="true" style="width: auto; height: 1.5rem;">
			</div>
			<div class="form-group">
				<label for="modal-remarks">Bemerkungen:</label>
				<textarea name="remarks" id="modal-remarks" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_matrix.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_meeting_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Meetings für ${parentCourse.name}" />
</c:import>

<h1>
	Meetings für "
	<c:out value="${parentCourse.name}" />
	"
</h1>
<a href="${pageContext.request.contextPath}/admin/lehrgaenge"
	style="margin-bottom: 1rem; display: inline-block;"> <i
	class="fas fa-arrow-left"></i> Zurück zu allen Vorlagen
</a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-meeting-btn">
		<i class="fas fa-plus"></i> Neues Meeting planen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Meetings filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<c:if test="${empty meetings}">
	<div class="card">
		<p>Für diesen Lehrgang wurden noch keine Meetings geplant.</p>
	</div>
</c:if>

<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Meeting-Name</th>
				<th class="sortable" data-sort-type="string">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Leitung</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="meeting" items="${meetings}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/meeting/details?id=${meeting.id}"><c:out
								value="${meeting.name}" /></a></td>
					<td><c:out value="${meeting.formattedMeetingDateTimeRange}" /></td>
					<td><c:out
							value="${empty meeting.leaderUsername ? 'N/A' : meeting.leaderUsername}" /></td>
					<td style="display: flex; gap: 0.5rem;">
						<button type="button" class="btn btn-small edit-meeting-btn"
							data-meeting-id="${meeting.id}">Bearbeiten & Anhänge</button>
						<form action="${pageContext.request.contextPath}/admin/meetings"
							method="post" class="inline-form js-confirm-form"
							data-confirm-message="Meeting '${fn:escapeXml(meeting.name)}' wirklich löschen?">
							<input type="hidden" name="action" value="delete"> <input
								type="hidden" name="courseId" value="${parentCourse.id}">
							<input type="hidden" name="meetingId" value="${meeting.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- MODAL FOR CREATE/EDIT MEETING -->
<div class="modal-overlay" id="meeting-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="meeting-modal-title">Meeting</h3>
		<form id="meeting-modal-form"
			action="${pageContext.request.contextPath}/admin/meetings"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="action" id="meeting-action"> <input
				type="hidden" name="courseId" value="${parentCourse.id}"> <input
				type="hidden" name="id" id="meeting-id">
			<div class="form-group">
				<label for="name-modal">Name des Meetings</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="meetingDateTime-modal">Beginn</label> <input
						type="datetime-local" id="meetingDateTime-modal"
						name="meetingDateTime" required>
				</div>
				<div class="form-group">
					<label for="endDateTime-modal">Ende (optional)</label> <input
						type="datetime-local" id="endDateTime-modal" name="endDateTime">
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="location-modal">Ort</label><input type="text"
						id="location-modal" name="location">
				</div>
				<div class="form-group">
					<label for="leader-modal">Leitende Person</label> <select
						name="leaderUserId" id="leader-modal">
						<option value="">(Keine)</option>
						<c:forEach var="user" items="${allUsers}">
							<option value="${user.id}"><c:out
									value="${user.username}" /></option>
						</c:forEach>
					</select>
				</div>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>
			<div class="card"
				style="margin-top: 1rem; padding: 1rem; background-color: var(--bg-color);">
				<h4 class="card-title" style="border: none; padding: 0;">Anhänge</h4>
				<ul id="modal-attachments-list" class="details-list"
					style="margin-bottom: 1rem;"></ul>
				<div class="form-group">
					<label for="attachment-modal">Neuen Anhang hochladen</label> <input
						type="file" name="attachment" id="attachment-modal"
						class="file-input" data-max-size="20971520"> <small
						class="file-size-warning" style="color: red; display: none;">Datei
						ist zu groß! (Max. 20 MB)</small>
				</div>
				<div class="form-group">
					<label for="requiredRole-modal">Sichtbar für</label> <select
						name="requiredRole" id="requiredRole-modal">
						<option value="NUTZER" selected>Alle Nutzer</option>
						<option value="ADMIN">Nur Admins</option>
					</select>
				</div>
			</div>
			<button type="submit" class="btn" style="margin-top: 1.5rem;">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_meeting_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_reports.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Berichte & Analysen" />
</c:import>

<h1>
	<i class="fas fa-chart-pie"></i> Berichte & Analysen
</h1>
<p>Hier finden Sie zusammengefasste Daten und Analysen über die
	Anwendungsnutzung.</p>

<div class="dashboard-grid">
	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Event-Trend (Letzte 12 Monate)</h2>
		<div style="position: relative; height: 300px;">
			<canvas id="eventTrendChart"></canvas>
		</div>
	</div>
	<div class="card">
		<h2 class="card-title">Top 10 Aktivste Benutzer</h2>
		<div style="position: relative; height: 400px;">
			<canvas id="userActivityChart"></canvas>
		</div>
		<a href="<c:url value='/admin/berichte?report=user_activity'/>"
			class="btn btn-small" style="margin-top: 1rem;">Vollständiger
			Bericht</a>
	</div>
	<div class="card">
		<h2 class="card-title">Sonstige Berichte</h2>
		<ul class="details-list">
			<li><a
				href="<c:url value='/admin/berichte?report=event_participation'/>">Teilnahme-Zusammenfassung</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt die
					Anzahl der Anmeldungen pro Event.</p></li>
			<li><a
				href="<c:url value='/admin/berichte?report=inventory_usage'/>">Nutzungsfrequenz
					(Material)</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt,
					welche Artikel am häufigsten entnommen werden.</p></li>
			<li><span>Gesamtwert des Lagers</span> <span
				style="font-weight: bold;"> <fmt:setLocale value="de_DE" />
					<fmt:formatNumber value="${totalInventoryValue}" type="currency" />
			</span></li>
		</ul>
	</div>
</div>

<script>
	// Embed data safely for JS
	const eventTrendData = JSON.parse('${eventTrendDataJson}');
	const userActivityData = JSON.parse('${userActivityDataJson}');
</script>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_reports.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_storage_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lagerverwaltung" />
</c:import>

<h1>
	<i class="fas fa-warehouse"></i> Lagerverwaltung
</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-item-btn">
		<i class="fas fa-plus"></i> Neuen Artikel anlegen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Artikel filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<div class="table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th class="sortable" data-sort-type="string">Ort</th>
				<th class="sortable" data-sort-type="string">Schrank</th>
				<th class="sortable" data-sort-type="string">Fach</th>
				<th class="sortable" data-sort-type="number">Verfügbar</th>
				<th>Status</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="item" items="${storageList}">
				<tr
					class="${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
					<td class="item-name-cell"><a
						href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
								value="${item.name}" /></a> <c:if
							test="${not empty item.imagePath}">
							<button class="camera-btn lightbox-trigger"
								data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
								title="Bild anzeigen">
								<i class="fas fa-camera"></i>
							</button>
						</c:if></td>
					<td><c:out value="${item.location}" /></td>
					<td><c:out
							value="${not empty item.cabinet ? item.cabinet : '-'}" /></td>
					<td><c:out
							value="${not empty item.compartment ? item.compartment : '-'}" /></td>
					<td>${item.availableQuantity} / ${item.quantity} <c:if
							test="${item.defectiveQuantity > 0}">
							<span class="text-danger">(${item.defectiveQuantity} def.)</span>
						</c:if>
					</td>
					<td><span
						class="status-badge ${item.status == 'IN_STORAGE' ? 'status-ok' : (item.status == 'CHECKED_OUT' ? 'status-danger' : 'status-warn')}"><c:out
								value="${item.status}" /></span></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
						<button type="button" class="btn btn-small edit-item-btn"
							data-fetch-url="<c:url value='/admin/lager?action=getItemData&id=${item.id}'/>">Bearbeiten</button>

						<c:set var="absoluteActionUrl"
							value="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/lager/aktionen?id=${item.id}" />
						<c:set var="qrApiUrl"
							value="https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${fn:escapeXml(absoluteActionUrl)}" />
						<a href="${qrApiUrl}" target="_blank"
						class="btn btn-small btn-secondary">QR-Code</a>

						<button class="btn btn-small btn-warning defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-max-qty="${item.quantity}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}">Defekt</button>

						<button class="btn btn-small btn-info maintenance-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-current-status="${item.status}">Wartung</button>

						<form action="${pageContext.request.contextPath}/admin/lager"
							method="post" class="js-confirm-form"
							data-confirm-message="Artikel '${fn:escapeXml(item.name)}' wirklich löschen?">
							<input type="hidden" name="action" value="delete"> <input
								type="hidden" name="id" value="${item.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>

<jsp:include page="/WEB-INF/jspf/storage_modals.jspf" />
<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_storage_list.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_system.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Systemstatus" />
</c:import>

<h1>
	<i class="fas fa-server"></i> Systemstatus
</h1>
<p>Live-Statistiken des Servers. Die Daten werden alle 5 Sekunden
	aktualisiert.</p>

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-microchip"></i> CPU Auslastung
		</h2>
		<div class="progress-bar-container">
			<div id="cpu-progress" class="progress-bar"></div>
		</div>
		<p id="cpu-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-memory"></i> Arbeitsspeicher (RAM)
		</h2>
		<div class="progress-bar-container">
			<div id="ram-progress" class="progress-bar"></div>
		</div>
		<p id="ram-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-hdd"></i> Festplattenspeicher
		</h2>
		<div class="progress-bar-container">
			<div id="disk-progress" class="progress-bar"></div>
		</div>
		<p id="disk-text" class="progress-text">Lade...</p>
	</div>
	<div class="card" id="battery-card" style="display: none;">
		<h2 class="card-title">
			<i class="fas fa-battery-half"></i> Akku
		</h2>
		<div class="progress-bar-container">
			<div id="battery-progress" class="progress-bar"></div>
		</div>
		<p id="battery-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-clock"></i> Server Uptime
		</h2>
		<p id="uptime-text"
			style="font-size: 1.5rem; font-weight: 500; color: var(--primary-color); text-align: center;">Lade...</p>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script type="text/javascript" src="/js/admin/admin_system.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_users.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Benutzerverwaltung" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />

<h1>
	<i class="fas fa-users-cog"></i> Benutzerverwaltung
</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if test="${userPermissions.contains('USER_CREATE')}">
		<button type="button" class="btn btn-success" id="new-user-btn">
			<i class="fas fa-user-plus"></i> Neuen Benutzer anlegen
		</button>
	</c:if>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Benutzer filtern..." aria-label="Benutzer filtern">
	</div>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-list">
	<c:forEach var="user" items="${requestScope.userList}">
		<div class="list-item-card"
			data-searchable-content="${user.username} ${user.roleName}">
			<h3 class="card-title">${user.username}</h3>
			<div class="card-row">
				<span>Rolle:</span> <span>${user.roleName}</span>
			</div>
			<div class="card-actions">
				<c:if test="${userPermissions.contains('USER_UPDATE')}">
					<button type="button" class="btn btn-small edit-user-btn"
						data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
				</c:if>
				<a
					href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
					class="btn btn-small">Details</a>
				<c:if
					test="${sessionScope.user.id != user.id and userPermissions.contains('USER_DELETE')}">
					<form action="<c:url value='/admin/mitglieder'/>" method="post"
						class="js-confirm-form"
						data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
						<input type="hidden" name="action" value="delete"><input
							type="hidden" name="userId" value="${user.id}">
						<button type="submit" class="btn btn-small btn-danger">Löschen</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="number">ID</th>
				<th class="sortable" data-sort-type="string">Benutzername</th>
				<th class="sortable" data-sort-type="string">Rolle</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="user" items="${requestScope.userList}">
				<tr>
					<td>${user.id}</td>
					<td>${user.username}</td>
					<td>${user.roleName}</td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><c:if
							test="${userPermissions.contains('USER_UPDATE')}">
							<button type="button" class="btn btn-small edit-user-btn"
								data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
						</c:if> <a
						href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
						class="btn btn-small">Details</a> <c:if
							test="${sessionScope.user.id != user.id}">
							<c:if test="${userPermissions.contains('USER_PASSWORD_RESET')}">
								<form action="<c:url value='/admin/mitglieder'/>" method="post"
									class="js-confirm-form"
									data-confirm-message="Passwort für '${fn:escapeXml(user.username)}' zurücksetzen? Das neue Passwort wird angezeigt.">
									<input type="hidden" name="action" value="resetPassword"><input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-warning">Passwort
										Reset</button>
								</form>
							</c:if>
							<c:if test="${userPermissions.contains('USER_DELETE')}">
								<form action="<c:url value='/admin/mitglieder'/>" method="post"
									class="js-confirm-form"
									data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
									<input type="hidden" name="action" value="delete"><input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-danger">Löschen</button>
								</form>
							</c:if>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<%@ include file="/WEB-INF/jspf/user_modals.jspf"%>
<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_users.js"></script>

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_user_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle"
		value="Benutzerdetails: ${userToView.username}" />
</c:import>

<h1>
	Benutzerdetails:
	<c:out value="${userToView.username}" />
</h1>
<a href="${pageContext.request.contextPath}/admin/mitglieder"
	style="display: inline-block; margin-bottom: 1rem;"> <i
	class="fas fa-arrow-left"></i> Zurück zur Benutzerliste
</a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="responsive-dashboard-grid">
	<div class="card">
		<h2 class="card-title">Stammdaten</h2>
		<ul class="details-list">
			<li><strong>Benutzername:</strong> <c:out
					value="${userToView.username}" /></li>
			<li><strong>Rolle:</strong> <c:out
					value="${userToView.roleName}" /></li>
			<li><strong>Jahrgang:</strong> <c:out
					value="${userToView.classYear}" /></li>
			<li><strong>Klasse:</strong> <c:out
					value="${userToView.className}" /></li>
			<li><strong>E-Mail:</strong> <c:out
					value="${not empty userToView.email ? userToView.email : 'Nicht hinterlegt'}" /></li>
			<li><strong>Registriert seit:</strong> <c:out
					value="${userToView.formattedCreatedAt}" /> Uhr</li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Event-Teilnahmehistorie</h2>
		<div class="table-wrapper"
			style="max-height: 450px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Event</th>
						<th>Datum</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty eventHistory}">
						<tr>
							<td colspan="3" style="text-align: center;">Keine
								Event-Historie vorhanden.</td>
						</tr>
					</c:if>
					<c:forEach var="event" items="${eventHistory}">
						<tr>
							<td><a
								href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
										value="${event.name}" /></a></td>
							<td><c:out value="${event.formattedEventDateTime}" /> Uhr</td>
							<td><c:out value="${event.userAttendanceStatus}" /></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\report_display.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Bericht: ${reportTitle}" />
</c:import>

<h1>${reportTitle}</h1>
<div class="table-controls">
	<a href="<c:url value='/admin/reports'/>" class="btn btn-secondary"><i
		class="fas fa-arrow-left"></i> Zurück zur Berichtsübersicht</a> <a
		href="?report=${param.report}&export=csv" class="btn btn-success"><i
		class="fas fa-file-csv"></i> Als CSV exportieren</a>
</div>

<div class="table-wrapper">
	<c:if test="${not empty reportData}">
		<table class="data-table">
			<thead>
				<tr>
					<c:forEach var="header" items="${reportData[0].keySet()}">
						<th><c:out value="${fn:replace(header, '_', ' ')}" /></th>
					</c:forEach>
				</tr>
			</thead>
			<tbody>
				<c:forEach var="row" items="${reportData}">
					<tr>
						<c:forEach var="key" items="${reportData[0].keySet()}">
							<td><c:out value="${row[key]}" /></td>
						</c:forEach>
					</tr>
				</c:forEach>
			</tbody>
		</table>
	</c:if>
	<c:if test="${empty reportData}">
		<p style="text-align: center; padding: 2rem;">Keine Daten für
			diesen Bericht verfügbar.</p>
	</c:if>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
