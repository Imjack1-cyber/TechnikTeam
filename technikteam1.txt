
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\AdminMeetingServlet.java
========================================================================

package de.technikteam.servlet.admin;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.LocalDateAdapter;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.AttachmentDAO;
import de.technikteam.dao.CourseDAO;
import de.technikteam.dao.MeetingDAO;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.Attachment;
import de.technikteam.model.Course;
import de.technikteam.model.Meeting;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.service.ConfigurationService;
import de.technikteam.util.CSRFUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Singleton
public class AdminMeetingServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(AdminMeetingServlet.class);

	private final MeetingDAO meetingDAO;
	private final CourseDAO courseDAO;
	private final AttachmentDAO attachmentDAO;
	private final UserDAO userDAO;
	private final AdminLogService adminLogService;
	private final ConfigurationService configService;
	private final Gson gson;

	@Inject
	public AdminMeetingServlet(MeetingDAO meetingDAO, CourseDAO courseDAO, AttachmentDAO attachmentDAO, UserDAO userDAO,
			AdminLogService adminLogService, ConfigurationService configService) {
		this.meetingDAO = meetingDAO;
		this.courseDAO = courseDAO;
		this.attachmentDAO = attachmentDAO;
		this.userDAO = userDAO;
		this.adminLogService = adminLogService;
		this.configService = configService;
		this.gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter())
				.registerTypeAdapter(java.time.LocalDate.class, new LocalDateAdapter()).create();
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String action = req.getParameter("action");
		if ("getMeetingData".equals(action)) {
			getMeetingDataAsJson(req, resp);
		} else {
			listMeetings(req, resp);
		}
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException {
		req.setCharacterEncoding("UTF-8");
		if (!CSRFUtil.isTokenValid(req)) {
			resp.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF Token");
			return;
		}
		String action = req.getParameter("action");
		switch (action) {
		case "create":
		case "update":
			handleCreateOrUpdate(req, resp);
			break;
		case "delete":
			handleDelete(req, resp);
			break;
		case "deleteAttachment":
			handleDeleteAttachment(req, resp);
			break;
		default:
			resp.sendRedirect(req.getContextPath() + "/admin/meetings");
			break;
		}
	}

	private void listMeetings(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		int courseId = Integer.parseInt(req.getParameter("courseId"));
		Course parentCourse = courseDAO.getCourseById(courseId);
		List<Meeting> meetings = meetingDAO.getMeetingsForCourse(courseId);
		List<User> allUsers = userDAO.getAllUsers();
		req.setAttribute("parentCourse", parentCourse);
		req.setAttribute("meetings", meetings);
		req.setAttribute("allUsers", allUsers);
		req.getRequestDispatcher("/views/admin/admin_meeting_list.jsp").forward(req, resp);
	}

	private void getMeetingDataAsJson(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		try {
			int meetingId = Integer.parseInt(req.getParameter("id"));
			Meeting meeting = meetingDAO.getMeetingById(meetingId);
			if (meeting != null) {
				List<Attachment> attachments = attachmentDAO.getAttachmentsForParent("MEETING", meetingId, "ADMIN");
				Map<String, Object> responseData = new HashMap<>();
				responseData.put("meetingData", meeting);
				responseData.put("attachmentsData", attachments);
				String jsonResponse = gson.toJson(responseData);
				resp.setContentType("application/json");
				resp.setCharacterEncoding("UTF-8");
				resp.getWriter().write(jsonResponse);
			} else {
				resp.sendError(HttpServletResponse.SC_NOT_FOUND, "Meeting nicht gefunden");
			}
		} catch (NumberFormatException e) {
			resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige Meeting-ID");
		}
	}

	private void handleCreateOrUpdate(HttpServletRequest req, HttpServletResponse resp)
			throws IOException, ServletException {
		User adminUser = (User) req.getSession().getAttribute("user");
		String action = req.getParameter("action");
		boolean isUpdate = "update".equals(action);
		int courseId = Integer.parseInt(req.getParameter("courseId"));
		int meetingId = 0;

		try {
			Meeting meeting = new Meeting();
			meeting.setCourseId(courseId);
			meeting.setName(req.getParameter("name"));
			meeting.setDescription(req.getParameter("description"));
			meeting.setLocation(req.getParameter("location"));

			String leaderIdStr = req.getParameter("leaderUserId");
			if (leaderIdStr != null && !leaderIdStr.isEmpty()) {
				meeting.setLeaderUserId(Integer.parseInt(leaderIdStr));
			}
			String startDateTimeStr = req.getParameter("meetingDateTime");
			if (startDateTimeStr != null && !startDateTimeStr.isEmpty()) {
				meeting.setMeetingDateTime(LocalDateTime.parse(startDateTimeStr));
			}
			String endDateTimeStr = req.getParameter("endDateTime");
			if (endDateTimeStr != null && !endDateTimeStr.isEmpty()) {
				meeting.setEndDateTime(LocalDateTime.parse(endDateTimeStr));
			}

			Course parentCourse = courseDAO.getCourseById(courseId);
			String parentCourseName = (parentCourse != null) ? parentCourse.getName() : "N/A";

			if (isUpdate) {
				meetingId = Integer.parseInt(req.getParameter("id"));
				meeting.setId(meetingId);
				if (meetingDAO.updateMeeting(meeting)) {
					adminLogService.log(adminUser.getUsername(), "UPDATE_MEETING", "Meeting '" + meeting.getName()
							+ "' (ID: " + meetingId + ") für Lehrgang '" + parentCourseName + "' aktualisiert.");
					req.getSession().setAttribute("successMessage", "Meeting erfolgreich aktualisiert.");
				} else {
					req.getSession().setAttribute("errorMessage", "Fehler beim Aktualisieren des Meetings.");
				}
			} else {
				meetingId = meetingDAO.createMeeting(meeting);
				if (meetingId > 0) {
					adminLogService.log(adminUser.getUsername(), "CREATE_MEETING", "Meeting '" + meeting.getName()
							+ "' (ID: " + meetingId + ") für Lehrgang '" + parentCourseName + "' geplant.");
					req.getSession().setAttribute("successMessage", "Neues Meeting erfolgreich geplant.");
				} else {
					req.getSession().setAttribute("errorMessage", "Fehler beim Erstellen des Meetings.");
				}
			}

			Part filePart = req.getPart("attachment");
			if (filePart != null && filePart.getSize() > 0 && meetingId > 0) {
				String requiredRole = req.getParameter("requiredRole");
				handleAttachmentUpload(filePart, meetingId, requiredRole, adminUser, req);
			}
		} catch (DateTimeParseException | NumberFormatException e) {
			req.getSession().setAttribute("errorMessage", "Ungültiges Datenformat.");
		} catch (Exception e) {
			logger.error("Error creating/updating meeting.", e);
			req.getSession().setAttribute("errorMessage", "Fehler: " + e.getMessage());
		}
		resp.sendRedirect(req.getContextPath() + "/admin/meetings?courseId=" + courseId);
	}

	private void handleDelete(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		int courseId = Integer.parseInt(req.getParameter("courseId"));
		int meetingId = Integer.parseInt(req.getParameter("meetingId"));
		User adminUser = (User) req.getSession().getAttribute("user");
		Meeting meeting = meetingDAO.getMeetingById(meetingId);
		if (meetingDAO.deleteMeeting(meetingId)) {
			String meetingName = (meeting != null) ? meeting.getName() : "N/A";
			String courseName = (meeting != null && meeting.getParentCourseName() != null)
					? meeting.getParentCourseName()
					: "N/A";
			String logDetails = String.format("Meeting '%s' (ID: %d) vom Lehrgang '%s' (Kurs-ID: %d) wurde gelöscht.",
					meetingName, meetingId, courseName, courseId);
			adminLogService.log(adminUser.getUsername(), "DELETE_MEETING", logDetails);
			req.getSession().setAttribute("successMessage", "Meeting erfolgreich gelöscht.");
		} else {
			req.getSession().setAttribute("errorMessage", "Meeting konnte nicht gelöscht werden.");
		}
		resp.sendRedirect(req.getContextPath() + "/admin/meetings?courseId=" + courseId);
	}

	private void handleDeleteAttachment(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		User adminUser = (User) req.getSession().getAttribute("user");
		int attachmentId = Integer.parseInt(req.getParameter("attachmentId"));
		int courseId = Integer.parseInt(req.getParameter("courseId"));
		Attachment attachment = attachmentDAO.getAttachmentById(attachmentId);
		if (attachment != null) {
			File physicalFile = new File(configService.getProperty("upload.directory"), attachment.getFilepath());
			if (physicalFile.exists()) {
				physicalFile.delete();
			}
			if (attachmentDAO.deleteAttachment(attachmentId)) {
				adminLogService.log(adminUser.getUsername(), "DELETE_ATTACHMENT", "Anhang '" + attachment.getFilename()
						+ "' von Meeting ID " + attachment.getParentId() + " gelöscht.");
				req.getSession().setAttribute("successMessage", "Anhang gelöscht.");
			} else {
				req.getSession().setAttribute("errorMessage", "Anhang konnte nicht aus DB gelöscht werden.");
			}
		} else {
			req.getSession().setAttribute("errorMessage", "Anhang nicht gefunden.");
		}
		resp.sendRedirect(req.getContextPath() + "/admin/meetings?courseId=" + courseId);
	}

	private void handleAttachmentUpload(Part filePart, int meetingId, String requiredRole, User adminUser,
			HttpServletRequest req) throws IOException {
		String uploadDir = configService.getProperty("upload.directory") + File.separator + "meetings";
		new File(uploadDir).mkdirs();
		String fileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();
		File targetFile = new File(uploadDir, fileName);
		filePart.write(targetFile.getAbsolutePath());
		Attachment attachment = new Attachment();
		attachment.setParentId(meetingId);
		attachment.setParentType("MEETING");
		attachment.setFilename(fileName);
		attachment.setFilepath("meetings/" + fileName);
		attachment.setRequiredRole(requiredRole);
		if (attachmentDAO.addAttachment(attachment)) {
			String logDetails = String.format("Anhang '%s' zu Meeting ID %d hinzugefügt. Sichtbar für: %s.", fileName,
					meetingId, requiredRole);
			adminLogService.log(adminUser.getUsername(), "ADD_MEETING_ATTACHMENT", logDetails);
		} else {
			req.getSession().setAttribute("errorMessage", "Anhang konnte nicht in DB gespeichert werden.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\AdminReportServlet.java
========================================================================

package de.technikteam.servlet.admin;

import com.google.gson.Gson;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.ReportDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Singleton
public class AdminReportServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(AdminReportServlet.class);
	private final ReportDAO reportDAO;
	private final Gson gson = new Gson();

	@Inject
	public AdminReportServlet(ReportDAO reportDAO) {
		this.reportDAO = reportDAO;
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String reportType = request.getParameter("report");
		String exportType = request.getParameter("export");

		if (reportType != null && !reportType.isEmpty()) {
			handleSpecificReport(request, response, reportType, exportType);
			return;
		}

		List<Map<String, Object>> eventTrendData = reportDAO.getEventCountByMonth(12);
		List<Map<String, Object>> userActivityData = reportDAO.getUserParticipationStats(10);
		request.setAttribute("eventTrendDataJson", gson.toJson(eventTrendData));
		request.setAttribute("userActivityDataJson", gson.toJson(userActivityData));
		request.setAttribute("totalInventoryValue", reportDAO.getTotalInventoryValue());
		request.getRequestDispatcher("/views/admin/admin_reports.jsp").forward(request, response);
	}

	private void handleSpecificReport(HttpServletRequest request, HttpServletResponse response, String reportType,
			String exportType) throws IOException, ServletException {
		List<Map<String, Object>> reportData;
		String reportTitle;
		switch (reportType) {
		case "user_activity":
			reportData = reportDAO.getUserActivityStats();
			reportTitle = "Benutzeraktivitäts-Bericht";
			break;
		case "event_participation":
			reportData = reportDAO.getEventParticipationSummary();
			reportTitle = "Event-Teilnahme-Bericht";
			break;
		case "inventory_usage":
			reportData = reportDAO.getInventoryUsageFrequency();
			reportTitle = "Lagernutzungs-Bericht";
			break;
		default:
			response.sendError(HttpServletResponse.SC_NOT_FOUND, "Unbekannter Berichtstyp.");
			return;
		}

		if ("csv".equalsIgnoreCase(exportType)) {
			exportToCsv(response, reportData, reportType + "_report.csv");
		} else {
			request.setAttribute("reportData", reportData);
			request.setAttribute("reportTitle", reportTitle);
			request.getRequestDispatcher("/views/admin/report_display.jsp").forward(request, response);
		}
	}

	private void exportToCsv(HttpServletResponse response, List<Map<String, Object>> data, String filename)
			throws IOException {
		response.setContentType("text/csv");
		response.setCharacterEncoding("UTF-8");
		response.setHeader("Content-Disposition", "attachment; filename=\"" + filename + "\"");
		if (data == null || data.isEmpty()) {
			response.getWriter().write("No data available to export.");
			return;
		}
		try (PrintWriter writer = response.getWriter()) {
			String header = String.join(",", data.get(0).keySet());
			writer.println(header);
			for (Map<String, Object> row : data) {
				String line = row.values().stream().map(this::escapeCsvField).collect(Collectors.joining(","));
				writer.println(line);
			}
		}
	}

	private String escapeCsvField(Object field) {
		if (field == null)
			return "";
		String fieldStr = field.toString();
		if (fieldStr.contains(",") || fieldStr.contains("\"") || fieldStr.contains("\n")) {
			return "\"" + fieldStr.replace("\"", "\"\"") + "\"";
		}
		return fieldStr;
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\AdminStorageServlet.java
========================================================================

package de.technikteam.servlet.admin;

import com.google.gson.Gson;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.MaintenanceLogDAO;
import de.technikteam.dao.StorageDAO;
import de.technikteam.model.MaintenanceLogEntry;
import de.technikteam.model.StorageItem;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.service.ConfigurationService;
import de.technikteam.service.StorageService;
import de.technikteam.util.CSRFUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.List;

@Singleton
public class AdminStorageServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(AdminStorageServlet.class);
	private final StorageDAO storageDAO;
	private final MaintenanceLogDAO maintenanceLogDAO;
	private final AdminLogService adminLogService;
	private final ConfigurationService configService;
	private final StorageService storageService;
	private final Gson gson = new Gson();

	@Inject
	public AdminStorageServlet(StorageDAO storageDAO, MaintenanceLogDAO maintenanceLogDAO,
			AdminLogService adminLogService, ConfigurationService configService, StorageService storageService) {
		this.storageDAO = storageDAO;
		this.maintenanceLogDAO = maintenanceLogDAO;
		this.adminLogService = adminLogService;
		this.configService = configService;
		this.storageService = storageService;
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String action = request.getParameter("action");
		if ("getItemData".equals(action)) {
			getItemDataAsJson(request, response);
			return;
		}

		List<StorageItem> storageList = storageDAO.getAllItems();
		request.setAttribute("storageList", storageList);
		request.getRequestDispatcher("/views/admin/admin_storage_list.jsp").forward(request, response);
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws IOException, ServletException {
		request.setCharacterEncoding("UTF-8");

		if (!CSRFUtil.isTokenValid(request)) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF Token");
			return;
		}

		String action = request.getParameter("action");

		switch (action) {
		case "create":
		case "update":
			handleCreateOrUpdate(request, response);
			break;
		case "delete":
			handleDelete(request, response);
			break;
		case "updateDefectStatus":
			handleDefectStatusUpdate(request, response);
			break;
		case "updateStatus":
			handleStatusUpdate(request, response);
			break;
		case "repair":
			handleRepair(request, response);
			break;
		default:
			response.sendRedirect(request.getContextPath() + "/admin/lager");
			break;
		}
	}

	private void getItemDataAsJson(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		try {
			int itemId = Integer.parseInt(req.getParameter("id"));
			StorageItem item = storageDAO.getItemById(itemId);
			if (item != null) {
				resp.setContentType("application/json");
				resp.setCharacterEncoding("UTF-8");
				resp.getWriter().write(gson.toJson(item));
			} else {
				resp.sendError(HttpServletResponse.SC_NOT_FOUND, "Item not found");
			}
		} catch (NumberFormatException e) {
			resp.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid item ID");
		}
	}

	private void handleCreateOrUpdate(HttpServletRequest request, HttpServletResponse response)
			throws IOException, ServletException {
		User adminUser = (User) request.getSession().getAttribute("user");
		boolean isCreate = "create".equals(request.getParameter("action"));

		try {
			StorageItem item = new StorageItem();
			item.setName(request.getParameter("name"));
			item.setLocation(request.getParameter("location"));
			item.setCabinet(request.getParameter("cabinet"));
			item.setCompartment(request.getParameter("compartment"));
			item.setQuantity(Integer.parseInt(request.getParameter("quantity")));
			item.setMaxQuantity(Integer.parseInt(request.getParameter("maxQuantity")));
			String weightStr = request.getParameter("weight_kg");
			item.setWeightKg(
					weightStr == null || weightStr.isEmpty() ? 0.0 : Double.parseDouble(weightStr.replace(',', '.')));
			String priceStr = request.getParameter("price_eur");
			item.setPriceEur(
					priceStr == null || priceStr.isEmpty() ? 0.0 : Double.parseDouble(priceStr.replace(',', '.')));

			Part filePart = request.getPart("imageFile");
			String imagePath = null;

			if (!isCreate) {
				int itemId = Integer.parseInt(request.getParameter("id"));
				item.setId(itemId);
				StorageItem originalItem = storageDAO.getItemById(itemId);
				if (originalItem != null) {
					imagePath = originalItem.getImagePath();
					item.setDefectiveQuantity(originalItem.getDefectiveQuantity());
					item.setDefectReason(originalItem.getDefectReason());
					item.setStatus(originalItem.getStatus());
				}
			}

			if (filePart != null && filePart.getSize() > 0) {
				String fileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();
				if (!fileName.isEmpty()) {
					File imageUploadDir = new File(configService.getProperty("upload.directory"), "images");
					if (!imageUploadDir.exists())
						imageUploadDir.mkdirs();
					File targetFile = new File(imageUploadDir, fileName);
					filePart.write(targetFile.getAbsolutePath());
					imagePath = fileName;
				}
			}
			item.setImagePath(imagePath);

			boolean success = isCreate ? storageDAO.createItem(item) : storageDAO.updateItem(item);

			if (success) {
				String logDetails = String.format("Lagerartikel '%s' %s.", item.getName(),
						isCreate ? "erstellt" : "aktualisiert");
				adminLogService.log(adminUser.getUsername(), isCreate ? "CREATE_STORAGE_ITEM" : "UPDATE_STORAGE_ITEM",
						logDetails);
				request.getSession().setAttribute("successMessage",
						"Artikel '" + item.getName() + "' erfolgreich gespeichert.");
			} else {
				request.getSession().setAttribute("errorMessage", "Operation am Artikel fehlgeschlagen.");
			}
		} catch (Exception e) {
			logger.error("Error creating/updating storage item.", e);
			request.getSession().setAttribute("errorMessage", "Fehler: " + e.getMessage());
		}
		response.sendRedirect(request.getContextPath() + "/admin/lager");
	}

	private void handleDefectStatusUpdate(HttpServletRequest request, HttpServletResponse response) throws IOException {
		User adminUser = (User) request.getSession().getAttribute("user");
		try {
			int itemId = Integer.parseInt(request.getParameter("id"));
			String status = request.getParameter("status"); // "DEFECT" or "UNREPAIRABLE"
			int quantity = Integer.parseInt(request.getParameter("quantity"));
			String reason = request.getParameter("reason");

			boolean success = storageService.updateDefectiveItemStatus(itemId, status, quantity, reason, adminUser);

			if (success) {
				request.getSession().setAttribute("successMessage", "Defekt-Status erfolgreich aktualisiert.");
			} else {
				request.getSession().setAttribute("errorMessage",
						"Status konnte nicht aktualisiert werden. Überprüfen Sie die Bestandsmengen.");
			}
		} catch (NumberFormatException e) {
			request.getSession().setAttribute("errorMessage", "Ungültige Artikel-ID oder Anzahl.");
		}
		response.sendRedirect(request.getContextPath() + "/admin/lager");
	}

	private void handleDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {
		User adminUser = (User) request.getSession().getAttribute("user");
		try {
			int itemId = Integer.parseInt(request.getParameter("id"));
			StorageItem item = storageDAO.getItemById(itemId);
			if (item != null && item.getImagePath() != null && !item.getImagePath().isEmpty()) {
				File imageDir = new File(configService.getProperty("upload.directory"), "images");
				File imageFile = new File(imageDir, item.getImagePath());
				if (imageFile.exists() && !imageFile.delete()) {
					logger.warn("Could not delete physical image file: {}", imageFile.getAbsolutePath());
				}
			}
			if (storageDAO.deleteItem(itemId)) {
				adminLogService.log(adminUser.getUsername(), "DELETE_STORAGE_ITEM", String.format(
						"Lagerartikel '%s' (ID: %d) gelöscht.", (item != null ? item.getName() : "N/A"), itemId));
				request.getSession().setAttribute("successMessage", "Artikel erfolgreich gelöscht.");
			} else {
				request.getSession().setAttribute("errorMessage", "Artikel konnte nicht gelöscht werden.");
			}
		} catch (NumberFormatException e) {
			request.getSession().setAttribute("errorMessage", "Ungültige Artikel-ID.");
		}
		response.sendRedirect(request.getContextPath() + "/admin/lager");
	}

	private void handleStatusUpdate(HttpServletRequest request, HttpServletResponse response) throws IOException {
		User adminUser = (User) request.getSession().getAttribute("user");
		try {
			int itemId = Integer.parseInt(request.getParameter("id"));
			String newStatus = request.getParameter("status");
			String notes = request.getParameter("notes");
			storageDAO.updateItemStatus(itemId, newStatus);
			MaintenanceLogEntry log = new MaintenanceLogEntry();
			log.setItemId(itemId);
			log.setUserId(adminUser.getId());
			log.setNotes(notes);
			String logAction = "MAINTENANCE".equals(newStatus) ? "Marked for Maintenance" : "Returned to Service";
			log.setAction(logAction);
			maintenanceLogDAO.createLog(log);
			adminLogService.log(adminUser.getUsername(), "UPDATE_ITEM_STATUS",
					"Status für Artikel-ID " + itemId + " auf '" + newStatus + "' gesetzt. Notiz: " + notes);
			request.getSession().setAttribute("successMessage", "Artikelstatus erfolgreich aktualisiert.");
		} catch (Exception e) {
			logger.error("Error updating item status", e);
			request.getSession().setAttribute("errorMessage", "Fehler beim Aktualisieren des Status.");
		}
		response.sendRedirect(request.getContextPath() + "/admin/lager");
	}

	private void handleRepair(HttpServletRequest request, HttpServletResponse response) throws IOException {
		User adminUser = (User) request.getSession().getAttribute("user");
		String returnTo = request.getParameter("returnTo");
		try {
			int itemId = Integer.parseInt(request.getParameter("id"));
			int repairedQty = Integer.parseInt(request.getParameter("repaired_quantity"));
			String notes = request.getParameter("repair_notes");
			if (storageDAO.repairItems(itemId, repairedQty)) {
				MaintenanceLogEntry log = new MaintenanceLogEntry();
				log.setItemId(itemId);
				log.setUserId(adminUser.getId());
				log.setAction(repairedQty + " Stück repariert");
				log.setNotes(notes);
				maintenanceLogDAO.createLog(log);
				adminLogService.log(adminUser.getUsername(), "REPAIR_ITEM", String.format(
						"%d Stück von Artikel-ID %d als repariert markiert. Notiz: %s", repairedQty, itemId, notes));
				request.getSession().setAttribute("successMessage", "Artikel erfolgreich als repariert markiert.");
			} else {
				request.getSession().setAttribute("errorMessage",
						"Reparatur konnte nicht verbucht werden (vielleicht nicht genug defekte Artikel?).");
			}
		} catch (NumberFormatException e) {
			request.getSession().setAttribute("errorMessage", "Ungültige Artikel-ID oder Anzahl.");
		}
		String redirectUrl = request.getContextPath()
				+ ("/defekte".equals(returnTo) ? "/admin/defekte" : "/admin/lager");
		response.sendRedirect(redirectUrl);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\AdminSystemServlet.java
========================================================================

package de.technikteam.servlet.admin;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import com.google.inject.Singleton;

@Singleton
public class AdminSystemServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		request.getRequestDispatcher("/views/admin/admin_system.jsp").forward(request, response);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\AdminUserServlet.java
========================================================================

package de.technikteam.servlet.admin;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.EventDAO;
import de.technikteam.dao.PermissionDAO;
import de.technikteam.dao.RoleDAO;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.Event;
import de.technikteam.model.Permission;
import de.technikteam.model.Role;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

@Singleton
public class AdminUserServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(AdminUserServlet.class);

	private final UserDAO userDAO;
	private final EventDAO eventDAO;
	private final RoleDAO roleDAO;
	private final PermissionDAO permissionDAO;
	private final Gson gson;

	@Inject
	public AdminUserServlet(UserDAO userDAO, EventDAO eventDAO, RoleDAO roleDAO, PermissionDAO permissionDAO) {
		this.userDAO = userDAO;
		this.eventDAO = eventDAO;
		this.roleDAO = roleDAO;
		this.permissionDAO = permissionDAO;
		this.gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User currentUser = (User) request.getSession().getAttribute("user");
		if (!currentUser.getPermissions().contains("USER_READ") && !currentUser.hasAdminAccess()) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return;
		}

		String action = request.getParameter("action") == null ? "list" : request.getParameter("action");
		try {
			switch (action) {
			case "details":
				showUserDetails(request, response);
				break;
			case "getUserData":
				getUserDataAsJson(request, response);
				break;
			default:
				listUsers(request, response);
				break;
			}
		} catch (NumberFormatException e) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Ungültige ID angegeben.");
		} catch (Exception e) {
			logger.error("Error in AdminUserServlet doGet", e);
			request.getSession().setAttribute("errorMessage", "Ein Fehler ist aufgetreten: " + e.getMessage());
			response.sendRedirect(request.getContextPath() + "/admin/dashboard");
		}
	}

	private void listUsers(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		List<User> userList = userDAO.getAllUsers();
		List<Role> allRoles = roleDAO.getAllRoles();
		List<Permission> allPermissions = permissionDAO.getAllPermissions();

		Map<String, List<Permission>> groupedPermissions = allPermissions.stream().collect(Collectors.groupingBy(p -> {
			String key = p.getPermissionKey();
			int underscoreIndex = key.indexOf('_');
			return (underscoreIndex != -1) ? key.substring(0, underscoreIndex) : "ALLGEMEIN";
		}, LinkedHashMap::new, Collectors.toList()));

		request.setAttribute("userList", userList);
		request.setAttribute("allRoles", allRoles);
		request.setAttribute("groupedPermissionsJson", gson.toJson(groupedPermissions));
		request.getRequestDispatcher("/views/admin/admin_users.jsp").forward(request, response);
	}

	private void getUserDataAsJson(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		int userId = Integer.parseInt(req.getParameter("id"));
		User user = userDAO.getUserById(userId);
		if (user != null) {
			Set<Integer> permissionIds = permissionDAO.getPermissionIdsForUser(userId);
			Map<String, Object> responseData = new HashMap<>();
			responseData.put("user", user);
			responseData.put("permissionIds", permissionIds);

			String userJson = gson.toJson(responseData);
			resp.setContentType("application/json");
			resp.setCharacterEncoding("UTF-8");
			resp.getWriter().write(userJson);
		} else {
			resp.sendError(HttpServletResponse.SC_NOT_FOUND, "User not found");
		}
	}

	private void showUserDetails(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		int userId = Integer.parseInt(request.getParameter("id"));
		User user = userDAO.getUserById(userId);
		if (user == null) {
			request.getSession().setAttribute("errorMessage", "Benutzer nicht gefunden.");
			response.sendRedirect(request.getContextPath() + "/admin/mitglieder");
			return;
		}
		List<Event> eventHistory = eventDAO.getEventHistoryForUser(userId);
		request.setAttribute("userToView", user);
		request.setAttribute("eventHistory", eventHistory);
		request.getRequestDispatcher("/views/admin/admin_user_details.jsp").forward(request, response);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\AdminWikiDetailsServlet.java
========================================================================

package de.technikteam.servlet.admin;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.Permissions;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;

@Singleton
public class AdminWikiDetailsServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(AdminWikiDetailsServlet.class);

	@Inject
	public AdminWikiDetailsServlet() {
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");

		if (user == null || !user.getPermissions().contains(Permissions.ACCESS_ADMIN_PANEL)) {
			logger.warn("Unauthorized access attempt to admin wiki details by user '{}'",
					user != null ? user.getUsername() : "GUEST");
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "You do not have permission to view this page.");
			return;
		}

		String filePath = request.getParameter("file");
		if (filePath == null || filePath.trim().isEmpty()) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "File parameter is missing.");
			return;
		}

		if (filePath.contains("..")) {
			logger.error("Path traversal attempt detected in AdminWikiDetailsServlet for file: {}", filePath);
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid file path.");
			return;
		}

		String jspPath = "/views/admin/wiki/" + filePath + ".jsp";

		if (getServletContext().getResource(jspPath) == null) {
			logger.warn("Requested wiki JSP page does not exist: {}. Forwarding to template.", jspPath);
			request.setAttribute("filePath", filePath);
			request.getRequestDispatcher("/views/admin/wiki/_template.jsp").forward(request, response);
		} else {
			logger.debug("Forwarding to wiki page: {}", jspPath);
			request.setAttribute("filePath", filePath);
			request.getRequestDispatcher(jspPath).forward(request, response);
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\AdminWikiServlet.java
========================================================================

package de.technikteam.servlet.admin;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.Permissions;
import de.technikteam.model.User;
import de.technikteam.service.WikiService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;

@Singleton
public class AdminWikiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(AdminWikiServlet.class);

	private final WikiService wikiService;

	@Inject
	public AdminWikiServlet(WikiService wikiService) {
		this.wikiService = wikiService;
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");

		if (user == null || !user.getPermissions().contains(Permissions.ACCESS_ADMIN_PANEL)) {
			logger.warn("Unauthorized access attempt to admin wiki by user '{}'",
					user != null ? user.getUsername() : "GUEST");
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "You do not have permission to view this page.");
			return;
		}

		request.setAttribute("projectTreeHtml", wikiService.getProjectTreeHtml());
		request.getRequestDispatcher("/views/admin/admin_wiki_index.jsp").forward(request, response);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\FrontControllerServlet.java
========================================================================

package de.technikteam.servlet.admin;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.model.ApiResponse;
import de.technikteam.servlet.admin.action.*;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@Singleton
public class FrontControllerServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(FrontControllerServlet.class);
	private final Map<String, Action> actions = new HashMap<>();
	private final Gson gson;

	@Inject
	public FrontControllerServlet(CreateUserAction createUserAction, UpdateUserAction updateUserAction,
			DeleteUserAction deleteUserAction, ResetPasswordAction resetPasswordAction,
			UnlockUserAction unlockUserAction, ApproveChangeAction approveChangeAction,
			DenyChangeAction denyChangeAction, UpdateFeedbackStatusAction updateFeedbackStatusAction,
			UpdateFeedbackOrderAction updateFeedbackOrderAction, DeleteFeedbackAction deleteFeedbackAction,
			GetFeedbackDetailsAction getFeedbackDetailsAction) {

		actions.put("user.create", createUserAction);
		actions.put("user.update", updateUserAction);
		actions.put("user.delete", deleteUserAction);
		actions.put("user.resetPassword", resetPasswordAction);
		actions.put("user.unlock", unlockUserAction);
		actions.put("request.approve", approveChangeAction);
		actions.put("request.deny", denyChangeAction);
		actions.put("feedback.updateStatus", updateFeedbackStatusAction);
		actions.put("feedback.reorder", updateFeedbackOrderAction);
		actions.put("feedback.delete", deleteFeedbackAction);
		actions.put("feedback.getDetails", getFeedbackDetailsAction);

		this.gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String pathInfo = request.getPathInfo();
		String actionName = request.getParameter("action");

		if (pathInfo == null || pathInfo.equals("/") || actionName == null || actionName.isEmpty()) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid action request.");
			return;
		}

		String entity = pathInfo.substring(1);
		String actionKey = entity + "." + actionName;

		Action action = actions.get(actionKey);

		if (action == null) {
			logger.error("No action found for key: '{}'", actionKey);
			response.sendError(HttpServletResponse.SC_NOT_FOUND, "Action not found.");
			return;
		}

		logger.debug("Executing action for key: '{}'", actionKey);
		ApiResponse apiResponse = action.execute(request, response);

		if (apiResponse == null) {
			return;
		}

		if (apiResponse.isSuccess()) {
			response.setStatus(HttpServletResponse.SC_OK);
		} else {
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
		}

		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		try (PrintWriter out = response.getWriter()) {
			out.print(gson.toJson(apiResponse));
			out.flush();
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\MatrixServlet.java
========================================================================

package de.technikteam.servlet.admin;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.CourseDAO;
import de.technikteam.dao.MeetingAttendanceDAO;
import de.technikteam.dao.MeetingDAO;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.Course;
import de.technikteam.model.Meeting;
import de.technikteam.model.MeetingAttendance;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

@Singleton
public class MatrixServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(MatrixServlet.class);
	private final UserDAO userDAO;
	private final CourseDAO courseDAO;
	private final MeetingDAO meetingDAO;
	private final MeetingAttendanceDAO meetingAttendanceDAO;

	@Inject
	public MatrixServlet(UserDAO userDAO, CourseDAO courseDAO, MeetingDAO meetingDAO,
			MeetingAttendanceDAO meetingAttendanceDAO) {
		this.userDAO = userDAO;
		this.courseDAO = courseDAO;
		this.meetingDAO = meetingDAO;
		this.meetingAttendanceDAO = meetingAttendanceDAO;
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		logger.info("Matrix data requested. Fetching all necessary data from DAOs.");

		List<User> allUsers = userDAO.getAllUsers();
		logger.debug("Fetched {} users.", allUsers.size());

		List<Course> allCourses = courseDAO.getAllCourses();
		logger.debug("Fetched {} parent courses.", allCourses.size());

		Map<Integer, List<Meeting>> meetingsByCourse = new HashMap<>();
		for (Course course : allCourses) {
			List<Meeting> meetings = meetingDAO.getMeetingsForCourse(course.getId());
			meetingsByCourse.put(course.getId(), meetings);
			logger.trace("Fetched {} meetings for course '{}' (ID: {}).", meetings.size(), course.getName(),
					course.getId());
		}

		Map<String, MeetingAttendance> attendanceMap = meetingAttendanceDAO.getAllAttendance().stream()
				.collect(Collectors.toMap(a -> a.getUserId() + "-" + a.getMeetingId(), Function.identity()));
		logger.debug("Fetched and mapped {} total attendance records.", attendanceMap.size());

		request.setAttribute("allUsers", allUsers);
		request.setAttribute("allCourses", allCourses);
		request.setAttribute("meetingsByCourse", meetingsByCourse);
		request.setAttribute("attendanceMap", attendanceMap);

		logger.info("Data generation for matrix complete. Forwarding to admin_matrix.jsp.");
		request.getRequestDispatcher("/views/admin/admin_matrix.jsp").forward(request, response);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\Action.java
========================================================================

package de.technikteam.servlet.admin.action;

import de.technikteam.model.ApiResponse;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

/**
 * Represents a single, executable action within the Front Controller pattern.
 * Each implementation handles a specific business operation and returns a standardized API response.
 */
public interface Action {

	/**
	 * Executes the business logic for a specific action.
	 *
	 * @param request  The HttpServletRequest object.
	 * @param response The HttpServletResponse object.
	 * @return An ApiResponse object containing the result of the action (success/fail, message, data).
	 * @throws ServletException If a servlet-specific error occurs.
	 * @throws IOException      If an I/O error occurs.
	 */
	ApiResponse execute(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException;
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\ApproveChangeAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.ProfileChangeRequestDAO;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.ProfileChangeRequest;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.service.NotificationService;
import de.technikteam.servlet.http.SessionManager;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.Map;

@Singleton
public class ApproveChangeAction implements Action {
	private final ProfileChangeRequestDAO requestDAO;
	private final UserDAO userDAO;
	private final AdminLogService adminLogService;
	private final Gson gson = new Gson();

	@Inject
	public ApproveChangeAction(ProfileChangeRequestDAO requestDAO, UserDAO userDAO, AdminLogService adminLogService) {
		this.requestDAO = requestDAO;
		this.userDAO = userDAO;
		this.adminLogService = adminLogService;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User adminUser = (User) request.getSession().getAttribute("user");
		if (!adminUser.getPermissions().contains("USER_UPDATE") && !adminUser.hasAdminAccess()) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return null;
		}

		try {
			int requestId = Integer.parseInt(request.getParameter("requestId"));
			ProfileChangeRequest req = requestDAO.getRequestById(requestId);
			if (req == null || !"PENDING".equals(req.getStatus())) {
				return ApiResponse.error("Anfrage nicht gefunden oder bereits bearbeitet.");
			}

			User userToUpdate = userDAO.getUserById(req.getUserId());
			if (userToUpdate == null) {
				requestDAO.updateRequestStatus(requestId, "DENIED", adminUser.getId());
				return ApiResponse.error("Der zugehörige Benutzer existiert nicht mehr. Anfrage abgelehnt.");
			}

			Type type = new TypeToken<Map<String, String>>() {
			}.getType();
			Map<String, String> changes = gson.fromJson(req.getRequestedChanges(), type);

			changes.forEach((field, value) -> {
				switch (field) {
				case "email":
					userToUpdate.setEmail(value);
					break;
				case "classYear":
					userToUpdate.setClassYear(Integer.parseInt(value));
					break;
				case "className":
					userToUpdate.setClassName(value);
					break;
				}
			});

			// CORRECTED: Call the version of updateUser that does not require a Connection
			// object.
			if (userDAO.updateUser(userToUpdate)
					&& requestDAO.updateRequestStatus(requestId, "APPROVED", adminUser.getId())) {
				adminLogService.log(adminUser.getUsername(), "PROFILE_CHANGE_APPROVED", "Profiländerung für '"
						+ userToUpdate.getUsername() + "' (Request ID: " + requestId + ") genehmigt.");

				String notificationMessage = "Ihre Profiländerung wurde genehmigt. Sie werden zur Sicherheit abgemeldet. Bitte loggen Sie sich erneut ein.";
				Map<String, Object> payload = Map.of("type", "logout_notification", "payload",
						Map.of("message", notificationMessage));
				NotificationService.getInstance().sendNotificationToUser(userToUpdate.getId(), payload);

				SessionManager.invalidateSessionsForUser(userToUpdate.getId());

				return ApiResponse.success("Änderungsanfrage genehmigt.", Map.of("requestId", requestId));
			} else {
				return ApiResponse.error("Fehler beim Anwenden der Änderungen oder beim Aktualisieren der Anfrage.");
			}

		} catch (Exception e) {
			return ApiResponse.error("Ein interner Fehler ist aufgetreten: " + e.getMessage());
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\CreateUserAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.RoleDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.User;
import de.technikteam.service.UserService;
import de.technikteam.util.PasswordPolicyValidator;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;

@Singleton
public class CreateUserAction implements Action {

	private final UserService userService;
	private final RoleDAO roleDAO;

	@Inject
	public CreateUserAction(UserService userService, RoleDAO roleDAO) {
		this.userService = userService;
		this.roleDAO = roleDAO;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		User adminUser = (User) session.getAttribute("user");

		if (!adminUser.getPermissions().contains("USER_CREATE") && !adminUser.hasAdminAccess()) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return null;
		}

		String username = request.getParameter("username");
		String pass = request.getParameter("password");

		PasswordPolicyValidator.ValidationResult validationResult = PasswordPolicyValidator.validate(pass);
		if (!validationResult.isValid()) {
			return ApiResponse.error("Fehler beim Erstellen des Benutzers: " + validationResult.getMessage());
		}

		int roleId = Integer.parseInt(request.getParameter("roleId"));
		String[] permissionIds = request.getParameterValues("permissionIds");

		User newUser = new User();
		newUser.setUsername(username.trim());
		newUser.setRoleId(roleId);
		try {
			newUser.setClassYear(Integer.parseInt(request.getParameter("classYear")));
		} catch (NumberFormatException e) {
			newUser.setClassYear(0);
		}
		newUser.setClassName(request.getParameter("className"));

		String email = request.getParameter("email");
		newUser.setEmail(email != null && !email.trim().isEmpty() ? email.trim() : null);

		int newUserId = userService.createUserWithPermissions(newUser, pass, permissionIds, adminUser.getUsername());
		if (newUserId > 0) {
			newUser.setId(newUserId);
			// Enrich with role name for the JSON response
			roleDAO.getAllRoles().stream().filter(role -> role.getId() == newUser.getRoleId()).findFirst()
					.ifPresent(role -> newUser.setRoleName(role.getRoleName()));

			return ApiResponse.success("Benutzer '" + newUser.getUsername() + "' erfolgreich erstellt.", newUser);
		} else {
			return ApiResponse
					.error("Benutzer konnte nicht erstellt werden (ggf. existiert der Name oder die E-Mail bereits).");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\DeleteFeedbackAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.FeedbackSubmissionDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.service.NotificationService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.util.Map;

@Singleton
public class DeleteFeedbackAction implements Action {
	private final FeedbackSubmissionDAO submissionDAO;
	private final AdminLogService adminLogService;

	@Inject
	public DeleteFeedbackAction(FeedbackSubmissionDAO submissionDAO, AdminLogService adminLogService) {
		this.submissionDAO = submissionDAO;
		this.adminLogService = adminLogService;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User adminUser = (User) request.getSession().getAttribute("user");
		if (!adminUser.hasAdminAccess()) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return null;
		}

		try {
			int submissionId = Integer.parseInt(request.getParameter("submissionId"));
			if (submissionDAO.deleteSubmission(submissionId)) {
				adminLogService.log(adminUser.getUsername(), "DELETE_FEEDBACK",
						"Feedback-Eintrag mit ID " + submissionId + " gelöscht.");
				NotificationService.getInstance().broadcastUIUpdate("feedback_deleted",
						Map.of("submissionId", submissionId));
				return ApiResponse.success("Feedback erfolgreich gelöscht.", Map.of("deletedId", submissionId));
			} else {
				return ApiResponse.error("Fehler beim Löschen des Feedbacks.");
			}
		} catch (NumberFormatException e) {
			return ApiResponse.error("Ungültige Feedback-ID.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\DeleteUserAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.service.NotificationService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.util.Map;

@Singleton
public class DeleteUserAction implements Action {
	private final UserDAO userDAO;
	private final AdminLogService adminLogService;

	@Inject
	public DeleteUserAction(UserDAO userDAO, AdminLogService adminLogService) {
		this.userDAO = userDAO;
		this.adminLogService = adminLogService;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		int userIdToDelete = Integer.parseInt(request.getParameter("userId"));
		User loggedInAdmin = (User) session.getAttribute("user");

		if (!loggedInAdmin.getPermissions().contains("USER_DELETE") && !loggedInAdmin.hasAdminAccess()) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return null;
		}

		if (loggedInAdmin.getId() == userIdToDelete) {
			return ApiResponse.error("Sie können sich nicht selbst löschen.");
		}

		User userToDelete = userDAO.getUserById(userIdToDelete);
		if (userToDelete == null) {
			return ApiResponse.error("Benutzer mit ID " + userIdToDelete + " nicht gefunden.");
		}

		if (userToDelete.getPermissions().contains("ACCESS_ADMIN_PANEL")
				&& !loggedInAdmin.getPermissions().contains("ACCESS_ADMIN_PANEL")) {
			return ApiResponse.error("Sie haben keine Berechtigung, einen Haupt-Administrator zu löschen.");
		}

		String deletedUsername = userToDelete.getUsername();
		String deletedRoleName = userToDelete.getRoleName();

		if (userDAO.deleteUser(userIdToDelete)) {
			String logDetails = String.format("Benutzer '%s' (ID: %d, Rolle: %s) wurde gelöscht.", deletedUsername,
					userIdToDelete, deletedRoleName);
			adminLogService.log(loggedInAdmin.getUsername(), "DELETE_USER", logDetails);

			NotificationService.getInstance().broadcastUIUpdate("user_deleted", Map.of("userId", userIdToDelete));

			return ApiResponse.success("Benutzer erfolgreich gelöscht.", Map.of("deletedUserId", userIdToDelete));
		} else {
			return ApiResponse.error("Benutzer konnte nicht gelöscht werden.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\DenyChangeAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.ProfileChangeRequestDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.ProfileChangeRequest;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.util.Map;

@Singleton
public class DenyChangeAction implements Action {
	private final ProfileChangeRequestDAO requestDAO;
	private final AdminLogService adminLogService;

	@Inject
	public DenyChangeAction(ProfileChangeRequestDAO requestDAO, AdminLogService adminLogService) {
		this.requestDAO = requestDAO;
		this.adminLogService = adminLogService;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User adminUser = (User) request.getSession().getAttribute("user");
		if (!adminUser.getPermissions().contains("USER_UPDATE") && !adminUser.hasAdminAccess()) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return null;
		}

		try {
			int requestId = Integer.parseInt(request.getParameter("requestId"));
			ProfileChangeRequest req = requestDAO.getRequestById(requestId);
			if (req == null || !"PENDING".equals(req.getStatus())) {
				return ApiResponse.error("Anfrage nicht gefunden oder bereits bearbeitet.");
			}

			if (requestDAO.updateRequestStatus(requestId, "DENIED", adminUser.getId())) {
				adminLogService.log(adminUser.getUsername(), "PROFILE_CHANGE_DENIED", "Profiländerung für Benutzer-ID "
						+ req.getUserId() + " (Request ID: " + requestId + ") abgelehnt.");
				return ApiResponse.success("Änderungsanfrage abgelehnt.", Map.of("requestId", requestId));
			} else {
				return ApiResponse.error("Fehler beim Ablehnen der Anfrage.");
			}
		} catch (NumberFormatException e) {
			return ApiResponse.error("Ungültige Anfrage-ID.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\GetFeedbackDetailsAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.FeedbackSubmissionDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.FeedbackSubmission;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@Singleton
public class GetFeedbackDetailsAction implements Action {

	private final FeedbackSubmissionDAO submissionDAO;

	@Inject
	public GetFeedbackDetailsAction(FeedbackSubmissionDAO submissionDAO) {
		this.submissionDAO = submissionDAO;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			int submissionId = Integer.parseInt(request.getParameter("submissionId"));
			FeedbackSubmission submission = submissionDAO.getSubmissionById(submissionId);
			if (submission != null) {
				return ApiResponse.success("Details erfolgreich geladen.", submission);
			} else {
				return ApiResponse.error("Feedback-Eintrag nicht gefunden.");
			}
		} catch (NumberFormatException e) {
			return ApiResponse.error("Ungültige Feedback-ID.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\ResetPasswordAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.security.SecureRandom;
import java.util.Map;
import java.util.stream.Collectors;

@Singleton
public class ResetPasswordAction implements Action {

	private final UserDAO userDAO;
	private final AdminLogService adminLogService;

	@Inject
	public ResetPasswordAction(UserDAO userDAO, AdminLogService adminLogService) {
		this.userDAO = userDAO;
		this.adminLogService = adminLogService;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		User adminUser = (User) session.getAttribute("user");

		if (!adminUser.getPermissions().contains("USER_PASSWORD_RESET") && !adminUser.hasAdminAccess()) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return null;
		}

		int userId = Integer.parseInt(request.getParameter("userId"));
		User userToReset = userDAO.getUserById(userId);

		if (userToReset == null) {
			return ApiResponse.error("Benutzer zum Zurücksetzen nicht gefunden.");
		} else {
			String newPassword = generateRandomPassword(12);
			if (userDAO.changePassword(userId, newPassword)) {
				String logDetails = String.format("Passwort für Benutzer '%s' (ID: %d) zurückgesetzt.",
						userToReset.getUsername(), userId);
				adminLogService.log(adminUser.getUsername(), "RESET_PASSWORD", logDetails);

				return ApiResponse.success(
						"Passwort für " + userToReset.getUsername() + " zurückgesetzt auf: " + newPassword,
						Map.of("username", userToReset.getUsername(), "newPassword", newPassword));
			} else {
				return ApiResponse.error("Passwort konnte nicht zurückgesetzt werden.");
			}
		}
	}

	private String generateRandomPassword(int length) {
		final String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
		SecureRandom random = new SecureRandom();
		return random.ints(length, 0, chars.length()).mapToObj(chars::charAt)
				.collect(StringBuilder::new, StringBuilder::append, StringBuilder::append).toString();
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\UnlockUserAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.servlet.LoginServlet;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.util.Map;

@Singleton
public class UnlockUserAction implements Action {

	private final AdminLogService adminLogService;

	@Inject
	public UnlockUserAction(AdminLogService adminLogService) {
		this.adminLogService = adminLogService;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		User adminUser = (User) session.getAttribute("user");

		if (!adminUser.hasAdminAccess()) { // Only admins can unlock
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return null;
		}

		String usernameToUnlock = request.getParameter("username");
		if (usernameToUnlock != null && !usernameToUnlock.isEmpty()) {
			LoginServlet.LoginAttemptManager.clearLoginAttempts(usernameToUnlock);
			adminLogService.log(adminUser.getUsername(), "UNLOCK_USER_ACCOUNT",
					"Benutzerkonto '" + usernameToUnlock + "' manuell entsperrt.");
			return ApiResponse.success("Benutzerkonto '" + usernameToUnlock + "' wurde erfolgreich entsperrt.",
					Map.of("unlockedUsername", usernameToUnlock));
		} else {
			return ApiResponse.error("Benutzername zum Entsperren wurde nicht angegeben.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\UpdateFeedbackOrderAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.DatabaseManager;
import de.technikteam.dao.FeedbackSubmissionDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.lang.reflect.Type;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Singleton
public class UpdateFeedbackOrderAction implements Action {
    private static final Logger logger = LogManager.getLogger(UpdateFeedbackOrderAction.class);
    private final FeedbackSubmissionDAO submissionDAO;
    private final AdminLogService adminLogService;
    private final DatabaseManager dbManager;
    private final Gson gson = new Gson();

    @Inject
    public UpdateFeedbackOrderAction(FeedbackSubmissionDAO submissionDAO, AdminLogService adminLogService, DatabaseManager dbManager) {
        this.submissionDAO = submissionDAO;
        this.adminLogService = adminLogService;
        this.dbManager = dbManager;
    }

    @Override
    public ApiResponse execute(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        User adminUser = (User) request.getSession().getAttribute("user");
        if (!adminUser.hasAdminAccess()) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
            return null;
        }

        String jsonPayload = request.getParameter("reorderData");
        if (jsonPayload == null) {
            return ApiResponse.error("Missing reorder data.");
        }

        try (Connection conn = dbManager.getConnection()) {
            conn.setAutoCommit(false);
            try {
                Type type = new TypeToken<Map<String, Object>>() {}.getType();
                Map<String, Object> data = gson.fromJson(jsonPayload, type);
                
                int submissionId = (int) Double.parseDouble(String.valueOf(data.get("submissionId")));
                String newStatus = (String) data.get("newStatus");

                @SuppressWarnings("unchecked")
                List<Double> orderedIdsDouble = (List<Double>) data.get("orderedIds");
                if (orderedIdsDouble == null) {
                	throw new IllegalArgumentException("orderedIds list is missing in the payload.");
                }
                List<Integer> orderedIds = orderedIdsDouble.stream().map(Double::intValue).collect(Collectors.toList());

                // 1. Update the status of the moved item
                submissionDAO.updateStatus(submissionId, newStatus, conn);

                // 2. Update the display order for all items in that column
                submissionDAO.updateOrderForStatus(orderedIds, conn);
                
                conn.commit();
                
                adminLogService.log(adminUser.getUsername(), "UPDATE_FEEDBACK_ORDER",
						"Feedback ID " + submissionId + " status auf '" + newStatus + "' gesetzt und Liste neu sortiert.");
                return ApiResponse.success("Feedback-Status und Sortierung aktualisiert.");
                
            } catch (Exception e) {
                conn.rollback();
                throw e; // Re-throw to be caught by the outer catch block
            }
        } catch (Exception e) {
            logger.error("Error processing feedback reorder request", e);
            return ApiResponse.error("Serverfehler beim Verarbeiten der Anfrage: " + e.getMessage());
        }
    }
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\UpdateFeedbackStatusAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.FeedbackSubmissionDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.service.NotificationService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.util.Map;

@Singleton
public class UpdateFeedbackStatusAction implements Action {
	private final FeedbackSubmissionDAO submissionDAO;
	private final AdminLogService adminLogService;

	@Inject
	public UpdateFeedbackStatusAction(FeedbackSubmissionDAO submissionDAO, AdminLogService adminLogService) {
		this.submissionDAO = submissionDAO;
		this.adminLogService = adminLogService;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User adminUser = (User) request.getSession().getAttribute("user");
		if (!adminUser.hasAdminAccess()) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return null;
		}

		try {
			int submissionId = Integer.parseInt(request.getParameter("submissionId"));
			String newStatus = request.getParameter("status");
			String displayTitle = request.getParameter("displayTitle");

			if (submissionDAO.updateStatusAndTitle(submissionId, newStatus, displayTitle)) {
				adminLogService.log(adminUser.getUsername(), "UPDATE_FEEDBACK_STATUS",
						"Status für Feedback ID " + submissionId + " auf '" + newStatus + "' gesetzt.");

				NotificationService.getInstance().broadcastUIUpdate("feedback_status_updated",
						Map.of("submissionId", submissionId, "newStatus", newStatus, "displayTitle", displayTitle));

				return ApiResponse.success("Status erfolgreich aktualisiert.");
			} else {
				return ApiResponse.error("Fehler beim Aktualisieren des Status.");
			}
		} catch (NumberFormatException e) {
			return ApiResponse.error("Ungültige Feedback-ID.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\action\UpdateUserAction.java
========================================================================

package de.technikteam.servlet.admin.action;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.RoleDAO;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.service.NotificationService;
import de.technikteam.service.UserService;
import de.technikteam.util.NavigationRegistry;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.util.Objects;

@Singleton
public class UpdateUserAction implements Action {
	private final UserDAO userDAO;
	private final RoleDAO roleDAO;
	private final UserService userService;
	private final AdminLogService adminLogService;

	@Inject
	public UpdateUserAction(UserDAO userDAO, RoleDAO roleDAO, UserService userService,
			AdminLogService adminLogService) {
		this.userDAO = userDAO;
		this.roleDAO = roleDAO;
		this.userService = userService;
		this.adminLogService = adminLogService;
	}

	@Override
	public ApiResponse execute(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession();
		int userId = Integer.parseInt(request.getParameter("userId"));
		User adminUser = (User) session.getAttribute("user");

		if (!adminUser.getPermissions().contains("USER_UPDATE") && !adminUser.hasAdminAccess()) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied");
			return null;
		}

		User originalUser = userDAO.getUserById(userId);
		if (originalUser == null) {
			return ApiResponse.error("Fehler: Benutzer mit ID " + userId + " nicht gefunden.");
		}

		// Capture changes for logging
		StringBuilder changes = new StringBuilder();

		User updatedUser = new User();
		updatedUser.setId(userId);

		String newUsername = request.getParameter("username").trim();
		if (!Objects.equals(originalUser.getUsername(), newUsername)) {
			changes.append(String.format("Benutzername von '%s' zu '%s', ", originalUser.getUsername(), newUsername));
		}
		updatedUser.setUsername(newUsername);

		int roleId = Integer.parseInt(request.getParameter("roleId"));
		if (originalUser.getRoleId() != roleId) {
			changes.append(String.format("Rolle-ID von '%d' zu '%d', ", originalUser.getRoleId(), roleId));
		}
		updatedUser.setRoleId(roleId);

		String newClassName = request.getParameter("className");
		if (!Objects.equals(originalUser.getClassName(), newClassName)) {
			changes.append(String.format("Klasse von '%s' zu '%s', ", originalUser.getClassName(), newClassName));
		}
		updatedUser.setClassName(newClassName);

		String newEmail = request.getParameter("email");
		newEmail = (newEmail != null && !newEmail.trim().isEmpty()) ? newEmail.trim() : null;
		if (!Objects.equals(originalUser.getEmail(), newEmail)) {
			changes.append("E-Mail geändert, ");
		}
		updatedUser.setEmail(newEmail);

		try {
			int newClassYear = Integer.parseInt(request.getParameter("classYear"));
			if (originalUser.getClassYear() != newClassYear) {
				changes.append(String.format("Jahrgang von '%d' zu '%d', ", originalUser.getClassYear(), newClassYear));
			}
			updatedUser.setClassYear(newClassYear);
		} catch (NumberFormatException e) {
			updatedUser.setClassYear(0);
		}

		String[] permissionIds = request.getParameterValues("permissionIds");

		boolean success = userService.updateUserWithPermissions(updatedUser, permissionIds);

		if (success) {
			User refreshedUser = userDAO.getUserById(userId);
			roleDAO.getAllRoles().stream().filter(role -> role.getId() == refreshedUser.getRoleId()).findFirst()
					.ifPresent(role -> refreshedUser.setRoleName(role.getRoleName()));

			if (adminUser.getId() == userId) {
				refreshedUser.setPermissions(userDAO.getPermissionsForUser(userId));
				session.setAttribute("user", refreshedUser);
				session.setAttribute("navigationItems", NavigationRegistry.getNavigationItemsForUser(refreshedUser));
			}

			String logDetails = String.format("Benutzer '%s' (ID: %d) aktualisiert.", originalUser.getUsername(),
					userId);
			if (changes.length() > 2) {
				logDetails += " Änderungen: " + changes.substring(0, changes.length() - 2) + ".";
			}

			adminLogService.log(adminUser.getUsername(), "UPDATE_USER", logDetails);

			NotificationService.getInstance().broadcastUIUpdate("user_updated", refreshedUser);

			return ApiResponse.success("Benutzerdaten erfolgreich aktualisiert.", refreshedUser);
		} else {
			return ApiResponse
					.error("Keine Änderungen an den Benutzerdaten vorgenommen oder ein Fehler ist aufgetreten.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\api\AdminTodoApiServlet.java
========================================================================

package de.technikteam.servlet.admin.api;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.TodoCategory;
import de.technikteam.model.TodoTask;
import de.technikteam.model.User;
import de.technikteam.service.TodoService;
import de.technikteam.util.CSRFUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Singleton
public class AdminTodoApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private final TodoService todoService;
	private final Gson gson = new Gson();

	@Inject
	public AdminTodoApiServlet(TodoService todoService) {
		this.todoService = todoService;
	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		List<TodoCategory> todos = todoService.getAllTodos();
		sendJsonResponse(resp, HttpServletResponse.SC_OK, todos);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		if (!CSRFUtil.isTokenValid(req)) {
			sendJsonResponse(resp, HttpServletResponse.SC_FORBIDDEN, ApiResponse.error("Invalid CSRF Token"));
			return;
		}
		User admin = (User) req.getSession().getAttribute("user");
		String action = req.getParameter("action");

		switch (action) {
		case "createCategory":
			String categoryName = req.getParameter("name");
			TodoCategory newCategory = todoService.createCategory(categoryName, admin);
			if (newCategory != null) {
				sendJsonResponse(resp, HttpServletResponse.SC_CREATED,
						ApiResponse.success("Kategorie erstellt.", newCategory));
			} else {
				sendJsonResponse(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						ApiResponse.error("Kategorie konnte nicht erstellt werden."));
			}
			break;
		case "createTask":
			int categoryId = Integer.parseInt(req.getParameter("categoryId"));
			String content = req.getParameter("content");
			TodoTask newTask = todoService.createTask(categoryId, content, admin);
			if (newTask != null) {
				sendJsonResponse(resp, HttpServletResponse.SC_CREATED,
						ApiResponse.success("Aufgabe erstellt.", newTask));
			} else {
				sendJsonResponse(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						ApiResponse.error("Aufgabe konnte nicht erstellt werden."));
			}
			break;
		default:
			sendJsonResponse(resp, HttpServletResponse.SC_BAD_REQUEST, ApiResponse.error("Unbekannte Aktion."));
		}
	}

	@Override
	protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		if (!CSRFUtil.isTokenValid(req)) {
			sendJsonResponse(resp, HttpServletResponse.SC_FORBIDDEN, ApiResponse.error("Invalid CSRF Token"));
			return;
		}
		User admin = (User) req.getSession().getAttribute("user");
		String jsonPayload = req.getReader().lines().collect(Collectors.joining(System.lineSeparator()));
		Type type = new TypeToken<Map<String, Object>>() {
		}.getType();
		Map<String, Object> data = gson.fromJson(jsonPayload, type);
		String action = (String) data.get("action");

		switch (action) {
		case "updateTask":
			int taskId = ((Double) data.get("taskId")).intValue();
			String content = (String) data.get("content");
			Boolean isCompleted = (Boolean) data.get("isCompleted");
			if (todoService.updateTask(taskId, content, isCompleted, admin)) {
				sendJsonResponse(resp, HttpServletResponse.SC_OK, ApiResponse.success("Aufgabe aktualisiert."));
			} else {
				sendJsonResponse(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						ApiResponse.error("Aufgabe konnte nicht aktualisiert werden."));
			}
			break;
		case "reorder":
			Type reorderType = new TypeToken<Map<String, List<Integer>>>() {
			}.getType();
			Map<String, List<Integer>> reorderData = gson.fromJson(gson.toJson(data.get("orderData")), reorderType);
			if (todoService.reorder(reorderData, admin)) {
				sendJsonResponse(resp, HttpServletResponse.SC_OK, ApiResponse.success("Sortierung gespeichert."));
			} else {
				sendJsonResponse(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						ApiResponse.error("Sortierung konnte nicht gespeichert werden."));
			}
			break;
		default:
			sendJsonResponse(resp, HttpServletResponse.SC_BAD_REQUEST, ApiResponse.error("Unbekannte Aktion."));
		}
	}

	@Override
	protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		if (!CSRFUtil.isTokenValid(req)) {
			sendJsonResponse(resp, HttpServletResponse.SC_FORBIDDEN, ApiResponse.error("Invalid CSRF Token"));
			return;
		}
		User admin = (User) req.getSession().getAttribute("user");

		if (req.getParameter("taskId") != null) {
			int taskId = Integer.parseInt(req.getParameter("taskId"));
			if (todoService.deleteTask(taskId, admin)) {
				sendJsonResponse(resp, HttpServletResponse.SC_OK, ApiResponse.success("Aufgabe gelöscht."));
			} else {
				sendJsonResponse(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						ApiResponse.error("Aufgabe konnte nicht gelöscht werden."));
			}
		} else if (req.getParameter("categoryId") != null) {
			int categoryId = Integer.parseInt(req.getParameter("categoryId"));
			if (todoService.deleteCategory(categoryId, admin)) {
				sendJsonResponse(resp, HttpServletResponse.SC_OK, ApiResponse.success("Kategorie gelöscht."));
			} else {
				sendJsonResponse(resp, HttpServletResponse.SC_INTERNAL_SERVER_ERROR,
						ApiResponse.error("Kategorie konnte nicht gelöscht werden."));
			}
		} else {
			sendJsonResponse(resp, HttpServletResponse.SC_BAD_REQUEST, ApiResponse.error("Keine ID angegeben."));
		}
	}

	private void sendJsonResponse(HttpServletResponse response, int status, Object data) throws IOException {
		response.setStatus(status);
		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(gson.toJson(data));
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\admin\api\CrewFinderApiServlet.java
========================================================================

package de.technikteam.servlet.admin.api;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.EventDAO;
import de.technikteam.model.Event;
import de.technikteam.model.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

@Singleton
public class CrewFinderApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(CrewFinderApiServlet.class);
	private final EventDAO eventDAO;
	private final Gson gson;

	@Inject
	public CrewFinderApiServlet(EventDAO eventDAO) {
		this.eventDAO = eventDAO;
		this.gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User currentUser = (User) request.getSession().getAttribute("user");
		String eventIdParam = request.getParameter("eventId");

		if (eventIdParam == null || eventIdParam.trim().isEmpty()) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing eventId parameter.");
			return;
		}

		try {
			int eventId = Integer.parseInt(eventIdParam);
			Event event = eventDAO.getEventById(eventId);
			if (event == null) {
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "Event not found.");
				return;
			}

			boolean hasPermission = currentUser.getPermissions().contains("EVENT_MANAGE_ASSIGNMENTS")
					|| currentUser.hasAdminAccess() || currentUser.getId() == event.getLeaderUserId();

			if (!hasPermission) {
				response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied.");
				return;
			}

			List<User> qualifiedUsers = eventDAO.getQualifiedAndAvailableUsersForEvent(eventId);
			response.setContentType("application/json");
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(gson.toJson(qualifiedUsers));

		} catch (NumberFormatException e) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid eventId format.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\AdminDashboardApiServlet.java
========================================================================

package de.technikteam.servlet.api;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.model.DashboardDataDTO;
import de.technikteam.service.AdminDashboardService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.time.LocalDateTime;

@Singleton
public class AdminDashboardApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private final AdminDashboardService dashboardService;
	private final Gson gson;

	@Inject
	public AdminDashboardApiServlet(AdminDashboardService dashboardService) {
		this.dashboardService = dashboardService;
		this.gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		DashboardDataDTO data = dashboardService.getDashboardData();
		String jsonResponse = gson.toJson(data);

		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(jsonResponse);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\MarkdownApiServlet.java
========================================================================

package de.technikteam.servlet.api;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.FileDAO;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.util.CSRFUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;

@Singleton
public class MarkdownApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(MarkdownApiServlet.class);
	private final FileDAO fileDAO;
	private final AdminLogService adminLogService;

	@Inject
	public MarkdownApiServlet(FileDAO fileDAO, AdminLogService adminLogService) {
		this.fileDAO = fileDAO;
		this.adminLogService = adminLogService;
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession(false);
		if (session == null || session.getAttribute("user") == null) {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "User not authenticated.");
			return;
		}

		User user = (User) session.getAttribute("user");
		if (!user.getPermissions().contains("FILE_UPDATE") && !user.getPermissions().contains("ACCESS_ADMIN_PANEL")) {
			logger.warn("User '{}' tried to save markdown file without FILE_UPDATE permission.", user.getUsername());
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Access Denied.");
			return;
		}

		if (!CSRFUtil.isTokenValid(request)) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF Token.");
			return;
		}

		String fileIdParam = request.getParameter("fileId");
		String content = request.getParameter("content");

		if (fileIdParam == null || content == null) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Missing required parameters.");
			return;
		}

		try {
			int fileId = Integer.parseInt(fileIdParam);
			de.technikteam.model.File dbFile = fileDAO.getFileById(fileId);

			if (dbFile == null) {
				response.sendError(HttpServletResponse.SC_NOT_FOUND, "File not found.");
				return;
			}

			boolean contentUpdated = fileDAO.updateFileContent(dbFile.getFilepath(), content);
			boolean recordTouched = fileDAO.touchFileRecord(fileId);

			if (contentUpdated && recordTouched) {
				adminLogService.log(user.getUsername(), "UPDATE_MARKDOWN_FILE",
						"Inhalt der Datei '" + dbFile.getFilename() + "' (ID: " + fileId + ") aktualisiert.");
				session.setAttribute("successMessage", "Änderungen erfolgreich gespeichert.");
			} else {
				session.setAttribute("errorMessage", "Fehler beim Speichern der Datei.");
			}

			response.sendRedirect(request.getContextPath() + "/editor?fileId=" + fileId);

		} catch (NumberFormatException e) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid fileId format.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\StorageHistoryApiServlet.java
========================================================================

package de.technikteam.servlet.api;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.dao.StorageLogDAO;
import de.technikteam.model.StorageLogEntry;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;

@Singleton
public class StorageHistoryApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(StorageHistoryApiServlet.class);
	private final StorageLogDAO logDAO;
	private final Gson gson;

	@Inject
	public StorageHistoryApiServlet(StorageLogDAO logDAO) {
		this.logDAO = logDAO;
		this.gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try {
			int itemId = Integer.parseInt(request.getParameter("itemId"));
			logger.debug("API request for storage history for item ID: {}", itemId);
			List<StorageLogEntry> history = logDAO.getHistoryForItem(itemId);

			String jsonResponse = gson.toJson(history);
			response.setContentType("application/json");
			response.setCharacterEncoding("UTF-8");
			response.getWriter().write(jsonResponse);

		} catch (NumberFormatException e) {
			logger.warn("Bad request to storage history API: invalid or missing itemId");
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid or missing itemId.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\SystemStatsApiServlet.java
========================================================================

package de.technikteam.servlet.api;

import com.google.gson.Gson;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.model.SystemStatsDTO;
import de.technikteam.service.SystemInfoService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@Singleton
public class SystemStatsApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private final SystemInfoService systemInfoService;
	private final Gson gson;

	@Inject
	public SystemStatsApiServlet(SystemInfoService systemInfoService) {
		this.systemInfoService = systemInfoService;
		this.gson = new Gson();
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		SystemStatsDTO stats = systemInfoService.getSystemStats();
		String jsonResponse = gson.toJson(stats);

		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(jsonResponse);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\UserPreferencesApiServlet.java
========================================================================

package de.technikteam.servlet.api;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.User;
import de.technikteam.util.CSRFUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.Set;

@Singleton
public class UserPreferencesApiServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final Logger logger = LogManager.getLogger(UserPreferencesApiServlet.class);
	private static final Set<String> VALID_THEMES = Set.of("light", "dark");
	private final UserDAO userDAO;

	@Inject
	public UserPreferencesApiServlet(UserDAO userDAO) {
		this.userDAO = userDAO;
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession(false);
		if (session == null || session.getAttribute("user") == null) {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "User not authenticated.");
			return;
		}

		if (!CSRFUtil.isTokenValid(request)) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN, "Invalid CSRF Token.");
			return;
		}

		User user = (User) session.getAttribute("user");
		String theme = request.getParameter("theme");

		if (theme == null || !VALID_THEMES.contains(theme)) {
			response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid theme value.");
			return;
		}

		if (userDAO.updateUserTheme(user.getId(), theme)) {
			user.setTheme(theme);
			session.setAttribute("user", user);
			logger.info("Updated theme for user '{}' to '{}'.", user.getUsername(), theme);
			response.setStatus(HttpServletResponse.SC_OK);
		} else {
			logger.error("Failed to update theme for user '{}' in database.", user.getUsername());
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Could not save theme preference.");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\passkey\AuthenticationFinishServlet.java
========================================================================

package de.technikteam.servlet.api.passkey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.NavigationItem;
import de.technikteam.model.User;
import de.technikteam.service.PasskeyService;
import de.technikteam.util.CSRFUtil;
import de.technikteam.util.NavigationRegistry;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Singleton
public class AuthenticationFinishServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private final PasskeyService passkeyService;
	private final Gson gson;

	@Inject
	public AuthenticationFinishServlet(PasskeyService passkeyService) {
		this.passkeyService = passkeyService;
		this.gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String credentialJson = request.getReader().lines().collect(Collectors.joining(System.lineSeparator()));

		User user = passkeyService.finishAuthentication(credentialJson);

		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");

		if (user != null) {
			HttpSession session = request.getSession(true);
			session.setAttribute("user", user);
			CSRFUtil.storeToken(session);
			List<NavigationItem> navigationItems = NavigationRegistry.getNavigationItemsForUser(user);
			session.setAttribute("navigationItems", navigationItems);

			response.getWriter().write(gson.toJson(ApiResponse.success("Login successful!", user)));
		} else {
			response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
			response.getWriter().write(gson.toJson(ApiResponse.error("Passkey authentication failed.")));
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\passkey\AuthenticationStartServlet.java
========================================================================

package de.technikteam.servlet.api.passkey;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.service.PasskeyService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@Singleton
public class AuthenticationStartServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private final PasskeyService passkeyService;

	@Inject
	public AuthenticationStartServlet(PasskeyService passkeyService) {
		this.passkeyService = passkeyService;
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String username = request.getParameter("username");
		String challengeJson = passkeyService.startAuthentication(username);

		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(challengeJson);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\passkey\RegistrationFinishServlet.java
========================================================================

package de.technikteam.servlet.api.passkey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.model.ApiResponse;
import de.technikteam.model.User;
import de.technikteam.service.PasskeyService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.stream.Collectors;

@Singleton
public class RegistrationFinishServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private final PasskeyService passkeyService;
	private final Gson gson;

	@Inject
	public RegistrationFinishServlet(PasskeyService passkeyService) {
		this.passkeyService = passkeyService;
		this.gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
			return;
		}

		String deviceName = request.getParameter("deviceName");
		String credentialJson = request.getReader().lines().collect(Collectors.joining(System.lineSeparator()));

		boolean success = passkeyService.finishRegistration(user.getId(), credentialJson, deviceName);

		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");

		if (success) {
			response.getWriter().write(gson.toJson(ApiResponse.success("Device registered successfully!")));
		} else {
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			response.getWriter().write(gson.toJson(ApiResponse.error("Failed to register device.")));
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\api\passkey\RegistrationStartServlet.java
========================================================================

package de.technikteam.servlet.api.passkey;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.technikteam.model.User;
import de.technikteam.service.PasskeyService;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;

@Singleton
public class RegistrationStartServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private final PasskeyService passkeyService;

	@Inject
	public RegistrationStartServlet(PasskeyService passkeyService) {
		this.passkeyService = passkeyService;
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
			return;
		}

		String challengeJson = passkeyService.startRegistration(user);

		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(challengeJson);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\servlet\http\SessionManager.java
========================================================================

package de.technikteam.servlet.http;

import jakarta.servlet.http.HttpSession;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * A simple, centralized manager for active HttpSession objects. This allows
 * other parts of the application to find and invalidate a specific user's
 * session.
 */
public class SessionManager {

	private static final Map<String, HttpSession> SESSIONS = new ConcurrentHashMap<>();

	public static void addSession(HttpSession session) {
		SESSIONS.put(session.getId(), session);
	}

	public static void removeSession(HttpSession session) {
		SESSIONS.remove(session.getId());
	}

	/**
	 * Finds and invalidates all active sessions for a given user ID. This is useful
	 * for forcing a user to re-authenticate after critical profile changes.
	 * 
	 * @param userId The ID of the user whose sessions should be invalidated.
	 */
	public static void invalidateSessionsForUser(int userId) {
		SESSIONS.values().stream().filter(session -> {
			try {
				de.technikteam.model.User user = (de.technikteam.model.User) session.getAttribute("user");
				return user != null && user.getId() == userId;
			} catch (IllegalStateException e) {
				// Session might already be invalid, safe to ignore and remove
				return false;
			}
		}).forEach(session -> {
			try {
				session.invalidate();
			} catch (IllegalStateException e) {
				// Session was already invalidated, no action needed
			}
		});
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\CSRFUtil.java
========================================================================

package de.technikteam.util;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.security.SecureRandom;
import java.util.Base64;
import java.util.Objects;

/**
 * A utility class for Cross-Site Request Forgery (CSRF) protection. It provides
 * methods to generate, store, and validate session-bound tokens.
 */
public final class CSRFUtil {

	private static final Logger logger = LogManager.getLogger(CSRFUtil.class);
	private static final String CSRF_TOKEN_SESSION_ATTR = "csrfToken";
	private static final String CSRF_TOKEN_PARAM_NAME = "csrfToken";

	private CSRFUtil() {
	}

	public static void storeToken(HttpSession session) {
		if (session != null) {
			String token = generateToken();
			session.setAttribute(CSRF_TOKEN_SESSION_ATTR, token);
			logger.trace("Stored new CSRF token in session {}", session.getId());
		}
	}

	private static String generateToken() {
		SecureRandom random = new SecureRandom();
		byte[] tokenBytes = new byte[32];
		random.nextBytes(tokenBytes);
		return Base64.getUrlEncoder().withoutPadding().encodeToString(tokenBytes);
	}

	/**
	 * Validates the CSRF token from a request parameter against the one stored in
	 * the session. This method is intended for standard
	 * 'application/x-www-form-urlencoded' requests. For multipart requests, the
	 * token must be extracted manually first by the servlet.
	 *
	 * @param request The HttpServletRequest containing the token.
	 * @return true if the token is valid and matches the session token, false
	 *         otherwise.
	 */
	public static boolean isTokenValid(HttpServletRequest request) {
		String requestToken = request.getParameter(CSRF_TOKEN_PARAM_NAME);
		return isTokenValid(request.getSession(false), requestToken);
	}

	/**
	 * Validates a given request token against the one stored in the session. This
	 * is the primary validation method, useful for multipart requests where the
	 * token is extracted manually by the servlet.
	 *
	 * @param session      The current HttpSession.
	 * @param requestToken The token submitted with the request.
	 * @return true if the token is valid and matches the session token, false
	 *         otherwise.
	 */
	public static boolean isTokenValid(HttpSession session, String requestToken) {
		if (session == null) {
			logger.warn("CSRF check failed: No session exists.");
			return false;
		}

		String sessionToken = (String) session.getAttribute(CSRF_TOKEN_SESSION_ATTR);

		if (sessionToken == null || requestToken == null || requestToken.isEmpty()) {
			logger.warn(
					"CSRF check failed: Session or request token is missing. Session-Token-Present: {}, Request-Token-Present: {}",
					sessionToken != null, requestToken != null && !requestToken.isEmpty());
			return false;
		}

		boolean isValid = Objects.equals(sessionToken, requestToken);
		if (!isValid) {
			logger.warn("CSRF token mismatch! Session: [{}], Request: [{}]", sessionToken, requestToken);
		}

		return isValid;
	}

	public static String getCsrfInputField(HttpSession session) {
		if (session != null) {
			String token = (String) session.getAttribute(CSRF_TOKEN_SESSION_ATTR);
			if (token != null) {
				return "<input type=\"hidden\" name=\"" + CSRF_TOKEN_PARAM_NAME + "\" value=\"" + token + "\">";
			}
		}
		return "";
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\DaoUtils.java
========================================================================

package de.technikteam.util;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

/**
 * A utility class providing common helper methods for Data Access Objects
 * (DAOs).
 */
public final class DaoUtils {

	/**
	 * Private constructor to prevent instantiation of this utility class.
	 */
	private DaoUtils() {
	}

	/**
	 * Checks if a ResultSet contains a column with the given name. This check is
	 * case-insensitive. It is useful for handling optional columns from complex
	 * JOINs without causing a SQLException.
	 *
	 * @param rs         The ResultSet to check.
	 * @param columnName The name of the column to look for.
	 * @return true if the column exists in the ResultSet metadata, false otherwise.
	 * @throws SQLException If a database access error occurs while retrieving
	 *                      metadata.
	 */
	public static boolean hasColumn(ResultSet rs, String columnName) throws SQLException {
		ResultSetMetaData rsmd = rs.getMetaData();
		int columnCount = rsmd.getColumnCount();
		for (int i = 1; i <= columnCount; i++) {
			if (columnName.equalsIgnoreCase(rsmd.getColumnName(i))) {
				return true;
			}
		}
		return false;
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\MarkdownUtil.java
========================================================================

package de.technikteam.util;

import java.util.regex.Pattern;

/**
 * A utility class for sanitizing user-provided Markdown content to prevent
 * Cross-Site Scripting (XSS) attacks. It strips dangerous HTML tags and
 * attributes before the content is stored or rendered.
 */
public final class MarkdownUtil {

    // Pattern to find and remove <script>...</script> blocks, case-insensitive and multiline.
    private static final Pattern SCRIPT_PATTERN = Pattern.compile("<script.*?>.*?</script>",
            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);

    // Pattern to find and remove attributes like onclick, onmouseover, etc.
    private static final Pattern ON_ATTRIBUTE_PATTERN = Pattern.compile("\\s(on\\w+)\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+)",
            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);

    // Pattern to find and remove href/src attributes with "javascript:..." URIs.
    private static final Pattern JAVASCRIPT_URI_PATTERN = Pattern.compile("(href|src)\\s*=\\s*(\"|')\\s*javascript:",
            Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);

    /**
     * Private constructor to prevent instantiation of this utility class.
     */
    private MarkdownUtil() {
    }

    /**
     * Sanitizes a string containing Markdown and potentially malicious HTML. This
     * method should be called on any user-supplied content before it is stored in
     * the database or broadcast to other clients.
     *
     * @param markdown The raw Markdown string from the user.
     * @return A sanitized string with dangerous HTML elements and attributes removed.
     */
    public static String sanitize(String markdown) {
        if (markdown == null || markdown.isEmpty()) {
            return markdown;
        }

        String sanitized = markdown;

        // Remove <script> tags completely
        sanitized = SCRIPT_PATTERN.matcher(sanitized).replaceAll("");

        // Remove on... attributes (onclick, onmouseover, etc.)
        sanitized = ON_ATTRIBUTE_PATTERN.matcher(sanitized).replaceAll("");

        // Remove javascript:... in href/src attributes
        sanitized = JAVASCRIPT_URI_PATTERN.matcher(sanitized).replaceAll("$1='#'");

        return sanitized;
    }
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\NavigationRegistry.java
========================================================================

package de.technikteam.util;

import de.technikteam.config.Permissions;
import de.technikteam.model.NavigationItem;
import de.technikteam.model.User;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * A central registry for all navigation items in the application. This class
 * provides a single source of truth for the sidebar links and their required
 * permissions, ensuring consistency and simplifying access control logic.
 */
public final class NavigationRegistry {

	private static final List<NavigationItem> ALL_ITEMS = new ArrayList<>();

	// Defines all possible navigation links, their icons, and the permission
	// required to see them.
	// A null permission means the link is public to all authenticated users.
	static {
		// User Section
		ALL_ITEMS.add(new NavigationItem("Dashboard", "/home", "fa-home", null));
		ALL_ITEMS.add(new NavigationItem("Lehrgänge", "/lehrgaenge", "fa-graduation-cap", null));
		ALL_ITEMS.add(new NavigationItem("Veranstaltungen", "/veranstaltungen", "fa-calendar-check", null));
		ALL_ITEMS.add(new NavigationItem("Lager", "/lager", "fa-boxes", null));
		ALL_ITEMS.add(new NavigationItem("Dateien", "/dateien", "fa-folder-open", null));
		ALL_ITEMS.add(new NavigationItem("Kalender", "/kalender", "fa-calendar-alt", null));
		ALL_ITEMS.add(new NavigationItem("Mein Feedback", "/my-feedback", "fa-comment-dots", null));
		ALL_ITEMS.add(new NavigationItem("Feedback geben", "/feedback", "fa-lightbulb", null));

		// Admin Section
		ALL_ITEMS.add(new NavigationItem("Admin Dashboard", "/admin/dashboard", "fa-tachometer-alt",
				Permissions.ADMIN_DASHBOARD_ACCESS));
		ALL_ITEMS.add(new NavigationItem("Benutzer", "/admin/mitglieder", "fa-users-cog", Permissions.USER_READ));
		ALL_ITEMS.add(new NavigationItem("Anträge", "/admin/requests", "fa-inbox", Permissions.USER_UPDATE));
		ALL_ITEMS.add(
				new NavigationItem("Events", "/admin/veranstaltungen", "fa-calendar-plus", Permissions.EVENT_READ));
		ALL_ITEMS.add(new NavigationItem("Lager", "/admin/lager", "fa-warehouse", Permissions.STORAGE_READ));
		ALL_ITEMS.add(new NavigationItem("Dateien", "/admin/dateien", "fa-file-upload", Permissions.FILE_MANAGE));
		ALL_ITEMS
				.add(new NavigationItem("Lehrgangs-Vorlagen", "/admin/lehrgaenge", "fa-book", Permissions.COURSE_READ));
		ALL_ITEMS.add(new NavigationItem("Kit-Verwaltung", "/admin/kits", "fa-box-open", Permissions.KIT_READ));
		ALL_ITEMS
				.add(new NavigationItem("Feedback", "/admin/feedback", "fa-inbox", Permissions.ADMIN_DASHBOARD_ACCESS));
		ALL_ITEMS.add(new NavigationItem("Abzeichen", "/admin/achievements", "fa-award", Permissions.ACHIEVEMENT_VIEW));
		ALL_ITEMS.add(new NavigationItem("Defekte Artikel", "/admin/defekte", "fa-wrench", Permissions.STORAGE_READ));
		ALL_ITEMS
				.add(new NavigationItem("Quali-Matrix", "/admin/matrix", "fa-th-list", Permissions.QUALIFICATION_READ));
		ALL_ITEMS.add(new NavigationItem("Berichte", "/admin/berichte", "fa-chart-pie", Permissions.REPORT_READ));
		ALL_ITEMS.add(new NavigationItem("Aktions-Log", "/admin/log", "fa-clipboard-list", Permissions.LOG_READ));
		ALL_ITEMS.add(new NavigationItem("System", "/admin/system", "fa-server", Permissions.SYSTEM_READ));
		ALL_ITEMS.add(new NavigationItem("Wiki", "/admin/wiki", "fa-book-reader", Permissions.ACCESS_ADMIN_PANEL));
	}

	private NavigationRegistry() {
		// Private constructor to prevent instantiation.
	}

	/**
	 * Builds a filtered list of navigation items based on the user's permissions.
	 *
	 * @param user The current user.
	 * @return A list of NavigationItem objects the user is allowed to see.
	 */
	public static List<NavigationItem> getNavigationItemsForUser(User user) {
		if (user == null || user.getPermissions() == null) {
			return new ArrayList<>();
		}

		final Set<String> userPermissions = user.getPermissions();

		return ALL_ITEMS.stream().filter(item -> {
			final String requiredPerm = item.getRequiredPermission();

			// Public items are always visible
			if (requiredPerm == null) {
				return true;
			}

			// Super-admins see all admin items
			if (userPermissions.contains(Permissions.ACCESS_ADMIN_PANEL)) {
				return true;
			}

			// Special case: The "Admin Dashboard" link is visible if the user has *any*
			// admin-level access.
			if (Permissions.ADMIN_DASHBOARD_ACCESS.equals(requiredPerm)) {
				return user.hasAdminAccess();
			}

			// Special case: The "Abzeichen" link is visible if user can perform any
			// achievement action.
			if (Permissions.ACHIEVEMENT_VIEW.equals(requiredPerm)) {
				return userPermissions.contains(Permissions.ACHIEVEMENT_CREATE)
						|| userPermissions.contains(Permissions.ACHIEVEMENT_UPDATE)
						|| userPermissions.contains(Permissions.ACHIEVEMENT_DELETE);
			}

			// Standard permission check for all other items
			return userPermissions.contains(requiredPerm);
		}).collect(Collectors.toList());
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\util\PasswordPolicyValidator.java
========================================================================

package de.technikteam.util;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

/**
 * A utility class to enforce a consistent, server-side password policy.
 */
public final class PasswordPolicyValidator {

	private static final int MIN_LENGTH = 10;
	private static final Pattern HAS_UPPERCASE = Pattern.compile("[A-Z]");
	private static final Pattern HAS_LOWERCASE = Pattern.compile("[a-z]");
	private static final Pattern HAS_DIGIT = Pattern.compile("[0-9]");
	private static final Pattern HAS_SPECIAL_CHAR = Pattern.compile("[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]");

	/**
	 * Private constructor to prevent instantiation of this utility class.
	 */
	private PasswordPolicyValidator() {
	}

	/**
	 * A simple record to hold the result of a password validation check.
	 */
	public static class ValidationResult {
		private final boolean isValid;
		private final String message;

		public ValidationResult(boolean isValid, String message) {
			this.isValid = isValid;
			this.message = message;
		}

		public boolean isValid() {
			return isValid;
		}

		public String getMessage() {
			return message;
		}
	}

	/**
	 * Validates a password against the application's defined security policy.
	 *
	 * @param password The password to validate.
	 * @return A {@link ValidationResult} object containing the result and a
	 *         descriptive message.
	 */
	public static ValidationResult validate(String password) {
		if (password == null || password.trim().isEmpty()) {
			return new ValidationResult(false, "Das Passwort darf nicht leer sein.");
		}

		List<String> errors = new ArrayList<>();

		if (password.length() < MIN_LENGTH) {
			errors.add("mindestens " + MIN_LENGTH + " Zeichen lang sein");
		}
		if (!HAS_UPPERCASE.matcher(password).find()) {
			errors.add("mindestens einen Großbuchstaben enthalten");
		}
		if (!HAS_LOWERCASE.matcher(password).find()) {
			errors.add("mindestens einen Kleinbuchstaben enthalten");
		}
		if (!HAS_DIGIT.matcher(password).find()) {
			errors.add("mindestens eine Ziffer enthalten");
		}
		if (!HAS_SPECIAL_CHAR.matcher(password).find()) {
			errors.add("mindestens ein Sonderzeichen enthalten");
		}

		if (errors.isEmpty()) {
			return new ValidationResult(true, "Passwort ist gültig.");
		} else {
			return new ValidationResult(false, "Das Passwort muss " + String.join(", ", errors) + ".");
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\ChatSessionManager.java
========================================================================

package de.technikteam.websocket;

import jakarta.websocket.Session;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;

/**
 * Manages WebSocket sessions for event-specific chat rooms using a thread-safe
 * Singleton pattern. It maps event IDs to a set of active sessions, allowing
 * for targeted broadcasting of messages.
 */
public final class ChatSessionManager {
	private static final Logger logger = LogManager.getLogger(ChatSessionManager.class);
	private static final ChatSessionManager INSTANCE = new ChatSessionManager();

	// A map where the key is the event ID and the value is a thread-safe set of
	// sessions for that event.
	private final Map<String, Set<Session>> sessionsByEvent = new ConcurrentHashMap<>();

	private ChatSessionManager() {
	}

	/**
	 * Gets the singleton instance of the ChatSessionManager.
	 *
	 * @return The single instance of this class.
	 */
	public static ChatSessionManager getInstance() {
		return INSTANCE;
	}

	/**
	 * Adds a new WebSocket session to a specific event chat room.
	 *
	 * @param eventId The ID of the event chat room.
	 * @param session The WebSocket session to add.
	 */
	public void addSession(String eventId, Session session) {
		sessionsByEvent.computeIfAbsent(eventId, k -> new CopyOnWriteArraySet<>()).add(session);
		logger.info("Session {} registered for event chat [{}].", session.getId(), eventId);
	}

	/**
	 * Removes a WebSocket session from an event chat room. If the room becomes
	 * empty, it is removed from the map to conserve memory.
	 *
	 * @param eventId The ID of the event chat room.
	 * @param session The WebSocket session to remove.
	 */
	public void removeSession(String eventId, Session session) {
		Set<Session> sessions = sessionsByEvent.get(eventId);
		if (sessions != null) {
			sessions.remove(session);
			logger.info("Session {} removed from event chat [{}].", session.getId(), eventId);
			if (sessions.isEmpty()) {
				sessionsByEvent.remove(eventId);
				logger.info("Event chat room [{}] is now empty and has been removed.", eventId);
			}
		}
	}

	/**
	 * Broadcasts a message to all open sessions in a specific event chat room.
	 *
	 * @param eventId The ID of the event chat room.
	 * @param message The message to broadcast.
	 */
	public void broadcast(String eventId, String message) {
		Set<Session> sessions = sessionsByEvent.get(eventId);
		if (sessions != null) {
			logger.debug("Broadcasting to {} sessions in event chat [{}].", sessions.size(), eventId);
			for (Session session : sessions) {
				if (session.isOpen()) {
					try {
						session.getBasicRemote().sendText(message);
					} catch (IOException e) {
						logger.error("Error broadcasting to session {}:", session.getId(), e);
						// Consider removing the session here if an error occurs
					}
				}
			}
		}
	}

	/**
	 * Broadcasts a message to all open sessions in an event chat room, except for
	 * the originating session.
	 *
	 * @param eventId        The ID of the event chat room.
	 * @param message        The message to broadcast.
	 * @param excludeSession The session to exclude from the broadcast.
	 */
	public void broadcastExcept(String eventId, String message, Session excludeSession) {
		Set<Session> sessions = sessionsByEvent.get(eventId);
		if (sessions != null) {
			for (Session session : sessions) {
				if (session.isOpen() && !session.getId().equals(excludeSession.getId())) {
					try {
						session.getBasicRemote().sendText(message);
					} catch (IOException e) {
						logger.error("Error broadcasting (except self) to session {}:", session.getId(), e);
					}
				}
			}
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\DocumentEditorSocket.java
========================================================================

package de.technikteam.websocket;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.inject.Inject;
import de.technikteam.config.Permissions;
import de.technikteam.dao.FileDAO;
import de.technikteam.model.User;
import de.technikteam.util.MarkdownUtil;
import jakarta.websocket.*;
import jakarta.websocket.server.PathParam;
import jakarta.websocket.server.ServerEndpoint;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.Map;

@ServerEndpoint(value = "/ws/editor/{fileId}", configurator = GuiceAwareServerEndpointConfigurator.class)
public class DocumentEditorSocket {

	private static final Logger logger = LogManager.getLogger(DocumentEditorSocket.class);
	private static FileDAO fileDAO;
	private static final Gson gson = new Gson();

	@Inject
	public static void setDependencies(FileDAO fileDAO) {
		DocumentEditorSocket.fileDAO = fileDAO;
	}

	@OnOpen
	public void onOpen(Session session, @PathParam("fileId") String fileId, EndpointConfig config) throws IOException {
		User user = (User) config.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);

		if (user == null || (!user.getPermissions().contains(Permissions.FILE_UPDATE)
				&& !user.getPermissions().contains("ACCESS_ADMIN_PANEL"))) {
			session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, "Permission denied."));
			return;
		}

		session.getUserProperties().put(GetHttpSessionConfigurator.USER_PROPERTY_KEY, user);
		DocumentSessionManager.getInstance().addSession(fileId, session);
	}

	@OnMessage
	public void onMessage(Session session, String message, @PathParam("fileId") String fileId) {
		User user = (User) session.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);
		if (user == null)
			return;

		try {
			@SuppressWarnings("unchecked")
			Map<String, String> messageMap = gson.fromJson(message, Map.class);
			String type = messageMap.get("type");
			String content = messageMap.get("payload");

			if ("content_update".equals(type)) {
				handleContentUpdate(session, fileId, content);
			}
		} catch (JsonSyntaxException e) {
			logger.error("Invalid JSON received from user '{}' for file ID {}: {}", user.getUsername(), fileId, message,
					e);
		}
	}

	private void handleContentUpdate(Session originSession, String fileIdStr, String content) {
		try {
			int fileId = Integer.parseInt(fileIdStr);
			de.technikteam.model.File dbFile = fileDAO.getFileById(fileId);

			if (dbFile != null) {
				String sanitizedContent = MarkdownUtil.sanitize(content);
				if (fileDAO.updateFileContent(dbFile.getFilepath(), sanitizedContent)) {
					fileDAO.touchFileRecord(fileId);
					Map<String, String> broadcastPayload = Map.of("type", "content_update", "payload",
							sanitizedContent);
					DocumentSessionManager.getInstance().broadcastExcept(fileIdStr, gson.toJson(broadcastPayload),
							originSession);
				}
			}
		} catch (NumberFormatException e) {
			logger.error("Invalid fileId '{}' received in WebSocket message.", fileIdStr);
		}
	}

	@OnClose
	public void onClose(Session session, @PathParam("fileId") String fileId) {
		DocumentSessionManager.getInstance().removeSession(fileId, session);
	}

	@OnError
	public void onError(Session session, Throwable throwable, @PathParam("fileId") String fileId) {
		logger.error("WebSocket ERROR in editor for file [{}], session [{}]:", fileId, session.getId(), throwable);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\DocumentSessionManager.java
========================================================================

package de.technikteam.websocket;

import jakarta.websocket.Session;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArraySet;

/**
 * Manages WebSocket sessions for document-specific editing rooms using a
 * thread-safe Singleton pattern. It maps file IDs to a set of active sessions,
 * allowing for targeted broadcasting of document updates.
 */
public final class DocumentSessionManager {
	private static final Logger logger = LogManager.getLogger(DocumentSessionManager.class);
	private static final DocumentSessionManager INSTANCE = new DocumentSessionManager();

	// A map where the key is the file ID and the value is a thread-safe set of
	// sessions for that document.
	private final Map<String, Set<Session>> sessionsByFile = new ConcurrentHashMap<>();

	private DocumentSessionManager() {
	}

	public static DocumentSessionManager getInstance() {
		return INSTANCE;
	}

	public void addSession(String fileId, Session session) {
		sessionsByFile.computeIfAbsent(fileId, k -> new CopyOnWriteArraySet<>()).add(session);
		logger.info("Editor session {} registered for file [{}].", session.getId(), fileId);
	}

	public void removeSession(String fileId, Session session) {
		Set<Session> sessions = sessionsByFile.get(fileId);
		if (sessions != null) {
			sessions.remove(session);
			logger.info("Editor session {} removed from file [{}].", session.getId(), fileId);
			if (sessions.isEmpty()) {
				sessionsByFile.remove(fileId);
				logger.info("Editing room for file [{}] is now empty and has been removed.", fileId);
			}
		}
	}

	public int getSessionsCount(String fileId) {
		Set<Session> sessions = sessionsByFile.get(fileId);
		return sessions != null ? sessions.size() : 0;
	}

	public void broadcastExcept(String fileId, String message, Session excludeSession) {
		Set<Session> sessions = sessionsByFile.get(fileId);
		if (sessions != null) {
			for (Session session : sessions) {
				if (session.isOpen() && !session.getId().equals(excludeSession.getId())) {
					try {
						session.getBasicRemote().sendText(message);
					} catch (IOException e) {
						logger.error("Error broadcasting document update to session {}:", session.getId(), e);
					}
				}
			}
		}
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\EventChatSocket.java
========================================================================

package de.technikteam.websocket;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import com.google.inject.Inject;
import de.technikteam.config.LocalDateTimeAdapter;
import de.technikteam.config.Permissions;
import de.technikteam.dao.EventChatDAO;
import de.technikteam.dao.EventDAO;
import de.technikteam.dao.FileDAO;
import de.technikteam.dao.UserDAO;
import de.technikteam.model.Event;
import de.technikteam.model.EventChatMessage;
import de.technikteam.model.User;
import de.technikteam.service.AdminLogService;
import de.technikteam.service.NotificationService;
import de.technikteam.util.MarkdownUtil;
import jakarta.websocket.*;
import jakarta.websocket.server.PathParam;
import jakarta.websocket.server.ServerEndpoint;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@ServerEndpoint(value = "/ws/chat/{eventId}", configurator = GuiceAwareServerEndpointConfigurator.class)
public class EventChatSocket {

	private static final Logger logger = LogManager.getLogger(EventChatSocket.class);
	private static final Pattern MENTION_PATTERN = Pattern.compile("@(\\w+)");

	private static EventChatDAO chatDAO;
	private static EventDAO eventDAO;
	private static UserDAO userDAO;
	private static FileDAO fileDAO;
	private static AdminLogService adminLogService;
	private static Gson gson;

	@Inject
	public static void setDependencies(EventChatDAO injectedChatDAO, EventDAO injectedEventDAO, UserDAO injectedUserDAO,
			FileDAO injectedFileDAO, AdminLogService injectedAdminLogService) {
		chatDAO = injectedChatDAO;
		eventDAO = injectedEventDAO;
		userDAO = injectedUserDAO;
		fileDAO = injectedFileDAO;
		adminLogService = injectedAdminLogService;
		gson = new GsonBuilder().registerTypeAdapter(LocalDateTime.class, new LocalDateTimeAdapter()).create();
	}

	@OnOpen
	public void onOpen(Session session, @PathParam("eventId") String eventIdStr, EndpointConfig config)
			throws IOException {
		User user = (User) config.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);

		if (user == null) {
			session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, "Authentication required."));
			return;
		}

		try {
			int eventId = Integer.parseInt(eventIdStr);
			if (!eventDAO.isUserAssociatedWithEvent(eventId, user.getId())) {
				session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, "Permission denied."));
				return;
			}

			session.getUserProperties().put(GetHttpSessionConfigurator.USER_PROPERTY_KEY, user);
			ChatSessionManager.getInstance().addSession(eventIdStr, session);

		} catch (NumberFormatException e) {
			session.close(new CloseReason(CloseReason.CloseCodes.UNEXPECTED_CONDITION, "Invalid event ID format."));
		}
	}

	@OnMessage
	public void onMessage(Session session, String message, @PathParam("eventId") String eventId) {
		User user = (User) session.getUserProperties().get(GetHttpSessionConfigurator.USER_PROPERTY_KEY);
		if (user == null)
			return;

		try {
			@SuppressWarnings("unchecked")
			Map<String, Object> messageMap = gson.fromJson(message, Map.class);
			String type = (String) messageMap.get("type");
			@SuppressWarnings("unchecked")
			Map<String, Object> payload = (Map<String, Object>) messageMap.get("payload");

			switch (type) {
			case "new_message":
				handleNewMessage(user, eventId, payload);
				break;
			case "update_message":
				handleUpdateMessage(user, eventId, payload);
				break;
			case "delete_message":
				handleDeleteMessage(user, eventId, payload);
				break;
			}
		} catch (JsonSyntaxException e) {
			logger.error("Error processing message from user '{}'. Invalid JSON format.", user.getUsername(), e);
		}
	}

	private void handleNewMessage(User user, String eventId, Map<String, Object> payload) {
		String messageText = (String) payload.get("messageText");
		String sanitizedMessage = MarkdownUtil.sanitize(messageText);
		EventChatMessage newMessage = new EventChatMessage();
		newMessage.setEventId(Integer.parseInt(eventId));
		newMessage.setUserId(user.getId());
		newMessage.setUsername(user.getUsername());
		newMessage.setMessageText(sanitizedMessage);
		EventChatMessage savedMessage = chatDAO.postMessage(newMessage);
		if (savedMessage == null)
			return;
		Map<String, Object> broadcastPayload = Map.of("type", "new_message", "payload", savedMessage);
		ChatSessionManager.getInstance().broadcast(eventId, gson.toJson(broadcastPayload));
		handleMentions(user, savedMessage);
	}

	private void handleMentions(User sender, EventChatMessage message) {
		Event event = eventDAO.getEventById(message.getEventId());
		if (event == null)
			return;
		Matcher matcher = MENTION_PATTERN.matcher(message.getMessageText());
		while (matcher.find()) {
			String mentionedUsername = matcher.group(1);
			User mentionedUser = userDAO.getUserByUsername(mentionedUsername);
			if (mentionedUser != null && mentionedUser.getId() != sender.getId()) {
				String notificationMessage = String.format("%s hat Sie im Chat für '%s' erwähnt.", sender.getUsername(),
						event.getName());
				Map<String, Object> notificationPayload = Map.of("type", "mention", "payload",
						Map.of("message", notificationMessage, "url", "/veranstaltungen/details?id=" + event.getId()));
				NotificationService.getInstance().sendNotificationToUser(mentionedUser.getId(), notificationPayload);
			}
		}
	}

	private void handleDeleteMessage(User user, String eventId, Map<String, Object> payload) {
		int messageId = ((Double) payload.get("messageId")).intValue();
		Event event = eventDAO.getEventById(Integer.parseInt(eventId));
		boolean isEventLeader = event != null && event.getLeaderUserId() == user.getId();
		boolean canDeleteAsAdmin = user.getPermissions().contains(Permissions.ACCESS_ADMIN_PANEL) || isEventLeader;
		if (chatDAO.deleteMessage(messageId, user.getId(), canDeleteAsAdmin)) {
			int originalUserId = ((Double) payload.get("originalUserId")).intValue();
			if (canDeleteAsAdmin && user.getId() != originalUserId && event != null) {
				String logDetails = String.format(
						"Admin '%s' deleted chat message (ID: %d) in event chat for event '%s' (ID: %s).",
						user.getUsername(), messageId, event.getName(), eventId);
				adminLogService.log(user.getUsername(), "DELETE_CHAT_MESSAGE", logDetails);
			}
			Map<String, Object> broadcastPayload = Map.of("type", "message_soft_deleted", "payload",
					Map.of("messageId", messageId, "originalUsername", payload.get("originalUsername"),
							"deletedByUsername", user.getUsername()));
			ChatSessionManager.getInstance().broadcast(eventId, gson.toJson(broadcastPayload));
		}
	}

	private void handleUpdateMessage(User user, String eventId, Map<String, Object> payload) {
		int messageId = ((Double) payload.get("messageId")).intValue();
		String newText = (String) payload.get("newText");
		String sanitizedText = MarkdownUtil.sanitize(newText);
		if (chatDAO.updateMessage(messageId, user.getId(), sanitizedText)) {
			Map<String, Object> broadcastPayload = Map.of("type", "message_updated", "payload",
					Map.of("messageId", messageId, "newText", sanitizedText));
			ChatSessionManager.getInstance().broadcast(eventId, gson.toJson(broadcastPayload));
		}
	}

	@OnClose
	public void onClose(Session session, @PathParam("eventId") String eventId) {
		ChatSessionManager.getInstance().removeSession(eventId, session);
	}

	@OnError
	public void onError(Session session, Throwable throwable) {
		logger.error("WebSocket ERROR in session [{}]:", session.getId(), throwable);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\GetHttpSessionConfigurator.java
========================================================================

package de.technikteam.websocket;

import de.technikteam.model.User;
import jakarta.servlet.ServletContext;
import jakarta.servlet.http.HttpSession;
import jakarta.websocket.HandshakeResponse;
import jakarta.websocket.server.HandshakeRequest;
import jakarta.websocket.server.ServerEndpointConfig;

public class GetHttpSessionConfigurator extends ServerEndpointConfig.Configurator {

	public static final String USER_PROPERTY_KEY = "user";
	private static volatile ServletContext servletContext;

	@Override
	public void modifyHandshake(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response) {
		HttpSession httpSession = (HttpSession) request.getHttpSession();
		if (httpSession != null) {
			// Store ServletContext if it's not already stored.
			if (servletContext == null) {
				servletContext = httpSession.getServletContext();
			}

			User user = (User) httpSession.getAttribute(USER_PROPERTY_KEY);
			if (user != null) {
				sec.getUserProperties().put(USER_PROPERTY_KEY, user);
			}
		}
	}

	public static ServletContext getServletContext() {
		return servletContext;
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\websocket\GuiceAwareServerEndpointConfigurator.java
========================================================================

package de.technikteam.websocket;

import com.google.inject.Injector;
import jakarta.servlet.ServletContext;
import jakarta.websocket.HandshakeResponse;
import jakarta.websocket.server.HandshakeRequest;
import jakarta.websocket.server.ServerEndpointConfig;

public class GuiceAwareServerEndpointConfigurator extends ServerEndpointConfig.Configurator {

	@Override
	public <T> T getEndpointInstance(Class<T> endpointClass) throws InstantiationException {
		ServletContext servletContext = GetHttpSessionConfigurator.getServletContext();
		if (servletContext == null) {
			throw new IllegalStateException("ServletContext is not available. Cannot find Guice Injector.");
		}

		Injector injector = (Injector) servletContext.getAttribute(Injector.class.getName());
		if (injector == null) {
			throw new IllegalStateException(
					"Guice Injector not found in ServletContext. Is GuiceConfig configured correctly in web.xml?");
		}

		// Guice creates the instance and injects its constructor dependencies (if any).
		// For WebSockets, we often use a static injection pattern, so we get the
		// instance
		// first and then ask Guice to inject its members (including static ones if
		// configured).
		T instance = injector.getInstance(endpointClass);
		injector.injectMembers(instance); // This is the key part for member injection.

		return instance;
	}

	@Override
	public void modifyHandshake(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response) {
		// Also perform the HttpSession capture
		super.modifyHandshake(sec, request, response);
		new GetHttpSessionConfigurator().modifyHandshake(sec, request, response);
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\config.properties
========================================================================

# Database Connection Details
db.url=jdbc:mysql://localhost:3306/technik_team_db?useUnicode=true&characterEncoding=UTF-8&useSSL=false

# CORRECTED: Replaced placeholder credentials with your actual credentials.
db.user=technik_user
db.password=X32MYaaD

# File Upload Configuration
upload.directory=C:/dev/eclipse/workspace/TechnikTeam/resources/uploads

# Collabora Integration
collabora.server.url=http://localhost:9980
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\db.properties
========================================================================

# Database configuration for local development.
# IMPORTANT: Add this file to your .gitignore to avoid committing credentials.
db.user=technik
db.password=X32MYaaD
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\log4j2.xml
========================================================================

<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="WARN">
	<Appenders>
		<Console name="Console" target="SYSTEM_OUT">
			<!-- For development, use a human-readable pattern -->
			<!-- <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} 
				- %msg%n"/> -->

			<!-- For production/structured logging, use JSON Template Layout -->
			<JsonTemplateLayout
				eventTemplateUri="classpath:Log4j2JsonTemplate.json" />
		</Console>
	</Appenders>
	<Loggers>
		<Root level="info">
			<AppenderRef ref="Console" />
		</Root>
		<!-- Set a more verbose level for our application's packages during development -->
		<Logger name="de.technikteam" level="debug" additivity="false">
			<AppenderRef ref="Console" />
		</Logger>
	</Loggers>
</Configuration>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\Log4j2JsonTemplate.json
========================================================================

{
	"timestamp": {
		"$resolver": "timestamp",
		"pattern": {
			"format": "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'",
			"timeZone": "UTC"
		}
	},
	"level": {
		"$resolver": "level",
		"field": "name"
	},
	"loggerName": {
		"$resolver": "logger",
		"field": "name"
	},
	"threadName": {
		"$resolver": "thread",
		"field": "name"
	},
	"message": {
		"$resolver": "message",
		"stringified": true
	},
	"thrown": {
		"$resolver": "exception",
		"field": "stackTrace",
		"stringified": true
	},
	"context": {
		"$resolver": "mdc"
	}
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\Wiki.md
========================================================================

# TechnikTeam - Technical Documentation Wiki

This document serves as the definitive internal technical reference for the TechnikTeam application. It provides a complete file structure overview and detailed documentation for every component in the system.

***

## Part 1: Project Tree

<details>
<summary>Click to expand the full project tree...</summary>

-   **src/main/**
    -   **java/de/technikteam/**
        -   **config/**
            -   [`DateFormatter.java`](#dateformatter-java)
            -   [`GuiceConfig.java`](#guiceconfig-java)
            -   [`LocalDateAdapter.java`](#localdateadapter-java)
            -   [`LocalDateTimeAdapter.java`](#localdatetimeadapter-java)
            -   [`Permissions.java`](#permissions-java)
            -   [`ServiceModule.java`](#servicemodule-java)
        -   **dao/**
            -   [`AchievementDAO.java`](#achievementdao-java)
            -   [`AdminLogDAO.java`](#adminlogdao-java)
            -   [`AttachmentDAO.java`](#attachmentdao-java)
            -   [`CourseDAO.java`](#coursedao-java)
            -   [`DatabaseManager.java`](#databasemanager-java)
            -   [`EventChatDAO.java`](#eventchatdao-java)
            -   [`EventCustomFieldDAO.java`](#eventcustomfielddao-java)
            -   [`EventDAO.java`](#eventdao-java)
            -   [`EventFeedbackDAO.java`](#eventfeedbackdao-java)
            -   [`EventTaskDAO.java`](#eventtaskdao-java)
            -   [`FeedbackSubmissionDAO.java`](#feedbacksubmissiondao-java)
            -   [`FileDAO.java`](#filedao-java)
            -   [`InventoryKitDAO.java`](#inventorykitdao-java)
            -   [`MaintenanceLogDAO.java`](#maintenancelogdao-java)
            -   [`MeetingAttendanceDAO.java`](#meetingattendancedao-java)
            -   [`MeetingDAO.java`](#meetingdao-java)
            -   [`PasskeyDAO.java`](#passkeydao-java)
            -   [`PermissionDAO.java`](#permissiondao-java)
            -   [`ProfileChangeRequestDAO.java`](#profilechangerequestdao-java)
            -   [`ReportDAO.java`](#reportdao-java)
            -   [`RoleDAO.java`](#roledao-java)
            -   [`StatisticsDAO.java`](#statisticsdao-java)
            -   [`StorageDAO.java`](#storagedao-java)
            -   [`StorageLogDAO.java`](#storagelogdao-java)
            -   [`TodoDAO.java`](#tododao-java)
            -   [`UserDAO.java`](#userdao-java)
            -   [`UserQualificationsDAO.java`](#userqualificationsdao-java)
        -   **filter/**
            -   [`AdminFilter.java`](#adminfilter-java)
            -   [`AuthenticationFilter.java`](#authenticationfilter-java)
            -   [`CharacterEncodingFilter.java`](#characterencodingfilter-java)
        -   **listener/**
            -   [`AppContextListener.java`](#appcontextlistener-java)
            -   [`ApplicationInitializerListener.java`](#applicationinitializerlistener-java)
            -   [`SessionListener.java`](#sessionlistener-java)
        -   **model/**
            -   [`Achievement.java`](#achievement-java)
            -   [`AdminLog.java`](#adminlog-java)
            -   [`ApiResponse.java`](#apiresponse-java)
            -   [`Attachment.java`](#attachment-java)
            -   [`Course.java`](#course-java)
            -   [`DashboardDataDTO.java`](#dashboarddatadto-java)
            -   [`Event.java`](#event-java)
            -   [`EventAttendance.java`](#eventattendance-java)
            -   [`EventChatMessage.java`](#eventchatmessage-java)
            -   [`EventCustomField.java`](#eventcustomfield-java)
            -   [`EventCustomFieldResponse.java`](#eventcustomfieldresponse-java)
            -   [`EventTask.java`](#eventtask-java)
            -   [`FeedbackForm.java`](#feedbackform-java)
            -   [`FeedbackResponse.java`](#feedbackresponse-java)
            -   [`FeedbackSubmission.java`](#feedbacksubmission-java)
            -   [`File.java`](#file-java)
            -   [`FileCategory.java`](#filecategory-java)
            -   [`InventoryKit.java`](#inventorykit-java)
            -   [`InventoryKitItem.java`](#inventorykititem-java)
            -   [`MaintenanceLogEntry.java`](#maintenancelogentry-java)
            -   [`Meeting.java`](#meeting-java)
            -   [`MeetingAttendance.java`](#meetingattendance-java)
            -   [`NavigationItem.java`](#navigationitem-java)
            -   [`ParticipationHistory.java`](#participationhistory-java)
            -   [`PasskeyCredential.java`](#passkeycredential-java)
            -   [`Permission.java`](#permission-java)
            -   [`ProfileChangeRequest.java`](#profilechangerequest-java)
            -   [`Role.java`](#role-java)
            -   [`SkillRequirement.java`](#skillrequirement-java)
            -   [`StorageItem.java`](#storageitem-java)
            -   [`StorageLogEntry.java`](#storagelogentry-java)
            -   [`SystemStatsDTO.java`](#systemstatsdto-java)
            -   [`TodoCategory.java`](#todocategory-java)
            -   [`TodoTask.java`](#todotask-java)
            -   [`User.java`](#user-java)
            -   [`UserQualification.java`](#userqualification-java)
        -   **service/**
            -   [`AchievementService.java`](#achievementservice-java)
            -   [`AdminDashboardService.java`](#admindashboardservice-java)
            -   [`AdminLogService.java`](#adminlogservice-java)
            -   [`AuthorizationService.java`](#authorizationservice-java)
            -   [`ConfigurationService.java`](#configurationservice-java)
            -   [`EventService.java`](#eventservice-java)
            -   [`NotificationService.java`](#notificationservice-java)
            -   [`PasskeyService.java`](#passkeyservice-java)
            -   [`StorageService.java`](#storageservice-java)
            -   [`SystemInfoService.java`](#systeminfoservice-java)
            -   [`TodoService.java`](#todoservice-java)
            -   [`UserService.java`](#userservice-java)
        -   **servlet/**
            -   **admin/**
                -   **action/**
                    -   [`Action.java`](#action-java)
                    -   [`ApproveChangeAction.java`](#approvechangeaction-java)
                    -   [`CreateUserAction.java`](#createuseraction-java)
                    -   [`DeleteFeedbackAction.java`](#deletefeedbackaction-java)
                    -   [`DeleteUserAction.java`](#deleteuseraction-java)
                    -   [`DenyChangeAction.java`](#denychangeaction-java)
                    -   [`GetFeedbackDetailsAction.java`](#getfeedbackdetailsaction-java)
                    -   [`ResetPasswordAction.java`](#resetpasswordaction-java)
                    -   [`UnlockUserAction.java`](#unlockuseraction-java)
                    -   [`UpdateFeedbackOrderAction.java`](#updatefeedbackorderaction-java)
                    -   [`UpdateFeedbackStatusAction.java`](#updatefeedbackstatusaction-java)
                    -   [`UpdateUserAction.java`](#updateuseraction-java)
                -   **api/**
                    -   [`AdminTodoApiServlet.java`](#admintodoapiservlet-java)
                    -   [`CrewFinderApiServlet.java`](#crewfinderapiservlet-java)
                -   [`AdminAchievementServlet.java`](#adminachievementservlet-java)
                -   [`AdminAttendanceServlet.java`](#adminattendanceservlet-java)
                -   [`AdminChangeRequestServlet.java`](#adminchangerequestservlet-java)
                -   [`AdminCourseServlet.java`](#admincourseservlet-java)
                -   [`AdminDashboardServlet.java`](#admindashboardservlet-java)
                -   [`AdminDefectServlet.java`](#admindefectservlet-java)
                -   [`AdminEventServlet.java`](#admineventservlet-java)
                -   [`AdminFeedbackServlet.java`](#adminfeedbackservlet-java)
                -   [`AdminFileCategoryServlet.java`](#adminfilecategoryservlet-java)
                -   [`AdminFileManagementServlet.java`](#adminfilemanagementservlet-java)
                -   [`AdminFileServlet.java`](#adminfileservlet-java)
                -   [`AdminKitServlet.java`](#adminkitservlet-java)
                -   [`AdminLogServlet.java`](#adminlogservlet-java)
                -   [`AdminMeetingServlet.java`](#adminmeetingservlet-java)
                -   [`AdminReportServlet.java`](#adminreportservlet-java)
                -   [`AdminStorageServlet.java`](#adminstorageservlet-java)
                -   [`AdminSystemServlet.java`](#adminsystemservlet-java)
                -   [`AdminUserServlet.java`](#adminuserservlet-java)
                -   [`FrontControllerServlet.java`](#frontcontrollerservlet-java)
                -   [`MatrixServlet.java`](#matrixservlet-java)
            -   **api/**
                -   **passkey/**
                    -   [`AuthenticationFinishServlet.java`](#authenticationfinishservlet-java)
                    -   [`AuthenticationStartServlet.java`](#authenticationstartservlet-java)
                    -   [`RegistrationFinishServlet.java`](#registrationfinishservlet-java)
                    -   [`RegistrationStartServlet.java`](#registrationstartservlet-java)
                -   [`AdminDashboardApiServlet.java`](#admindashboardapiservlet-java)
                -   [`CalendarApiServlet.java`](#calendarapiservlet-java)
                -   [`EventChatApiServlet.java`](#eventchatapiservlet-java)
                -   [`EventCustomFieldsApiServlet.java`](#eventcustomfieldsapiservlet-java)
                -   [`MarkdownApiServlet.java`](#markdownapiservlet-java)
                -   [`StorageHistoryApiServlet.java`](#storagehistoryapiservlet-java)
                -   [`SystemStatsApiServlet.java`](#systemstatsapiservlet-java)
                -   [`UserPreferencesApiServlet.java`](#userpreferencesapiservlet-java)
            -   **http/**
                -   [`SessionManager.java`](#sessionmanager-java)
            -   [`CalendarServlet.java`](#calendarservlet-java)
            -   [`DownloadServlet.java`](#downloadservlet-java)
            -   [`EventActionServlet.java`](#eventactionservlet-java)
            -   [`EventDetailsServlet.java`](#eventdetailsservlet-java)
            -   [`EventServlet.java`](#eventservlet-java)
            -   [`FeedbackServlet.java`](#feedbackservlet-java)
            -   [`FileServlet.java`](#fileservlet-java)
            -   [`HomeServlet.java`](#homeservlet-java)
            -   [`IcalServlet.java`](#icalservlet-java)
            -   [`ImageServlet.java`](#imageservlet-java)
            -   [`LoginServlet.java`](#loginservlet-java)
            -   [`LogoutServlet.java`](#logoutservlet-java)
            -   [`MarkdownEditorServlet.java`](#markdowneditorservlet-java)
            -   [`MeetingActionServlet.java`](#meetingactionservlet-java)
            -   [`MeetingDetailsServlet.java`](#meetingdetailsservlet-java)
            -   [`MeetingServlet.java`](#meetingservlet-java)
            -   [`MyFeedbackServlet.java`](#myfeedbackservlet-java)
            -   [`NotificationServlet.java`](#notificationservlet-java)
            -   [`PackKitServlet.java`](#packkitservlet-java)
            -   [`PasswordServlet.java`](#passwordservlet-java)
            -   [`ProfileServlet.java`](#profileservlet-java)
            -   [`RootServlet.java`](#rootservlet-java)
            -   [`StorageItemActionServlet.java`](#storageitemactionservlet-java)
            -   [`StorageItemDetailsServlet.java`](#storageitemdetailsservlet-java)
            -   [`StorageServlet.java`](#storageservlet-java)
            -   [`StorageTransactionServlet.java`](#storagetransactionservlet-java)
            -   [`TaskActionServlet.java`](#taskactionservlet-java)
        -   **util/**
            -   [`CSRFUtil.java`](#csrfutil-java)
            -   [`DaoUtils.java`](#daoutils-java)
            -   [`MarkdownUtil.java`](#markdownutil-java)
            -   [`NavigationRegistry.java`](#navigationregistry-java)
            -   [`PasswordPolicyValidator.java`](#passwordpolicyvalidator-java)
        -   **websocket/**
            -   [`ChatSessionManager.java`](#chatsessionmanager-java)
            -   [`DocumentEditorSocket.java`](#documenteditorsocket-java)
            -   [`DocumentSessionManager.java`](#documentsessionmanager-java)
            -   [`EventChatSocket.java`](#eventchatsocket-java)
            -   [`GetHttpSessionConfigurator.java`](#gethttpsessionconfigurator-java)
            -   [`GuiceAwareServerEndpointConfigurator.java`](#guiceawareserverendpointconfigurator-java)
    -   **resources/**
        -   [`log4j2.xml`](#log4j2-xml)
    -   **webapp/**
        -   **css/**
            -   [`style.css`](#style-css)
        -   **js/**
            -   **admin/**
                -   [`admin_achievements.js`](#admin_achievements-js)
                -   [`admin_course_list.js`](#admin_course_list-js)
                -   [`admin_dashboard.js`](#admin_dashboard-js)
                -   [`admin_defect_list.js`](#admin_defect_list-js)
                -   [`admin_editor.js`](#admin_editor-js)
                -   [`admin_events_list.js`](#admin_events_list-js)
                -   [`admin_feedback.js`](#admin_feedback-js)
                -   [`admin_files.js`](#admin_files-js)
                -   [`admin_kits.js`](#admin_kits-js)
                -   [`admin_matrix.js`](#admin_matrix-js)
                -   [`admin_meeting_list.js`](#admin_meeting_list-js)
                -   [`admin_reports.js`](#admin_reports-js)
                -   [`admin_requests.js`](#admin_requests-js)
                -   [`admin_roles.js`](#admin_roles-js)
                -   [`admin_storage_list.js`](#admin_storage_list-js)
                -   [`admin_system.js`](#admin_system-js)
                -   [`admin_users.js`](#admin_users-js)
            -   **auth/**
                -   [`login.js`](#login-js)
                -   [`logout.js`](#logout-js)
                -   [`passkey_auth.js`](#passkey_auth-js)
            -   **error/**
                -   [`error400.js`](#error400-js)
                -   [`error401.js`](#error401-js)
                -   [`error403.js`](#error403-js)
                -   [`error404.js`](#error404-js)
                -   [`error500.js`](#error500-js)
                -   [`error503.js`](#error503-js)
            -   **public/**
                -   [`calendar.js`](#calendar-js)
                -   [`dateien.js`](#dateien-js)
                -   [`eventDetails.js`](#eventdetails-js)
                -   [`events.js`](#events-js)
                -   [`lager.js`](#lager-js)
                -   [`profile.js`](#profile-js)
                -   [`qr_action.js`](#qr_action-js)
                -   [`storage_item_details.js`](#storage_item_details-js)
            -   [`main.js`](#main-js)
        -   **vendor/**
            -   **diff-match-patch/**
                -   [`diff_match_patch.js`](#diff_match_patch-js)
            -   **fullcalendar/**
                -   [`FullCalendar.js`](#fullcalendar-js)
                -   [`main.global.min.js`](#main-global-min-js)
                -   [`main.min.css`](#main-min-css)
                -   **locales/**
                    -   [`de.js`](#de-js)
            -   **webodf/**
                -   **lib/**
                    -   **core/**
                        -   [`Async.js`](#async-js)
                        -   [`Base64.js`](#base64-js)
                        -   [`CSSUnits.js`](#cssunits-js)
                        -   [`Cursor.js`](#cursor-js)
                        -   [`Destroyable.js`](#destroyable-js)
                        -   [`DomUtils.js`](#domutils-js)
                        -   [`enums.js`](#enums-js)
                        -   [`EventNotifier.js`](#eventnotifier-js)
                        -   [`EventSource.js`](#eventsource-js)
                        -   [`EventSubscriptions.js`](#eventsubscriptions-js)
                        -   [`JSLint.js`](#jslint-js)
                        -   [`LazyProperty.js`](#lazyproperty-js)
                        -   [`LoopWatchDog.js`](#loopwatchdog-js)
                        -   [`NodeFilterChain.js`](#nodefilterchain-js)
                        -   [`PositionFilter.js`](#positionfilter-js)
                        -   [`PositionFilterChain.js`](#positionfilterchain-js)
                        -   [`PositionIterator.js`](#positioniterator-js)
                        -   [`ScheduledTask.js`](#scheduledtask-js)
                        -   [`StepIterator.js`](#stepiterator-js)
                        -   [`Task.js`](#task-js)
                        -   [`typedefs.js`](#typedefs-js)
                        -   [`Utils.js`](#utils-js)
                        -   [`Zip.js`](#zip-js)
                    -   **externs/**
                        -   [`JSZip.js`](#jszip-js)
                    -   **gui/**
                        -   [`AnnotationController.js`](#annotationcontroller-js)
                        -   [`AnnotationViewManager.js`](#annotationviewmanager-js)
                        -   [`Avatar.js`](#avatar-js)
                        -   [`BlacklistNamespaceNodeFilter.js`](#blacklistnamespacenodefilter-js)
                        -   [`Caret.js`](#caret-js)
                        -   [`CaretManager.js`](#caretmanager-js)
                        -   [`Clipboard.js`](#clipboard-js)
                        -   [`ClosestXOffsetScanner.js`](#closestxoffsetscanner-js)
                        -   [`CommonConstraints.js`](#commonconstraints-js)
                        -   [`DirectFormattingController.js`](#directformattingcontroller-js)
                        -   [`EditInfoHandle.js`](#editinfohandle-js)
                        -   [`EditInfoMarker.js`](#editinfomarker-js)
                        -   [`EventManager.js`](#eventmanager-js)
                        -   [`HyperlinkClickHandler.js`](#hyperlinkclickhandler-js)
                        -   [`HyperlinkController.js`](#hyperlinkcontroller-js)
                        -   [`HyperlinkTooltipView.js`](#hyperlinktooltipview-js)
                        -   [`ImageController.js`](#imagecontroller-js)
                        -   [`ImageSelector.js`](#imageselector-js)
                        -   [`InputMethodEditor.js`](#inputmethodeditor-js)
                        -   [`IOSSafariSupport.js`](#iossafarisupport-js)
                        -   [`KeyboardHandler.js`](#keyboardhandler-js)
                        -   [`LineBoundaryScanner.js`](#lineboundaryscanner-js)
                        -   [`MetadataController.js`](#metadatacontroller-js)
                        -   [`MimeDataExporter.js`](#mimedataexporter-js)
                        -   [`OdfFieldView.js`](#odffieldview-js)
                        -   [`OdfTextBodyNodeFilter.js`](#odftextbodynodefilter-js)
                        -   [`ParagraphBoundaryScanner.js`](#paragraphboundaryscanner-js)
                        -   [`PasteController.js`](#pastecontroller-js)
                        -   [`SelectionController.js`](#selectioncontroller-js)
                        -   [`SelectionView.js`](#selectionview-js)
                        -   [`SelectionViewManager.js`](#selectionviewmanager-js)
                        -   [`SessionConstraints.js`](#sessionconstraints-js)
                        -   [`SessionContext.js`](#sessioncontext-js)
                        -   [`SessionController.js`](#sessioncontroller-js)
                        -   [`SessionView.js`](#sessionview-js)
                        -   [`ShadowCursor.js`](#shadowcursor-js)
                        -   [`SingleScrollViewport.js`](#singlescrollviewport-js)
                        -   [`StyleSummary.js`](#stylesummary-js)
                        -   [`SvgSelectionView.js`](#svgselectionview-js)
                        -   [`TextController.js`](#textcontroller-js)
                        -   [`TrivialUndoManager.js`](#trivialundomanager-js)
                        -   [`UndoManager.js`](#undomanager-js)
                        -   [`UndoStateRules.js`](#undostaterules-js)
                        -   [`Viewport.js`](#viewport-js)
                        -   [`VisualStepScanner.js`](#visualstepscanner-js)
                        -   [`ZoomHelper.js`](#zoomhelper-js)
                    -   **odf/**
                        -   [`CollapsingRules.js`](#collapsingrules-js)
                        -   [`CommandLineTools.js`](#commandlinetools-js)
                        -   [`FontLoader.js`](#fontloader-js)
                        -   [`Formatting.js`](#formatting-js)
                        -   [`GraphicProperties.js`](#graphicproperties-js)
                        -   [`ListStylesToCss.js`](#liststylestocss-js)
                        -   [`Namespaces.js`](#namespaces-js)
                        -   [`ObjectNameGenerator.js`](#objectnamegenerator-js)
                        -   [`OdfCanvas.js`](#odfcanvas-js)
                        -   [`OdfContainer.js`](#odfcontainer-js)
                        -   [`OdfNodeFilter.js`](#odfnodefilter-js)
                        -   [`OdfSchema.js`](#odfschema-js)
                        -   [`OdfUtils.js`](#odfutils-js)
                        -   [`PageLayoutProperties.js`](#pagelayoutproperties-js)
                        -   [`ParagraphProperties.js`](#paragraphproperties-js)
                        -   [`StepUtils.js`](#steputils-js)
                        -   [`Style2CSS.js`](#style2css-js)
                        -   [`StyleCache.js`](#stylecache-js)
                        -   [`StyleInfo.js`](#styleinfo-js)
                        -   [`StyleParseUtils.js`](#styleparseutils-js)
                        -   [`StyleTree.js`](#styletree-js)
                        -   [`TextProperties.js`](#textproperties-js)
                        -   [`TextSerializer.js`](#textserializer-js)
                        -   [`TextStyleApplicator.js`](#textstyleapplicator-js)
                        -   [`WordBoundaryFilter.js`](#wordboundaryfilter-js)
                    -   **ops/**
                        -   [`Canvas.js`](#canvas-js)
                        -   [`Document.js`](#document-js)
                        -   [`EditInfo.js`](#editinfo-js)
                        -   [`Member.js`](#member-js)
                        -   [`OdtCursor.js`](#odtcursor-js)
                        -   [`OdtDocument.js`](#odtdocument-js)
                        -   [`OdtStepsTranslator.js`](#odtstepstranslator-js)
                        -   [`OpAddAnnotation.js`](#opaddannotation-js)
                        -   [`OpAddCursor.js`](#opaddcursor-js)
                        -   [`OpAddMember.js`](#opaddmember-js)
                        -   [`OpAddStyle.js`](#opaddstyle-js)
                        -   [`OpApplyDirectStyling.js`](#opapplydirectstyling-js)
                        -   [`OpApplyHyperlink.js`](#opapplyhyperlink-js)
                        -   [`Operation.js`](#operation-js)
                        -   [`OperationFactory.js`](#operationfactory-js)
                        -   [`OperationRouter.js`](#operationrouter-js)
                        -   [`OperationTransformer.js`](#operationtransformer-js)
                        -   [`OperationTransformMatrix.js`](#operationtransformmatrix-js)
                        -   [`OpInsertImage.js`](#opinsertimage-js)
                        -   [`OpInsertTable.js`](#opinserttable-js)
                        -   [`OpInsertText.js`](#opinserttext-js)
                        -   [`OpMergeParagraph.js`](#opmergeparagraph-js)
                        -   [`OpMoveCursor.js`](#opmovecursor-js)
                        -   [`OpRemoveAnnotation.js`](#opremoveannotation-js)
                        -   [`OpRemoveBlob.js`](#opremoveblob-js)
                        -   [`OpRemoveCursor.js`](#opremovecursor-js)
                        -   [`OpRemoveHyperlink.js`](#opremovehyperlink-js)
                        -   [`OpRemoveMember.js`](#opremovemember-js)
                        -   [`OpRemoveStyle.js`](#opremoverstyle-js)
                        -   [`OpRemoveText.js`](#opremovetext-js)
                        -   [`OpSetBlob.js`](#opsetblob-js)
                        -   [`OpSetParagraphStyle.js`](#opsetparagraphstyle-js)
                        -   [`OpSplitParagraph.js`](#opsplitparagraph-js)
                        -   [`OpUpdateMember.js`](#opupdatemember-js)
                        -   [`OpUpdateMetadata.js`](#opupdatemetadata-js)
                        -   [`OpUpdateParagraphStyle.js`](#opupdateparagraphstyle-js)
                        -   [`Session.js`](#session-js)
                        -   [`StepsCache.js`](#stepscache-js)
                        -   [`TextPositionFilter.js`](#textpositionfilter-js)
                        -   [`TrivialOperationRouter.js`](#trivialoperationrouter-js)
                    -   **xmldom/**
                        -   [`LSSerializer.js`](#lsserializer-js)
                        -   [`LSSerializerFilter.js`](#lsserializerfilter-js)
                        -   [`RelaxNG.js`](#relaxng-js)
                        -   [`RelaxNG2.js`](#relaxng2-js)
                        -   [`RelaxNGParser.js`](#relaxngparser-js)
                        -   [`XPath.js`](#xpath-js)
                -   [`HeaderCompiled.js`](#headercompiled-js)
                -   [`runtime.js`](#runtime-js)
                -   [`webodf.js`](#webodf-js)
                -   [`wodo.js`](#wodo-js)
        -   **WEB-INF/**
            -   **jspf/**
                -   [`common_modals.jspf`](#common_modals-jspf)
                -   [`error_footer.jspf`](#error_footer-jspf)
                -   [`error_header.jspf`](#error_header-jspf)
                -   [`event_modals.jspf`](#event_modals-jspf)
                -   [`main_footer.jspf`](#main_footer-jspf)
                -   [`main_header.jspf`](#main_header-jspf)
                -   [`message_banner.jspf`](#message_banner-jspf)
                -   [`storage_modals.jspf`](#storage_modals-jspf)
                -   [`table_scripts.jspf`](#table_scripts-jspf)
                -   [`task_modal.jspf`](#task_modal-jspf)
                -   [`user_modals.jspf`](#user_modals-jspf)
            -   [`web.xml`](#web-xml)
        -   **views/**
            -   **admin/**
                -   [`admin_achievements.jsp`](#admin_achievements-jsp)
                -   [`admin_course_list.jsp`](#admin_course_list-jsp)
                -   [`admin_dashboard.jsp`](#admin_dashboard-jsp)
                -   [`admin_defect_list.jsp`](#admin_defect_list-jsp)
                -   [`admin_editor.jsp`](#admin_editor-jsp)
                -   [`admin_events_list.jsp`](#admin_events_list-jsp)
                -   [`admin_feedback.jsp`](#admin_feedback-jsp)
                -   [`admin_files.jsp`](#admin_files-jsp)
                -   [`admin_kits.jsp`](#admin_kits-jsp)
                -   [`admin_log.jsp`](#admin_log-jsp)
                -   [`admin_matrix.jsp`](#admin_matrix-jsp)
                -   [`admin_meeting_list.jsp`](#admin_meeting_list-jsp)
                -   [`admin_reports.jsp`](#admin_reports-jsp)
                -   [`admin_requests.jsp`](#admin_requests-jsp)
                -   [`admin_storage_list.jsp`](#admin_storage_list-jsp)
                -   [`admin_system.jsp`](#admin_system-jsp)
                -   [`admin_user_details.jsp`](#admin_user_details-jsp)
                -   [`admin_users.jsp`](#admin_users-jsp)
                -   [`report_display.jsp`](#report_display-jsp)
            -   **auth/**
                -   [`login.jsp`](#login-jsp)
                -   [`logout.jsp`](#logout-jsp)
            -   **error/**
                -   [`error400.jsp`](#error400-jsp)
                -   [`error401.jsp`](#error401-jsp)
                -   [`error403.jsp`](#error403-jsp)
                -   [`error404.jsp`](#error404-jsp)
                -   [`error500.jsp`](#error500-jsp)
                -   [`error503.jsp`](#error503-jsp)
                -   [`error_generic.jsp`](#error_generic-jsp)
            -   **public/**
                -   [`calendar.jsp`](#calendar-jsp)
                -   [`dateien.jsp`](#dateien-jsp)
                -   [`eventDetails.jsp`](#eventdetails-jsp)
                -   [`events.jsp`](#events-jsp)
                -   [`feedback.jsp`](#feedback-jsp)
                -   [`feedback_form.jsp`](#feedback_form-jsp)
                -   [`home.jsp`](#home-jsp)
                -   [`lager.jsp`](#lager-jsp)
                -   [`lehrgaenge.jsp`](#lehrgaenge-jsp)
                -   [`meetingDetails.jsp`](#meetingdetails-jsp)
                -   [`my_feedback.jsp`](#my_feedback-jsp)
                -   [`pack_kit.jsp`](#pack_kit-jsp)
                -   [`passwort.jsp`](#passwort-jsp)
                -   [`profile.jsp`](#profile-jsp)
                -   [`qr_action.jsp`](#qr_action-jsp)
                -   [`storage_item_details.jsp`](#storage_item_details-jsp)
    -   [`pom.xml`](#pom-xml)

</details>

***

## Part 2: Detailed File Documentation

### Project Configuration Files

---
`C:\Users\techn\eclipse\workspace\TechnikTeam\pom.xml`
<a name="pom-xml"></a>

1.  **File Overview & Purpose**

    This is the Project Object Model (POM) file for Maven, the build and dependency management tool for this project. It defines the project's coordinates, dependencies, build settings, and plugins. It is the central configuration file for building the `TechnikTeam.war` artifact.

2.  **Architectural Role**

    This is a core project configuration file, not belonging to a specific architectural tier. It defines the project's structure and the libraries that will be available at runtime for all tiers.

3.  **Key Dependencies & Libraries**

    *   **Guice**: Used for dependency injection throughout the application, decoupling components and managing object lifecycles.
    *   **Flyway**: Manages database schema migrations, ensuring the database is always in a consistent and up-to-date state.
    *   **MySQL Connector/J & HikariCP**: The JDBC driver for MySQL and a high-performance connection pool for efficient database access.
    *   **Jakarta EE APIs**: Provides the core Servlet, JSP, and WebSocket APIs, which are the foundation of the web application.
    *   **Log4j 2**: A robust logging framework used for application-wide logging and auditing.
    *   **Spring Security Crypto**: Used specifically for its `BCryptPasswordEncoder` to securely hash and verify user passwords.
    *   **SortableJS (WebJar)**: A client-side library for enabling drag-and-drop functionality, used on the admin feedback board.

4.  **In-Depth Breakdown**

    *   **`<properties>`**: Defines common version numbers for dependencies (`guice.version`, `flyway.version`, etc.) and sets the project encoding and Java compiler level to `21`.
    *   **`<dependencies>`**: Contains the list of all external libraries the project depends on. Key groups include:
        *   **Dependency Injection**: `guice` and `guice-servlet` are the core of the DI framework.
        *   **Database**: `flyway-core`, `flyway-mysql`, `mysql-connector-j`, and `HikariCP` provide everything needed for database migration and connection pooling.
        *   **Web & Servlet APIs**: `jakarta.servlet-api`, `jakarta.websocket-api`, and `jakarta.servlet.jsp.jstl` are essential for building the web layer. Note that the Servlet and WebSocket APIs are `provided`, meaning the application server (like Tomcat) is expected to supply them.
        *   **Utilities**: Various libraries for tasks like JSON serialization (`gson`), password hashing (`spring-security-crypto`), iCalendar generation (`ical4j`), caching (`caffeine`), and WebAuthn/Passkey support (`webauthn-server-core`).
    *   **`<build>`**: Configures the Maven build process.
        *   **`<finalName>`**: Sets the name of the output WAR file to `TechnikTeam.war`.
        *   **`<plugins>`**:
            *   `maven-compiler-plugin`: Configures the Java compiler version.
            *   `maven-war-plugin`: Configures how the WAR file is assembled. `failOnMissingWebXml` is set to `false` because the application uses Jakarta EE 5.0+ annotations and a `web.xml` is not strictly required, although one is present.

---
`C:\Users\techn\eclipse\workspace\TechnikTeam\.settings\org.eclipse.wst.common.project.facet.core.xml`
<a name="org-eclipse-wst-common-project-facet-core-xml"></a>

1.  **File Overview & Purpose**

    This file is part of the Eclipse Web Tools Platform (WTP) configuration for the project. It defines the "facets" applied to the project, which tells Eclipse about the project's nature and capabilities (e.g., that it's a Java project, a dynamic web project, etc.).

2.  **Architectural Role**

    Development Environment Configuration. This file enables specific WTP features within the IDE, like server deployment, JSP validation, and JavaScript support, but is not deployed with the final WAR file.

3.  **Key Dependencies & Libraries**

    *   None.

4.  **In-Depth Breakdown**

    *   **`<fixed facet="wst.jsdt.web"/>`**: Marks the JavaScript Development Tools facet as fixed, meaning it cannot be removed.
    *   **`<installed facet="wst.jsdt.web" version="1.0"/>`**: Installs the JavaScript facet.
    *   **`<installed facet="jst.web" version="5.0"/>`**: Installs the "Dynamic Web Module" facet, corresponding to the Jakarta Servlet 5.0 specification.
    *   **`<installed facet="java" version="21"/>`**: Installs the Java facet, specifying that the project uses Java 21.

---
`C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\web.xml`
<a name="web-xml"></a>

1.  **File Overview & Purpose**

    This is the Web Application Deployment Descriptor for the TechnikTeam project. It's a standard Jakarta EE configuration file that provides the servlet container (e.g., Tomcat) with essential information about the application's structure, servlets, filters, listeners, and session configuration.

2.  **Architectural Role**

    Web/Controller Tier Configuration. This file is the primary entry point for configuring how the servlet container interacts with the application's web components.

3.  **Key Dependencies & Libraries**

    *   **Guice**: The `com.google.inject.servlet.GuiceFilter` is central to the application's architecture.

4.  **In-Depth Breakdown**

    *   **`<listener>`**:
        *   `ApplicationInitializerListener`: A custom listener that runs on startup to initialize services like Flyway for database migration.
        *   `GuiceConfig`: A `GuiceServletContextListener` that creates the Guice Injector, making dependency injection available to the application.
        *   `AppContextListener`: A custom listener for handling application shutdown, specifically for deregistering JDBC drivers to prevent memory leaks.
        *   `SessionListener`: A listener that tracks session creation and destruction to manage active sessions via the `SessionManager`.
    *   **`<filter>` and `<filter-mapping>`**:
        *   `guiceFilter`: This is the most important filter. It intercepts *all* incoming requests (`/*`) and routes them through Guice's servlet pipeline. This allows servlets managed by Guice to have their dependencies injected automatically. `async-supported` is enabled for asynchronous operations like Server-Sent Events.
    *   **`<session-config>`**:
        *   `session-timeout`: Sets the session to expire after 30 minutes of inactivity.
        *   `cookie-config`: Configures the session cookie to be `http-only` (inaccessible to client-side scripts) for security. `secure` is set to `false`, suitable for local development over HTTP.
    *   **`<welcome-file-list>`**: Defines `/` as the welcome file, meaning requests to the root context path will be handled by the servlet mapped to `/`.
    *   **`<jsp-config>`**: Ensures that Expression Language (EL) is enabled for all JSP and JSPF files.
    *   **`<error-page>`**: Maps specific HTTP error codes (400, 401, 403, 404, 500, 503) and general `java.lang.Throwable` exceptions to custom error pages located in `/views/error/`. This provides a user-friendly error handling experience.

### Java Source Files

---
C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\config\DateFormatter.java
<a name="dateformatter-java"></a>

1.  **File Overview & Purpose**

    This is a utility class providing static methods for consistent date and time formatting throughout the application. It ensures that all `java.time.LocalDateTime` objects are displayed in a standardized, German-locale format (e.g., "10.06.2025, 17:45 Uhr").

2.  **Architectural Role**

    This is a cross-cutting concern utility, used primarily in the **Model** and **View** tiers. Models use it to provide pre-formatted strings for JSPs, and JSPs can use it via EL functions if needed, ensuring a consistent user experience.

3.  **Key Dependencies & Libraries**

    *   `java.time.LocalDateTime`: The modern Java date-time API object that this class formats.
    *   `java.time.format.DateTimeFormatter`: The core Java class used for defining and applying date-time format patterns.

4.  **In-Depth Breakdown**

    *   **`formatDateTime(LocalDateTime ldt)`**
        *   **Method Signature:** `public static String formatDateTime(LocalDateTime ldt)`
        *   **Purpose:** Formats a `LocalDateTime` into a full date and time string.
        *   **Parameters:**
            *   `ldt` (LocalDateTime): The date-time object to format.
        *   **Returns:** A formatted string like "dd.MM.yyyy, HH:mm" (e.g., "10.06.2025, 17:45"), or an empty string if the input is null.
        *   **Side Effects:** None.

    *   **`formatDate(LocalDateTime ldt)`**
        *   **Method Signature:** `public static String formatDate(LocalDateTime ldt)`
        *   **Purpose:** Formats a `LocalDateTime` into a date-only string.
        *   **Parameters:**
            *   `ldt` (LocalDateTime): The date-time object to format.
        *   **Returns:** A formatted string like "dd.MM.yyyy" (e.g., "10.06.2025"), or an empty string if the input is null.
        *   **Side Effects:** None.

    *   **`formatDateTimeRange(LocalDateTime start, LocalDateTime end)`**
        *   **Method Signature:** `public static String formatDateTimeRange(LocalDateTime start, LocalDateTime end)`
        *   **Purpose:** Intelligently formats a date range. It provides a more compact format if the start and end times are on the same day.
        *   **Parameters:**
            *   `start` (LocalDateTime): The start of the range.
            *   `end` (LocalDateTime): The end of the range (can be null).
        *   **Returns:** A user-friendly string representing the range.
            *   If `end` is null: "10.06.2025, 17:45 Uhr"
            *   If same day: "10.06.2025, 17:45 - 19:00 Uhr"
            *   If different days: "10.06.2025, 17:45 Uhr - 11.06.2025, 18:00 Uhr"
        *   **Side Effects:** None.

---
C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\config\GuiceConfig.java
<a name="guiceconfig-java"></a>

1.  **File Overview & Purpose**

    This class serves as the central configuration entry point for the Google Guice dependency injection framework. As a `GuiceServletContextListener`, it is automatically invoked by the servlet container on application startup, creating the main Guice `Injector` that will manage the lifecycle of all services, DAOs, and servlets.

2.  **Architectural Role**

    This is a core **Configuration** file that bootstraps the entire application's architecture. It connects the servlet container's lifecycle to the Guice dependency injection container.

3.  **Key Dependencies & Libraries**

    *   **Guice (`com.google.inject.Guice`)**: The main class from the Guice library used to create the injector.
    *   **Guice Servlet (`com.google.inject.servlet.GuiceServletContextListener`)**: The base class that integrates Guice with the Jakarta Servlet lifecycle.
    *   `ServiceModule.java`: The custom module where all the application's bindings (dependencies) are defined.

4.  **In-Depth Breakdown**

    *   **`getInjector()`**
        *   **Method Signature:** `protected Injector getInjector()`
        *   **Purpose:** This is the core method of the `GuiceServletContextListener`. It is called once by the container when the application starts. Its responsibility is to create and return the application's central `Injector`.
        *   **Parameters:** None.
        *   **Returns:** The configured `Injector` instance.
        *   **Side Effects:** It instantiates the `ServiceModule`, which in turn defines all the dependency injection bindings for the entire application. The returned injector is then stored in the `ServletContext` by the `GuiceFilter` for later use.

---
`C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\config\LocalDateAdapter.java`
<a name="localdateadapter-java"></a>

1.  **File Overview & Purpose**

    This is a custom serializer for the Gson library, specifically designed to handle the `java.time.LocalDate` class. Its purpose is to ensure `LocalDate` objects are consistently converted into a standard `YYYY-MM-DD` string format when serializing Java objects to JSON.

2.  **Architectural Role**

    This is a **Configuration** / **Utility** class that operates at the boundary between the **Service/Controller Tiers** and the **View/Client-Side Tier**. It is used by any servlet that needs to serialize data containing `LocalDate` objects into JSON for an API response.

3.  **Key Dependencies & Libraries**

    *   **Gson (`com.google.gson.JsonSerializer`)**: The core interface from the Gson library that this class implements to provide custom serialization logic.
    *   **java.time.LocalDate**: The modern Java Date API class for representing a date without time-of-day.

4.  **In-Depth Breakdown**

    *   **`serialize(LocalDate date, Type typeOfSrc, JsonSerializationContext context)`**
        *   **Method Signature:** `public JsonElement serialize(LocalDate date, Type typeOfSrc, JsonSerializationContext context)`
        *   **Purpose:** This method is called by Gson whenever it encounters a `LocalDate` object during serialization. It formats the date into an ISO standard string.
        *   **Parameters:**
            *   `date` (LocalDate): The `LocalDate` object to be serialized.
            *   `typeOfSrc` (Type): The specific generic type of the source object.
            *   `context` (JsonSerializationContext): The context for serialization that Gson is using.
        *   **Returns:** A `JsonPrimitive` containing the date as a string in `YYYY-MM-DD` format (e.g., "2025-07-25"), or `null` if the input date is null.
        *   **Side Effects:** None.

---
`C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\config\LocalDateTimeAdapter.java`
<a name="localdatetimeadapter-java"></a>

1.  **File Overview & Purpose**

    This is a custom `TypeAdapter` for the Gson library, designed to handle both serialization and deserialization of `java.time.LocalDateTime` objects. It ensures these objects are consistently formatted as ISO 8601 strings (e.g., "2025-07-25T10:30:00") in JSON, which is a robust and standard way to exchange date-time information.

2.  **Architectural Role**

    This is a **Configuration** / **Utility** class. It is crucial for the **Web/Controller Tier**'s API servlets that consume or produce JSON containing `LocalDateTime` objects. Unlike a simple serializer, a `TypeAdapter` handles both directions of data conversion.

3.  **Key Dependencies & Libraries**

    *   **Gson (`com.google.gson.TypeAdapter`)**: The base class from the Gson library for creating custom serialization and deserialization logic.
    *   **java.time.LocalDateTime**: The modern Java date-time API class this adapter handles.

4.  **In-Depth Breakdown**

    *   **`write(JsonWriter out, LocalDateTime value)`**
        *   **Method Signature:** `public void write(JsonWriter out, LocalDateTime value) throws IOException`
        *   **Purpose:** Serializes a `LocalDateTime` object to its JSON string representation.
        *   **Parameters:**
            *   `out` (JsonWriter): The Gson stream writer.
            *   `value` (LocalDateTime): The object to write.
        *   **Returns:** void.
        *   **Side Effects:** Writes the ISO-formatted date-time string or `null` to the output JSON stream.

    *   **`read(JsonReader in)`**
        *   **Method Signature:** `public LocalDateTime read(JsonReader in) throws IOException`
        *   **Purpose:** Deserializes an ISO-formatted date-time string from JSON into a `LocalDateTime` object.
        *   **Parameters:**
            *   `in` (JsonReader): The Gson stream reader.
        *   **Returns:** A `LocalDateTime` object, or `null` if the JSON value was null.
        *   **Side Effects:** Reads from the input JSON stream.

---
`C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\config\Permissions.java`
<a name="permissions-java"></a>

1.  **File Overview & Purpose**

    This final class acts as a central, static repository for all permission key constants used in the application. Its primary purpose is to eliminate "magic strings" when checking for user permissions, thereby improving code readability, maintainability, and preventing hard-to-find bugs from typos.

2.  **Architectural Role**

    This is a cross-cutting **Configuration** file. It is used by the **Service Tier** (e.g., `AuthorizationService`), the **Web/Controller Tier** (e.g., `AdminFilter`, servlets), and the **View Tier** (JSPs) to perform consistent permission checks.

3.  **Key Dependencies & Libraries**

    *   None. This class is self-contained.

4.  **In-Depth Breakdown**

    The class contains a series of `public static final String` constants. Each constant represents a specific, granular permission within the system. The constants are grouped by functional area (e.g., User Management, Event Management) for clarity.

    *   **`ACCESS_ADMIN_PANEL`**: The most powerful permission. It grants unrestricted access to all administrative functions, acting as a "superuser" or "root" key.
    *   **`USER_*` constants**: Permissions related to creating, reading, updating, deleting, and resetting passwords for user accounts.
    *   **`EVENT_*` constants**: Permissions for managing events, including creating, editing, deleting, assigning personnel, and managing tasks within an event.
    *   **`ACHIEVEMENT_VIEW`**: A special key used specifically by the `NavigationRegistry` to determine if the "Abzeichen" link should be visible in the admin sidebar. It's a meta-permission based on having any other achievement-related CRUD permission.
    *   **`ADMIN_DASHBOARD_ACCESS`**: Another special key for the `NavigationRegistry` that grants visibility to the "Admin Dashboard" link if the user has *any* administrative permission.

---
`C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\config\ServiceModule.java`
<a name="servicemodule-java"></a>

1.  **File Overview & Purpose**

    This is the core configuration module for the Google Guice dependency injection framework. It defines all the application's bindings, instructing Guice how to create and wire together objects. It binds service interfaces to their implementations, registers DAOs as singletons, and maps URL patterns to their corresponding servlets.

2.  **Architectural Role**

    This is a central **Configuration** file that orchestrates the entire application's object graph. It defines the relationships between the **Web/Controller**, **Service**, and **DAO** tiers.

3.  **Key Dependencies & Libraries**

    *   **Guice Servlet (`com.google.inject.servlet.ServletModule`)**: The base class for modules that configure servlets and filters.

4.  **In-Depth Breakdown**

    *   **`configureServlets()`**: This method contains all the binding logic.
        *   **Service, DAO, and Action Bindings**: The first section uses `bind(ClassName.class).in(Scopes.SINGLETON);` to register all service, DAO, and action classes as singletons. This ensures that only one instance of each of these classes exists throughout the application's lifecycle, which is crucial for managing shared resources like caches and database connections.
        *   **Servlet Bindings**: The second section explicitly binds every servlet class in the application as a singleton. This is a prerequisite before they can be mapped to a URL.
        *   **Servlet Mappings**: The final, large section uses `serve("url-pattern").with(ServletClass.class);` to map URL patterns to the servlets that should handle them. This is the heart of the application's routing.
            *   It maps public-facing URLs like `/home` and `/lager`.
            *   It maps all administrative URLs under `/admin/*`.
            *   It maps all API endpoints under `/api/*`.
            *   The `FrontControllerServlet` is mapped to `/admin/action/*` to handle various administrative POST actions using a Command pattern.

---
`C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\dao\AchievementDAO.java`
<a name="achievementdao-java"></a>

1.  **File Overview & Purpose**

    This Data Access Object (DAO) is responsible for all database interactions related to achievements. It handles CRUD (Create, Read, Update, Delete) operations on the `achievements` table and manages the relationship between users and achievements in the `user_achievements` junction table.

2.  **Architectural Role**

    This class belongs to the **DAO (Data Access) Tier**. It directly interacts with the database to persist and retrieve achievement data. It is exclusively called by the `AchievementService` and administrative servlets like `AdminAchievementServlet`.

3.  **Key Dependencies & Libraries**

    *   `@Inject`: Used to inject the `DatabaseManager` for obtaining database connections.
    *   `DatabaseManager`: Provides the connection pool for all database operations.
    *   `Achievement` (Model): The data model object that this DAO creates and populates.

4.  **In-Depth Breakdown**

    *   **`getAllAchievements()`**: Retrieves a list of all defined achievement templates from the `achievements` table.
    *   **`getAchievementById(int id)`**: Fetches a single achievement template by its primary key.
    *   **`createAchievement(Achievement achievement)`**: Inserts a new achievement template into the `achievements` table.
    *   **`updateAchievement(Achievement achievement)`**: Updates an existing achievement template's name, description, or icon. The `achievement_key` is immutable.
    *   **`deleteAchievement(int id)`**: Deletes an achievement template from the `achievements` table.
    *   **`getAchievementsForUser(int userId)`**: Retrieves all achievements that a specific user has earned, joining `achievements` and `user_achievements` tables. It also populates the `earnedAt` timestamp.
    *   **`grantAchievementToUser(int userId, String achievementKey)`**: Grants an achievement to a user by inserting a record into the `user_achievements` table. It first checks if the user already has the achievement to prevent duplicates.
    *   **`hasAchievement(int userId, String achievementKey)`**: Checks if a user has already earned a specific achievement.
    *   **`mapResultSetToAchievement(ResultSet rs)`**: A private helper method to map a row from a `ResultSet` to an `Achievement` model object, reducing code duplication.

---
`C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\java\de\technikteam\dao\AdminLogDAO.java`
<a name="adminlogdao-java"></a>

1.  **File Overview & Purpose**

    This DAO manages all interactions with the `admin_logs` table. Its sole purpose is to create and retrieve audit log entries, providing a history of administrative actions performed within the application.

2.  **Architectural Role**

    This class is part of the **DAO (Data Access) Tier**. It provides a structured way for the `AdminLogService` to persist audit trails to the database.

3.  **Key Dependencies & Libraries**

    *   `@Inject`: Injects the `DatabaseManager`.
    *   `DatabaseManager`: Provides database connections.
    *   `AdminLog` (Model): The data model representing a single log entry.

4.  **In-Depth Breakdown**

    *   **`createLog(AdminLog log)`**
        *   **Method Signature:** `public void createLog(AdminLog log)`
        *   **Purpose:** Inserts a new log entry into the `admin_logs` table.
        *   **Parameters:**
            *   `log` (AdminLog): The log entry object containing the admin's username, action type, and details.
        *   **Returns:** void.
        *   **Side Effects:** Writes a new record to the database. It includes robust error logging to ensure that a failure to log does not crash the primary operation.

    *   **`getAllLogs()`**
        *   **Method Signature:** `public List<AdminLog> getAllLogs()`
        *   **Purpose:** Retrieves all log entries from the database, ordered from newest to oldest.
        *   **Parameters:** None.
        *   **Returns:** A `List` of `AdminLog` objects.
        *   **Side Effects:** Performs a database read.

    *   **`getRecentLogs(int limit)`**
        *   **Method Signature:** `public List<AdminLog> getRecentLogs(int limit)`
        *   **Purpose:** Retrieves the most recent log entries up to a specified limit. Used for dashboard widgets.
        *   **Parameters:**
            *   `limit` (int): The maximum number of log entries to retrieve.
        *   **Returns:** A `List` of `AdminLog` objects.
        *   **Side Effects:** Performs a database read with a `LIMIT` clause.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/storage_item_details.jsp`
<a name="storage_item_details-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the detailed view for a single inventory item. It displays all core data about the item, its image, and presents its transaction and maintenance history in a tabbed interface.

2.  **Architectural Role**

    This is a core view in the **View Tier**. It receives a `StorageItem` object, a `List<StorageLogEntry>`, and a `List<MaintenanceLogEntry>` from the `StorageItemDetailsServlet` and is responsible for rendering this data in a user-friendly format.

3.  **Key Dependencies & Libraries**

    *   `storage_item_details.js`: Provides the client-side interactivity for the lightbox and tabs.
    *   JSTL Core Library: Used extensively to display data from the model objects.

4.  **In-Depth Breakdown**

    *   **Main Details Card**: Displays the item's name, image (if available), and a list of its core properties (status, quantities, location, etc.) using `${item.propertyName}`. The image is a `.lightbox-trigger` to enable the full-screen view.
    *   **Tabbed Interface**:
        *   Uses two buttons (`.modal-tab-button`) to control which content pane is visible.
        *   The **History Tab** (`#history-tab`) contains two views: a desktop table and a mobile card list, which are conditionally displayed using CSS media queries. Both views iterate over the `history` collection to display each `StorageLogEntry`.
        *   The **Maintenance Tab** (`#maintenance-tab`) has a similar structure, iterating over the `maintenanceHistory` collection to display `MaintenanceLogEntry` objects.
    *   **Lightbox**: The HTML for the lightbox overlay is included at the bottom of the page, ready to be activated by the JavaScript.

---
### JSP Fragments (`/WEB-INF/jspf/`)

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/common_modals.jspf`
<a name="common_modals-jspf"></a>

1.  **File Overview & Purpose**

    This JSP fragment is intended as a placeholder for any future modals that might be used globally across the application. Currently, the primary global modal (the confirmation dialog) is created dynamically by `main.js`, so this file is effectively empty but serves an architectural purpose.

2.  **Architectural Role**

    This is a **View Tier** component, designed for inclusion in the main page footer.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/error_footer.jspf`
<a name="error_footer-jspf"></a>

1.  **File Overview & Purpose**

    This JSP fragment defines the closing HTML structure for all custom error pages. It closes the main content `div`s and includes the global `main.js` script.

2.  **Architectural Role**

    This is a **View Tier** component, part of the standardized error page layout. Its structure ensures that even error pages have a consistent HTML foundation.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/error_header.jspf`
<a name="error_header-jspf"></a>

1.  **File Overview & Purpose**

    This JSP fragment defines the opening HTML structure for all custom error pages. It includes the HTML head, doctype, meta tags, and the link to the main `style.css`. It also opens the main content wrapper `div`s.

2.  **Architectural Role**

    This is a **View Tier** component that ensures a consistent look and feel across all error pages by providing a standardized header.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/event_modals.jspf`
<a name="event_modals-jspf"></a>

1.  **File Overview & Purpose**

    This JSP fragment contains the HTML structure for the modals used in the administrative event management page (`admin_events_list.jsp`). It defines the multi-tabbed "Create/Edit Event" modal and the "Assign Users" modal.

2.  **Architectural Role**

    This is a **View Tier** component. It is included by `admin_events_list.jsp` to keep the main page's code cleaner by separating out the complex modal markup.

3.  **In-Depth Breakdown**

    *   **Event Create/Edit Modal (`#event-modal`)**:
        *   **Multi-Tab Structure**: Contains tabs for "General", "Requirements", "Reservations", "Attachments", and "Custom Fields". The content for each tab is within a `.modal-tab-content` div.
        *   **Dynamic Containers**: Includes empty `div`s like `#modal-requirements-container` which are populated dynamically by `admin_events_list.js` when an event is edited.
        *   **Forms**: Contains the main form for creating/updating an event. The `action` and hidden `id` fields are populated by JavaScript.
    *   **Assign Users Modal (`#assign-users-modal`)**:
        *   Contains a form and a container `div` (`#user-checkboxes-container`) that is dynamically filled with a checklist of users via an AJAX call in the JavaScript.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/main_footer.jspf`
<a name="main_footer-jspf"></a>

1.  **File Overview & Purpose**

    This is the global footer fragment included at the bottom of every standard application page. It closes the main `<body>` and `<html>` tags and includes the core JavaScript libraries and the main application script.

2.  **Architectural Role**

    This is a fundamental **View Tier** component that ensures all pages have access to the necessary client-side scripts.

3.  **In-Depth Breakdown**

    *   **`<script>` tags**:
        *   Includes third-party libraries like `marked.js` and `diff_match_patch.js` from the local `/vendor/` directory.
        *   Crucially, it includes `main.js`, which contains the global application logic.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/main_header.jspf`
<a name="main_header-jspf"></a>

1.  **File Overview & Purpose**

    This is the global header fragment included at the top of every standard application page. It contains the HTML head section, including meta tags, the title, and CSS links. It also renders the sidebar navigation and the mobile header.

2.  **Architectural Role**

    This is a fundamental **View Tier** component that provides a consistent header, navigation, and visual style for the entire application.

3.  **In-Depth Breakdown**

    *   **`<head>` Section**:
        *   Sets the character encoding and viewport.
        *   Dynamically sets the page title using a parameter: `${param.pageTitle}`.
        *   Links to the FontAwesome CDN and the local `style.css`.
        *   Includes a critical inline script to set the `data-theme` attribute on the `<html>` tag *before* the page renders, preventing a "flash of unthemed content" when a user has the dark theme selected.
        *   Conditionally includes the FullCalendar CSS if the page is the calendar.
    *   **`<body>` Section**:
        *   Includes several `data-*` attributes (`data-context-path`, `data-is-logged-in`, `data-csrf-token`) that make essential server-side information easily accessible to the global `main.js` script.
    *   **Sidebar (`<aside class="sidebar">`)**:
        *   Renders the entire navigation menu.
        *   It iterates through the `navigationItems` list (which was placed in the session at login).
        *   It uses `<c:if>` tags to separate the list into "User Area" and "Admin Area" sections.
        *   It dynamically adds the `active-nav-link` class to the link corresponding to the current page.
    *   **Mobile Header (`<header class="mobile-header">`)**: Contains the markup for the top bar visible on mobile devices, including the hamburger menu toggle.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/message_banner.jspf`
<a name="message_banner-jspf"></a>

1.  **File Overview & Purpose**

    This JSP fragment is responsible for displaying session-based feedback messages to the user (e.g., success, error, or info banners). After displaying a message, it removes it from the session to ensure it is only shown once.

2.  **Architectural Role**

    This is a reusable **View Tier** component. It is included at the top of most pages to provide a consistent mechanism for showing feedback after a form submission or other action.

3.  **In-Depth Breakdown**

    *   It contains three separate `<c:if>` blocks, one for each message type: `successMessage`, `errorMessage`, and `infoMessage`.
    *   Inside each block, it displays the message text from the session scope (`${sessionScope.successMessage}`).
    *   Immediately after displaying the message, it uses `<c:remove>` to delete the attribute from the session, preventing it from being shown again on the next page load.
    *   It also handles a special case for displaying the new password after an admin-initiated password reset.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/storage_modals.jspf`
<a name="storage_modals-jspf"></a>

1.  **File Overview & Purpose**

    This JSP fragment contains the HTML structure for all modals related to inventory management. This includes modals for transactions (check-in/out), maintenance status, defect status, and creating/editing an item.

2.  **Architectural Role**

    This is a **View Tier** component. It is included by `lager.jsp` and `admin_storage_list.jsp` to provide the necessary modal dialogs without cluttering the main page markup.

3.  **In-Depth Breakdown**

    *   **Transaction Modal (`#transaction-modal`)**: Used on the public inventory page for checking items in and out. The event dropdown is dynamically populated with a list of active events passed from the servlet.
    *   **Maintenance Modal (`#maintenance-modal`)**: An admin-only modal to change an item's status to or from "MAINTENANCE".
    *   **Defect Modal (`#defect-modal`)**: An admin-only modal to report a certain quantity of an item as defective or unrepairable.
    *   **Item Create/Edit Modal (`#item-modal`)**: A comprehensive admin-only modal with fields for all of a storage item's properties.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/table_scripts.jspf`
<a name="table_scripts-jspf"></a>

1.  **File Overview & Purpose**

    This JSP fragment contains reusable JavaScript code for client-side table filtering and sorting. It is designed to be included on any page that features a data table or a searchable list.

2.  **Architectural Role**

    This is a **View Tier** component that provides shared client-side functionality.

3.  **In-Depth Breakdown**

    *   **Table Filtering Logic**:
        *   It attaches an `input` event listener to the element with the ID `#table-filter`.
        *   On each keystroke, it gets the search term and converts it to lowercase.
        *   It iterates through all elements with the class `.searchable-table` or `.searchable-list`.
        *   For each table/list, it iterates through its rows or items and checks if the item's text content includes the search term.
        *   It toggles the `display` style of the row/item to show or hide it based on the match.
    *   **Table Sorting Logic**:
        *   It attaches `click` listeners to all table headers (`<th>`) with the class `.sortable`.
        *   When a header is clicked, it determines the sort direction (ascending or descending) and the data type to sort by (`string` or `number`, from a `data-sort-type` attribute).
        *   It converts the table rows into an array, sorts the array using a custom comparison function based on the selected column and data type, and then re-appends the sorted rows back into the `<tbody>`.
        *   It also toggles CSS classes on the header to display a visual indicator for the current sort order.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/task_modal.jspf`
<a name="task_modal-jspf"></a>

1.  **File Overview & Purpose**

    This JSP fragment defines the complex modal used for creating and editing tasks within an event on the `eventDetails.jsp` page.

2.  **Architectural Role**

    This is a **View Tier** component, included by `eventDetails.jsp` to separate the modal's extensive markup.

3.  **In-Depth Breakdown**

    *   **Core Task Fields**: Contains input fields for the task's `description`, `details`, `displayOrder`, and `status`.
    *   **Assignment Logic**:
        *   Includes radio buttons to switch between "Direct Assignment" and "Open Pool".
        *   Contains container divs (`#task-user-checkboxes`, `#pool-assignment-fields`) that are dynamically populated and shown/hidden by `eventDetails.js` based on the selected assignment type.
    *   **Material & Kits**:
        *   Includes empty container divs (`#task-items-container`, `#task-kits-container`) where dynamic rows for required items and kits are added by the JavaScript.
        *   Contains the "Add Material" and "Add Kit" buttons that trigger the row creation.
    *   **Action Buttons**: Includes the "Save Task" and "Delete Task" buttons. The delete button is hidden by default and only shown when editing an existing task.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/WEB-INF/jspf/user_modals.jspf`
<a name="user_modals-jspf"></a>

1.  **File Overview & Purpose**

    This JSP fragment defines the modal used for creating and editing user accounts on the `admin_users.jsp` page. It features a tabbed interface to separate general user information from granular permission settings.

2.  **Architectural Role**

    This is a **View Tier** component, included by `admin_users.jsp`.

3.  **In-Depth Breakdown**

    *   **Tabbed Interface**: Contains the button and content pane structure for the "Allgemein" (General) and "Berechtigungen" (Permissions) tabs.
    *   **General Tab**: Includes input fields for all core user properties (`username`, `password`, `roleId`, `classYear`, `className`, `email`). The password field is designed to be optional when editing a user.
    *   **Permissions Tab**: Contains an empty container div (`#permissions-checkbox-container`). This div is populated dynamically by `admin_users.js` with a complete, grouped checklist of all available permissions in the system.

---
### JSP Files (`/views/`)

This section details all JavaServer Pages (JSP) files, which are responsible for rendering the HTML content presented to the user.

---
#### Admin Views (`/views/admin/`)
---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_achievements.jsp`
<a name="admin_achievements-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the administrative page for managing achievements. It displays a table of all existing achievements and includes a "New Achievement" button that opens a modal for creating or editing entries.

2.  **Architectural Role**

    This is a core view in the **View Tier**. It receives a list of `Achievement` objects and a list of `Course` objects from the `AdminAchievementServlet` and renders them.

3.  **Key Dependencies & Libraries**

    *   `admin_achievements.js`: Provides all client-side interactivity for the modal.
    *   JSTL Core Library: Used to iterate through the `allAchievements` list and render the table rows.

4.  **In-Depth Breakdown**

    *   **Main Content**: Displays a header, a filter input, and the "New Achievement" button.
    *   **Data Table**: Renders a responsive table showing each achievement's ID, name, description, and the programmatic key. Each row includes an "Edit" button that triggers the modal.
    *   **Modal (`#achievement-modal`)**: Contains the form for creating/updating an achievement.
        *   It includes a dropdown for the achievement type and dynamic sub-form groups that are shown/hidden by the JavaScript.
        *   The dropdown for "Qualification" achievements is populated by iterating over the `allCourses` list.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_course_list.jsp`
<a name="admin_course_list-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the administrative page for managing course templates. It displays a table of all defined courses and includes a modal for creating new ones or editing existing ones.

2.  **Architectural Role**

    This is a **View Tier** file. It receives a list of `Course` objects from the `AdminCourseServlet` and displays them.

3.  **Key Dependencies & Libraries**

    *   `admin_course_list.js`: Provides the client-side logic for the create/edit modal.
    *   JSTL Core Library: Used to iterate over the `allCourses` list.

4.  **In-Depth Breakdown**

    *   **Main Content**: Renders the page header, filter input, and the "New Template" button.
    *   **Data Table**: Displays a table with each course's ID, name, abbreviation, and a short description. Each row contains "Edit", "Delete", and "Manage Meetings" buttons.
    *   **Modal (`#course-modal`)**: Contains a simple form with fields for the course name, abbreviation, and description. The form's hidden `action` and `courseId` fields are populated by JavaScript.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_dashboard.jsp`
<a name="admin_dashboard-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the main administrative dashboard. It provides the static HTML structure for the dashboard widgets. The content of these widgets is loaded and refreshed asynchronously by JavaScript.

2.  **Architectural Role**

    This is a **View Tier** file. It acts as the container for the dynamic dashboard. It receives some initial data from the `AdminDashboardServlet` but relies heavily on its associated JavaScript.

3.  **Key Dependencies & Libraries**

    *   `admin_dashboard.js`: The core script that fetches and renders all dynamic widget content.
    *   **Chart.js**: The charting library, included via CDN link, used to render the event trend graph.

4.  **In-Depth Breakdown**

    *   **Layout**: Uses a CSS grid (`.dashboard-grid`) to create a responsive, multi-column layout.
    *   **Static Widgets**: Renders the widgets for "Total Users", "Active Events", and "Defective Items" using data passed directly from the servlet.
    *   **Dynamic Widget Containers**:
        *   Includes empty `div` containers like `#upcoming-events-list`, `#low-stock-items-list`, and `#recent-logs-list`. These are the targets for the content rendered by `admin_dashboard.js`.
        *   Includes a `<canvas>` element (`#eventTrendChart`) which is the target for the Chart.js graph.
    *   **Alert Container**: Includes an empty `div` (`#dashboard-alerts-container`) where the `admin_dashboard.js` can dynamically insert important alerts, such as a "Low Stock" warning.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_defect_list.jsp`
<a name="admin_defect_list-jsp"></a>

1.  **File Overview & Purpose**

    This JSP displays the list of all defective inventory items. It provides a focused view for administrators to see which items need attention.

2.  **Architectural Role**

    This is a **View Tier** file. It receives a list of `StorageItem` objects from the `AdminDefectServlet` and renders them in a table.

3.  **Key Dependencies & Libraries**

    *   `admin_defect_list.js`: Provides the logic for opening and populating the defect management modal.
    *   `storage_modals.jspf`: Included to provide the HTML for the defect status modal.
    *   JSTL Core Library: Used to iterate over the `defectiveItems` list.

4.  **In-Depth Breakdown**

    *   **Main Content**: Renders the page header and a filter input.
    *   **Data Table**: Displays a table showing the defective item's ID, name, location, total quantity, and defective quantity. Each row includes a button (`.defect-modal-btn`) that opens a modal, allowing an admin to manage the defect status of that specific item.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_editor.jsp`
<a name="admin_editor-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the real-time collaborative Markdown editor. It provides the split-pane layout for the editor and the live preview, and establishes the WebSocket connection.

2.  **Architectural Role**

    This is a rich, interactive view in the **View Tier**. It receives file metadata and initial content from the `MarkdownEditorServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_editor.js`: Contains all the client-side logic for WebSocket communication and live preview rendering.
    *   **marked.js**: The Markdown rendering library, included in the footer.

4.  **In-Depth Breakdown**

    *   **Data Attributes**: The `<body>` tag includes `data-file-id` and `data-editor-mode` attributes, which are used by the JavaScript to establish the correct WebSocket connection and set the initial editor state (view or edit).
    *   **Header**: Displays the filename and a live connection status indicator (`#connection-status`).
    *   **Layout**:
        *   A `<textarea id="editor">` serves as the raw text input. The initial content is populated directly from the servlet.
        *   A `<div id="preview">` is the target for the rendered HTML output from marked.js.
    *   **View/Edit Toggle**: A switch (`<input type="checkbox" id="view-toggle">`) allows the user to toggle between a side-by-side editing view and a full-width preview-only mode.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_events_list.jsp`
<a name="admin_events_list-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the main "Event Management" page. It displays a table of all events and embeds all necessary data and modals for a rich, single-page-application-like experience.

2.  **Architectural Role**

    This is a complex **View Tier** page. It receives lists of events, courses, users, items, and kits from the `AdminEventServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_events_list.js`: The core script that drives all interactivity.
    *   `event_modals.jspf`: Included to provide the HTML for the various event-related modals.

4.  **In-Depth Breakdown**

    *   **Data Embedding**: Includes several `<script type="application/json">` tags. This is a key technique used to pass large amounts of data (like the lists of all courses, items, and kits) to the client-side JavaScript without cluttering the HTML. The `admin_events_list.js` script then parses this JSON.
    *   **Main Table**: Renders a table of all events, showing key information like name, date, location, and status. Each row includes buttons for "Edit", "Delete", and "Assign Users", which trigger the various modals.
    *   **Modals**: The included `event_modals.jspf` provides the structure for the comprehensive create/edit modal and the user assignment modal.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_feedback.jsp`
<a name="admin_feedback-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the administrative "Feedback Board" using a Kanban-style layout. It displays feedback submissions as cards organized into columns based on their status.

2.  **Architectural Role**

    This is an interactive **View Tier** page. It receives a map of grouped feedback submissions from the `AdminFeedbackServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_feedback.js`: Provides the drag-and-drop and modal logic.
    *   **SortableJS**: The third-party library that enables drag-and-drop, included via a WebJar.

4.  **In-Depth Breakdown**

    *   **Board Structure**: It iterates over the `feedbackStatusOrder` list to create the columns (`<div class="feedback-column">`) in the correct order.
    *   **Columns and Cards**: For each status, it retrieves the corresponding list of submissions from the `groupedSubmissions` map. It then iterates through this list to render each submission as a "card" (`<div class="feedback-card-item">`).
    *   **Data Attributes**: Each card includes `data-id` attributes, which are essential for the JavaScript to identify the submission when it's clicked or dragged.
    *   **Details Modal**: Includes the HTML for the `#feedback-details-modal`, which is used to show the full content of a submission and allow the admin to change its status.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_files.jsp`
<a name="admin_files-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the main "File & Category Management" page. It displays files grouped by category and provides forms and modals for creating/managing both files and categories.

2.  **Architectural Role**

    This is a **View Tier** page. It receives a map of grouped files (`groupedFiles`) and a list of all categories (`allCategories`) from the `AdminFileManagementServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_files.js`: Provides client-side logic for the modals.
    *   JSTL Core Library: Used extensively for iterating over the data structures.

4.  **In-Depth Breakdown**

    *   **Category Management**: Includes forms for creating a new category and a modal (`#edit-category-modal`) for editing existing ones.
    *   **File Upload Form**: A prominent form at the top of the page for uploading new files.
    *   **File Display**: It iterates through the `groupedFiles` map. For each category, it renders a heading. It then iterates through the files within that category, displaying each one's name, upload date, and a set of action buttons (Edit, Reassign, New Version, Delete).
    *   **Modals**: Includes the modals for uploading a new version and reassigning a file to a different category.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_kits.jsp`
<a name="admin_kits-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the administrative interface for managing inventory kits. It uses an accordion-style layout to display each kit and its contents.

2.  **Architectural Role**

    This is a **View Tier** page. It receives a list of kits with their items (`allKitsWithItems`) and a DTO of all selectable items (`allSelectableItemsJson`) from the `AdminKitServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_kits.js`: The core script that handles all dynamic behavior.

4.  **In-Depth Breakdown**

    *   **Data Embedding**: Like `admin_events_list.jsp`, it embeds the list of all selectable items as a JSON blob inside a `<script>` tag for easy access by the JavaScript.
    *   **Accordion Layout**: It iterates over the `allKitsWithItems` list. For each kit, it creates a header (`.kit-header`) and a content area (`.kit-content`).
    *   **Kit Content**: The content area contains a form (`.update-kit-items-form`). Inside this form, it iterates over the `kit.items` list to render the initial rows of items belonging to that kit. Each row contains a dropdown, a quantity input, and a remove button.
    *   **Modals**: Includes the `#kit-modal` for creating/editing the main kit metadata (name, location, etc.).

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_log.jsp`
<a name="admin_log-jsp"></a>

1.  **File Overview & Purpose**

    This JSP is responsible for rendering the administrative audit log. It displays a chronological list of all actions performed by administrators.

2.  **Architectural Role**

    This is a simple read-only **View Tier** page. It receives a list of `AdminLog` objects from the `AdminLogServlet`.

3.  **Key Dependencies & Libraries**

    *   JSTL Core Library: Used to iterate over the `logs` list.
    *   `table_scripts.jspf`: Included to provide client-side filtering and sorting for the log table.

4.  **In-Depth Breakdown**

    *   **Main Content**: Displays a header and a filter input for the table.
    *   **Data Table**: Renders a table with columns for Timestamp, Admin, Action Type, and Details. It uses a `<c:forEach>` loop to iterate through the `logs` collection and display each log entry's properties.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_matrix.jsp`
<a name="admin_matrix-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the complex "Qualification Matrix". It constructs a large table showing users versus meetings, with cells indicating attendance status.

2.  **Architectural Role**

    This is a data-dense **View Tier** page. It receives four key data structures from the `MatrixServlet` (`allUsers`, `allCourses`, `meetingsByCourse`, `attendanceMap`) and uses them to build the matrix.

3.  **Key Dependencies & Libraries**

    *   `admin_matrix.js`: Provides the logic for the attendance modal.
    *   JSTL Core Library: Essential for the nested loops required to build the table.

4.  **In-Depth Breakdown**

    *   **Table Structure**: Uses advanced CSS (`position: sticky`) to create sticky headers for both the user column and the course/meeting rows, making the large table navigable.
    *   **Header Generation**:
        *   It uses a nested `<c:forEach>` loop. The outer loop iterates over `allCourses` to create the main column headers (`<th>`).
        *   The inner loop iterates over `meetingsByCourse[course.id]` to create the sub-header for each meeting under its parent course.
    *   **Row Generation**:
        *   The main outer loop iterates over `allUsers` to create each row (`<tr>`). The first cell is the sticky user name.
    *   **Cell Generation**:
        *   Inside the user loop, another nested loop iterates over courses and their meetings again.
        *   For each cell, it constructs a unique key: `${user.id}-${meeting.id}`.
        *   It then uses this key to look up the attendance record directly from the `attendanceMap`: `${attendanceMap[key]}`.
        *   Based on the status of the fetched attendance record, it applies a CSS class (`status-attended`, `status-absent`, etc.) to color the cell and displays an appropriate icon.
        *   Each cell also includes all necessary `data-*` attributes to power the attendance modal.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_meeting_list.jsp`
<a name="admin_meeting_list-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the page for managing the specific meeting instances for a given course template. It lists all scheduled meetings and provides a modal for creating/editing them.

2.  **Architectural Role**

    This is a **View Tier** page. It receives the parent `Course` object and a list of its `meetings` from the `AdminMeetingServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_meeting_list.js`: Provides the client-side interactivity for the modal.
    *   JSTL Core Library: Used to iterate over the `meetings` list and populate the user dropdown.

4.  **In-Depth Breakdown**

    *   **Header**: Displays the name of the parent course and a "Back" button.
    *   **Main Table**: Shows a list of all meetings for this course, with details like date, time, and leader. Each row has "Edit" and "Delete" buttons.
    *   **Modal (`#meeting-modal`)**:
        *   Contains the form for creating or editing a meeting.
        *   The "Leader" dropdown (`<select>`) is populated by iterating over the `allUsers` list passed from the servlet.
        *   Includes an area (`#attachments-list`) where existing attachments are dynamically listed by the JavaScript.
        *   Includes a file input for adding a new attachment when creating or editing a meeting.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_reports.jsp`
<a name="admin_reports-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the main "Reports & Analytics" dashboard. It displays several charts visualizing system data and provides links to detailed, tabular reports.

2.  **Architectural Role**

    This is a **View Tier** page focused on data visualization. It receives pre-aggregated data and chart-ready JSON from the `AdminReportServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_reports.js`: The script that initializes the Chart.js instances.
    *   **Chart.js**: The charting library, included via CDN.

4.  **In-Depth Breakdown**

    *   **Data Embedding**: Similar to other complex pages, it embeds the JSON data for the charts in `<script type="application/json">` tags (`#eventTrendData`, `#userActivityData`), which are then read by `admin_reports.js`.
    *   **Chart Canvases**: Includes `<canvas>` elements that serve as the rendering targets for the two main charts (Event Trend and User Activity).
    *   **Detailed Report Links**: Provides a list of links to generate specific tabular reports (e.g., `/admin/berichte?report=eventParticipation`). Each link includes an "Export to CSV" counterpart.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_requests.jsp`
<a name="admin_requests-jsp"></a>

1.  **File Overview & Purpose**

    This JSP displays the list of pending user profile change requests for administrative review.

2.  **Architectural Role**

    This is a **View Tier** page. It receives a list of `ProfileChangeRequest` objects from the `AdminChangeRequestServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_requests.js`: Provides the AJAX logic for approving/denying requests.
    *   JSTL Core Library: To iterate over the `pendingRequests` list.

4.  **In-Depth Breakdown**

    *   **Main Table**: Renders a table of pending requests.
    *   **Dynamic Content**: For each request, it displays who made the request and when. The "Requested Changes" column contains a `<c:forEach>` loop that iterates over the `request.requestedChangesMap` (a map parsed from the JSON in the servlet) to display a human-readable list of the requested changes (e.g., "Email: new@email.com").
    *   **Action Forms**: Each row contains two small, separate forms for "Approve" and "Deny". These forms are handled by `admin_requests.js` to perform the action via AJAX without a full page reload.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_storage_list.jsp`
<a name="admin_storage_list-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the main administrative inventory management page. It displays a comprehensive table of all storage items and provides access to various management modals.

2.  **Architectural Role**

    This is a **View Tier** page. It receives a list of `StorageItem` objects from the `AdminStorageServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_storage_list.js`: Provides all client-side logic for modals and the lightbox.
    *   `storage_modals.jspf`: Included to provide the HTML for all inventory-related modals.
    *   `table_scripts.jspf`: Included for client-side table sorting and filtering.

4.  **In-Depth Breakdown**

    *   **Main Table**: A large, sortable table displaying all properties of each storage item.
    *   **Conditional Formatting**: Uses JSTL `<c:if>` tags and EL to conditionally display information, such as the `defectReason` or the `currentHolderUsername`.
    *   **Action Buttons**: Each row has a set of action buttons that trigger different modals. The `data-*` attributes on these buttons are heavily used to pass the item's current state to the JavaScript that populates the modals. For example, the "Repair" button includes `data-defective-qty`.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_system.jsp`
<a name="admin_system-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the "System Status" page. It provides the static HTML structure, and all data is loaded and updated in real-time by JavaScript.

2.  **Architectural Role**

    This is a **View Tier** page that acts as a container for a live-updating dashboard.

3.  **Key Dependencies & Libraries**

    *   `admin_system.js`: The script that fetches and displays the system stats.

4.  **In-Depth Breakdown**

    *   **Structure**: The page is composed of several `.card` elements, one for each metric (CPU, RAM, Disk, Uptime, Battery).
    *   **Progress Bars**: Each card contains a `.progress-bar-container` and an inner `.progress-bar`, whose `width` is manipulated by the JavaScript.
    *   **Placeholders**: The text elements (e.g., `#cpu-text`, `#ram-text`) contain initial "Loading..." text, which is replaced by the data fetched via AJAX.
    *   **Conditional Display**: The Uptime and Battery cards are initially visible but will be hidden by `admin_system.js` if the API reports that the data is not available on the host system.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_user_details.jsp`
<a name="admin_user_details-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the detailed profile view of a single user, as seen by an administrator. It displays their core information and their complete event participation history.

2.  **Architectural Role**

    This is a read-only **View Tier** page. It receives a `User` object and their `eventHistory` from the `AdminUserServlet`.

3.  **Key Dependencies & Libraries**

    *   JSTL Core Library: Used to display user properties and iterate over their event history.

4.  **In-Depth Breakdown**

    *   **User Details Card**: Displays all the core profile information for the user (`${user.username}`, `${user.email}`, etc.).
    *   **Event History Table**: Iterates over the `eventHistory` list to show every event the user has been associated with, including the event name, date, and the user's final status for that event (e.g., "ZUGWIESEN").

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/admin_users.jsp`
<a name="admin_users-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the main "User Management" page. It displays a table of all users and includes the comprehensive modal for creating and editing users and their permissions.

2.  **Architectural Role**

    This is a complex, interactive **View Tier** page. It receives lists of users, roles, and permissions from the `AdminUserServlet`.

3.  **Key Dependencies & Libraries**

    *   `admin_users.js`: The core script that drives all AJAX-based actions and modal logic.
    *   `user_modals.jspf`: Included to provide the HTML for the user edit modal.
    *   `table_scripts.jspf`: Included for client-side table sorting and filtering.

4.  **In-Depth Breakdown**

    *   **Data Embedding**: Embeds the grouped permissions map as a JSON blob in a `<script>` tag for use by `admin_users.js`.
    *   **Main Table**: Displays a list of all users. Each row includes the user's core data and a set of action buttons/forms (Edit, Details, Reset Password, Unlock, Delete).
    *   **Action Forms**: Actions like "Reset Password" are wrapped in their own `<form>` tags. The submission of these forms is intercepted by `admin_users.js` to be handled via AJAX.
    *   **Modal**: The included `user_modals.jspf` provides the tabbed modal structure, which is dynamically populated by the JavaScript.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/admin/report_display.jsp`
<a name="report_display-jsp"></a>

1.  **File Overview & Purpose**

    This JSP is a generic template for displaying any detailed, tabular report. It receives a list of data, a title, and column headers from the `AdminReportServlet` and renders them in a simple, clean table.

2.  **Architectural Role**

    This is a reusable **View Tier** template.

3.  **Key Dependencies & Libraries**

    *   JSTL Core Library: For iterating over the data.
    *   `table_scripts.jspf`: For client-side sorting and filtering.

4.  **In-Depth Breakdown**

    *   **Dynamic Title**: The page title and header are set dynamically using `${reportTitle}`.
    *   **Dynamic Table Headers**: It iterates over the `columnHeaders` list to dynamically generate the `<th>` elements for the table.
    *   **Dynamic Table Rows**: It uses a nested loop. The outer loop iterates over each row in the `reportData` list (where each row is a map). The inner loop iterates over the `columnHeaders` list again to ensure that the data for each cell is pulled from the map in the correct order (`row[header]`).

---
#### Auth Views (`/views/auth/`)
---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/auth/login.jsp`
<a name="login-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the application's login page. It displays the login form and handles the display of error messages, including the lockout timer.

2.  **Architectural Role**

    This is the primary entry point **View Tier** page for unauthenticated users.

3.  **Key Dependencies & Libraries**

    *   `login.js`: Handles the client-side lockout countdown timer.
    *   `passkey_auth.js`: Provides the logic for the "Login with Passkey" button.

4.  **In-Depth Breakdown**

    *   **Error Display**: Uses `<c:if>` to conditionally display login error messages or lockout warnings passed from the `LoginServlet` via the session.
    *   **Lockout Timer**: If a lockout is active (`${lockoutEndTime}` is not empty), it renders the `#lockout-timer` div with `data-*` attributes containing the end time. This `div` is then activated by `login.js`.
    *   **Login Form**: A standard HTML form that POSTs to `/login`. It includes the hidden CSRF token field.
    *   **Passkey Button**: Includes the "Login with Passkey" button, which is controlled by `passkey_auth.js`.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/auth/logout.jsp`
<a name="logout-jsp"></a>

1.  **File Overview & Purpose**

    This JSP displays a simple "You have been logged out" confirmation message. It is designed to be shown briefly before the user is automatically redirected.

2.  **Architectural Role**

    This is a transitional **View Tier** page.

3.  **Key Dependencies & Libraries**

    *   `logout.js`: Contains the JavaScript `setTimeout` that automatically redirects the user to the login page.

4.  **In-Depth Breakdown**

    *   The page contains a simple message and a spinner icon to indicate that something is happening. The user is not expected to interact with this page, as the redirect is automatic.

---
#### Error Views (`/views/error/`)
---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/error/error400.jsp`
<a name="error400-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders a custom, themed page for the HTTP 400 (Bad Request) error.

2.  **Architectural Role**

    This is a **View Tier** component for error handling. It uses the standard error page header and footer fragments.

3.  **Key Dependencies & Libraries**

    *   `error400.js`: Provides the animated "console output" effect.

4.  **In-Depth Breakdown**

    *   The page is styled to look like a droid's diagnostic screen. It contains a `<pre>` tag (`#output`) that serves as the target for the animated text generated by the JavaScript.

---
*(The documentation for `error401.jsp`, `error403.jsp`, `error404.jsp`, `error500.jsp`, and `error503.jsp` follows the same pattern: a themed View Tier page with a specific JavaScript file for animation.)*

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/error/error_generic.jsp`
<a name="error_generic-jsp"></a>

1.  **File Overview & Purpose**

    This JSP serves as a generic, catch-all error page. It is used for any unhandled exceptions or error codes that do not have a specific, themed page.

2.  **Architectural Role**

    This is the default **View Tier** component for error handling.

3.  **Key Dependencies & Libraries**

    *   None.

4.  **In-Depth Breakdown**

    *   It displays a simple, non-themed error message. It includes a section to display the exception details (`${requestScope['jakarta.servlet.error.exception']}`) which is useful for debugging but should ideally be disabled in a production environment for security reasons.

---
#### Public Views (`/views/public/`)
---

`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/calendar.jsp`
<a name="calendar-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the main "Kalender" page. It provides three different views of the schedule: a full-grid monthly calendar (powered by FullCalendar.js), a weekly list, and a simple chronological list optimized for mobile devices.

2.  **Architectural Role**

    This is a **View Tier** page. It receives calendar data and date calculation helpers from the `CalendarServlet` and renders the appropriate view based on the user's screen size (controlled by CSS).

3.  **Key Dependencies & Libraries**

    *   `calendar.js`: The script that initializes the FullCalendar component.
    *   **FullCalendar.js**: The third-party library for the interactive calendar, included via CDN in the header.
    *   JSTL Core & Functions Library: Used for conditional logic and date formatting.

4.  **In-Depth Breakdown**

    *   **View Switching**: The entire page is structured with wrappers (`.desktop-only`, `.mobile-only`) that are shown or hidden by the main `style.css` based on media queries.
    *   **Desktop View (FullCalendar)**: Contains a single `div` (`#calendar-container`) which is the target for the FullCalendar.js instance created by `calendar.js`.
    *   **Desktop View (Weekly/Monthly List - Fallback)**: These sections are likely legacy or for non-JS users. They use JSTL loops to build a table-based calendar grid, placing events in the correct cells based on the data maps provided by the servlet.
    *   **Mobile View**: Renders a simple `<ul>` by iterating over the `mobileEntries` list. Each `<li>` represents a single event or meeting, displaying its date and title.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/dateien.jsp`
<a name="dateien-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the public "Dateien & Dokumente" page. It displays a list of files, grouped by category, that are accessible to the logged-in user.

2.  **Architectural Role**

    This is a **View Tier** page. It receives a map of grouped files (`fileData`) from the `FileServlet`.

3.  **Key Dependencies & Libraries**

    *   `dateien.js`: Provides the client-side logic for the "Upload New Version" modal.
    *   JSTL Core Library: Used to iterate over the map of categories and the lists of files.

4.  **In-Depth Breakdown**

    *   **Main Content**: Displays the page header and a search/filter input.
    *   **File Listing**: It uses a nested `<c:forEach>` loop. The outer loop iterates through the `fileData` map (categories). For each category, it prints a heading. The inner loop then iterates through the files in that category, rendering a `div` for each file.
    *   **File Item**: Each file item displays an icon, the filename, and the upload date. It includes a "Download" button and, if the user has `FILE_UPDATE` permission, a "New Version" button that triggers the modal.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/eventDetails.jsp`
<a name="eventdetails-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the detailed view of a single event. It is a highly complex and interactive page, displaying event details, a task list, assigned personnel, attachments, and a real-time chat.

2.  **Architectural Role**

    This is a rich, dynamic **View Tier** page. It receives a fully aggregated `Event` object from the `EventDetailsServlet` and uses extensive JavaScript to provide interactivity.

3.  **Key Dependencies & Libraries**

    *   `eventDetails.js`: The core script that manages all client-side logic for tasks, chat, and modals.
    *   `task_modal.jspf`: Included to provide the HTML for the task creation/editing modal.
    *   **marked.js**: Used by the JavaScript to render Markdown in the chat and task details.

4.  **In-Depth Breakdown**

    *   **Data Embedding**: Embeds several JSON blobs (`allTasks`, `allUsersForEvent`, `allItems`, `allKits`) in `<script>` tags for use by `eventDetails.js`.
    *   **Event Information**: Displays the main event details (name, date, location, description, leader).
    *   **Task List**: Iterates over the `event.eventTasks` list to display all tasks. Each task includes its description, status, and assigned users. Action buttons (Claim, Mark as Done, Edit) are shown conditionally based on the user's permissions and association with the task.
    *   **Chat Interface**: If the event is currently active (`event.status == 'LAUFEND'`), it renders the chat container (`#chat-messages-container`) and the message input form. The `eventDetails.js` script populates this container with messages via the WebSocket connection.
    *   **Attachments**: Displays a list of attachments available to the user.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/events.jsp`
<a name="events-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the main "Veranstaltungen" (Events) page, listing all upcoming events and allowing users to sign up or sign off.

2.  **Architectural Role**

    This is a **View Tier** page. It receives an enriched list of `Event` objects from the `EventServlet`.

3.  **Key Dependencies & Libraries**

    *   `events.js`: Provides the logic for the sign-up modal and for handling sign-offs from running events.
    *   JSTL Core Library: Used to iterate over the `upcomingEvents` list.

4.  **In-Depth Breakdown**

    *   **Event Listing**: It iterates over the `upcomingEvents` list, displaying each event in a responsive card layout.
    *   **Conditional Actions**: The core logic is in the "Actions" section of each card.
        *   It uses `<c:choose>`, `<c:when>`, and `<c:otherwise>` to display the correct button based on the user's status for that event (`event.userAttendanceStatus`). The options are "Sign Off", "Sign Up", or a "Finalized" message.
        *   The "Sign Up" button is disabled if `!event.isUserQualified`.
    *   **Modals**:
        *   `#signup-modal`: The modal for event sign-ups. It contains a container (`#custom-fields-container`) that is dynamically populated with custom fields by `events.js`.
        *   `#signoff-reason-modal`: A special modal that is shown by `events.js` if a user tries to sign off from an event that is already in progress.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/feedback.jsp`
<a name="feedback-jsp"></a>

1.  **File Overview & Purpose**

    This JSP provides the form for users to submit general feedback, such as bug reports or feature requests.

2.  **Architectural Role**

    This is a simple form-based **View Tier** page. It submits data to the `FeedbackServlet`.

3.  **Key Dependencies & Libraries**

    *   None.

4.  **In-Depth Breakdown**

    *   **Form**: Contains a standard HTML form that POSTs to `/feedback`.
    *   **Fields**: Includes input fields for the `subject` and a `textarea` for the `content` of the feedback.
    *   **CSRF Token**: Includes the hidden `csrfToken` input field for security.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/feedback_form.jsp`
<a name="feedback_form-jsp"></a>

1.  **File Overview & Purpose**

    This JSP displays the feedback form for a *specific* event after it has concluded. It allows users to give a star rating and leave comments.

2.  **Architectural Role**

    This is a **View Tier** page. It receives `event` and `form` objects from the `FeedbackServlet`.

3.  **Key Dependencies & Libraries**

    *   None.

4.  **In-Depth Breakdown**

    *   **Header**: Displays the title of the event for which feedback is being given.
    *   **Form**: A form that POSTs to `/feedback`.
    *   **Star Rating**: Implements a CSS-based star rating input using radio buttons (`<input type="radio">`) and styled `<label>` tags.
    *   **Fields**: Includes a `textarea` for comments and hidden inputs for the `formId` and `action`.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/home.jsp`
<a name="home-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the user's main dashboard or home page. It provides a personalized overview of their upcoming responsibilities and tasks.

2.  **Architectural Role**

    This is the main landing page for authenticated users in the **View Tier**. It receives several lists of data from the `HomeServlet`.

3.  **Key Dependencies & Libraries**

    *   JSTL Core Library: Used to iterate over the data lists.

4.  **In-Depth Breakdown**

    *   **Layout**: Uses a responsive grid layout to display multiple widgets.
    *   **"My Next Events" Widget**: Iterates over the `assignedEvents` list to show the top events the user is assigned to.
    *   **"My Open Tasks" Widget**: Iterates over the `openTasks` list, displaying each task and the name of the event it belongs to.
    *   **"Upcoming Events" Widget**: Iterates over the `upcomingEvents` list to show general upcoming events the user might be interested in.
    *   **Conditional Display**: Each widget uses `<c:choose>` to display an appropriate "no items" message if the corresponding list is empty.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/lager.jsp`
<a name="lager-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the main public inventory ("Lager") page. It displays all inventory items, grouped by location, and provides functionality for users to check items in or out.

2.  **Architectural Role**

    This is an interactive **View Tier** page. It receives a map of grouped items (`storageData`) and a list of `activeEvents` from the `StorageServlet`.

3.  **Key Dependencies & Libraries**

    *   `lager.js`: Provides the logic for the transaction modal and image lightbox.
    *   `storage_modals.jspf`: Included to provide the HTML for the transaction modal.

4.  **In-Depth Breakdown**

    *   **Filtering**: Includes a search input for client-side filtering.
    *   **Inventory Display**: Uses a nested `<c:forEach>` loop. The outer loop iterates through the `storageData` map to create a heading for each location. The inner loop iterates through the items in that location, rendering a responsive card for each.
    *   **Item Card**: Each card displays the item's image, name, and availability status (using the `getAvailabilityStatusCssClass` convenience method from the model). It includes buttons to view details and to open the transaction modal. The transaction button (`.transaction-btn`) is packed with `data-*` attributes holding all the item's quantity information for use by `lager.js`.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/lehrgaenge.jsp`
<a name="lehrgaenge-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the "Lehrgänge" (Courses/Meetings) page, which lists all upcoming training sessions and allows users to sign up or sign off.

2.  **Architectural Role**

    This is a **View Tier** page. It receives a list of `Meeting` objects (enriched with the user's status) from the `MeetingServlet`.

3.  **Key Dependencies & Libraries**

    *   JSTL Core Library: Used to iterate over the list of meetings.

4.  **In-Depth Breakdown**

    *   **Meeting Listing**: It iterates over the `meetings` list and displays each meeting as a card.
    *   **Meeting Card**: Each card shows the parent course name, the specific meeting title, date, location, and leader.
    *   **Action Buttons**: The "Actions" section uses a `<c:choose>` block to display the correct button based on the meeting's `userAttendanceStatus`. Users can see if they are signed up ("Abmelden"), not signed up ("Anmelden"), or if the meeting is in the past.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/meetingDetails.jsp`
<a name="meetingdetails-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the detailed view for a single scheduled meeting.

2.  **Architectural Role**

    This is a **View Tier** page. It receives a `Meeting` object and a list of `attachments` from the `MeetingDetailsServlet`.

3.  **Key Dependencies & Libraries**

    *   JSTL Core Library: For displaying meeting properties and iterating over attachments.

4.  **In-Depth Breakdown**

    *   **Main Details**: Displays all the core information about the meeting, such as its name, date/time range, location, leader, and description.
    *   **Attachments**: If there are any attachments, it displays them in a list, with a download link for each one.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/my_feedback.jsp`
<a name="my_feedback-jsp"></a>

1.  **File Overview & Purpose**

    This JSP displays a list of all general feedback submissions made by the currently logged-in user, allowing them to track the status of their suggestions and bug reports.

2.  **Architectural Role**

    This is a read-only **View Tier** page. It receives a list of `FeedbackSubmission` objects from the `MyFeedbackServlet`.

3.  **Key Dependencies & Libraries**

    *   JSTL Core Library: For iterating over the user's submissions.

4.  **In-Depth Breakdown**

    *   **Feedback Listing**: It iterates over the `submissions` list and displays each one in a card.
    *   **Feedback Card**: Each card shows the submission's subject, a snippet of the content, the submission date, and its current `status`. The status text is styled with a CSS class based on its value (e.g., `status-new`, `status-done`) for better visual identification.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/pack_kit.jsp`
<a name="pack_kit-jsp"></a>

1.  **File Overview & Purpose**

    This JSP provides a simple, printable packing list for a specific inventory kit. It is designed with a minimal layout, intended to be accessed via a QR code scan.

2.  **Architectural Role**

    This is a utility **View Tier** page with a specialized layout. It receives a `kit` object and a list of `kitItems` from the `PackKitServlet`.

3.  **In-Depth Breakdown**

    *   **Minimal Layout**: The `main_header.jspf` is intentionally *not* included. This page has its own minimal `<head>` section to create a clean, print-friendly view without the sidebar or other site navigation.
    *   **Header**: Displays the name and description of the kit.
    *   **Packing List**: Renders a simple table that lists the required quantity and name for each item in the kit. It also includes a checkbox for each item, allowing a user to physically check off items as they pack the kit.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/passwort.jsp`
<a name="passwort-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the form that allows a logged-in user to change their own password.

2.  **Architectural Role**

    This is a simple form-based **View Tier** page that submits data to the `PasswordServlet`.

3.  **Key Dependencies & Libraries**

    *   None.

4.  **In-Depth Breakdown**

    *   **Form**: Contains a standard HTML form with fields for the current password, new password, and new password confirmation.
    *   **Password Toggle**: Each password input has a corresponding icon (`.password-toggle-icon`) that allows the user to toggle the visibility of the password text. This functionality is provided by the global `main.js`.
    *   **CSRF Token**: Includes the hidden CSRF token field.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/profile.jsp`
<a name="profile-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the user's "My Profile" page. It is a comprehensive page that displays a wide range of user-specific information in different sections.

2.  **Architectural Role**

    This is a data-rich **View Tier** page. It receives a large amount of data from the `ProfileServlet`, including the `user` object, `eventHistory`, `qualifications`, `achievements`, and `passkeys`.

3.  **Key Dependencies & Libraries**

    *   `profile.js`: Provides the logic for toggling the edit mode and submitting profile changes via AJAX.
    *   `passkey_auth.js`: Provides the logic for the "Register New Device" button.

4.  **In-Depth Breakdown**

    *   **Profile Data Form**: The main user data (email, class) is displayed within a form. The `profile.js` script toggles the input fields between read-only and editable states.
    *   **Change Request Notice**: Conditionally displays a message if the user has a pending profile change request.
    *   **Achievements**: Iterates over the `achievements` list to display the icons and names of all earned achievements.
    *   **Event History & Qualifications**: Displays the user's event history and qualifications in separate tables.
    *   **Passkey Management**: Iterates over the user's registered `passkeys`, displaying each one with a "Delete" button. Also includes the "Register New Device" button to start the passkey registration flow.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/qr_action.jsp`
<a name="qr_action-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the simplified, mobile-friendly page for performing a quick inventory transaction, typically accessed via a QR code.

2.  **Architectural Role**

    This is a specialized **View Tier** page with a minimal layout. It receives an `item` object and a list of `activeEvents` from the `StorageItemActionServlet`.

3.  **Key Dependencies & Libraries**

    *   `qr_action.js`: Provides the dynamic client-side validation for the quantity input.

4.  **In-Depth Breakdown**

    *   **Minimal Layout**: Like `pack_kit.jsp`, this page omits the standard header to provide a focused, full-screen experience on mobile devices.
    *   **Form**: Contains a single form that POSTs to the `StorageTransactionServlet`. The form has `data-*` attributes that hold the item's quantity details for use by `qr_action.js`.
    *   **Fields**: Includes an input for quantity, a dropdown to optionally associate the transaction with an active event, and a textarea for notes.
    *   **Action Buttons**: Includes two separate submit buttons (`<button type="submit">`), one for checking out ("Entnehmen") and one for checking in ("Einräumen"). The `name` attribute of these buttons determines the `type` parameter sent to the servlet.

---
`C:/Users/techn/eclipse/workspace/TechnikTeam/src/main/webapp/views/public/storage_item_details.jsp`
<a name="storage_item_details-jsp"></a>

1.  **File Overview & Purpose**

    This JSP renders the detailed view for a single inventory item. It displays all core data about the item, its image, and presents its transaction and maintenance history in a tabbed interface.

2.  **Architectural Role**

    This is a core view in the **View Tier**. It receives a `StorageItem` object, a `List<StorageLogEntry>`, and a `List<MaintenanceLogEntry>` from the `StorageItemDetailsServlet` and is responsible for rendering this data in a user-friendly format.

3.  **Key Dependencies & Libraries**

    *   `storage_item_details.js`: Provides the client-side interactivity for the lightbox and tabs.
    *   JSTL Core Library: Used extensively to display data from the model objects.

4.  **In-Depth Breakdown**

    *   **Main Details Card**: Displays the item's name, image (if available), and a list of its core properties (status, quantities, location, etc.) using `${item.propertyName}`. The image is a `.lightbox-trigger` to enable the full-screen view.
    *   **Tabbed Interface**:
        *   Uses two buttons (`.modal-tab-button`) to control which content pane is visible.
        *   The **History Tab** (`#history-tab`) contains two views: a desktop table and a mobile card list, which are conditionally displayed using CSS media queries. Both views iterate over the `history` collection to display each `StorageLogEntry`.
        *   The **Maintenance Tab** (`#maintenance-tab`) has a similar structure, iterating over the `maintenanceHistory` collection to display `MaintenanceLogEntry` objects.
    *   **Lightbox**: The HTML for the lightbox overlay is included at the bottom of the page, ready to be activated by the JavaScript.

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\db\migration\V1__Create_initial_schema.sql
========================================================================

-- This script contains the full DDL to create the database schema from scratch.
-- It has been reordered to ensure all tables are created before constraints are applied.
-- ALL `INSERT` statements have been removed as Flyway manages schema, not data.

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";

-- ===================================================================
-- PART 1: CREATE ALL TABLES
-- ===================================================================

CREATE TABLE `achievements` (
  `id` int(11) NOT NULL,
  `achievement_key` varchar(50) NOT NULL,
  `name` varchar(100) NOT NULL,
  `description` text DEFAULT NULL,
  `icon_class` varchar(50) DEFAULT 'fa-award'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `admin_logs` (
  `id` int(11) NOT NULL,
  `admin_username` varchar(50) DEFAULT NULL,
  `action_type` varchar(255) DEFAULT NULL,
  `details` text DEFAULT NULL,
  `action_timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `attachments` (
  `id` int(11) NOT NULL,
  `parent_type` enum('EVENT','MEETING') NOT NULL,
  `parent_id` int(11) NOT NULL,
  `filename` varchar(255) NOT NULL,
  `filepath` varchar(255) NOT NULL,
  `required_role` enum('NUTZER','ADMIN') NOT NULL DEFAULT 'NUTZER',
  `uploaded_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `courses` (
  `id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `abbreviation` varchar(20) DEFAULT NULL,
  `description` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `course_attendance` (
  `user_id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `signup_status` enum('ANGEMELDET','ABGEMELDET') NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `events` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `event_datetime` datetime NOT NULL,
  `end_datetime` datetime DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL,
  `status` enum('GEPLANT','KOMPLETT','LAUFEND','ABGESCHLOSSEN','ABGESAGT') NOT NULL DEFAULT 'GEPLANT',
  `leader_user_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_assignments` (
  `assignment_id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_attendance` (
  `user_id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `signup_status` enum('ANGEMELDET','ABGEMELDET') NOT NULL,
  `commitment_status` enum('BESTÄTIGT','OFFEN','ZUGESAGT') NOT NULL DEFAULT 'OFFEN'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_chat_messages` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `username` varchar(255) DEFAULT NULL,
  `message_text` text DEFAULT NULL,
  `edited` tinyint(1) NOT NULL DEFAULT 0,
  `is_deleted` tinyint(1) NOT NULL DEFAULT 0,
  `deleted_by_user_id` int(11) DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `deleted_by_username` varchar(255) DEFAULT NULL,
  `sent_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_custom_fields` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `field_name` varchar(255) DEFAULT NULL,
  `field_type` enum('TEXT','BOOLEAN','DROPDOWN','CHECKBOX_GROUP') NOT NULL,
  `is_required` tinyint(1) NOT NULL DEFAULT 0,
  `field_options` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_custom_field_responses` (
  `id` int(11) NOT NULL,
  `field_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `response_value` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_skill_requirements` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `required_course_id` int(11) NOT NULL,
  `required_persons` int(11) NOT NULL DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_storage_reservations` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `reserved_quantity` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_tasks` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `description` text NOT NULL,
  `status` varchar(20) NOT NULL DEFAULT 'OFFEN',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `display_order` int(11) NOT NULL DEFAULT 0,
  `required_persons` int(11) NOT NULL DEFAULT 0,
  `details` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_task_assignments` (
  `task_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_task_kits` (
  `task_id` int(11) NOT NULL,
  `kit_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_task_storage_items` (
  `task_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `quantity` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `feedback_forms` (
  `id` int(11) NOT NULL,
  `event_id` int(11) NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `feedback_responses` (
  `id` int(11) NOT NULL,
  `form_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `rating` int(11) NOT NULL COMMENT 'e.g., 1 to 5 stars',
  `comments` text DEFAULT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `feedback_submissions` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `subject` varchar(255) NOT NULL,
  `display_title` varchar(255) DEFAULT NULL,
  `content` text NOT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `status` enum('NEW','VIEWED','PLANNED','REJECTED','COMPLETED') NOT NULL DEFAULT 'NEW',
  `display_order` int(11) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `files` (
  `id` int(11) NOT NULL,
  `filename` varchar(255) DEFAULT NULL,
  `filepath` varchar(512) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `required_role` varchar(20) DEFAULT NULL,
  `uploaded_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `file_categories` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `inventory_kits` (
  `id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `inventory_kit_items` (
  `kit_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `quantity` int(11) NOT NULL DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `maintenance_log` (
  `id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `log_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `action` varchar(255) DEFAULT NULL,
  `notes` text DEFAULT NULL,
  `cost` decimal(10,2) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `meetings` (
  `id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `meeting_datetime` datetime NOT NULL,
  `end_datetime` datetime DEFAULT NULL,
  `leader_user_id` int(11) DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `meeting_attendance` (
  `user_id` int(11) NOT NULL,
  `meeting_id` int(11) NOT NULL,
  `attended` tinyint(1) DEFAULT 0,
  `remarks` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `permissions` (
  `id` int(11) NOT NULL,
  `permission_key` varchar(100) NOT NULL COMMENT 'e.g., USER_CREATE, EVENT_DELETE',
  `description` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `profile_change_requests` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `requested_changes` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`requested_changes`)),
  `status` enum('PENDING','APPROVED','DENIED') NOT NULL DEFAULT 'PENDING',
  `requested_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `reviewed_by_admin_id` int(11) DEFAULT NULL,
  `reviewed_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `roles` (
  `id` int(11) NOT NULL,
  `role_name` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `shared_documents` (
  `id` int(11) NOT NULL,
  `document_name` varchar(100) NOT NULL,
  `content` text DEFAULT NULL,
  `last_modified` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `storage_items` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `location` varchar(50) DEFAULT NULL,
  `cabinet` varchar(50) DEFAULT NULL,
  `shelf` varchar(50) DEFAULT NULL,
  `compartment` varchar(50) DEFAULT NULL,
  `quantity` int(11) NOT NULL DEFAULT 1,
  `max_quantity` int(11) NOT NULL DEFAULT 0,
  `defective_quantity` int(11) NOT NULL DEFAULT 0,
  `defect_reason` text DEFAULT NULL,
  `weight_kg` decimal(10,2) DEFAULT NULL,
  `price_eur` decimal(10,2) DEFAULT NULL,
  `image_path` varchar(512) DEFAULT NULL,
  `status` enum('IN_STORAGE','CHECKED_OUT','ASSIGNED_TO_EVENT','MAINTENANCE') NOT NULL DEFAULT 'IN_STORAGE',
  `current_holder_user_id` int(11) DEFAULT NULL,
  `assigned_event_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `storage_log` (
  `id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `quantity_change` int(11) NOT NULL,
  `notes` text DEFAULT NULL,
  `event_id` int(11) DEFAULT NULL,
  `transaction_timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(50) DEFAULT NULL,
  `password_hash` varchar(255) DEFAULT NULL,
  `role_id` int(11) DEFAULT NULL,
  `class_year` int(11) DEFAULT NULL,
  `class_name` varchar(10) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `chat_color` varchar(7) DEFAULT '#E9ECEF',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `theme` varchar(10) DEFAULT 'light'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_achievements` (
  `user_id` int(11) NOT NULL,
  `achievement_id` int(11) NOT NULL,
  `earned_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_passkeys` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `credential_id` text NOT NULL,
  `public_key` text NOT NULL,
  `signature_count` bigint(20) NOT NULL,
  `user_handle` text NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_permissions` (
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_qualifications` (
  `user_id` int(11) NOT NULL,
  `course_id` int(11) NOT NULL,
  `completion_date` date DEFAULT NULL,
  `status` enum('BESUCHT','ABSOLVIERT') NOT NULL DEFAULT 'BESUCHT',
  `remarks` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ===================================================================
-- PART 2: ADD ALL PRIMARY KEYS, UNIQUE CONSTRAINTS, AND INDEXES
-- ===================================================================

ALTER TABLE `achievements` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `achievement_key` (`achievement_key`);
ALTER TABLE `admin_logs` ADD PRIMARY KEY (`id`);
ALTER TABLE `attachments` ADD PRIMARY KEY (`id`), ADD KEY `idx_attachments_parent` (`parent_type`,`parent_id`);
ALTER TABLE `courses` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`), ADD UNIQUE KEY `abbreviation` (`abbreviation`);
ALTER TABLE `course_attendance` ADD PRIMARY KEY (`user_id`,`course_id`), ADD KEY `course_id` (`course_id`);
ALTER TABLE `events` ADD PRIMARY KEY (`id`), ADD KEY `fk_event_leader` (`leader_user_id`);
ALTER TABLE `event_assignments` ADD PRIMARY KEY (`assignment_id`), ADD UNIQUE KEY `unique_assignment` (`event_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `event_attendance` ADD PRIMARY KEY (`user_id`,`event_id`), ADD KEY `event_id` (`event_id`);
ALTER TABLE `event_chat_messages` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`), ADD KEY `event_chat_messages_ibfk_2` (`user_id`);
ALTER TABLE `event_custom_fields` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`);
ALTER TABLE `event_custom_field_responses` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `field_id` (`field_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `event_skill_requirements` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`), ADD KEY `required_course_id` (`required_course_id`);
ALTER TABLE `event_storage_reservations` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `unique_event_item` (`event_id`,`item_id`), ADD KEY `item_id` (`item_id`);
ALTER TABLE `event_tasks` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`);
ALTER TABLE `event_task_assignments` ADD PRIMARY KEY (`task_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `event_task_kits` ADD PRIMARY KEY (`task_id`,`kit_id`), ADD KEY `kit_id` (`kit_id`);
ALTER TABLE `event_task_storage_items` ADD PRIMARY KEY (`task_id`,`item_id`), ADD KEY `item_id` (`item_id`);
ALTER TABLE `feedback_forms` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `event_id_unique` (`event_id`);
ALTER TABLE `feedback_responses` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `form_user_unique` (`form_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `feedback_submissions` ADD PRIMARY KEY (`id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `files` ADD PRIMARY KEY (`id`), ADD KEY `category_id` (`category_id`);
ALTER TABLE `file_categories` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`);
ALTER TABLE `inventory_kits` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`);
ALTER TABLE `inventory_kit_items` ADD PRIMARY KEY (`kit_id`,`item_id`), ADD KEY `item_id` (`item_id`);
ALTER TABLE `maintenance_log` ADD PRIMARY KEY (`id`), ADD KEY `item_id` (`item_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `meetings` ADD PRIMARY KEY (`id`), ADD KEY `course_id` (`course_id`), ADD KEY `fk_meeting_leader` (`leader_user_id`);
ALTER TABLE `meeting_attendance` ADD PRIMARY KEY (`user_id`,`meeting_id`), ADD KEY `meeting_id` (`meeting_id`);
ALTER TABLE `permissions` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `permission_key_unique` (`permission_key`);
ALTER TABLE `profile_change_requests` ADD PRIMARY KEY (`id`), ADD KEY `user_id` (`user_id`), ADD KEY `status` (`status`), ADD KEY `profile_change_requests_ibfk_2` (`reviewed_by_admin_id`);
ALTER TABLE `roles` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `role_name_unique` (`role_name`);
ALTER TABLE `shared_documents` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `document_name` (`document_name`), ADD UNIQUE KEY `idx_doc_name` (`document_name`);
ALTER TABLE `storage_items` ADD PRIMARY KEY (`id`), ADD KEY `fk_holder_user` (`current_holder_user_id`), ADD KEY `fk_assigned_event` (`assigned_event_id`);
ALTER TABLE `storage_log` ADD PRIMARY KEY (`id`), ADD KEY `item_id` (`item_id`), ADD KEY `user_id` (`user_id`), ADD KEY `fk_log_event` (`event_id`);
ALTER TABLE `users` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `username` (`username`), ADD UNIQUE KEY `email` (`email`), ADD KEY `fk_user_role` (`role_id`);
ALTER TABLE `user_achievements` ADD PRIMARY KEY (`user_id`,`achievement_id`), ADD KEY `achievement_id` (`achievement_id`);
ALTER TABLE `user_passkeys` ADD PRIMARY KEY (`id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `user_permissions` ADD PRIMARY KEY (`user_id`,`permission_id`), ADD KEY `permission_id` (`permission_id`);
ALTER TABLE `user_qualifications` ADD PRIMARY KEY (`user_id`,`course_id`), ADD KEY `course_id` (`course_id`);

-- ===================================================================
-- PART 3: ADD ALL AUTO_INCREMENT SETTINGS
-- ===================================================================

ALTER TABLE `achievements` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `admin_logs` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `attachments` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `courses` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `events` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_assignments` MODIFY `assignment_id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_chat_messages` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_custom_fields` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_custom_field_responses` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_skill_requirements` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_storage_reservations` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_tasks` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `feedback_forms` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `feedback_responses` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `feedback_submissions` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `files` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `file_categories` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `inventory_kits` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `maintenance_log` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `meetings` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `permissions` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `profile_change_requests` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `roles` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `shared_documents` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `storage_items` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `storage_log` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `users` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `user_passkeys` MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

-- ===================================================================
-- PART 4: ADD ALL FOREIGN KEY CONSTRAINTS
-- ===================================================================

ALTER TABLE `course_attendance`
  ADD CONSTRAINT `course_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `course_attendance_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

ALTER TABLE `events`
  ADD CONSTRAINT `fk_event_leader` FOREIGN KEY (`leader_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

ALTER TABLE `event_assignments`
  ADD CONSTRAINT `event_assignments_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_assignments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_attendance`
  ADD CONSTRAINT `event_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_attendance_ibfk_2` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_chat_messages`
  ADD CONSTRAINT `event_chat_messages_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_chat_messages_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_custom_fields`
  ADD CONSTRAINT `event_custom_fields_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_custom_field_responses`
  ADD CONSTRAINT `event_custom_field_responses_ibfk_1` FOREIGN KEY (`field_id`) REFERENCES `event_custom_fields` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_custom_field_responses_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_skill_requirements`
  ADD CONSTRAINT `event_skill_requirements_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_skill_requirements_ibfk_2` FOREIGN KEY (`required_course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_storage_reservations`
  ADD CONSTRAINT `event_storage_reservations_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_storage_reservations_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_tasks`
  ADD CONSTRAINT `event_tasks_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_task_assignments`
  ADD CONSTRAINT `event_task_assignments_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_assignments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_task_kits`
  ADD CONSTRAINT `event_task_kits_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_kits_ibfk_2` FOREIGN KEY (`kit_id`) REFERENCES `inventory_kits` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_task_storage_items`
  ADD CONSTRAINT `event_task_storage_items_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_storage_items_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

ALTER TABLE `feedback_forms`
  ADD CONSTRAINT `feedback_forms_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `feedback_responses`
  ADD CONSTRAINT `feedback_responses_ibfk_1` FOREIGN KEY (`form_id`) REFERENCES `feedback_forms` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `feedback_responses_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `feedback_submissions`
  ADD CONSTRAINT `feedback_submissions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `files`
  ADD CONSTRAINT `files_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `file_categories` (`id`) ON DELETE SET NULL;

ALTER TABLE `inventory_kit_items`
  ADD CONSTRAINT `inventory_kit_items_ibfk_1` FOREIGN KEY (`kit_id`) REFERENCES `inventory_kits` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `inventory_kit_items_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

ALTER TABLE `maintenance_log`
  ADD CONSTRAINT `maintenance_log_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `maintenance_log_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);

ALTER TABLE `meetings`
  ADD CONSTRAINT `fk_meeting_leader` FOREIGN KEY (`leader_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `meetings_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

ALTER TABLE `meeting_attendance`
  ADD CONSTRAINT `meeting_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `meeting_attendance_ibfk_2` FOREIGN KEY (`meeting_id`) REFERENCES `meetings` (`id`) ON DELETE CASCADE;

ALTER TABLE `profile_change_requests`
  ADD CONSTRAINT `profile_change_requests_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `profile_change_requests_ibfk_2` FOREIGN KEY (`reviewed_by_admin_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

ALTER TABLE `storage_items`
  ADD CONSTRAINT `fk_assigned_event` FOREIGN KEY (`assigned_event_id`) REFERENCES `events` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `fk_holder_user` FOREIGN KEY (`current_holder_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

ALTER TABLE `storage_log`
  ADD CONSTRAINT `fk_log_event` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `storage_log_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `storage_log_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `users`
  ADD CONSTRAINT `fk_user_role` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE SET NULL;

ALTER TABLE `user_achievements`
  ADD CONSTRAINT `user_achievements_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_achievements_ibfk_2` FOREIGN KEY (`achievement_id`) REFERENCES `achievements` (`id`) ON DELETE CASCADE;

ALTER TABLE `user_passkeys`
  ADD CONSTRAINT `user_passkeys_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `user_permissions`
  ADD CONSTRAINT `user_permissions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_permissions_ibfk_2` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE;

ALTER TABLE `user_qualifications`
  ADD CONSTRAINT `user_qualifications_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_qualifications_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

COMMIT;
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\db\migration\V2__Add_initial_data.sql
========================================================================

-- Add default roles
INSERT INTO `roles` (`id`, `role_name`) VALUES (1, 'ADMIN'), (3, 'NUTZER');

-- Add all permissions
INSERT INTO `permissions` (`id`, `permission_key`, `description`) VALUES
(1, 'ACCESS_ADMIN_PANEL', 'Globaler Zugriff auf alle Admin-Funktionen. Überschreibt alle anderen Berechtigungen.'),
(2, 'USER_CREATE', 'Kann neue Benutzer anlegen.'),
(3, 'USER_READ', 'Kann Benutzerliste und -details einsehen.'),
(4, 'USER_UPDATE', 'Kann Benutzerprofile und deren Berechtigungen bearbeiten.'),
(5, 'USER_DELETE', 'Kann Benutzer löschen.'),
(6, 'USER_PASSWORD_RESET', 'Kann Passwörter anderer Benutzer zurücksetzen.'),
(7, 'EVENT_CREATE', 'Kann neue Events erstellen.'),
(8, 'EVENT_READ', 'Kann die Event-Verwaltungsliste einsehen.'),
(9, 'EVENT_UPDATE', 'Kann bestehende Events bearbeiten (Details, Personalbedarf, Material).'),
(10, 'EVENT_DELETE', 'Kann Events löschen.'),
(11, 'EVENT_MANAGE_ASSIGNMENTS', 'Kann Benutzer zu Events zuweisen.'),
(12, 'EVENT_MANAGE_TASKS', 'Kann Aufgaben innerhalb eines Events erstellen, bearbeiten und löschen.'),
(13, 'COURSE_CREATE', 'Kann neue Lehrgangs-Vorlagen erstellen.'),
(14, 'COURSE_READ', 'Kann Lehrgangs-Vorlagen und deren Termine einsehen.'),
(15, 'COURSE_UPDATE', 'Kann Lehrgangs-Vorlagen bearbeiten.'),
(16, 'COURSE_DELETE', 'Kann Lehrgangs-Vorlagen löschen.'),
(17, 'STORAGE_CREATE', 'Kann neue Lagerartikel anlegen.'),
(18, 'STORAGE_READ', 'Kann die Lager-Verwaltungsliste einsehen.'),
(19, 'STORAGE_UPDATE', 'Kann Lagerartikel bearbeiten, inkl. Defekt-Status.'),
(20, 'STORAGE_DELETE', 'Kann Lagerartikel löschen.'),
(21, 'KIT_CREATE', 'Kann neue Material-Kits/Koffer erstellen.'),
(22, 'KIT_READ', 'Kann die Kit-Verwaltungsliste einsehen.'),
(23, 'KIT_UPDATE', 'Kann Kits und deren Inhalte bearbeiten.'),
(24, 'KIT_DELETE', 'Kann Kits löschen.'),
(25, 'QUALIFICATION_READ', 'Kann die Qualifikations-Matrix einsehen.'),
(26, 'QUALIFICATION_UPDATE', 'Kann Teilnahme und Qualifikationen in der Matrix bearbeiten.'),
(27, 'FILE_CREATE', 'Kann Dateien hochladen und Kategorien erstellen.'),
(28, 'FILE_READ', 'Kann die Datei-Verwaltungsseite einsehen.'),
(29, 'FILE_DELETE', 'Kann Dateien und Kategorien löschen.'),
(30, 'LOG_READ', 'Kann das Admin-Aktionsprotokoll einsehen.'),
(31, 'REPORT_READ', 'Kann die Berichts- und Analyse-Seite einsehen.'),
(32, 'SYSTEM_READ', 'Kann die Systemstatus-Seite einsehen.'),
(33, 'ACHIEVEMENT_CREATE', 'Kann neue Erfolge und Abzeichen erstellen.'),
(34, 'ACHIEVEMENT_UPDATE', 'Kann bestehende Erfolge und Abzeichen bearbeiten.'),
(35, 'ACHIEVEMENT_DELETE', 'Kann Erfolge und Abzeichen löschen.'),
(36, 'FILE_MANAGE', 'Kann die Datei-Verwaltungsseite einsehen und grundlegende Operationen durchführen.'),
(37, 'FILE_UPDATE', 'Kann den Inhalt von Dateien (z.B. im Markdown-Editor) bearbeiten und neue Versionen hochladen.');

-- Create the default admin user with username 'admin' and password 'password'
-- The password hash is for 'password'
INSERT INTO `users` (`id`, `username`, `password_hash`, `role_id`, `theme`) VALUES
(1, 'admin', '$2a$10$odf1koglTR0zdzyPbDDkzOuw2XSKu19ylygl561RQ336KpABBFccu', 1, 'light');

-- Grant all permissions to the admin user
INSERT INTO `user_permissions` (`user_id`, `permission_id`) SELECT 1, id FROM `permissions`;
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\db\migration\V3__CreateTodoTables.sql
========================================================================

CREATE TABLE todo_categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    display_order INT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE todo_tasks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    category_id INT NOT NULL,
    content TEXT NOT NULL,
    is_completed BOOLEAN NOT NULL DEFAULT FALSE,
    display_order INT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_todo_category
        FOREIGN KEY (category_id)
        REFERENCES todo_categories(id)
        ON DELETE CASCADE
);

CREATE INDEX idx_todo_categories_display_order ON todo_categories(display_order);
CREATE INDEX idx_todo_tasks_display_order ON todo_tasks(display_order);
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\resources\db\migration\V6__Add_storage_item_data.sql
========================================================================

-- This migration script inserts the initial set of storage items into the database.
-- Note that the table structure itself is already defined in V1.

INSERT INTO `storage_items` (`id`, `name`, `location`, `cabinet`, `shelf`, `compartment`, `quantity`, `max_quantity`, `defective_quantity`, `defect_reason`, `weight_kg`, `price_eur`, `image_path`, `status`, `current_holder_user_id`, `assigned_event_id`) VALUES
(4, 'Movingheads', 'Oben', '1', '/', '2', 2, 4, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(5, 'Tri leds', 'Oben', '1', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '1000014818.jpg', 'IN_STORAGE', NULL, NULL),
(6, 'Par 56', 'Oben', '1', '/', '3', 4, 14, 0, NULL, 0.00, 0.00, '1000014819.jpg', 'IN_STORAGE', NULL, NULL),
(7, 'Mischpult (alt)', 'Erdgeschoss', '2', '/', '4', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2714.43.484538135326788297692.jpg', 'IN_STORAGE', NULL, NULL),
(8, 'Strand Lighting', 'Erdgeschoss', '2', '/', '4', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2714.45.122077548250905478222.jpg', 'IN_STORAGE', NULL, NULL),
(10, 'DMX Kabel ', 'Erdgeschoss', '1', '/', '/', 12, 12, 0, '', 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(11, 'Traversen', 'Oben', '1-3', '/', '1', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(12, 'Laser', 'Oben', '1', '/', '3', 2, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(13, 'Led bars', 'Oben', '2', '/', '2', 7, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(14, 'Mikrofonstativ', 'Erdgeschoss ', '2', '/', '4', 6, 6, 0, NULL, 0.00, 0.00, '1000004426.jpg', 'IN_STORAGE', NULL, NULL),
(15, 'Par Scheinwerfer', 'Oben', '2', '/', '3', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(16, 'XLR Kabel (normal)', 'Erdgeschoss', '1', '/', 'Hängend', 19, 19, 0, NULL, 0.00, 0.00, '2025-06-2716.17.57144115011978189604.jpg', 'IN_STORAGE', NULL, NULL),
(17, 'DMX dimmer', 'Oben', '2', '/', '2', 6, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(18, 'Mehrfachstecker', 'Erdgeschoss', '2', '/', 'Hängend', 12, 10, 0, NULL, 0.00, 0.00, '2025-06-2716.20.283964599778401908342.jpg', 'IN_STORAGE', NULL, NULL),
(19, 'Farbfolien', 'Oben', '4', '/', '3', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(20, 'Farbfolienhalter', 'Oben', '4', '/', '2', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(21, 'Plugboxen', 'Oben', '5', '/', '2-4', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(22, 'Große Lampe', 'Oben', '5', '/', '4', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(23, 'Mikrofonklemmen (groß)', 'Erdgeschoss', '2', '/', '2', 10, 10, 0, NULL, 0.00, 0.00, '2025-06-2716.25.505575202287104074157.jpg', 'IN_STORAGE', NULL, NULL),
(24, 'leuchtmittel', 'Oben', '/', '/', '1', 15, 0, 2, '', 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(25, 'Lampenstative', 'Oben', 'ganz hinten', '/', '0', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(26, 'Mikrofonhalterung', 'Erdgeschoss', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '1000004428.jpg', 'IN_STORAGE', NULL, NULL),
(27, 'Mikrofonständer Zubehör ', 'Erdgeschoss', '2', '/', '2', 7, 7, 0, NULL, 0.00, 0.00, '2025-06-2716.43.268863184837397618557.jpg', 'IN_STORAGE', NULL, NULL),
(28, 'XLR 1m', 'Erdgeschoss ', '2', '/', 'Hängend', 14, 14, 0, NULL, 0.00, 0.00, '2025-06-2716.44.217215765873591130197.jpg', 'IN_STORAGE', NULL, NULL),
(29, 'Verlängerungskabel', 'Erdgeschoss', '1', '/', 'Hängend', 17, 17, 0, NULL, 0.00, 0.00, '2025-06-2716.46.3329023597302231662.jpg', 'IN_STORAGE', NULL, NULL),
(30, 'Klinke (groß)', 'Erdgeschoss ', '1', '/', 'Hängend', 7, 7, 0, NULL, 0.00, 0.00, '2025-06-2716.47.474256954529147799815.jpg', 'IN_STORAGE', NULL, NULL),
(31, 'Kat 5e', 'Erdgeschoss', '1', '/', 'Hängend', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2716.48.438613619599782685040.jpg', 'IN_STORAGE', NULL, NULL),
(32, 'Tape (schwarz)', 'Erdgeschoss', '1', '/', 'Hängend', 5, 5, 0, NULL, 0.00, 0.00, '2025-06-2716.50.189037015943349490192.jpg', 'IN_STORAGE', NULL, NULL),
(33, 'Isolierband (mehrfarbig)', 'Erdgeschoss', '1', '/', 'Hängend', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2716.52.326139423796119518903.jpg', 'IN_STORAGE', NULL, NULL),
(34, 'Klettband', 'Erdgeschoss', '2', '/', 'Hängend', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2716.54.436320883725802641087.jpg', 'IN_STORAGE', NULL, NULL),
(35, 'LAN Kabel', 'Erdgeschoss', '2', '/', '1', 24, 24, 0, NULL, 0.00, 0.00, '2025-06-2717.00.06154248686898973087.jpg', 'IN_STORAGE', NULL, NULL),
(36, 'Kameramikrofon', 'Erdgeschoss', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2717.03.512938281413325712878.jpg', 'IN_STORAGE', NULL, NULL),
(37, 'Shotgun Mikrofon', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.06.098569123668927925595.jpg', 'IN_STORAGE', NULL, NULL),
(38, 'Oberflächenmikrofon', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2717.10.391795435121197552263.jpg', 'IN_STORAGE', NULL, NULL),
(39, 'Kaltgeräte Kabel', 'Erdgeschoss ', '2', '/', '2', 77, 77, 0, NULL, 0.00, 0.00, '2025-06-2717.15.074914010989957328333.jpg', 'IN_STORAGE', NULL, NULL),
(40, 'Funkzubehör', 'Erdgeschoss', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.17.043830938027829171798.jpg', 'IN_STORAGE', NULL, NULL),
(41, 'Kaltgeräte Kabel (Daisy Chain)', 'Erdgeschoss', '1', '/', '1', 11, 11, 1, 'Defekte Buchse ', 0.00, 0.00, '2025-06-2717.18.125709401359377594527.jpg', 'IN_STORAGE', NULL, NULL),
(42, 'Kennzeichnungsringe (mehrfarbig)', 'Erdgeschoss ', '2', '/', '2', 7, 8, 0, NULL, 0.00, 0.00, '2025-06-2717.20.11195938865415073150.jpg', 'IN_STORAGE', NULL, NULL),
(43, 'Mikrofonklemmen (klein)', 'Erdgeschoss ', '2', '/', '2', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2717.27.274588107262469783348.jpg', 'IN_STORAGE', NULL, NULL),
(44, 'HDMI Kabel', 'Erdgeschoss ', '2', '/', '1', 10, 10, 0, NULL, 0.00, 0.00, '2025-06-2717.56.305143014867881008801.jpg', 'IN_STORAGE', NULL, NULL),
(45, 'Kabelmikrofon', 'Erdgeschoss', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.58.177946197060559751805.jpg', 'IN_STORAGE', NULL, NULL),
(46, 'Adapter (Klinke - VGA)', 'Erdgeschoss', '2', '/', '2', 1, 1, 1, 'VGA Anschluss fehlen Pole', 0.00, 0.00, '2025-06-2717.59.556036963108161859221.jpg', 'IN_STORAGE', NULL, NULL),
(47, 'Adapterkabel (2 XLR - Klinke (klein))', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(48, 'Adapterkabel (Klinke - RCA)', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(49, 'Adapterkabel (2 Klinke - Klinke (klein))', 'Erdgeschoss ', '2', '/', '1', 3, 3, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(50, 'Adapterkabel (Klinke (klein) - Klinke)', 'Erdgeschoss ', '2', '/', '1', 2, 2, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(51, 'Adapterkabel (XLR - Klinke)', 'Erdgeschoss ', '2', '/', '1', 9, 9, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(52, 'Klinke (klein)', 'Erdgeschoss', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(53, 'Adapter (Klinke (klein) - Chinch)', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.23.499020825943256947204.jpg', 'IN_STORAGE', NULL, NULL),
(54, 'Adapter (Klinke (klein) - Klinke (groß))', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.25.576661925063283895663.jpg', 'IN_STORAGE', NULL, NULL),
(55, 'Adapter (XLR (5-polig) - XLR (3-polig))', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.27.096864481674443203081.jpg', 'IN_STORAGE', NULL, NULL),
(56, 'Adapter (XLR - XLR)', 'Erdgeschoss', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2718.28.148498265326953710617.jpg', 'IN_STORAGE', NULL, NULL),
(57, 'Adapter (Klinke (groß) - Klinke (klein))', 'Erdgeschoss ', '2', '/', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.29.288337895956067779676.jpg', 'IN_STORAGE', NULL, NULL),
(58, 'Adapter (Klinke (klein) - Klinke (groß))', 'Erdgeschoss ', '2', '/', '2', 8, 8, 0, NULL, 0.00, 0.00, '2025-06-2718.31.31210849178064261929.jpg', 'IN_STORAGE', NULL, NULL),
(59, 'Adapter (XLR (3-polig) - XLR (5-polig))', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2718.59.517877817548047227728.jpg', 'IN_STORAGE', NULL, NULL),
(60, 'Adapter (XLR - Chinch)', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.01.268681550318375427445.jpg', 'IN_STORAGE', NULL, NULL),
(61, 'Adapter (Klinke (groß) - 2 Klinke (groß))', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.03.262282293221670794195.jpg', 'IN_STORAGE', NULL, NULL),
(62, 'Adapter (Klinke (groß) - Klinke (klein))', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.04.443477670903409475836.jpg', 'IN_STORAGE', NULL, NULL),
(63, 'Adapter (Dell Strom)', 'Erdgeschoss ', '2', '/', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.09.478882073636558604076.jpg', 'IN_STORAGE', NULL, NULL),
(64, 'BNC Kabel ', 'Erdgeschoss ', '2', '/', '1', 3, 0, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(65, 'Klinke (klein) - 2x RCA (Male)', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(66, 'Doppel RCA', 'Erdgeschoss ', '2', '/', '1', 4, 4, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(67, 'Dreifach RCA', 'Erdgeschoss ', '2', '/', '1', 3, 3, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(68, 'RCA', 'Erdgeschoss ', '2', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(69, 'Nebelmaschine (klein) ', 'Erdgeschoss ', '1', '/', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(70, 'Nebelmaschine (groß)', 'Erdgeschoss ', '1', '/', '0', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(71, 'Boden Nebelmaschine  ', 'Erdgeschoss ', '1', '/', '0', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(72, 'Nebelfluid (divers)', 'Erdgeschoss ', '1', '/', '1', 12, 12, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(73, 'Traversenbolzen', 'Erdgeschoss ', 'Riggingkiste', '/', 'Riggingkiste', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2812.24.214632515314181386114.jpg', 'IN_STORAGE', NULL, NULL);

-- Set auto-increment start value
ALTER TABLE `storage_items` AUTO_INCREMENT = 75;
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\css\style.css
========================================================================

/* =================================================================== */
/*  TECHNIKTEAM DESIGN V3 (Component-Based & Modern)                   */
/* =================================================================== */

/* --- 1. THEME & COLOR PALETTE --- */
:root {
	--primary-color: #007bff;
	--primary-color-hover: #0056b3;
	--primary-color-light: rgba(0, 123, 255, 0.1);
	--bg-color: #f8f9fa;
	--surface-color: #ffffff;
	--text-color: #212529;
	--heading-color: #002B5B; /* Dark, rich blue for headings */
	--text-muted-color: #6c757d;
	--border-color: #dee2e6;
	--success-color: #28a745;
	--danger-color: #dc3545;
	--warning-color: #ffc107;
	--info-color: #0dcaf0;
	--shadow-sm: 0 1px 2px 0 rgb(0 0 0/ 0.05);
	--shadow-md: 0 4px 6px -1px rgb(0 0 0/ 0.1), 0 2px 4px -2px
		rgb(0 0 0/ 0.1);
	--shadow-lg: 0 10px 15px -3px rgb(0 0 0/ 0.1), 0 4px 6px -4px
		rgb(0 0 0/ 0.1);
	--sidebar-width: 260px;
	--header-height: 64px;
	--border-radius: 8px;
	--sidebar-bg: var(--surface-color);
	--sidebar-border: var(--border-color);
	--sidebar-text-color: #343a40;
	--sidebar-text-muted: #6c757d;
	--sidebar-icon-color: #6c757d;
	--sidebar-hover-bg: #e9ecef;
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
	--sidebar-active-text: var(--primary-color);
	--sidebar-active-icon: var(--primary-color);
}

[data-theme="dark"] {
	--primary-color: #58a6ff;
	--primary-color-hover: #80b6ff;
	--primary-color-light: rgba(88, 166, 255, 0.15);
	--bg-color: #0d1117;
	--surface-color: #161b22;
	--text-color: #c9d1d9;
	--heading-color: var(--primary-color);
	/* Vibrant blue for dark mode headings */
	--text-muted-color: #8b949e;
	--border-color: #30363d;
	--success-color: #56d364;
	--danger-color: #f87171;
	--warning-color: #f0b72f;
	--info-color: #67d4ed;
	--sidebar-bg: #161b22;
	--sidebar-border: #30363d;
	--sidebar-text-color: #c9d1d9;
	--sidebar-text-muted: #8b949e;
	--sidebar-icon-color: #8b949e;
	--sidebar-hover-bg: #21262d;
	--sidebar-active-bg: var(--primary-color-light);
	--sidebar-active-border: var(--primary-color);
	--sidebar-active-text: var(--primary-color);
	--sidebar-active-icon: var(--primary-color);
}

/* --- 2. BASE & TYPOGRAPHY --- */
*, *::before, *::after {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

html {
	scroll-behavior: smooth;
}

body {
	font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
		"Helvetica Neue", Arial, sans-serif;
	background-color: var(--bg-color);
	color: var(--text-color);
	line-height: 1.6;
	transition: background-color 0.3s, color 0.3s;
}

h1, h2, h3, h4 {
	color: var(--heading-color);
	line-height: 1.3;
}

h1 {
	font-size: clamp(1.8rem, 5vw, 2.2rem);
	font-weight: 700;
	margin-bottom: 1rem;
}

h2 {
	font-size: clamp(1.2rem, 4vw, 1.5rem);
	margin-bottom: 1.25rem;
	padding-bottom: 0.75rem;
	border-bottom: 1px solid var(--border-color);
	font-weight: 600;
}

h3 {
	font-size: 1.25rem;
	margin-bottom: 1rem;
	font-weight: 600;
}

a {
	color: var(--primary-color);
	text-decoration: none;
	transition: color 0.2s;
}

a:hover {
	text-decoration: underline;
	color: var(--primary-color-hover);
}

.text-success {
	color: var(--success-color) !important;
}

.text-danger {
	color: var(--danger-color) !important;
}

/* --- 3. LAYOUT & CONTAINERS --- */
.main-content-wrapper {
	transition: margin-left 0.3s ease-in-out;
}

.main-content {
	padding: 1.5rem;
	max-width: 1600px;
	margin-left: auto;
	margin-right: auto;
}

.card {
	background: var(--surface-color);
	border-radius: var(--border-radius);
	padding: 1.5rem;
	margin-bottom: 1.5rem;
	box-shadow: var(--shadow-sm);
	border: 1px solid var(--border-color);
	transition: all .3s;
}

.card:hover {
	box-shadow: var(--shadow-md);
}

.card-title {
	border: none;
	padding: 0;
	margin-bottom: 1rem;
}

.dashboard-grid, .responsive-dashboard-grid {
	display: grid;
	grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
	gap: 1.5rem;
}

.feedback-card {
    transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
}


@media (max-width: 767.98px) {
    .responsive-dashboard-grid {
        grid-template-columns: 1fr;
    }
}


/* --- 4. NAVIGATION --- */
.sidebar {
	position: fixed;
	top: 0;
	left: calc(-1 * var(--sidebar-width));
	width: var(--sidebar-width);
	height: 100%;
	background: var(--sidebar-bg);
	border-right: 1px solid var(--sidebar-border);
	z-index: 1010;
	transition: left 0.3s ease-in-out, background-color 0.3s, border-color
		0.3s;
	display: flex;
	flex-direction: column;
}

body.nav-open .sidebar {
	left: 0;
	box-shadow: var(--shadow-md);
}

.sidebar-header {
	display: flex;
	align-items: center;
	gap: 0.75rem;
	padding: 0 1.5rem;
	height: var(--header-height);
	flex-shrink: 0;
}

.sidebar-header .logo {
	font-size: 1.25rem;
	font-weight: 700;
	color: var(--heading-color);
	text-decoration: none;
}

.sidebar-header .logo i {
	color: var(--primary-color);
}

.sidebar-nav {
	list-style: none;
	flex-grow: 1;
	overflow-y: auto;
	padding: 0.5rem 0;
}

.sidebar-nav a {
	display: flex;
	align-items: center;
	gap: 1rem;
	padding: 0.9rem 1.5rem;
	color: var(--sidebar-text-muted);
	font-weight: 500;
	transition: all 0.2s;
	border-left: 4px solid transparent;
	white-space: nowrap;
	text-decoration: none;
}

.sidebar-nav a i.fa-fw {
	width: 20px;
	text-align: center;
	color: var(--sidebar-icon-color);
	transition: color 0.2s;
}

.sidebar-nav a:hover {
	color: var(--text-color);
	background-color: var(--sidebar-hover-bg);
}

.sidebar-nav a:hover i.fa-fw {
	color: var(--primary-color);
}

.sidebar-nav a.active-nav-link {
	color: var(--sidebar-active-text);
	font-weight: 600;
	border-left-color: var(--sidebar-active-border);
	background-color: var(--sidebar-active-bg);
}

.sidebar-nav a.active-nav-link i.fa-fw {
	color: var(--sidebar-active-icon);
}

.sidebar-nav .nav-section-title {
	padding: 1.5rem 1.5rem 0.5rem;
	font-size: 0.8rem;
	font-weight: 600;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	color: var(--text-muted-color);
}

.user-actions {
	padding: 1rem 1.5rem;
	border-top: 1px solid var(--sidebar-border);
	flex-shrink: 0;
}

.user-info {
	font-weight: 500;
	margin-bottom: 1rem;
	font-size: 0.9rem;
	color: var(--text-muted-color);
}

.user-info strong {
	color: var(--text-color);
}

.mobile-header {
	display: flex;
	align-items: center;
	justify-content: space-between;
	height: var(--header-height);
	background-color: var(--surface-color);
	padding: 0 1rem;
	position: sticky;
	top: 0;
	z-index: 1000;
	border-bottom: 1px solid var(--border-color);
}

.mobile-header-right {
    display: flex;
    align-items: center;
    gap: 1rem;
}


.mobile-nav-toggle {
	background: none;
	border: none;
	cursor: pointer;
	padding: 0.5rem;
	z-index: 1020;
}

.mobile-nav-toggle .line {
	width: 25px;
	height: 3px;
	background-color: var(--primary-color);
	margin: 5px 0;
	border-radius: 3px;
	transition: all 0.3s;
}

body.nav-open .mobile-nav-toggle .line-1 {
	transform: rotate(45deg) translate(5px, 6px);
}

body.nav-open .mobile-nav-toggle .line-2 {
	opacity: 0;
}

body.nav-open .mobile-nav-toggle .line-3 {
	transform: rotate(-45deg) translate(5px, -6px);
}

.mobile-logo {
	font-weight: 600;
	font-size: 1.2rem;
	color: var(--heading-color);
	text-decoration: none;
}

.page-overlay {
	display: none;
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: rgba(0, 0, 0, 0.5);
	z-index: 1005;
}

body.nav-open .page-overlay {
	display: block;
}

@media ( min-width : 992px) {
	.mobile-header, .page-overlay {
		display: none !important;
	}
	.sidebar {
		left: 0;
	}
	.main-content-wrapper {
		margin-left: var(--sidebar-width);
	}
	.sidebar .mobile-only {
        display: none !important;
    }
}

@media ( max-width : 991.98px) {
    .sidebar .desktop-only {
        display: none !important;
    }
}

/* --- 5. COMPONENTS --- */

/* Buttons */
.btn {
	display: inline-flex;
	align-items: center;
	justify-content: center;
	gap: 0.5rem;
	padding: 0.6rem 1.2rem;
	background-color: var(--primary-color);
	color: #fff;
	border: 1px solid transparent;
	border-radius: 6px;
	cursor: pointer;
	font-weight: 500;
	transition: all 0.2s;
	text-align: center;
	text-decoration: none;
}

.btn:hover {
	background-color: var(--primary-color-hover);
	color: #fff;
	text-decoration: none;
	transform: translateY(-1px);
}

.btn:disabled {
	background-color: var(--text-muted-color);
	cursor: not-allowed;
	transform: none;
	opacity: 0.65;
}

.btn.btn-danger {
	background-color: var(--danger-color);
}

.btn.btn-danger-outline {
	background-color: transparent;
	border-color: var(--danger-color);
	color: var(--danger-color);
}

.btn.btn-danger-outline:hover {
	background-color: var(--danger-color);
	color: #fff;
}

.btn.btn-success {
	background-color: var(--success-color);
}

.btn.btn-secondary {
	background-color: var(--text-muted-color);
}

.btn-small {
	padding: 0.4rem 0.8rem;
	font-size: 0.875rem;
}

/* Messages & Banners */
.success-message, .error-message, .info-message, .password-reset-alert {
	padding: 1rem;
	margin-bottom: 1.5rem;
	border-radius: var(--border-radius);
	font-weight: 500;
	display: flex;
	align-items: center;
	gap: 0.75rem;
	color: #fff;
}

.success-message {
	background-color: var(--success-color);
}

.error-message {
	background-color: var(--danger-color);
}

.info-message, .password-reset-alert {
	background-color: var(--info-color);
	color: #000;
}

.password-reset-alert strong {
	cursor: pointer;
	text-decoration: underline;
}

/* Toast Notifications */
.toast {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: var(--surface-color);
    color: var(--text-color);
    padding: 1rem 1.5rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
    z-index: 9999;
    transform: translateY(150%);
    transition: transform 0.4s ease-in-out, opacity 0.4s;
    border-left: 5px solid var(--primary-color);
    opacity: 0;
}
.toast.toast-success { border-left-color: var(--success-color); }
.toast.toast-danger { border-left-color: var(--danger-color); }
.toast.toast-info { border-left-color: var(--info-color); }

.toast.show {
    transform: translateY(0);
    opacity: 1;
}


/* Forms & Inputs */
.form-group {
	margin-bottom: 1.25rem;
}

.form-group label {
	display: block;
	margin-bottom: 0.5rem;
	font-weight: 500;
	color: var(--text-muted-color);
}

.form-group input, .form-group select, .form-group textarea {
	width: 100%;
	padding: 0.75rem;
	border: 1px solid var(--border-color);
	border-radius: 6px;
	background-color: var(--surface-color);
	color: var(--text-color);
	font-size: 1rem;
	transition: border-color 0.2s, box-shadow 0.2s;
}

fieldset {
    border: none;
    padding: 0;
    margin: 0;
}

[data-theme="dark"] .form-group textarea,
[data-theme="dark"] #editor {
    color: var(--text-color);
    background-color: var(--surface-color);
}

.form-group input:focus, .form-group select:focus, .form-group textarea:focus
	{
	outline: none;
	border-color: var(--primary-color);
	box-shadow: 0 0 0 3px var(--primary-color-light);
}

.form-group input[type="file"] {
	background-color: var(--bg-color);
}

.password-input-wrapper {
	position: relative;
	display: flex;
	align-items: center;
}

.password-input-wrapper input {
	padding-right: 40px; /* Make space for the icon */
}

.password-toggle-icon {
	position: absolute;
	right: 0;
	top: 0;
	height: 100%;
	width: 40px;
	display: flex;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	color: var(--text-muted-color);
}


.file-size-warning {
	color: var(--danger-color);
	display: none;
	font-size: 0.875rem;
	margin-top: 0.5rem;
}

/* Modals */
.modal-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: rgba(0, 0, 0, 0.6);
	display: none;
	justify-content: center;
	align-items: center;
	z-index: 2000;
}

.modal-overlay.active {
	display: flex;
}

.modal-content {
	background-color: var(--surface-color);
	padding: 2rem;
	border-radius: var(--border-radius);
	width: 90%;
	max-width: 600px;
	max-height: 90vh;
	overflow-y: auto;
	position: relative;
	box-shadow: var(--shadow-lg);
}

.modal-close-btn {
	position: absolute;
	top: 1rem;
	right: 1rem;
	background: none;
	border: none;
	font-size: 1.5rem;
	cursor: pointer;
	color: var(--text-muted-color);
}

.modal-tabs {
	display: flex;
	border-bottom: 1px solid var(--border-color);
	margin-bottom: 1.5rem;
}

.modal-tab-button {
	padding: 0.75rem 1rem;
	border: none;
	background: none;
	cursor: pointer;
	font-size: 1rem;
	font-weight: 500;
	color: var(--text-muted-color);
	border-bottom: 3px solid transparent;
	transition: all 0.2s;
}

.modal-tab-button.active {
	color: var(--primary-color);
	border-bottom-color: var(--primary-color);
}

.modal-tab-content {
	display: none;
}

.modal-tab-content.active {
	display: block;
}

.dynamic-row {
	display: flex;
	gap: 0.5rem;
	align-items: center;
	margin-bottom: 0.5rem;
	flex-wrap: wrap; /* Allow wrapping on small screens */
}

.dynamic-row .form-group {
	flex-grow: 1;
	margin-bottom: 0;
}

.dynamic-row .btn-small {
	flex-shrink: 0;
}

/* --- 6. TABLES & RESPONSIVE LISTS --- */
.table-wrapper {
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	overflow-x: auto;
	background-color: var(--surface-color);
}

.data-table {
	width: 100%;
	border-collapse: collapse;
}

.data-table th, .data-table td {
	padding: 1rem;
	text-align: left;
	border-bottom: 1px solid var(--border-color);
	white-space: nowrap;
	vertical-align: middle;
}

/* FIX for admin requests table */
.data-table pre {
    white-space: pre-wrap;
    word-break: break-all;
    background-color: var(--bg-color);
    padding: 0.5rem;
    border-radius: 4px;
}

.data-table thead th {
	font-size: 0.8rem;
	text-transform: uppercase;
	letter-spacing: 0.05em;
	color: var(--text-muted-color);
	background-color: var(--bg-color);
}

.data-table tbody tr:hover {
	background-color: var(--bg-color);
}

.mobile-card-list {
	display: flex;
	flex-direction: column;
	gap: 1rem;
}

.list-item-card {
	background-color: var(--surface-color);
	border: 1px solid var(--border-color);
	border-radius: var(--border-radius);
	padding: 1rem;
	box-shadow: var(--shadow-sm);
}

.list-item-card .card-title {
	margin-bottom: 0.5rem;
	font-size: 1.1rem;
	border-bottom: none;
	padding-bottom: 0;
}

.card-row {
	display: flex;
	justify-content: space-between;
	align-items: center;
	font-size: 0.9rem;
	padding: 0.4rem 0;
	border-bottom: 1px solid var(--border-color);
}

.card-row:last-of-type {
	border-bottom: none;
}

.card-actions {
	margin-top: 1rem;
	padding-top: 1rem;
	border-top: 1px solid var(--border-color);
	display: flex;
	flex-wrap: wrap;
	gap: 0.5rem;
}

.desktop-table-wrapper {
	display: none;
}

@media ( min-width : 992px) {
	.mobile-card-list {
		display: none !important;
	}
	.desktop-table-wrapper {
		display: block !important;
	}
}

/* --- 7. UTILITY & PAGE-SPECIFIC --- */

/* Login Page */
.login-page-container {
	display: flex;
	align-items: center;
	justify-content: center;
	width: 100%;
	min-height: 100vh;
	padding: 1rem;
	background: var(--bg-color);
}

.login-box {
	width: 100%;
	max-width: 400px;
	padding: 2.5rem;
	background-color: var(--surface-color);
	border-radius: var(--border-radius);
	box-shadow: var(--shadow-md);
}

/* Table Controls */
.table-controls {
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	align-items: center;
	gap: 1rem;
	margin-bottom: 1.5rem;
}

/* Status Badges */
.status-badge {
	padding: 0.25em 0.6em;
	font-size: 0.8rem;
	font-weight: 600;
	border-radius: 20px;
	text-transform: uppercase;
}

.status-ok {
	background-color: var(--success-color);
	color: #fff;
}

.status-warn {
	background-color: var(--warning-color);
	color: #000;
}

.status-danger {
	background-color: var(--danger-color);
	color: #fff;
}

.status-info {
	background-color: var(--text-muted-color);
	color: #fff;
}

/* Details List (for User/Event Details) */
.details-list {
	list-style-type: none;
	padding-left: 0;
}

.details-list li {
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
	display: flex;
	flex-wrap: wrap;
	justify-content: space-between;
	align-items: center;
	gap: 0.5rem;
}

@media (max-width: 576px) {
    .details-list li {
        flex-direction: column;
        align-items: flex-start;
    }
}

.details-list li:last-child {
	border-bottom: none;
}

.details-subtitle {
	font-size: 1.1rem;
	color: var(--text-muted-color);
	margin-bottom: 1.5rem;
}

/* Star Rating (for Feedback Form) */
.star-rating {
	display: flex;
	flex-direction: row-reverse;
	justify-content: flex-end;
	font-size: 2em;
}

.star-rating input {
	display: none;
}

.star-rating label {
	color: #ccc;
	cursor: pointer;
	transition: color 0.2s;
}

.star-rating label:before {
	content: '★';
}

.star-rating input:checked ~ label, .star-rating:not(:checked)>label:hover,
	.star-rating:not(:checked)>label:hover ~ label {
	color: #ffc107;
}

/* File Manager (admin_files.jsp) */
.file-manager-layout {
	display: grid;
	gap: 1.5rem;
	grid-template-columns: 1fr;
}

@media ( min-width : 992px) {
	.file-manager-layout {
		grid-template-columns: 300px 1fr;
	}
}

.category-list {
	list-style: none;
	padding: 0;
}

.category-list li {
	padding: 0.75rem;
	cursor: pointer;
	border-radius: 6px;
	transition: background-color 0.2s;
	display: flex;
	align-items: center;
	gap: 0.75rem;
}

.category-list li.active {
	background-color: var(--primary-color-light);
	font-weight: 600;
	color: var(--primary-color);
}

.category-list li:hover:not(.active) {
	background-color: var(--bg-color);
}

.file-list {
	list-style: none;
	padding: 0;
}

.file-list li {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 0.75rem 0;
	border-bottom: 1px solid var(--border-color);
}

.file-list li:last-child {
	border-bottom: none;
}

.file-info {
	flex-grow: 1;
}

.file-info .file-meta {
	display: block;
	font-size: 0.8rem;
	color: var(--text-muted-color);
}

.category-actions-grid {
	display: grid;
	grid-template-columns: 1fr;
	gap: 1.5rem;
}

@media ( min-width : 768px) {
	.category-actions-grid {
		grid-template-columns: 1fr 1fr;
	}
}

/* QR Action Page */
.qr-action-body {
	display: flex;
	justify-content: center;
	align-items: center;
	min-height: 100vh;
	background-color: var(--bg-color);
}

.qr-action-container {
	text-align: center;
	width: 90%;
	max-width: 400px;
}

.qr-action-item-name {
	font-size: 1.5rem;
	font-weight: bold;
	margin-bottom: 2rem;
}

.qr-action-buttons {
	display: grid;
	grid-template-columns: 1fr;
	gap: 1rem;
}

.qr-action-btn {
	font-size: 1.2rem;
	padding: 1.5rem;
}

/* Lightbox */
.lightbox-overlay {
	display: none;
	position: fixed;
	z-index: 3000;
	padding: 1rem;
	justify-content: center;
	align-items: center;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
	overflow: auto;
	background-color: rgba(0, 0, 0, 0.8);
}

.lightbox-content {
	margin: auto;
	display: block;
	width: auto;
	height: auto;
	max-width: 90vw;
	max-height: 90vh;
}

.lightbox-close {
	position: absolute;
	top: 15px;
	right: 35px;
	color: #f1f1f1;
	font-size: 40px;
	font-weight: bold;
	transition: 0.3s;
}

.lightbox-close:hover, .lightbox-close:focus {
	color: #bbb;
	text-decoration: none;
	cursor: pointer;
}

/* Matrix Table */
.data-table .sticky-header {
	position: sticky;
	top: 0;
	z-index: 10;
}

.data-table .sticky-col {
	position: sticky;
	left: 0;
	background-color: var(--surface-color);
	z-index: 5;
}

.data-table .qual-cell[data-attended="true"] {
	color: var(--success-color);
}

.horizontal-scroll-hint {
    display: none;
    text-align: center;
    padding: 0.5rem;
    background-color: var(--warning-color);
    color: #000;
    font-weight: 500;
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
}

@media (max-width: 768px) {
    .horizontal-scroll-hint {
        display: block;
    }
}

/* Progress Bars (System Page) */
.progress-bar-container {
	width: 100%;
	background-color: var(--border-color);
	border-radius: 8px;
	overflow: hidden;
	height: 25px;
}

.progress-bar {
	height: 100%;
	background-color: var(--primary-color);
	transition: width 0.5s ease-in-out;
}

.progress-text {
	text-align: center;
	font-weight: 500;
	margin-top: 0.5rem;
}

/* NEW: Storage Page Redesign Styles */
.item-name-cell {
	display: flex;
	align-items: center;
	gap: 0.75rem;
}

.camera-btn {
	background: transparent;
	border: 1px solid var(--border-color);
	color: var(--text-muted-color);
	padding: 0.2rem 0.5rem;
	line-height: 1;
	border-radius: 4px;
}

.camera-btn:hover {
	background: var(--bg-color);
	color: var(--primary-color);
	border-color: var(--primary-color);
}

.inventory-details, .item-status-details {
	display: block;
	font-size: 0.85rem;
	color: var(--text-muted-color);
}

.kit-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    cursor: pointer;
    flex-wrap: wrap; /* Allow wrapping on mobile */
    gap: 1rem;
}

/* Custom Calendar List (Mobile) */
.termin-list {
    list-style: none;
    padding: 0;
}
.termin-item-link {
    text-decoration: none;
    color: inherit;
    display: block;
}
.termin-item {
    display: flex;
    align-items: center;
    padding: 1rem;
    background-color: var(--surface-color);
    border-bottom: 1px solid var(--border-color);
    transition: background-color 0.2s;
}
.termin-item:hover {
    background-color: var(--bg-color);
}
.termin-list li:first-child {
    border-top: 1px solid var(--border-color);
}
.termin-month-header {
    margin-top: 2rem;
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-muted-color);
    border: none;
    padding: 0;
}
.termin-date {
    flex-shrink: 0;
    text-align: center;
    margin-right: 1.5rem;
    width: 60px;
}
.termin-date-day {
    font-size: 1.8rem;
    font-weight: 600;
    display: block;
    line-height: 1;
    color: var(--primary-color);
}
.termin-date-month {
    font-size: 0.9rem;
    text-transform: uppercase;
    font-weight: 500;
    display: block;
    color: var(--text-muted-color);
}
.termin-details {
    flex-grow: 1;
}
.termin-title {
    font-weight: 600;
    display: block;
    margin-bottom: 0.25rem;
}
.termin-type-event {
    background-color: var(--danger-color);
    color: white;
}
.termin-type-lehrgang {
    background-color: var(--primary-color);
    color: white;
}
.termin-arrow {
    color: var(--text-muted-color);
    margin-left: 1rem;
}

.mobile-list-view { display: block; }
.desktop-calendar-view { display: none; }

@media (min-width: 992px) {
    .mobile-list-view { display: none; }
    .desktop-calendar-view { display: block; }
}


/* --- 8. ERROR PAGES --- */
.error-page-container {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	text-align: center;
	min-height: 70vh;
	padding: 2rem;
}

.error-code {
	font-size: 5rem;
	font-weight: 800;
	line-height: 1;
	margin: 0;
	color: var(--text-muted-color);
}

.error-page-container h2 {
	font-size: 1.75rem;
	border: none;
	margin: 0 0 1.5rem 0;
}

.error-message-text {
	max-width: 600px;
	font-size: 1.1rem;
	line-height: 1.6;
	margin-bottom: 2rem;
}

/* --- 9. KEYFRAME ANIMATIONS --- */
@keyframes blink { 50% {
	background-color: transparent;
}

}

/* =================================================================== */
/*  10. CHAT INTERFACE (Combined & Final)                              */
/* =================================================================== */
.chat-message-container {
	display: flex;
	align-items: center;
	margin-bottom: 0.75rem;
	position: relative;
	max-width: 90%; /* Prevent bubbles from taking the full width */
	align-self: flex-start; /* Default alignment for others' messages */
}

.chat-message-container.current-user {
	align-self: flex-end;
}

.chat-bubble {
	padding: 0.6rem 0.9rem;
	border-radius: 18px;
	word-wrap: break-word;
	border: 1px solid transparent;
}

.chat-bubble.current-user-bubble {
	background-color: var(--primary-color) !important;
	color: #fff !important;
	border-color: var(--primary-color) !important;
}

.chat-username {
	display: block;
	font-size: 0.8rem;
	font-weight: 700;
	margin-bottom: 0.2rem;
}

.chat-text {
	display: block;
	font-size: 1rem;
	line-height: 1.4;
}

.chat-timestamp {
	display: block;
	font-size: 0.75rem;
	margin-top: 0.3rem;
	text-align: right;
}

.chat-edited-marker {
	font-size: 0.7em;
	font-style: italic;
	color: inherit;
}

.chat-options {
	opacity: 0;
	transition: opacity 0.2s;
	display: flex;
	gap: 0.25rem;
	background-color: var(--surface-color);
	padding: 0.25rem;
	border-radius: 20px;
	box-shadow: var(--shadow-md);
	margin: 0 0.5rem;
}

.chat-message-container:hover .chat-options {
	opacity: 1;
}

.chat-message-container {
	flex-direction: row;
}

.chat-message-container.current-user {
	flex-direction: row-reverse;
}

.chat-option-btn {
	background: none;
	border: none;
	cursor: pointer;
	color: var(--text-muted-color);
	width: 28px;
	height: 28px;
	border-radius: 50%;
	display: flex;
	align-items: center;
	justify-content: center;
}

.chat-option-btn:hover {
	background-color: var(--bg-color);
	color: var(--text-color);
}

.chat-edit-input {
	width: 100%;
	padding: 0.2rem 0.4rem;
	border: 1px solid var(--primary-color);
	border-radius: 4px;
	background: var(--surface-color);
	color: var(--text-color);
	font-family: inherit;
	font-size: 1rem;
}

.chat-bubble.deleted {
	font-style: italic;
	opacity: 0.7;
}

.chat-deleted-info {
	font-size: 0.9em;
}

#chat-box {
	display: flex;
	flex-direction: column;
}

/* =================================================================== */
/*  11. SIDEBAR CONTROLS & EDITOR STYLES                               */
/* =================================================================== */
.sidebar-controls {
	display: flex;
	justify-content: space-between;
	align-items: center;
	gap: 1rem;
	margin-bottom: 1rem;
}

.sidebar-controls .btn {
	flex-grow: 1;
}

/* Theme & Mode Switcher Container Styles */
.theme-switcher, .mode-switcher {
	display: flex;
	align-items: center;
	gap: 0.5rem;
	color: var(--text-muted-color);
}

/* Generic Toggle Switch Component */
.toggle-switch {
	position: relative;
	display: inline-block;
	width: 44px;
	height: 24px;
}

.toggle-switch input {
	opacity: 0;
	width: 0;
	height: 0;
}

.toggle-switch .slider {
	position: absolute;
	cursor: pointer;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background-color: #ccc;
	transition: .4s;
	border-radius: 24px;
}

.toggle-switch .slider:before {
	position: absolute;
	content: "";
	height: 18px;
	width: 18px;
	left: 3px;
	bottom: 3px;
	background-color: white;
	transition: .4s;
	border-radius: 50%;
}

.toggle-switch input:checked + .slider {
	background-color: var(--primary-color);
}

.toggle-switch input:checked + .slider:before {
	transform: translateX(20px);
}


/* Editor Specific Styles */
#editor-page-wrapper {
    /* Make the wrapper take up all available vertical space */
    height: calc(100vh - var(--header-height)); /* Account for mobile header */
    display: flex;
    flex-direction: column;
}

@media (min-width: 992px) {
	#editor-page-wrapper {
		/* On desktop, the main header is gone, so just 100vh */
		height: 100vh;
	}
}

#editor-page-wrapper .main-content {
    flex-grow: 1; /* Allow main-content to fill remaining height */
    padding: 1rem; /* Consistent padding on all sides */
    max-width: none; /* Remove max-width constraint for full flexibility */
    margin: 0; /* Remove auto margins to allow full width */
    display: flex;
    flex-direction: column;
    min-height: 0; /* Important for flex container to properly shrink children */
}

#editor-page-container {
    display: flex;
    flex-direction: column;
    flex-grow: 1; /* Make it fill the remaining space */
    min-height: 0; /* Crucial for nested flex items */
}

.editor-header {
	flex-shrink: 0;
	margin-bottom: 1rem;
}
.editor-header h1 {
	margin-bottom: 0;
    font-size: 1.5rem;
}
.editor-controls {
	display: flex;
	align-items: center;
	gap: 1rem;
	flex-wrap: wrap;
}
.editor-container { /* This is the flex container for editor/preview panes */
	display: flex;
	flex-direction: column; /* Stack vertically on mobile */
	gap: 1.5rem; /* Space between panes */
    flex-grow: 1; /* Allow this container to fill available height */
    min-height: 0; /* Crucial for flex item inside a flex column */
	padding: 1.5rem; /* Padding *inside* the card, around the panes */
    margin: 0; /* Remove external margins */
    border: 1px solid var(--border-color);
    box-shadow: var(--shadow-sm);
    background: var(--surface-color);
    border-radius: var(--border-radius);
}

#editor, #markdown-preview {
	flex-grow: 1; /* Allow the element to grow and fill the flex container */
	width: 100%; /* Ensure it takes full width in mobile stack */
	border: none; /* Border is now on .editor-container */
	padding: 0; /* Padding is now on .editor-container */
	background: transparent; /* Background is now on .editor-container */
    overflow-y: auto; /* Internal scrolling within each pane */
    
    /* Unified typography for WYSIWYG feel */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
	font-size: 1rem;
	line-height: 1.6;
    color: var(--text-color);
}

#editor {
	resize: none; /* Disable manual resizing */
}

@media (min-width: 992px) {
	.editor-container {
		flex-direction: row; /* Desktop: side-by-side */
	}
	#editor, #markdown-preview {
		flex-basis: 50%; /* Distribute space evenly */
	}
}


/* =================================================================== */
/*  12. MARKDOWN STYLES                                                */
/* =================================================================== */
.markdown-content {
    overflow-wrap: break-word;
    word-wrap: break-word; /* legacy */
}

.markdown-content h1, .markdown-content h2, .markdown-content h3,
.markdown-content h4, .markdown-content h5, .markdown-content h6 {
    margin-top: 1.5rem;
    margin-bottom: 1rem;
    font-weight: 600;
    border: none;
    padding: 0;
}
.markdown-content p {
    margin-bottom: 1rem;
}
.markdown-content ul, .markdown-content ol {
    padding-left: 2rem;
    margin-bottom: 1rem;
}
.markdown-content blockquote {
    padding: 0.5rem 1rem;
    margin: 0 0 1rem;
    font-size: 1rem;
    border-left: 0.25rem solid var(--border-color);
    background-color: var(--bg-color);
    color: var(--text-muted-color);
}
.markdown-content blockquote > :first-child {
    margin-top: 0;
}
.markdown-content blockquote > :last-child {
    margin-bottom: 0;
}
.markdown-content code {
    padding: .2em .4em;
    margin: 0;
    font-size: 85%;
    background-color: var(--primary-color-light);
    border-radius: 6px;
    font-family: monospace;
}
.markdown-content pre {
    padding: 1rem;
    overflow: auto;
    font-size: 85%;
    line-height: 1.45;
    background-color: var(--bg-color);
    border-radius: 6px;
    margin-bottom: 1rem;
}
.markdown-content pre code {
    padding: 0;
    margin: 0;
    font-size: 100%;
    background-color: transparent;
    border-radius: 0;
}
.markdown-content table {
    width: 100%;
    margin-bottom: 1rem;
    border-collapse: collapse;
    display: block;
    overflow-x: auto;
}
.markdown-content th, .markdown-content td {
    padding: 0.75rem;
    border: 1px solid var(--border-color);
}
.markdown-content thead {
    background-color: var(--bg-color);
}
.markdown-content img {
    max-width: 100%;
    height: auto;
}

/* =================================================================== */
/*  13. PRINT STYLES                                                   */
/* =================================================================== */
@media print {
	.sidebar, .mobile-header, .no-print {
		display: none !important;
	}
	.main-content-wrapper, .main-content {
		margin-left: 0 !important;
		padding: 0 !important;
	}
	body {
		background-color: #fff;
		color: #000;
	}
	.card {
		box-shadow: none;
		border: 1px solid #ccc;
		page-break-inside: avoid;
	}
	a {
		text-decoration: none;
		color: #000;
	}
	h1, h2, h3 {
		color: #000;
	}
}

/* =================================================================== */
/*  14. CUSTOM CALENDAR STYLES (NEW)                                   */
/* =================================================================== */
.calendar-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
}
.calendar-grid {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    border-top: 1px solid var(--border-color);
    border-left: 1px solid var(--border-color);
}
.calendar-header, .calendar-day {
    border-right: 1px solid var(--border-color);
    border-bottom: 1px solid var(--border-color);
    padding: 0.5rem;
}
.calendar-header {
    text-align: center;
    font-weight: 600;
    background-color: var(--bg-color);
}
.calendar-day {
    min-height: 120px;
    position: relative;
}
.calendar-day.other-month .day-number {
    color: var(--text-muted-color);
    opacity: 0.5;
}
.calendar-day.today .day-number {
    background-color: var(--primary-color);
    color: white;
    border-radius: 50%;
    width: 28px;
    height: 28px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}
.day-number {
    font-size: 0.9rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
}
.calendar-event, .calendar-meeting {
    display: block;
    font-size: 0.8rem;
    padding: 0.3rem 0.6rem;
    margin-bottom: 0.3rem;
    border-radius: 4px;
    color: #fff;
    text-decoration: none;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    transition: opacity 0.2s;
}
.calendar-event { background-color: var(--danger-color); }
.calendar-meeting { background-color: var(--primary-color); }
.calendar-event:hover, .calendar-meeting:hover {
    opacity: 0.8;
    color: #fff;
}
.calendar-week-grid {
    display: flex;
    border-top: 1px solid var(--border-color);
    border-left: 1px solid var(--border-color);
}
.calendar-week-day {
    flex: 1;
    border-right: 1px solid var(--border-color);
}
.calendar-week-day .events-container {
    padding: 0.5rem;
    min-height: 60vh;
}
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\main.js
========================================================================

/**
 * Main JavaScript file for the TechnikTeam application.
 * This file is included on every page and handles global user interface logic.
 */
document.addEventListener('DOMContentLoaded', () => {

	const contextPath = document.body.dataset.contextPath || '';
	const currentPage = document.body.dataset.page || '';

	// --- GLOBAL PASSWORD VISIBILITY TOGGLE ---
	document.body.addEventListener('click', (event) => {
		const toggle = event.target.closest('.password-toggle-icon');
		if (toggle) {
			const wrapper = toggle.closest('.password-input-wrapper');
			const input = wrapper.querySelector('input[type="password"], input[type="text"]');
			const icon = toggle.querySelector('i');
			if (input) {
				const isPassword = input.getAttribute('type') === 'password';
				input.setAttribute('type', isPassword ? 'text' : 'password');
				icon.classList.toggle('fa-eye', !isPassword);
				icon.classList.toggle('fa-eye-slash', isPassword);
			}
		}
	});

	// --- MOBILE NAVIGATION ---
	const navToggle = document.querySelector('.mobile-nav-toggle');
	const pageOverlay = document.querySelector('.page-overlay');
	if (navToggle) {
		navToggle.addEventListener('click', (event) => {
			event.stopPropagation();
			document.body.classList.toggle('nav-open');
		});
	}
	if (pageOverlay) {
		pageOverlay.addEventListener('click', () => {
			document.body.classList.remove('nav-open');
		});
	}

	// --- ACTIVE NAV LINK HIGHLIGHTING ---
	const currentPath = window.location.pathname;
	document.querySelectorAll('.sidebar-nav a').forEach(link => {
		const linkPath = link.getAttribute('href');
		if (linkPath === currentPath || (currentPath.startsWith(linkPath) && linkPath !== `${contextPath}/` && linkPath !== `${contextPath}` && currentPath.charAt(linkPath.length) === '/')) {
			link.classList.add('active-nav-link');
		}
	});

	// --- THEME SWITCHER (SYNCED) ---
	const themeSwitches = document.querySelectorAll('.theme-switcher input[type="checkbox"]');
	const currentTheme = document.documentElement.dataset.theme || localStorage.getItem('theme') || 'light';
	document.documentElement.setAttribute('data-theme', currentTheme);

	const updateSwitches = (isDark) => {
		themeSwitches.forEach(sw => {
			sw.checked = isDark;
		});
	};

	updateSwitches(currentTheme === 'dark');

	themeSwitches.forEach(sw => {
		sw.addEventListener('change', (event) => {
			const newTheme = event.target.checked ? 'dark' : 'light';
			document.documentElement.setAttribute('data-theme', newTheme);
			localStorage.setItem('theme', newTheme);
			updateSwitches(event.target.checked);

			const csrfToken = document.body.dataset.csrfToken;
			const formData = new URLSearchParams();
			formData.append('theme', newTheme);
			if (csrfToken) {
				formData.append('csrfToken', csrfToken);
			}
			fetch(`${contextPath}/api/user/preferences`, {
				method: 'POST',
				body: formData
			}).catch(err => console.error("Failed to sync theme with server:", err));
		});
	});

	// --- PERSISTENT SIDEBAR SCROLL POSITION ---
	const sidebarNav = document.querySelector('.sidebar-nav');
	const scrollPositionKey = 'sidebarScrollPosition';

	if (sidebarNav) {
		const savedPosition = sessionStorage.getItem(scrollPositionKey);
		if (savedPosition) {
			sidebarNav.scrollTop = parseInt(savedPosition, 10);
		}
		window.addEventListener('beforeunload', () => {
			sessionStorage.setItem(scrollPositionKey, sidebarNav.scrollTop);
		});
	}

	// --- GLOBAL CONFIRMATION MODAL ---
	const confirmationModalElement = document.createElement('div');
	confirmationModalElement.className = 'modal-overlay';
	confirmationModalElement.id = 'confirmation-modal';
	confirmationModalElement.innerHTML = `
        <div class="modal-content" style="max-width: 450px;">
            <h3 id="confirmation-title">Bestätigung erforderlich</h3>
            <p id="confirmation-message" style="margin: 1.5rem 0; font-size: 1.1rem;"></p>
            <div style="display: flex; justify-content: flex-end; gap: 1rem;">
                <button id="confirmation-btn-cancel" class="btn" style="background-color: var(--text-muted-color);">Abbrechen</button>
                <button id="confirmation-btn-confirm" class="btn btn-danger">Bestätigen</button>
            </div>
        </div>`;
	document.body.appendChild(confirmationModalElement);

	const messageElement = document.getElementById('confirmation-message');
	const confirmBtn = document.getElementById('confirmation-btn-confirm');
	const cancelBtn = document.getElementById('confirmation-btn-cancel');

	let onConfirmCallback = null;

	window.showConfirmationModal = (message, onConfirm) => {
		messageElement.textContent = message;
		onConfirmCallback = onConfirm;
		confirmationModalElement.classList.add('active');
	};

	const closeConfirmModal = () => {
		confirmationModalElement.classList.remove('active');
		onConfirmCallback = null;
	};

	confirmBtn.addEventListener('click', () => {
		if (typeof onConfirmCallback === 'function') onConfirmCallback();
		closeConfirmModal();
	});

	cancelBtn.addEventListener('click', closeConfirmModal);
	confirmationModalElement.addEventListener('click', (e) => {
		if (e.target === confirmationModalElement) closeConfirmModal();
	});

	const logoutLink = document.getElementById('logout-link');
	if (logoutLink) {
		logoutLink.addEventListener('click', (event) => {
			event.preventDefault();
			showConfirmationModal(
				'Möchten Sie sich wirklich ausloggen?',
				() => { window.location.href = logoutLink.href; }
			);
		});
	}

	// --- GLOBAL EVENT DELEGATION FOR MODALS & CONFIRMATIONS ---
	document.body.addEventListener('click', (event) => {
		const modalOpenTrigger = event.target.closest('[data-modal-target]');
		if (modalOpenTrigger) {
			event.preventDefault();
			const modalId = modalOpenTrigger.dataset.modalTarget;
			const modal = document.getElementById(modalId);
			if (modal) {
				modal.classList.add('active');
			}
		}

		const modalCloseTrigger = event.target.closest('[data-modal-close]');
		if (modalCloseTrigger) {
			event.preventDefault();
			const modal = modalCloseTrigger.closest('.modal-overlay');
			if (modal) {
				modal.classList.remove('active');
			}
		}
	});

	document.body.addEventListener('submit', (event) => {
		const form = event.target;
		if (form.matches('.js-confirm-form')) {
			event.preventDefault();
			const message = form.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => form.submit());
		}
	});

	// --- GLOBAL TOAST NOTIFICATIONS ---
	window.showToast = (message, type = 'success') => {
		const toast = document.createElement('div');
		toast.className = `toast toast-${type}`;
		toast.innerHTML = `<p>${message}</p>`;
		document.body.appendChild(toast);
		setTimeout(() => { toast.classList.add('show'); }, 100);
		setTimeout(() => {
			toast.classList.remove('show');
			setTimeout(() => { toast.remove(); }, 500);
		}, 5000);
	};

	// --- SERVER-SENT EVENTS (SSE) NOTIFICATIONS & UI UPDATES ---
	if (document.body.dataset.isLoggedIn === 'true' && window.EventSource && currentPage !== 'editor') {
		const eventSource = new EventSource(`${contextPath}/notifications`);
		eventSource.onopen = () => console.log("SSE connection established.");
		eventSource.onmessage = (event) => {
			try {
				const data = JSON.parse(event.data);
				if (data.type === 'ui_update') {
					handleUIUpdate(data.payload);
				} else if (data.type === 'logout_notification') {
					showToast(data.payload.message, 'info');
					setTimeout(() => { window.location.href = `${contextPath}/logout`; }, 4000);
				} else {
					showBrowserNotification(data.payload);
				}
			} catch (e) {
				showBrowserNotification({ message: event.data });
			}
		};
		eventSource.onerror = (err) => {
			console.error("SSE connection error.", err);
			eventSource.close();
		};
	}

	const feedbackStatusOrder = { 'NEW': 0, 'VIEWED': 1, 'PLANNED': 2, 'COMPLETED': 3, 'REJECTED': 4 };

	// --- UI UPDATE HANDLER (COMPLETE & UNABBREVIATED) ---
	function handleUIUpdate(payload) {
		console.log("Handling UI update:", payload.updateType, payload.data);
		const getStatusBadgeClass = (status, prefix = 'status-') => {
			const classMap = {
				'LAUFEND': 'warn', 'ABGESCHLOSSEN': 'info', 'ABGESAGT': 'info',
				'GEPLANT': 'ok', 'KOMPLETT': 'ok',
				'NEW': 'info', 'VIEWED': 'info', 'PLANNED': 'warn',
				'COMPLETED': 'ok', 'REJECTED': 'danger'
			};
			return prefix + (classMap[status] || 'info');
		};

		switch (payload.updateType) {
			case 'user_updated':
				const user = payload.data;
				document.querySelectorAll(`[data-user-id="${user.id}"]`).forEach(el => {
					const usernameEl = el.querySelector('[data-field="username"]');
					const roleNameEl = el.querySelector('[data-field="roleName"]');
					if (usernameEl) usernameEl.textContent = user.username;
					if (roleNameEl) roleNameEl.textContent = user.roleName;
				});
				break;
			case 'user_deleted':
				document.querySelectorAll(`[data-user-id="${payload.data.userId}"]`).forEach(el => {
					el.style.transition = 'opacity 0.5s';
					el.style.opacity = '0';
					setTimeout(() => el.remove(), 500);
				});
				break;
			case 'event_status_updated':
				const { eventId, newStatus } = payload.data;
				document.querySelectorAll(`[data-event-id="${eventId}"]`).forEach(element => {
					const badge = element.querySelector('.status-badge');
					if (badge) {
						badge.textContent = newStatus;
						badge.className = `status-badge ${getStatusBadgeClass(newStatus)}`;
					}
				});
				break;
			case 'feedback_status_updated':
				const { submissionId, newStatus: newFeedbackStatus } = payload.data;
				const card = document.querySelector(`.feedback-card[data-submission-id="${submissionId}"]`);
				if (card) {
					// 1. Update the data attribute and badge
					card.dataset.status = newFeedbackStatus;
					const badge = card.querySelector('.status-badge');
					if (badge) {
						badge.textContent = newFeedbackStatus;
						badge.className = `status-badge ${getStatusBadgeClass(newFeedbackStatus)}`;
					}

					// 2. Re-sort the list
					const container = card.parentElement;
					const allCards = Array.from(container.querySelectorAll('.feedback-card'));

					allCards.sort((a, b) => {
						const statusA = feedbackStatusOrder[a.dataset.status] ?? 99;
						const statusB = feedbackStatusOrder[b.dataset.status] ?? 99;
						return statusA - statusB;
					});

					// 3. Re-append sorted cards
					allCards.forEach(c => container.appendChild(c));
				}
				break;
			case 'feedback_deleted':
				const cardToDelete = document.querySelector(`[data-submission-id="${payload.data.submissionId}"]`);
				if (cardToDelete) {
					cardToDelete.style.transition = 'opacity 0.5s';
					cardToDelete.style.opacity = '0';
					setTimeout(() => cardToDelete.remove(), 500);
				}
				break;
		}
	}

	// --- BROWSER NOTIFICATION HANDLER (COMPLETE & UNABBREVIATED) ---
	function showBrowserNotification(payload) {
		const message = payload.message || 'Neue Benachrichtigung';
		const url = payload.url;

		if (!("Notification" in window)) {
			console.warn("This browser does not support desktop notifications.");
			return;
		}

		const showNotification = () => {
			const notification = new Notification("Technik Team Update", {
				body: message,
				icon: `${contextPath}/images/favicon.ico`
			});

			if (url) {
				notification.onclick = (event) => {
					event.preventDefault();
					window.open(contextPath + url, '_blank');
					notification.close();
				};
			}
		};

		if (Notification.permission === "granted") {
			showNotification();
		} else if (Notification.permission !== "denied") {
			Notification.requestPermission().then((permission) => {
				if (permission === "granted") {
					showNotification();
				}
			});
		}
	}

	// --- GLOBAL MARKDOWN RENDERER ---
	window.renderMarkdown = (element) => {
		if (!element || typeof marked === 'undefined') return;
		const sanitizedHtml = marked.parse(element.textContent || '', { sanitize: true });
		element.innerHTML = sanitizedHtml;
	};

	document.querySelectorAll('.markdown-content').forEach(window.renderMarkdown);
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_achievements.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const modal = document.getElementById('achievement-modal');
	if (!modal) return;

	const form = document.getElementById('achievement-modal-form');
	const title = document.getElementById('achievement-modal-title');
	const actionInput = document.getElementById('achievement-modal-action');
	const idInput = document.getElementById('achievement-modal-id');
	const nameInput = document.getElementById('name-modal');
	const iconInput = document.getElementById('icon-modal');
	const descInput = document.getElementById('description-modal');

	// --- Key Builder Elements for Creating New Achievements ---
	const keyBuilderGroup = document.getElementById('key-builder-group');
	const keyTypeSelect = document.getElementById('key-type-select');
	const keySubtypeGroups = document.querySelectorAll('.key-subtype-group');
	const keyNumberGroup = document.getElementById('key-number-group');
	const keyValueInput = document.getElementById('key-value-input');
	const keyCourseGroup = document.getElementById('key-course-group');
	const keyCourseSelect = document.getElementById('key-course-select');
	const keyPreview = document.getElementById('generated-key-preview');
	const hiddenKeyInput = document.getElementById('achievement-key-hidden');

	/**
	 * Dynamically builds the programmatic key for the achievement based on user selections.
	 * This ensures a consistent key format.
	 */
	const updateKey = () => {
		const type = keyTypeSelect.value;
		let generatedKey = '';

		// Hide all subtype groups initially for a clean slate
		keySubtypeGroups.forEach(group => group.style.display = 'none');

		if (type === 'EVENT_PARTICIPANT' || type === 'EVENT_LEADER') {
			keyNumberGroup.style.display = 'block';
			const value = keyValueInput.value || '1';
			generatedKey = `${type}_${value}`;
		} else if (type === 'QUALIFICATION') {
			keyCourseGroup.style.display = 'block';
			const value = keyCourseSelect.value;
			if (value) {
				generatedKey = `${type}_${value}`;
			}
		}

		keyPreview.textContent = generatedKey || '-- Bitte eine Art wählen --';
		hiddenKeyInput.value = generatedKey;
	};

	if (keyTypeSelect) keyTypeSelect.addEventListener('change', updateKey);
	if (keyValueInput) keyValueInput.addEventListener('input', updateKey);
	if (keyCourseSelect) keyCourseSelect.addEventListener('change', updateKey);

	// --- Event Listeners for Buttons ---
	document.getElementById('new-achievement-btn').addEventListener('click', () => {
		form.reset();
		title.textContent = 'Neuen Erfolg anlegen';
		actionInput.value = 'create';
		idInput.value = '';
		keyBuilderGroup.style.display = 'block'; // Show key builder for new achievements
		updateKey(); // Initialize/reset the key builder state
	});

	document.querySelectorAll('.edit-achievement-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const id = btn.dataset.id;
			try {
				const response = await fetch(`${contextPath}/admin/achievements?action=getAchievementData&id=${id}`);
				if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
				const data = await response.json();

				form.reset();
				title.textContent = 'Erfolg bearbeiten';
				actionInput.value = 'update';
				idInput.value = data.id;
				nameInput.value = data.name || '';
				iconInput.value = data.iconClass || 'fa-award';
				descInput.value = data.description || '';
				keyBuilderGroup.style.display = 'none'; // Hide key builder on edit, as the key is immutable

			} catch (error) {
				console.error('Failed to open edit modal:', error);
				alert("Fehler: Die Daten für diesen Erfolg konnten nicht geladen werden.");
			}
		});
	});

	// --- Generic Modal Closing ---
	modal.addEventListener('click', (e) => {
		if (e.target === modal) modal.classList.remove('active');
	});
	document.addEventListener('keydown', (e) => {
		if (e.key === 'Escape' && modal.classList.contains('active')) modal.classList.remove('active');
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_course_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	// --- Edit/Create Modal Logic ---
	const courseModal = document.getElementById('course-modal');
	if (courseModal) {
		const form = document.getElementById('course-modal-form');
		const title = document.getElementById('course-modal-title');
		const actionInput = document.getElementById('course-modal-action');
		const idInput = document.getElementById('course-modal-id');
		const nameInput = document.getElementById('name-modal');
		const abbrInput = document.getElementById('abbreviation-modal');
		const descInput = document.getElementById('description-modal');

		document.getElementById('new-course-btn')?.addEventListener('click', () => {
			form.reset();
			title.textContent = "Neue Lehrgangs-Vorlage anlegen";
			actionInput.value = "create";
			idInput.value = "";
		});

		document.querySelectorAll('.edit-course-btn').forEach(btn => {
			btn.addEventListener('click', async (e) => {
				form.reset();
				title.textContent = "Lehrgangs-Vorlage bearbeiten";
				actionInput.value = "update";
				const courseId = e.currentTarget.dataset.id;
				idInput.value = courseId;

				try {
					const response = await fetch(`${contextPath}/admin/lehrgaenge?action=getCourseData&id=${courseId}`);
					if (!response.ok) throw new Error('Could not fetch course data');
					const data = await response.json();

					nameInput.value = data.name || '';
					abbrInput.value = data.abbreviation || '';
					descInput.value = data.description || '';
				} catch (error) {
					console.error("Failed to open edit modal:", error);
					alert("Fehler beim Laden der Vorlagen-Daten.");
				}
			});
		});
	}

	// --- Grant Qualifications Modal Logic ---
	const grantQualsModal = document.getElementById('grant-quals-modal');
	if (grantQualsModal) {
		const modalTitle = document.getElementById('grant-quals-modal-title');
		const courseIdInput = document.getElementById('grant-quals-course-id');

		document.querySelectorAll('.grant-quals-btn').forEach(btn => {
			btn.addEventListener('click', (e) => {
				const button = e.currentTarget;
				modalTitle.textContent = `Qualifikationen für "${button.dataset.courseName}" vergeben`;
				courseIdInput.value = button.dataset.courseId;
			});
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_dashboard.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	let eventChartInstance = null;

	const upcomingEventsContainer = document.getElementById('widget-upcoming-events');
	const lowStockContainer = document.getElementById('widget-low-stock');
	const recentLogsContainer = document.getElementById('widget-recent-logs');
	const eventTrendCanvas = document.getElementById('eventTrendChart');

	function formatDateTime(isoString) {
		if (!isoString) return 'N/A';
		const date = new Date(isoString);
		return date.toLocaleString('de-DE', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' });
	}

	function createAlertBanner(message, type = 'info') {
		const banner = document.createElement('div');
		banner.className = `${type}-message`; // info-message, error-message, etc.
		const iconClass = type === 'danger' ? 'fa-exclamation-triangle' : 'fa-info-circle';
		banner.innerHTML = `<i class="fas ${iconClass}"></i> ${message}`;
		return banner;
	}

	function renderUpcomingEvents(events) {
		const header = '<h2><i class="fas fa-calendar-check"></i> Nächste Einsätze</h2>';
		if (!events || events.length === 0) {
			upcomingEventsContainer.innerHTML = header + '<p>Keine anstehenden Einsätze gefunden.</p>';
			return;
		}

		const list = events.map(event => `
            <li>
                <a href="${contextPath}/veranstaltungen/details?id=${event.id}">${event.name}</a>
                <small>${formatDateTime(event.eventDateTime)} Uhr</small>
            </li>
        `).join('');

		upcomingEventsContainer.innerHTML = header + `<ul class="details-list">${list}</ul>`;
	}

	function renderLowStockItems(items) {
		const header = '<h2><i class="fas fa-battery-quarter"></i> Niedriger Lagerbestand</h2>';

		let content = '';
		if (!items || items.length === 0) {
			content = '<p>Alle Artikel sind ausreichend vorhanden.</p>';
		} else {
			const list = items.map(item => {
				const percentage = item.maxQuantity > 0 ? ((item.quantity - item.defectiveQuantity) / item.maxQuantity * 100).toFixed(0) : 0;
				return `
                    <li>
                        <a href="${contextPath}/lager/details?id=${item.id}">${item.name}</a>
                        <span class="status-badge status-warn">${percentage}%</span>
                    </li>
                `;
			}).join('');
			content = `<ul class="details-list">${list}</ul>`;

			// Add an alert banner if there are low stock items
			const alertMessage = `Es gibt ${items.length} Artikel mit niedrigem Lagerbestand. <a href="${contextPath}/admin/lager">Jetzt prüfen</a>.`;
			const banner = createAlertBanner(alertMessage, 'danger');
			lowStockContainer.prepend(banner);
		}

		lowStockContainer.innerHTML = header + content;
	}

	function renderRecentLogs(logs) {
		const header = '<h2><i class="fas fa-history"></i> Letzte Aktivitäten</h2>';
		if (!logs || logs.length === 0) {
			recentLogsContainer.innerHTML = header + '<p>Keine aktuellen Aktivitäten protokolliert.</p>';
			return;
		}

		const list = logs.map(log => `
            <li>
                <div>
                    <strong>${log.actionType}</strong> von <em>${log.adminUsername}</em>
                    <small style="display: block; color: var(--text-muted-color);">${log.details}</small>
                </div>
                <small>${formatDateTime(log.actionTimestamp)}</small>
            </li>
        `).join('');

		recentLogsContainer.innerHTML = header + `<ul class="details-list">${list}</ul>`;
	}

	function renderEventTrendChart(trendData) {
		if (eventChartInstance) {
			eventChartInstance.destroy();
		}

		if (!trendData || trendData.length === 0) {
			return;
		}

		const labels = trendData.map(d => d.month);
		const data = trendData.map(d => d.count);

		const chartConfig = {
			type: 'line',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl Events pro Monat',
					data: data,
					fill: true,
					borderColor: 'rgb(0, 123, 255)',
					backgroundColor: 'rgba(0, 123, 255, 0.1)',
					tension: 0.1
				}]
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					y: {
						beginAtZero: true,
						ticks: {
							stepSize: 1,
							precision: 0
						}
					}
				},
				plugins: {
					legend: {
						display: false
					}
				}
			}
		};

		eventChartInstance = new Chart(eventTrendCanvas.getContext('2d'), chartConfig);
	}

	async function fetchData() {
		try {
			const response = await fetch(`${contextPath}/api/admin/dashboard-data`);
			if (!response.ok) {
				throw new Error(`HTTP error! status: ${response.status}`);
			}
			const data = await response.json();

			renderUpcomingEvents(data.upcomingEvents);
			renderLowStockItems(data.lowStockItems);
			renderRecentLogs(data.recentLogs);
			renderEventTrendChart(data.eventTrendData);

		} catch (error) {
			console.error("Failed to fetch dashboard data:", error);
			upcomingEventsContainer.innerHTML = '<h2><i class="fas fa-calendar-check"></i> Nächste Einsätze</h2><p class="error-message">Fehler beim Laden der Daten.</p>';
			lowStockContainer.innerHTML = '<h2><i class="fas fa-battery-quarter"></i> Niedriger Lagerbestand</h2><p class="error-message">Fehler beim Laden der Daten.</p>';
			recentLogsContainer.innerHTML = '<h2><i class="fas fa-history"></i> Letzte Aktivitäten</h2><p class="error-message">Fehler beim Laden der Daten.</p>';
		}
	}

	fetchData();
	setInterval(fetchData, 60000); // Re-fetch every 60 seconds
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_defect_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const defectModal = document.getElementById('defect-modal');
	if (!defectModal) return;

	const modalTitle = document.getElementById('defect-modal-title');
	const itemIdInput = document.getElementById('defect-item-id');
	const defectQtyInput = document.getElementById('defective_quantity');
	const reasonInput = document.getElementById('defect_reason');

	/**
	 * Attaches an event listener to all "Status bearbeiten" buttons to open the defect modal.
	 */
	document.querySelectorAll('.defect-modal-btn').forEach(btn => {
		btn.addEventListener('click', () => {
			// Populate the modal with data from the clicked button's data attributes
			modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
			itemIdInput.value = btn.dataset.itemId;
			defectQtyInput.value = btn.dataset.currentDefectQty;
			defectQtyInput.max = btn.dataset.maxQty; // Set max value to prevent invalid input
			reasonInput.value = btn.dataset.currentReason;
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_editor.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const editorContainer = document.getElementById('editor-page-container');
	if (!editorContainer) return;

	const fileId = editorContainer.dataset.fileId;
	const editor = document.getElementById('editor');
	const preview = document.getElementById('markdown-preview');
	const toggle = document.getElementById('mode-toggle');
	const statusIndicator = document.getElementById('save-status-indicator');

	let socket;
	let debounceTimer;

	// Function to render markdown content
	const renderMarkdown = (content) => {
		if (typeof marked !== 'undefined') {
			preview.innerHTML = marked.parse(content, { sanitize: true });
		}
	};

	// --- Status Indicator Logic ---
	const showStatus = (state, message) => {
		if (statusIndicator) {
			statusIndicator.style.display = 'inline-block';
			statusIndicator.className = `status-badge status-${state}`;
			statusIndicator.textContent = message;
		}
	};

	// --- WebSocket Connection Logic ---
	const connect = () => {
		const websocketProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
		const websocketUrl = `${websocketProtocol}//${window.location.host}${document.body.dataset.contextPath}/ws/editor/${fileId}`;

		socket = new WebSocket(websocketUrl);

		socket.onopen = () => {
			console.log('WebSocket connection established.');
			showStatus('ok', 'Verbunden');
		};

		socket.onmessage = (event) => {
			const data = JSON.parse(event.data);
			if (data.type === 'content_update') {
				console.log('Received content update from another client.');

				// Save cursor position before updating
				const cursorStart = editor.selectionStart;
				const cursorEnd = editor.selectionEnd;

				editor.value = data.payload;
				renderMarkdown(data.payload);

				// Restore cursor position
				editor.setSelectionRange(cursorStart, cursorEnd);
			}
		};

		socket.onclose = () => {
			console.warn('WebSocket connection closed.');
			showStatus('danger', 'Getrennt');
			setTimeout(connect, 5000); // Try to reconnect after 5 seconds
		};

		socket.onerror = (error) => {
			console.error('WebSocket error:', error);
			showStatus('danger', 'Verbindungsfehler');
		};
	};


	// --- Event Listeners ---
	if (editor.readOnly) {
		renderMarkdown(editor.value);
		return;
	}

	connect();
	renderMarkdown(editor.value);

	// Debounced function to send content updates
	const sendContentUpdate = () => {
		if (socket && socket.readyState === WebSocket.OPEN) {
			const payload = {
				type: 'content_update',
				payload: editor.value
			};
			socket.send(JSON.stringify(payload));
			showStatus('warn', 'Speichern...');
			// Give visual feedback that saving is complete
			setTimeout(() => {
				if (statusIndicator.textContent === 'Speichern...') {
					showStatus('ok', 'Gespeichert');
				}
			}, 1000);
		}
	};

	// Live preview and debounced saving on input
	editor.addEventListener('input', () => {
		renderMarkdown(editor.value);
		clearTimeout(debounceTimer);
		debounceTimer = setTimeout(sendContentUpdate, 500); // Send update 500ms after user stops typing
	});

	// Event listener for the toggle switch
	if (toggle) {
		toggle.addEventListener('change', () => {
			if (toggle.checked) { // Edit mode
				editor.style.display = 'block';
				preview.style.display = 'none';
			} else { // View mode
				renderMarkdown(editor.value);
				editor.style.display = 'none';
				preview.style.display = 'block';
			}
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_events_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			showConfirmationModal(this.dataset.confirmMessage || 'Sind Sie sicher?', () => this.submit());
		});
	});

	// Client-side file size validation
	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			if (!file) return;

			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.closest('.form-group').querySelector('.file-size-warning');

			if (file.size > maxSize) {
				if (warningElement) warningElement.style.display = 'block';
				e.target.value = ''; // Clear the invalid selection
			} else {
				if (warningElement) warningElement.style.display = 'none';
			}
		});
	});

	const assignModal = document.getElementById('assign-users-modal');
	const eventModal = document.getElementById('event-modal');
	const reqContainer = document.getElementById('modal-requirements-container');
	const resContainer = document.getElementById('modal-reservations-container');
	const cfContainer = document.getElementById('modal-custom-fields-container');
	const attachmentsList = document.getElementById('modal-attachments-list');
	const kitSelect = document.getElementById('kit-selection-modal');
	const findCrewBtn = document.getElementById('find-crew-btn');
	const findCrewModal = document.getElementById('find-crew-modal');

	const allCourses = JSON.parse(document.getElementById('allCoursesData').textContent);
	const allItems = JSON.parse(document.getElementById('allItemsData').textContent);

	const assignForm = document.getElementById('assign-users-form');
	const assignModalTitle = document.getElementById('assign-users-modal-title');
	const assignCheckboxes = document.getElementById('user-checkboxes-container');
	const assignEventIdInput = assignForm.querySelector('input[name="eventId"]');

	const openAssignModal = async (btn) => {
		const eventId = btn.dataset.eventId;
		const eventName = btn.dataset.eventName;
		assignModalTitle.textContent = `Team für "${eventName}" zuweisen`;
		assignEventIdInput.value = eventId;
		assignCheckboxes.innerHTML = '<p>Lade Benutzer...</p>';
		assignModal.classList.add('active');
		try {
			const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getAssignmentData&id=${eventId}`);
			if (!response.ok) throw new Error('Could not fetch assignment data.');
			const data = await response.json();
			assignCheckboxes.innerHTML = '';
			if (data.signedUpUsers && data.signedUpUsers.length > 0) {
				data.signedUpUsers.forEach(user => {
					const isChecked = data.assignedUserIds.includes(user.id) ? 'checked' : '';
					assignCheckboxes.innerHTML += `
						<label class="checkbox-label">
							<input type="checkbox" name="userIds" value="${user.id}" ${isChecked}>
							${user.username}
						</label>`;
				});
			} else {
				assignCheckboxes.innerHTML = '<p>Es haben sich noch keine Benutzer für dieses Event angemeldet.</p>';
			}
		} catch (error) {
			assignCheckboxes.innerHTML = '<p class="error-message">Fehler beim Laden der Benutzerdaten.</p>';
			console.error('Error fetching assignment data:', error);
		}
	};
	document.querySelectorAll('.assign-users-btn').forEach(btn => btn.addEventListener('click', () => openAssignModal(btn)));
	assignModal.querySelector('.modal-close-btn').addEventListener('click', () => assignModal.classList.remove('active'));

	const createRow = (container) => {
		const newRow = document.createElement('div'); newRow.className = 'dynamic-row';
		const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn-small btn-danger';
		removeBtn.innerHTML = '×'; removeBtn.onclick = () => newRow.remove();
		newRow.appendChild(removeBtn); container.appendChild(newRow);
		return newRow;
	};

	const addRequirementRow = (courseId = '', personCount = 1) => {
		const row = createRow(reqContainer);
		const select = document.createElement('select'); select.name = 'requiredCourseId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Lehrgang --</option>' + allCourses.map(c => `<option value="${c.id}">${c.name}</option>`).join('');
		select.value = courseId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'requiredPersons'; input.value = personCount; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

	const addReservationRow = (itemId = '', quantity = 1) => {
		const row = createRow(resContainer);
		const select = document.createElement('select'); select.name = 'itemId'; select.className = 'form-group';
		select.innerHTML = '<option value="">-- Material --</option>' + allItems.map(i => `<option value="${i.id}">${i.name}</option>`).join('');
		select.value = itemId;
		const input = document.createElement('input'); input.type = 'number'; input.name = 'itemQuantity'; input.value = quantity; input.min = '1'; input.className = 'form-group';
		row.prepend(select, input);
	};

	const addCustomFieldRow = (fieldName = '', fieldType = 'TEXT') => {
		const row = createRow(cfContainer);
		const nameInput = document.createElement('input');
		nameInput.type = 'text';
		nameInput.name = 'customFieldName';
		nameInput.placeholder = 'Frage eingeben (z.B. T-Shirt Größe)';
		nameInput.className = 'form-group';
		nameInput.style.flexGrow = '2';
		nameInput.value = fieldName;

		const typeSelect = document.createElement('select');
		typeSelect.name = 'customFieldType';
		typeSelect.className = 'form-group';
		typeSelect.innerHTML = `<option value="TEXT">Text</option><option value="BOOLEAN">Ja/Nein</option>`;
		typeSelect.value = fieldType;

		row.prepend(nameInput, typeSelect);
	};

	const addAttachmentRow = (id, filename, filepath) => {
		const li = document.createElement('li'); li.id = `attachment-item-${id}`;
		li.innerHTML = `<a href="${contextPath}/download?id=${id}" target="_blank">${filename}</a>`;
		const removeBtn = document.createElement('button'); removeBtn.type = 'button'; removeBtn.className = 'btn btn-small btn-danger-outline';
		removeBtn.innerHTML = '×';
		removeBtn.onclick = () => {
			showConfirmationModal(`Anhang '${filename}' wirklich löschen?`, async () => {
				const formData = new FormData();
				formData.append('action', 'deleteAttachment');
				formData.append('id', id);
				formData.append('csrfToken', document.querySelector('#event-modal-form input[name="csrfToken"]').value);

				try {
					const response = await fetch(`${contextPath}/admin/veranstaltungen`, {
						method: 'POST',
						body: new URLSearchParams(formData)
					});
					if (response.ok) li.remove();
					else alert('Fehler beim Löschen des Anhangs.');
				} catch (e) {
					console.error('Error deleting attachment:', e);
					alert('Netzwerkfehler beim Löschen des Anhangs.');
				}
			});
		};
		li.appendChild(removeBtn); attachmentsList.appendChild(li);
	};

	if (kitSelect) {
		kitSelect.addEventListener('change', async () => {
			const kitId = kitSelect.value;
			if (!kitId) return;

			try {
				const response = await fetch(`${contextPath}/admin/kits?action=getKitItems&id=${kitId}`);
				if (!response.ok) throw new Error('Could not fetch kit items');
				const items = await response.json();
				items.forEach(item => addReservationRow(item.itemId, item.quantity));
			} catch (e) {
				console.error("Error fetching kit items:", e);
				alert("Fehler beim Laden der Kit-Inhalte.");
			}
			kitSelect.value = '';
		});
	}

	if (findCrewBtn) {
		findCrewBtn.addEventListener('click', async () => {
			const eventId = document.getElementById('event-modal-id').value;
			if (!eventId) {
				alert("Bitte speichern Sie das Event zuerst.");
				return;
			}
			const crewListContainer = document.getElementById('find-crew-list');
			crewListContainer.innerHTML = '<p>Suche nach qualifizierter Crew...</p>';
			findCrewModal.classList.add('active');
			try {
				const response = await fetch(`${contextPath}/api/admin/crew-finder?eventId=${eventId}`);
				if (!response.ok) throw new Error('Could not find crew members.');
				const users = await response.json();

				document.getElementById('find-crew-event-id').value = eventId;
				crewListContainer.innerHTML = '';

				if (users.length > 0) {
					users.forEach(user => {
						crewListContainer.innerHTML += `
							<label class="checkbox-label" style="padding: 0.5rem; border-bottom: 1px solid var(--border-color);">
								<input type="checkbox" name="userIds" value="${user.id}">
								${user.username}
							</label>`;
					});
				} else {
					crewListContainer.innerHTML = '<p>Keine passenden und verfügbaren Benutzer gefunden.</p>';
				}

			} catch (e) {
				console.error("Error finding crew:", e);
				crewListContainer.innerHTML = '<p class="error-message">Fehler bei der Crew-Suche.</p>';
			}
		});
		findCrewModal.querySelector('.modal-close-btn').addEventListener('click', () => findCrewModal.classList.remove('active'));
	}

	document.getElementById('modal-add-requirement-btn').addEventListener('click', () => addRequirementRow());
	document.getElementById('modal-add-reservation-btn').addEventListener('click', () => addReservationRow());
	document.getElementById('modal-add-custom-field-btn').addEventListener('click', () => addCustomFieldRow());

	const eventForm = document.getElementById('event-modal-form');
	const eventModalTitle = document.getElementById('event-modal-title');
	const actionInput = document.getElementById('event-modal-action');
	const idInput = document.getElementById('event-modal-id');

	const resetEventModal = () => {
		eventForm.reset();
		reqContainer.innerHTML = '';
		resContainer.innerHTML = '';
		cfContainer.innerHTML = '';
		attachmentsList.innerHTML = '';
		document.querySelectorAll('.file-size-warning').forEach(el => el.style.display = 'none');
	};

	const openEventModal = () => eventModal.classList.add('active');
	const closeEventModal = () => eventModal.classList.remove('active');
	eventModal.querySelector('.modal-close-btn').addEventListener('click', closeEventModal);
	eventModal.addEventListener('click', e => { if (e.target === eventModal) closeEventModal(); });

	document.getElementById('new-event-btn').addEventListener('click', () => {
		resetEventModal();
		eventModalTitle.textContent = "Neues Event anlegen";
		actionInput.value = "create";
		idInput.value = "";
		openEventModal();
	});

	document.querySelectorAll('.edit-event-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const eventId = btn.dataset.eventId;
			try {
				const response = await fetch(`${contextPath}/admin/veranstaltungen?action=getEventData&id=${eventId}`);
				if (!response.ok) throw new Error('Event data could not be fetched.');
				const event = await response.json();
				resetEventModal();
				eventModalTitle.textContent = "Event bearbeiten";
				actionInput.value = "update";
				idInput.value = event.id;
				eventForm.querySelector('#name-modal').value = event.name || '';
				eventForm.querySelector('#location-modal').value = event.location || '';
				eventForm.querySelector('#leaderUserId-modal').value = event.leaderUserId || '';
				eventForm.querySelector('#eventDateTime-modal').value = event.eventDateTime ? event.eventDateTime.substring(0, 16) : '';
				eventForm.querySelector('#endDateTime-modal').value = event.endDateTime ? event.endDateTime.substring(0, 16) : '';
				eventForm.querySelector('#description-modal').value = event.description || '';

				event.skillRequirements?.forEach(req => addRequirementRow(req.requiredCourseId, req.requiredPersons));
				event.reservedItems?.forEach(res => addReservationRow(res.id, res.quantity));
				event.customFields?.forEach(cf => addCustomFieldRow(cf.fieldName, cf.fieldType));
				event.attachments?.forEach(att => addAttachmentRow(att.id, att.filename, att.filepath));

				openEventModal();
			} catch (error) {
				console.error('Error opening edit modal:', error);
				alert('Fehler beim Laden der Event-Daten.');
			}
		});
	});

	const tabButtons = eventModal.querySelectorAll('.modal-tab-button');
	const tabContents = eventModal.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_feedback.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const csrfToken = document.body.dataset.csrfToken;

	const columns = document.querySelectorAll('.feedback-list');
	if (!columns.length || typeof Sortable === 'undefined') {
		if (typeof Sortable === 'undefined') {
			console.error("Sortable.js library not loaded. Drag & drop functionality will not be available.");
		}
		return;
	}

	const modal = document.getElementById('feedback-details-modal');
	const modalForm = document.getElementById('feedback-details-form');
	const modalIdInput = document.getElementById('feedback-modal-id');
	const modalOriginalSubject = document.getElementById('feedback-modal-original-subject');
	const modalDisplayTitle = document.getElementById('feedback-modal-display-title');
	const modalContent = document.getElementById('feedback-modal-content');
	const modalStatus = document.getElementById('feedback-modal-status');

	const api = {
		async getDetails(id) {
			const response = await fetch(`${contextPath}/admin/action/feedback?action=getDetails`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
				body: new URLSearchParams({ submissionId: id, csrfToken: csrfToken })
			});
			if (!response.ok) throw new Error('Could not fetch feedback details.');
			return response.json();
		},
		async update(formData) {
			const response = await fetch(`${contextPath}/admin/action/feedback?action=updateStatus`, {
				method: 'POST',
				body: new URLSearchParams(formData)
			});
			return response.json();
		},
		async reorder(data) {
			const response = await fetch(`${contextPath}/admin/action/feedback?action=reorder`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
				body: new URLSearchParams({
					csrfToken: csrfToken,
					reorderData: JSON.stringify(data)
				})
			});
			return response.json();
		}
	};

	document.querySelector('.feedback-board').addEventListener('click', async (e) => {
		const card = e.target.closest('.feedback-card-item');
		if (!card) return;

		try {
			const submissionId = card.dataset.id;
			const result = await api.getDetails(submissionId);
			if (!result.success) throw new Error(result.message);

			const submission = result.data;

			modalIdInput.value = submission.id;
			modalOriginalSubject.textContent = submission.subject;
			modalDisplayTitle.value = submission.displayTitle || '';
			modalContent.textContent = submission.content;
			if (window.renderMarkdown) window.renderMarkdown(modalContent);
			modalStatus.value = submission.status;

			modal.classList.add('active');
		} catch (error) {
			console.error(error);
			showToast('Details konnten nicht geladen werden.', 'danger');
		}
	});

	modalForm.addEventListener('submit', async (e) => {
		e.preventDefault();
		const formData = new FormData(modalForm);
		formData.append('csrfToken', csrfToken);

		try {
			const result = await api.update(formData);
			if (result.success) {
				showToast('Änderungen gespeichert.', 'success');
				modal.classList.remove('active');
				window.location.reload(); // Reload to reflect changes
			} else {
				throw new Error(result.message);
			}
		} catch (error) {
			showToast(error.message || 'Fehler beim Speichern.', 'danger');
		}
	});

	modal.querySelector('.modal-close-btn').addEventListener('click', () => modal.classList.remove('active'));
	modal.addEventListener('click', (e) => { if (e.target === modal) modal.classList.remove('active'); });

	const handleReorder = async (evt) => {
		const item = evt.item;
		const toList = evt.to;
		const newStatus = toList.dataset.statusId;
		const submissionId = item.dataset.id;

		item.dataset.status = newStatus;

		const reorderData = {
			submissionId: parseInt(submissionId, 10),
			newStatus: newStatus,
			orderedIds: Array.from(toList.children).map(child => parseInt(child.dataset.id, 10))
		};

		try {
			const result = await api.reorder(reorderData);
			if (result.success) {
				showToast(result.message, 'success');
			} else {
				throw new Error(result.message);
			}
		} catch (error) {
			console.error('Error saving new order:', error);
			showToast(error.message || 'Sortierung konnte nicht gespeichert werden.', 'danger');
		}
	};

	columns.forEach(col => {
		new Sortable(col, {
			group: 'feedback',
			animation: 150,
			ghostClass: 'sortable-ghost',
			onEnd: handleReorder
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_files.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {

	// --- Upload New Version Modal Logic ---
	const uploadModal = document.getElementById('upload-version-modal');
	if (uploadModal) {
		const modalTitle = document.getElementById('upload-modal-title');
		const modalFileIdInput = document.getElementById('upload-file-id');
		const modalFileNameSpan = document.getElementById('upload-file-name');
		const fileInput = document.getElementById('new-file-version');
		const closeModalBtn = uploadModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.upload-new-version-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				const fileId = btn.dataset.fileId;
				const fileName = btn.dataset.fileName;

				modalFileIdInput.value = fileId;
				modalFileNameSpan.textContent = fileName;
				fileInput.value = ''; // Reset file input
				uploadModal.classList.add('active');
			});
		});

		const closeModal = () => uploadModal.classList.remove('active');
		if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
		uploadModal.addEventListener('click', (e) => {
			if (e.target === uploadModal) closeModal();
		});
	}

	// --- Reassign File Modal Logic ---
	const reassignModal = document.getElementById('reassign-file-modal');
	if (reassignModal) {
		const modalFileIdInput = document.getElementById('reassign-file-id');
		const modalFileNameSpan = document.getElementById('reassign-file-name');
		const closeModalBtn = reassignModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.reassign-file-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalFileIdInput.value = btn.dataset.fileId;
				modalFileNameSpan.textContent = btn.dataset.fileName;
				reassignModal.classList.add('active');
			});
		});

		const closeReassignModal = () => reassignModal.classList.remove('active');
		if (closeModalBtn) closeModalBtn.addEventListener('click', closeReassignModal);
		reassignModal.addEventListener('click', (e) => {
			if (e.target === reassignModal) closeReassignModal();
		});
	}

	// --- Generic File Input Size Validation ---
	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			if (!file) return;

			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.closest('.form-group').querySelector('.file-size-warning');

			if (file.size > maxSize) {
				if (warningElement) warningElement.style.display = 'block';
				e.target.value = ''; // Clear the invalid selection
			} else {
				if (warningElement) warningElement.style.display = 'none';
			}
		});
	});

});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_kits.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	// --- Kit Create/Edit Modal ---
	const kitModal = document.getElementById('kit-modal');
	if (kitModal) {
		const form = kitModal.querySelector('form');
		const title = kitModal.querySelector('h3');
		const actionInput = form.querySelector('input[name="action"]');
		const idInput = form.querySelector('input[name="id"]');
		const nameInput = form.querySelector('#name-modal');
		const descInput = form.querySelector('#description-modal');
		const locationInput = form.querySelector('#location-modal');

		document.getElementById('new-kit-btn')?.addEventListener('click', () => {
			form.reset();
			title.textContent = 'Neues Kit anlegen';
			actionInput.value = 'create';
			idInput.value = '';
		});

		document.querySelectorAll('.edit-kit-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				form.reset();
				title.textContent = 'Kit bearbeiten';
				actionInput.value = 'update';
				idInput.value = btn.dataset.kitId;
				nameInput.value = btn.dataset.kitName;
				descInput.value = btn.dataset.kitDesc;
				locationInput.value = btn.dataset.kitLocation || '';
			});
		});
	}

	// --- Kit Content Management (Accordion & Dynamic Rows) ---
	const allItems = JSON.parse(document.getElementById('allItemsData').textContent || '[]');
	const allSelectableItems = JSON.parse(document.getElementById('allSelectableItemsData').textContent || '[]');

	// Toggle accordion for each kit
	document.querySelectorAll('.kit-header').forEach(header => {
		header.addEventListener('click', () => {
			const content = header.nextElementSibling;
			const icon = header.querySelector('.toggle-icon');
			const isOpening = content.style.display !== 'block';

			content.style.display = isOpening ? 'block' : 'none';
			icon.classList.toggle('fa-chevron-down', !isOpening);
			icon.classList.toggle('fa-chevron-up', isOpening);
		});
	});

	const updateMaxQuantity = (selectElement) => {
		const selectedId = parseInt(selectElement.value, 10);
		const quantityInput = selectElement.closest('.dynamic-row').querySelector('input[name="quantities"]');
		const selectedItem = allItems.find(item => item.id === selectedId);

		if (selectedItem) {
			quantityInput.max = selectedItem.availableQuantity;
			quantityInput.title = `Maximal verfügbar: ${selectedItem.availableQuantity}`;
			if (parseInt(quantityInput.value) > selectedItem.availableQuantity) {
				quantityInput.value = selectedItem.availableQuantity;
			}
		} else {
			quantityInput.removeAttribute('max');
			quantityInput.title = '';
		}
	};

	const createItemRow = (item = { id: '', quantity: 1 }) => {
		const row = document.createElement('div');
		row.className = 'dynamic-row';

		const select = document.createElement('select');
		select.name = 'itemIds';
		select.className = 'form-group';
		select.innerHTML = '<option value="">-- Artikel auswählen --</option>' +
			allSelectableItems.map(i => `<option value="${i.id}">${i.name}</option>`).join('');
		select.value = item.id;

		const quantityInput = document.createElement('input');
		quantityInput.type = 'number';
		quantityInput.name = 'quantities';
		quantityInput.value = item.quantity;
		quantityInput.min = '1';
		quantityInput.className = 'form-group';
		quantityInput.style.maxWidth = '100px';
		quantityInput.required = true;

		const removeBtn = document.createElement('button');
		removeBtn.type = 'button';
		removeBtn.className = 'btn btn-small btn-danger btn-remove-kit-item-row';
		removeBtn.title = 'Zeile entfernen';
		removeBtn.innerHTML = '×';

		row.appendChild(select);
		row.appendChild(quantityInput);
		row.appendChild(removeBtn);

		select.addEventListener('change', () => updateMaxQuantity(select));

		// Initial check in case the row is pre-populated
		if (item.id) {
			updateMaxQuantity(select);
		}

		return row;
	};

	document.querySelectorAll('.kit-content select[name="itemIds"]').forEach(select => {
		updateMaxQuantity(select);
	});

	// Event delegation for adding/removing item rows
	document.body.addEventListener('click', e => {
		const addBtn = e.target.closest('.btn-add-kit-item-row');
		const removeBtn = e.target.closest('.btn-remove-kit-item-row');

		if (addBtn) {
			e.preventDefault();
			const container = document.getElementById(addBtn.dataset.containerId);
			if (container) {
				const noItemsMsg = container.querySelector('.no-items-message');
				if (noItemsMsg) noItemsMsg.remove();
				container.appendChild(createItemRow());
			}
		} else if (removeBtn) {
			e.preventDefault();
			const row = removeBtn.closest('.dynamic-row');
			const container = row.parentElement;
			showConfirmationModal("Diesen Artikel wirklich aus dem Kit entfernen?", () => {
				row.remove();
				// If the container is now empty, show the placeholder message again.
				if (container && !container.querySelector('.dynamic-row')) {
					const p = document.createElement('p');
					p.className = 'no-items-message';
					p.textContent = 'Dieses Kit ist leer. Fügen Sie einen Artikel hinzu.';
					container.appendChild(p);
				}
			});
		}
	});

	// Enforce max value on quantity inputs
	document.body.addEventListener('input', e => {
		if (e.target.matches('input[name="quantities"]')) {
			const max = parseInt(e.target.max, 10);
			const value = parseInt(e.target.value, 10);
			if (!isNaN(max) && !isNaN(value) && value > max) {
				e.target.value = max;
			}
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_matrix.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const modalOverlay = document.getElementById('attendance-modal');
	if (!modalOverlay) return;

	// Get references to all modal elements once
	const modalTitle = document.getElementById('modal-title');
	const modalUserId = document.getElementById('modal-user-id');
	const modalMeetingId = document.getElementById('modal-meeting-id');
	const modalAttended = document.getElementById('modal-attended');
	const modalRemarks = document.getElementById('modal-remarks');
	const closeBtn = modalOverlay.querySelector('.modal-close-btn');

	/**
	 * Opens the attendance modal and populates it with data from the clicked cell.
	 * @param {HTMLElement} cell The table cell that was clicked.
	 */
	const openModal = (cell) => {
		const userData = cell.dataset;
		modalTitle.textContent = `Nutzer: ${userData.userName} | Meeting: ${userData.meetingName}`;
		modalUserId.value = userData.userId;
		modalMeetingId.value = userData.meetingId;
		modalRemarks.value = userData.remarks;
		// The value from dataset is a string, so we need to compare it to 'true'
		modalAttended.checked = (userData.attended === 'true');
		modalOverlay.classList.add('active');
	};

	/**
	 * Closes the attendance modal.
	 */
	const closeModal = () => modalOverlay.classList.remove('active');

	// Attach click listener to all qualification cells to open the modal
	document.querySelectorAll('.qual-cell').forEach(cell => {
		cell.addEventListener('click', (e) => openModal(e.currentTarget));
	});

	// --- Modal Closing Listeners ---
	if (closeBtn) closeBtn.addEventListener('click', closeModal);

	// Close modal if the overlay background is clicked
	modalOverlay.addEventListener('click', (event) => {
		if (event.target === modalOverlay) closeModal();
	});

	// Close modal on Escape key press
	document.addEventListener('keydown', (event) => {
		if (event.key === 'Escape' && modalOverlay.classList.contains('active')) {
			closeModal();
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_meeting_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const modal = document.getElementById('meeting-modal');
	if (!modal) return;

	const form = document.getElementById('meeting-modal-form');
	const modalTitle = document.getElementById('meeting-modal-title');
	const actionInput = document.getElementById('meeting-action');
	const idInput = document.getElementById('meeting-id');
	const attachmentsList = document.getElementById('modal-attachments-list');
	const closeModalBtn = modal.querySelector('.modal-close-btn');

	const openModal = () => modal.classList.add('active');
	const closeModal = () => modal.classList.remove('active');

	const resetModal = () => {
		form.reset();
		attachmentsList.innerHTML = '';
	};

	const newMeetingBtn = document.getElementById('new-meeting-btn');
	if (newMeetingBtn) {
		newMeetingBtn.addEventListener('click', () => {
			resetModal();
			modalTitle.textContent = "Neues Meeting planen";
			actionInput.value = "create";
			idInput.value = "";
			openModal();
		});
	}

	const addAttachmentRow = (attachment, courseId) => {
		const li = document.createElement('li');
		li.id = `attachment-item-${attachment.id}`;
		li.innerHTML = `<a href="${contextPath}/download?id=${attachment.id}" target="_blank">${attachment.filename}</a> (Rolle: ${attachment.requiredRole})`;
		const removeBtn = document.createElement('button');
		removeBtn.type = 'button';
		removeBtn.className = 'btn btn-small btn-danger-outline';
		removeBtn.innerHTML = '×';
		removeBtn.onclick = () => {
			showConfirmationModal(`Anhang '${attachment.filename}' wirklich löschen?`, () => {
				const csrfToken = form.querySelector('input[name="csrfToken"]').value; // Get token from main form
				const deleteForm = document.createElement('form');
				deleteForm.method = 'post';
				deleteForm.action = `${contextPath}/admin/meetings`;
				deleteForm.innerHTML = `
					<input type="hidden" name="action" value="deleteAttachment">
					<input type="hidden" name="attachmentId" value="${attachment.id}">
					<input type="hidden" name="courseId" value="${courseId}">
					<input type="hidden" name="csrfToken" value="${csrfToken}">
				`;
				document.body.appendChild(deleteForm);
				deleteForm.submit();
			});
		};
		li.appendChild(removeBtn);
		attachmentsList.appendChild(li);
	};

	document.querySelectorAll('.edit-meeting-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			const meetingId = btn.dataset.meetingId;
			try {
				const response = await fetch(`${contextPath}/admin/meetings?action=getMeetingData&id=${meetingId}`);
				if (!response.ok) throw new Error('Meeting data could not be fetched.');
				const data = await response.json();
				const meeting = data.meetingData;
				const attachments = data.attachmentsData;

				resetModal();
				modalTitle.textContent = "Meeting bearbeiten";
				actionInput.value = "update";
				idInput.value = meeting.id;
				form.querySelector('#name-modal').value = meeting.name || '';
				form.querySelector('#location-modal').value = meeting.location || '';
				form.querySelector('#meetingDateTime-modal').value = meeting.meetingDateTime ? meeting.meetingDateTime.substring(0, 16) : '';
				form.querySelector('#endDateTime-modal').value = meeting.endDateTime ? meeting.endDateTime.substring(0, 16) : '';
				form.querySelector('#leader-modal').value = meeting.leaderUserId || '';
				form.querySelector('#description-modal').value = meeting.description || '';

				if (attachments && attachments.length > 0) {
					attachments.forEach(att => addAttachmentRow(att, meeting.courseId));
				} else {
					attachmentsList.innerHTML = '<li>Keine Anhänge vorhanden.</li>';
				}

				openModal();
			} catch (error) {
				console.error('Error fetching meeting data:', error);
				alert('Fehler beim Laden der Meeting-Daten.');
			}
		});
	});

	if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
	modal.addEventListener('click', e => { if (e.target === modal) closeModal(); });
	document.addEventListener('keydown', e => { if (e.key === 'Escape' && modal.classList.contains('active')) closeModal(); });

	document.querySelectorAll('.file-input').forEach(input => {
		input.addEventListener('change', (e) => {
			const file = e.target.files[0];
			const maxSize = parseInt(e.target.dataset.maxSize, 10);
			const warningElement = e.target.nextElementSibling;
			if (file && file.size > maxSize) {
				warningElement.style.display = 'block';
				e.target.value = '';
			} else if (warningElement) {
				warningElement.style.display = 'none';
			}
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_reports.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const eventTrendCanvas = document.getElementById('eventTrendChart');
	const userActivityCanvas = document.getElementById('userActivityChart');

	const getJsonData = (id) => {
		const element = document.getElementById(id);
		if (element) {
			try {
				return JSON.parse(element.textContent);
			} catch (e) {
				console.error(`Failed to parse JSON from #${id}`, e);
				return null;
			}
		}
		return null;
	};

	const eventTrendData = getJsonData('eventTrendData');
	const userActivityData = getJsonData('userActivityData');

	if (eventTrendCanvas && eventTrendData && eventTrendData.length > 0) {
		const labels = eventTrendData.map(d => d.month);
		const data = eventTrendData.map(d => d.count);

		new Chart(eventTrendCanvas.getContext('2d'), {
			type: 'line',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl Events pro Monat',
					data: data,
					fill: true,
					borderColor: 'rgb(0, 123, 255)',
					backgroundColor: 'rgba(0, 123, 255, 0.1)',
					tension: 0.1
				}]
			},
			options: {
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					y: {
						beginAtZero: true,
						ticks: {
							stepSize: 1
						}
					}
				}
			}
		});
	} else if (eventTrendCanvas) {
		eventTrendCanvas.parentElement.innerHTML = '<p>Nicht genügend Daten für den Event-Trend vorhanden.</p>';
	}

	if (userActivityCanvas && userActivityData && userActivityData.length > 0) {
		const labels = userActivityData.map(d => d.username);
		const data = userActivityData.map(d => d.participation_count);

		new Chart(userActivityCanvas.getContext('2d'), {
			type: 'bar',
			data: {
				labels: labels,
				datasets: [{
					label: 'Anzahl zugewiesener Events',
					data: data,
					backgroundColor: 'rgba(0, 123, 255, 0.6)',
					borderColor: 'rgb(0, 123, 255)',
					borderWidth: 1
				}]
			},
			options: {
				indexAxis: 'y', 
				responsive: true,
				maintainAspectRatio: false,
				scales: {
					x: {
						beginAtZero: true,
						ticks: {
							stepSize: 1
						}
					}
				},
				plugins: {
					legend: {
						display: false
					}
				}
			}
		});
	} else if (userActivityCanvas) {
		userActivityCanvas.parentElement.innerHTML = '<p>Nicht genügend Daten für Benutzeraktivität vorhanden.</p>';
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_requests.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	const handleRequestAction = async (form) => {
		try {
			// FIX: Use URLSearchParams to ensure the correct Content-Type for the servlet.
			const formData = new URLSearchParams(new FormData(form));

			const response = await fetch(form.action, {
				method: 'POST',
				body: formData
			});
			const result = await response.json();

			if (response.ok && result.success) {
				showToast(result.message, 'success');
				const row = document.querySelector(`tr[data-request-id='${result.data.requestId}']`);
				if (row) {
					row.style.transition = 'opacity 0.5s';
					row.style.opacity = '0';
					setTimeout(() => row.remove(), 500);
				}
			} else {
				showToast(result.message || 'Ein Fehler ist aufgetreten.', 'danger');
			}
		} catch (error) {
			console.error('Error processing request action:', error);
			showToast('Ein Netzwerkfehler ist aufgetreten.', 'danger');
		}
	};

	document.querySelectorAll('.js-approve-request-form').forEach(form => {
		form.addEventListener('submit', (e) => {
			e.preventDefault();
			showConfirmationModal('Diese Änderungen wirklich genehmigen und anwenden?', () => handleRequestAction(form));
		});
	});

	document.querySelectorAll('.js-deny-request-form').forEach(form => {
		form.addEventListener('submit', (e) => {
			e.preventDefault();
			showConfirmationModal('Diese Änderungsanfrage wirklich ablehnen?', () => handleRequestAction(form));
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_roles.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const modal = document.getElementById('role-permissions-modal');
	if (!modal) return;

	const modalTitle = document.getElementById('role-modal-title');
	const roleIdInput = document.getElementById('modal-role-id');
	const roleNameInput = document.getElementById('modal-role-name');
	const checkboxContainer = document.getElementById('permissions-checkbox-container');
	const allPermissions = JSON.parse(document.getElementById('allPermissionsData').textContent || '[]');

	/**
	 * Opens the permissions modal and fetches the permissions for the selected role.
	 * @param {HTMLElement} btn The button that was clicked.
	 */
	const openModal = async (btn) => {
		const roleId = btn.dataset.roleId;
		const roleName = btn.dataset.roleName;

		modalTitle.textContent = `Berechtigungen für Rolle: ${roleName}`;
		roleIdInput.value = roleId;
		roleNameInput.value = roleName;
		checkboxContainer.innerHTML = '<p>Lade Berechtigungen...</p>';
		modal.classList.add('active');

		try {
			const response = await fetch(`${contextPath}/admin/roles?action=getRolePermissions&roleId=${roleId}`);
			if (!response.ok) throw new Error('Could not fetch role permissions');

			const data = await response.json();
			const assignedIds = new Set(data.permissionIds);

			checkboxContainer.innerHTML = ''; // Clear loading message

			// Group permissions for better UI
			const grouped = allPermissions.reduce((acc, p) => {
				const groupName = p.permissionKey.split('_')[0] || 'ALLGEMEIN';
				if (!acc[groupName]) acc[groupName] = [];
				acc[groupName].push(p);
				return acc;
			}, {});


			for (const groupName in grouped) {
				const details = document.createElement('details');
				details.open = true; // Default to open
				const summary = document.createElement('summary');
				summary.textContent = groupName;
				details.appendChild(summary);

				const groupDiv = document.createElement('div');
				groupDiv.className = 'permission-group';
				grouped[groupName].forEach(p => {
					const isChecked = assignedIds.has(p.id) ? 'checked' : '';
					// Prevent ADMIN role from having the main access permission removed to avoid lockouts.
					const isDisabled = p.permissionKey === 'ACCESS_ADMIN_PANEL' && roleName === 'ADMIN' ? 'disabled' : '';
					const label = document.createElement('label');
					label.className = 'checkbox-label';
					label.innerHTML = `
                        <input type="checkbox" name="permissionIds" value="${p.id}" ${isChecked} ${isDisabled}>
                        <span>
                            <strong>${p.permissionKey}</strong>
                            <small>${p.description}</small>
                        </span>
                    `;
					groupDiv.appendChild(label);
				});
				details.appendChild(groupDiv);
				checkboxContainer.appendChild(details);
			}

		} catch (error) {
			console.error("Error fetching role permissions:", error);
			checkboxContainer.innerHTML = '<p class="error-message">Fehler beim Laden der Berechtigungen.</p>';
		}
	};

	document.querySelectorAll('.edit-permissions-btn').forEach(btn => {
		btn.addEventListener('click', (e) => openModal(e.currentTarget));
	});

	const closeModal = () => modal.classList.remove('active');

	modal.querySelector('.modal-close-btn').addEventListener('click', closeModal);
	modal.addEventListener('click', (e) => {
		if (e.target === modal) closeModal();
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_storage_list.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	document.querySelectorAll('.js-confirm-form').forEach(form => {
		form.addEventListener('submit', function(e) {
			e.preventDefault();
			const message = this.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => this.submit());
		});
	});

	const lightbox = document.getElementById('lightbox');
	if (lightbox) {
		const lightboxImage = document.getElementById('lightbox-image');
		const closeBtn = lightbox.querySelector('.lightbox-close');

		document.querySelectorAll('.lightbox-trigger').forEach(trigger => {
			trigger.addEventListener('click', (e) => {
				e.preventDefault();
				lightboxImage.src = trigger.dataset.src;
				lightbox.style.display = 'flex';
			});
		});

		const closeLightbox = () => {
			lightbox.style.display = 'none';
			lightboxImage.src = '';
		};

		if (closeBtn) closeBtn.addEventListener('click', closeLightbox);
		lightbox.addEventListener('click', (e) => {
			if (e.target === lightbox) {
				closeLightbox();
			}
		});
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && lightbox.style.display === 'flex') {
				closeLightbox();
			}
		});
	}

	const itemModal = document.getElementById('item-modal');
	if (itemModal) {
		const form = itemModal.querySelector('form');
		const title = itemModal.querySelector('h3');
		const actionInput = form.querySelector('input[name="action"]');
		const idInput = form.querySelector('input[name="id"]');
		const closeModalBtn = itemModal.querySelector('.modal-close-btn');

		document.getElementById('new-item-btn').addEventListener('click', () => {
			form.reset();
			title.textContent = 'Neuen Lagerartikel anlegen';
			actionInput.value = 'create';
			itemModal.classList.add('active');
		});

		document.querySelectorAll('.edit-item-btn').forEach(btn => {
			btn.addEventListener('click', async () => {
				form.reset();
				const fetchUrl = btn.dataset.fetchUrl;
				try {
					const response = await fetch(fetchUrl);
					if (!response.ok) throw new Error('Could not fetch item data.');
					const itemData = await response.json();

					title.textContent = 'Lagerartikel bearbeiten';
					actionInput.value = 'update';
					idInput.value = itemData.id;
					form.querySelector('#name-modal').value = itemData.name || '';
					form.querySelector('#location-modal').value = itemData.location || '';
					form.querySelector('#cabinet-modal').value = itemData.cabinet || '';
					form.querySelector('#compartment-modal').value = itemData.compartment || '';
					form.querySelector('#quantity-modal').value = itemData.quantity;
					form.querySelector('#maxQuantity-modal').value = itemData.maxQuantity;
					form.querySelector('#weight_kg-modal').value = itemData.weightKg || '';
					form.querySelector('#price_eur-modal').value = itemData.priceEur || '';
					itemModal.classList.add('active');
				} catch (error) {
					console.error("Failed to open edit modal:", error);
					alert("Fehler beim Laden der Artikeldaten.");
				}
			});
		});
		closeModalBtn.addEventListener('click', () => itemModal.classList.remove('active'));
	}

	const defectModal = document.getElementById('defect-modal');
	if (defectModal) {
		const modalTitle = defectModal.querySelector('h3');
		const itemIdInput = defectModal.querySelector('#defect-item-id');
		const defectQtyInput = defectModal.querySelector('#defective_quantity');
		const reasonInput = defectModal.querySelector('#defect_reason');
		const closeModalBtn = defectModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.defect-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Defekt-Status für "${btn.dataset.itemName}" bearbeiten`;
				itemIdInput.value = btn.dataset.itemId;
				defectQtyInput.value = btn.dataset.currentDefectQty;
				defectQtyInput.max = btn.dataset.maxQty;
				reasonInput.value = btn.dataset.currentReason;
				defectModal.classList.add('active');
			});
		});
		closeModalBtn.addEventListener('click', () => defectModal.classList.remove('active'));
	}

	const repairModal = document.getElementById('repair-modal');
	if (repairModal) {
		const modalTitle = repairModal.querySelector('#repair-modal-title');
		const itemIdInput = repairModal.querySelector('#repair-item-id');
		const repairQtyInput = repairModal.querySelector('#repaired_quantity');
		const closeModalBtn = repairModal.querySelector('.modal-close-btn');

		document.querySelectorAll('.repair-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Artikel "${btn.dataset.itemName}" repariert`;
				itemIdInput.value = btn.dataset.itemId;
				repairQtyInput.value = "1";
				repairQtyInput.max = btn.dataset.maxRepairQty;
				repairModal.classList.add('active');
			});
		});

		closeModalBtn.addEventListener('click', () => repairModal.classList.remove('active'));
		repairModal.addEventListener('click', (e) => {
			if (e.target === repairModal) repairModal.classList.remove('active');
		});
	}

	const maintenanceModal = document.getElementById('maintenance-modal');
	if (maintenanceModal) {
		const modalTitle = maintenanceModal.querySelector('h3');
		const itemIdInput = maintenanceModal.querySelector('#maintenance-item-id');
		const closeModalBtn = maintenanceModal.querySelector('.modal-close-btn');
		const statusSelect = maintenanceModal.querySelector('#maintenance-status');

		document.querySelectorAll('.maintenance-modal-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				modalTitle.textContent = `Wartungs-Status für "${btn.dataset.itemName}"`;
				itemIdInput.value = btn.dataset.itemId;
				statusSelect.value = btn.dataset.currentStatus;
				maintenanceModal.classList.add('active');
			});
		});

		closeModalBtn.addEventListener('click', () => maintenanceModal.classList.remove('active'));
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_system.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const apiUrl = `${contextPath}/api/admin/system-stats`;

	const cpuProgress = document.getElementById('cpu-progress');
	const cpuText = document.getElementById('cpu-text');
	const ramProgress = document.getElementById('ram-progress');
	const ramText = document.getElementById('ram-text');
	const diskProgress = document.getElementById('disk-progress');
	const diskText = document.getElementById('disk-text');
	const uptimeText = document.getElementById('uptime-text');
	const batteryCard = document.getElementById('battery-card');
	const batteryProgress = document.getElementById('battery-progress');
	const batteryText = document.getElementById('battery-text');

	const formatGigaBytes = (gb) => {
		if (gb === 0) return '0 GB';
		if (gb < 1) return `${(gb * 1024).toFixed(0)} MB`;
		return `${gb.toFixed(2)} GB`;
	};

	const updateUI = (stats) => {
		const cpuPercent = stats.cpuLoad.toFixed(1);
		cpuProgress.style.width = cpuPercent + '%';
		cpuText.textContent = cpuPercent + '%';

		if (stats.totalMemory > 0) {
			const ramPercent = (stats.usedMemory / stats.totalMemory) * 100;
			ramProgress.style.width = ramPercent.toFixed(1) + '%';
			ramText.textContent = `${formatGigaBytes(stats.usedMemory)} / ${formatGigaBytes(stats.totalMemory)}`;
		}

		if (stats.totalDiskSpace > 0) {
			const diskPercent = (stats.usedDiskSpace / stats.totalDiskSpace) * 100;
			diskProgress.style.width = diskPercent.toFixed(1) + '%';
			diskText.textContent = `${formatGigaBytes(stats.usedDiskSpace)} / ${formatGigaBytes(stats.totalDiskSpace)}`;
		}

        const uptimeCard = uptimeText.closest('.card');
		if (stats.uptime && stats.uptime !== 'Nicht verfügbar') {
            if(uptimeCard) uptimeCard.style.display = 'block';
			uptimeText.textContent = stats.uptime;
		} else {
			if(uptimeCard) uptimeCard.style.display = 'none';
		}

		if (stats.batteryPercentage >= 0) {
			batteryCard.style.display = 'block';
			const batteryPercent = stats.batteryPercentage;
			batteryProgress.style.width = batteryPercent + '%';
			batteryText.textContent = batteryPercent + '%';
		} else {
			batteryCard.style.display = 'none';
		}
	};

	const fetchStats = async () => {
		try {
			const response = await fetch(apiUrl);
			if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
			const data = await response.json();
			updateUI(data);
		} catch (error) {
			console.error("Could not fetch system stats:", error);
			cpuText.textContent = "Fehler";
			ramText.textContent = "Fehler";
			diskText.textContent = "Fehler";
			uptimeText.textContent = "Fehler";
		}
	};

	fetchStats();
	let intervalId = setInterval(fetchStats, 5000);

	document.addEventListener("visibilitychange", () => {
		if (document.hidden) {
			clearInterval(intervalId);
		} else {
			fetchStats();
			intervalId = setInterval(fetchStats, 5000);
		}
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_users.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';

	const modal = document.getElementById('user-modal');
	if (!modal) return;

	const form = document.getElementById('user-modal-form');
	const title = document.getElementById('user-modal-title');
	const actionInput = form.querySelector('#user-modal-action');
	const idInput = form.querySelector('#userId-modal');
	const usernameInput = form.querySelector('#username-modal');
	const passwordInput = form.querySelector('#password-modal');
	const passwordGroup = form.querySelector('#password-group');
	const roleInput = form.querySelector('#role-modal');
	const classYearInput = form.querySelector('#classYear-modal');
	const classNameInput = form.querySelector('#className-modal');
	const emailInput = form.querySelector('#email-modal');
	const permissionsContainer = document.getElementById('permissions-checkbox-container');
	const closeModalBtn = modal.querySelector('.modal-close-btn');

	const groupedPermissions = JSON.parse(document.getElementById('allPermissionsData').textContent);

	const closeModal = () => modal.classList.remove('active');

	const populatePermissions = (assignedIds = new Set()) => {
		permissionsContainer.innerHTML = '';

		for (const [groupName, permissionsInGroup] of Object.entries(groupedPermissions)) {
			const details = document.createElement('details');
			details.open = true;

			const summary = document.createElement('summary');
			summary.style.fontWeight = 'bold';
			summary.style.cursor = 'pointer';
			summary.style.padding = '0.5rem 0';
			summary.textContent = groupName;

			const groupDiv = document.createElement('div');
			groupDiv.style.paddingLeft = '1rem';

			permissionsInGroup.forEach(p => {
				const isChecked = assignedIds.has(p.id) ? 'checked' : '';
				const label = document.createElement('label');
				label.style.display = 'flex';
				label.style.alignItems = 'flex-start';
				label.style.marginBottom = '0.5rem';
				label.innerHTML = `
                    <input type="checkbox" name="permissionIds" value="${p.id}" ${isChecked} style="margin-top: 5px; margin-right: 10px;">
                    <div>
                        <strong>${p.permissionKey.replace(groupName + '_', '')}</strong>
                        <small style="display: block; color: var(--text-muted-color);">${p.description}</small>
                    </div>
                `;
				groupDiv.appendChild(label);
			});

			details.appendChild(summary);
			details.appendChild(groupDiv);
			permissionsContainer.appendChild(details);
		}
	};

	const newUserBtn = document.getElementById('new-user-btn');
	if (newUserBtn) {
		newUserBtn.addEventListener('click', () => {
			form.reset();
			title.textContent = "Neuen Benutzer anlegen";
			actionInput.value = "create";
			idInput.value = "";
			passwordInput.required = true;
			passwordGroup.style.display = 'block';
			roleInput.value = "3";
			populatePermissions();
			modal.classList.add('active');
			usernameInput.focus();
		});
	}

	document.querySelectorAll('.edit-user-btn').forEach(btn => {
		btn.addEventListener('click', async () => {
			form.reset();
			const fetchUrl = btn.dataset.fetchUrl;
			try {
				const response = await fetch(fetchUrl);
				if (!response.ok) throw new Error('Could not fetch user data');
				const data = await response.json();
				const user = data.user;
				const assignedPermissionIds = new Set(data.permissionIds);

				title.textContent = `Benutzer bearbeiten: ${user.username}`;
				actionInput.value = "update";
				idInput.value = user.id;
				usernameInput.value = user.username || '';
				roleInput.value = user.roleId || '3';
				classYearInput.value = user.classYear || '';
				classNameInput.value = user.className || '';
				emailInput.value = user.email || '';

				passwordInput.required = false;
				passwordGroup.style.display = 'none';

				populatePermissions(assignedPermissionIds);

				modal.classList.add('active');
			} catch (error) {
				console.error('Failed to open edit modal:', error);
				showToast('Benutzerdaten konnten nicht geladen werden.', 'danger');
			}
		});
	});

	const updateTableRow = (user) => {
		const row = document.querySelector(`tr[data-user-id='${user.id}']`);
		if (row) {
			row.querySelector("td[data-field='username']").textContent = user.username;
			row.querySelector("td[data-field='roleName']").textContent = user.roleName;
		}
		const card = document.querySelector(`.list-item-card[data-user-id='${user.id}']`);
		if (card) {
			card.querySelector("h3[data-field='username']").textContent = user.username;
			card.querySelector("strong[data-field='roleName']").textContent = user.roleName;
		}
	};

	const removeTableRow = (userId) => {
		document.querySelector(`tr[data-user-id='${userId}']`)?.remove();
		document.querySelector(`.list-item-card[data-user-id='${userId}']`)?.remove();
	};


	form.addEventListener('submit', async (event) => {
		event.preventDefault();
		const action = actionInput.value;
		const formActionUrl = `${contextPath}/admin/action/user?action=${action}`;

		const formData = new URLSearchParams(new FormData(form));
		try {
			const response = await fetch(formActionUrl, {
				method: 'POST',
				body: formData
			});

			const result = await response.json();

			if (response.ok && result.success) {
				closeModal();
				showToast(result.message, 'success');
				if (action === 'create') {
					window.location.reload();
				} else if (action === 'update') {
					updateTableRow(result.data);
				}
			} else {
				showToast(result.message || 'Ein unbekannter Fehler ist aufgetreten.', 'danger');
			}
		} catch (error) {
			console.error('Error submitting form:', error);
			showToast('Ein Netzwerkfehler ist aufgetreten.', 'danger');
		}
	});

	const handleAjaxFormSubmit = async (formElement) => {
		const formData = new URLSearchParams(new FormData(formElement));
		const actionUrl = formElement.getAttribute('action');

		try {
			const response = await fetch(actionUrl, { method: 'POST', body: formData });
			const result = await response.json();

			if (response.ok && result.success) {
				if (result.data && result.data.newPassword) {
					const bannerContainer = document.querySelector('.main-content');
					document.querySelectorAll('.password-reset-alert, .info-message, .success-message, .error-message').forEach(el => el.remove());

					const banner = document.createElement('p');
					banner.className = 'password-reset-alert';
					banner.id = 'password-reset-alert';
					banner.innerHTML = `<i class="fas fa-key"></i> ${result.message}`;
					bannerContainer.prepend(banner);
				} else {
					showToast(result.message, 'success');
				}

				// FIX: Get the action from the form data itself, not by parsing a URL object.
				const action = formData.get('action');
				if (action === 'delete') {
					removeTableRow(result.data.deletedUserId);
				}
			} else {
				showToast(result.message || 'Ein Fehler ist aufgetreten.', 'danger');
			}
		} catch (error) {
			console.error('Error submitting form via AJAX:', error);
			showToast('Ein Netzwerkfehler ist aufgetreten.', 'danger');
		}
	};

	document.body.addEventListener('submit', (event) => {
		const form = event.target;
		if (form.matches('.js-confirm-delete-form, .js-reset-password-form, .js-unlock-form')) {
			event.preventDefault();
			const message = form.dataset.confirmMessage || 'Sind Sie sicher?';
			showConfirmationModal(message, () => handleAjaxFormSubmit(form));
		}
	});

	closeModalBtn.addEventListener('click', closeModal);
	modal.addEventListener('click', (event) => { if (event.target === modal) closeModal(); });
	document.addEventListener('keydown', (event) => { if (event.key === 'Escape' && modal.classList.contains('active')) closeModal(); });

	const tabButtons = modal.querySelectorAll('.modal-tab-button');
	const tabContents = modal.querySelectorAll('.modal-tab-content');
	tabButtons.forEach(button => {
		button.addEventListener('click', () => {
			tabButtons.forEach(btn => btn.classList.remove('active'));
			button.classList.add('active');
			tabContents.forEach(content => {
				content.classList.toggle('active', content.id === button.dataset.tab);
			});
		});
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\admin\admin_wiki_details.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const editorContainer = document.getElementById('editor-page-container');
	if (!editorContainer) return;

	const editor = document.getElementById('editor');
	const preview = document.getElementById('markdown-preview');
	const toggle = document.getElementById('mode-toggle');

	// Initial render of the preview pane from the reliable textarea source
	if (preview && editor && typeof marked !== 'undefined') {
		const initialContent = editor.value;
		preview.innerHTML = marked.parse(initialContent, { sanitize: true });
	}

	if (toggle) {
		// Set initial toggle state based on which pane is visible by default (view mode)
		toggle.checked = false;
		editor.style.display = 'none';
		preview.style.display = 'block';


		toggle.addEventListener('change', () => {
			if (toggle.checked) { // Switch to Edit mode
				editor.style.display = 'block';
				preview.style.display = 'none';
			} else { // Switch to View mode
				// Re-render markdown from the (potentially modified) textarea
				if (typeof marked !== 'undefined') {
					preview.innerHTML = marked.parse(editor.value || '', { sanitize: true });
				}
				editor.style.display = 'none';
				preview.style.display = 'block';
			}
		});
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\login.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const lockoutTimer = document.getElementById('lockout-timer');
	if (lockoutTimer) {
		const endTime = parseInt(lockoutTimer.dataset.endTime, 10);
		const lockoutLevel = parseInt(lockoutTimer.dataset.lockoutLevel, 10);

		const durations = [60, 120, 300, 600, 1800]; // in seconds
		const duration = durations[Math.min(lockoutLevel, durations.length - 1)];

		const intervalId = setInterval(() => {
			const now = Date.now();
			const remainingSeconds = Math.max(0, Math.round((endTime + (duration * 1000) - now) / 1000));

			if (remainingSeconds <= 0) {
				clearInterval(intervalId);
				window.location.reload(); // Reload the page to clear the lockout message
			} else {
				const minutes = Math.floor(remainingSeconds / 60);
				const seconds = remainingSeconds % 60;
				lockoutTimer.textContent = `Bitte versuchen Sie es in ${minutes} Minute(n) und ${seconds.toString().padStart(2, '0')} Sekunde(n) erneut.`;
			}
		}, 1000);
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\logout.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	setTimeout(function() {
		window.location.href = `${contextPath}/login`;
	}, 5000);
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\auth\passkey_auth.js
========================================================================

/**
 * Handles all client-side logic for WebAuthn (Passkey) authentication.
 */
document.addEventListener('DOMContentLoaded', () => {
    const contextPath = document.body.dataset.contextPath || '';
    const csrfToken = document.body.dataset.csrfToken;

    // --- UTILITY FUNCTIONS ---
    // These functions convert between ArrayBuffer and Base64URL strings
    const bufferDecode = (value) => Uint8Array.from(atob(value.replace(/_/g, '/').replace(/-/g, '+')), c => c.charCodeAt(0));
    const bufferEncode = (value) => btoa(String.fromCharCode.apply(null, new Uint8Array(value))).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');

    // --- REGISTRATION LOGIC ---
    const registerPasskeyBtn = document.getElementById('register-passkey-btn');
    if (registerPasskeyBtn) {
        registerPasskeyBtn.addEventListener('click', async () => {
            try {
                // 1. Get challenge from server
                const createOptionsRes = await fetch(`${contextPath}/api/auth/passkey/register/start`);
                const createOptions = await createOptionsRes.json();
                
                // 2. Decode challenge and user handle
                createOptions.challenge = bufferDecode(createOptions.challenge);
                createOptions.user.id = bufferDecode(createOptions.user.id);
                
                // 3. Call browser's WebAuthn API
                const credential = await navigator.credentials.create({ publicKey: createOptions });

                // 4. Encode the response data to send to server
                const credentialForServer = {
                    id: credential.id,
                    rawId: bufferEncode(credential.rawId),
                    type: credential.type,
                    response: {
                        clientDataJSON: bufferEncode(credential.response.clientDataJSON),
                        attestationObject: bufferEncode(credential.response.attestationObject),
                    },
                };
                
                // 5. Prompt for a device name
                const deviceName = prompt('Bitte geben Sie einen Namen für dieses Gerät ein (z.B. "Mein Laptop"):', 'Mein Gerät');
                if (!deviceName) return; // User cancelled

                // 6. Send response to server to finish registration
                const finishRes = await fetch(`${contextPath}/api/auth/passkey/register/finish?deviceName=${encodeURIComponent(deviceName)}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(credentialForServer)
                });

                const result = await finishRes.json();
                if (result.success) {
                    showToast('Gerät erfolgreich registriert!', 'success');
                    setTimeout(() => window.location.reload(), 1500);
                } else {
                    throw new Error(result.message || 'Registrierung fehlgeschlagen.');
                }
            } catch (err) {
                console.error('Passkey registration error:', err);
                showToast(`Fehler bei der Registrierung: ${err.message}`, 'danger');
            }
        });
    }
    
    // --- DELETE PASSKEY LOGIC ---
    document.querySelectorAll('.delete-passkey-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            const form = btn.closest('form');
            showConfirmationModal('Diesen Passkey wirklich entfernen?', () => form.submit());
        });
    });

    // --- LOGIN LOGIC ---
    const loginPasskeyBtn = document.getElementById('login-passkey-btn');
    if (loginPasskeyBtn) {
        loginPasskeyBtn.addEventListener('click', async () => {
            try {
                const username = document.getElementById('username').value;
                if (!username) {
                    showToast('Bitte geben Sie zuerst Ihren Benutzernamen ein.', 'info');
                    return;
                }
                
                // 1. Get challenge from server
                const getOptionsRes = await fetch(`${contextPath}/api/auth/passkey/login/start`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: `username=${encodeURIComponent(username)}`
                });
                const getOptions = await getOptionsRes.json();

                // 2. Decode challenge
                getOptions.challenge = bufferDecode(getOptions.challenge);
                
                // 3. Call browser's WebAuthn API
                const credential = await navigator.credentials.get({ publicKey: getOptions });

                // 4. Encode response data for server
                const credentialForServer = {
                    id: credential.id,
                    rawId: bufferEncode(credential.rawId),
                    type: credential.type,
                    response: {
                        clientDataJSON: bufferEncode(credential.response.clientDataJSON),
                        authenticatorData: bufferEncode(credential.response.authenticatorData),
                        signature: bufferEncode(credential.response.signature),
                        userHandle: credential.response.userHandle ? bufferEncode(credential.response.userHandle) : null,
                    },
                };
                
                // 5. Send to server for verification
                const finishRes = await fetch(`${contextPath}/api/auth/passkey/login/finish`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(credentialForServer)
                });
                
                const result = await finishRes.json();
                if(result.success) {
                    showToast('Erfolgreich eingeloggt!', 'success');
                    window.location.href = `${contextPath}/home`;
                } else {
                    throw new Error(result.message || 'Login fehlgeschlagen.');
                }
            } catch (err) {
                console.error('Passkey login error:', err);
                showToast(`Fehler beim Login: ${err.message}`, 'danger');
            }
        });
    }
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error400.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const output = document.getElementById('droid-output');
	const redirectContainer = document.getElementById('redirect-container');
	const contentLength = document.body.dataset.contentLength || 'UNKNOWN';

	const lines = [
		'INITIATING DATASTREAM ANALYSIS...',
		`PACKET RECEIVED. SIZE: ${contentLength} BYTES.`,
		'PARSING HEADER... [OK]',
		'ANALYSING PAYLOAD...',
		'    > SCANNING FOR SYNTAX VIOLATIONS...',
		'    > ERROR! UNEXPECTED TOKEN OR MALFORMED PARAMETER DETECTED.',
		'    > CORRUPTION LEVEL: MODERATE.',
		'CONCLUSION: ANFRAGE NICHT VERARBEITBAR. DATENINTEGRITÄT KOMPROMITTIERT.',
		'EMPFEHLUNG: ZURÜCKKEHREN UND ANFRAGE NEU FORMULIEREN.',
		''
	];

	let lineIndex = 0;

	function printLine() {
		if (lineIndex < lines.length) {
			const p = document.createElement('p');
			p.textContent = lines[lineIndex];
			output.appendChild(p);
			output.scrollTop = output.scrollHeight;
			lineIndex++;
			setTimeout(printLine, Math.random() * 200 + 50);
		} else {
			redirectContainer.style.opacity = '1';
		}
	}

	printLine();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error401.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
    const statusText = document.getElementById('scanner-status');
    const light = document.getElementById('scanner-light');
    const progress = document.getElementById('scanner-progress');
    const redirectContainer = document.getElementById('redirect-container');

    const steps = [
        { text: 'SCANNE...', color: '#ffc107', lightColor: '#ffc107', duration: 1500, progress: 50 },
        { text: 'KEINE ID', color: '#dc3545', lightColor: '#dc3545', duration: 1000, progress: 80 },
        { text: 'ZUGRIFF?', color: '#dc3545', lightColor: '#dc3545', duration: 800, progress: 100 },
        { text: 'VERWEIGERT', color: '#dc3545', lightColor: '#dc3545', duration: 2000, progress: 100 }
    ];

    let currentStep = 0;

    function runScan() {
        if(currentStep >= steps.length) {
            redirectContainer.style.opacity = '1';
            return;
        }

        const step = steps[currentStep];
        statusText.textContent = step.text;
        statusText.style.color = step.color;
        light.style.background = step.lightColor;
        light.style.boxShadow = `0 0 10px ${step.lightColor}`;
        progress.style.width = `${step.progress}%`;
        progress.style.backgroundColor = step.lightColor;

        currentStep++;
        setTimeout(runScan, step.duration);
    }

    setTimeout(runScan, 500); 
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error403.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const consoleBody = document.getElementById('console-body');
	const redirectContainer = document.getElementById('redirect-container');
	const username = document.body.dataset.username || 'unknown_user';
	const role = document.body.dataset.role || 'unknown_role';
	const requestUri = document.body.dataset.requestUri || '/';
	const contextPath = document.body.dataset.contextPath || '';

	let currentLine;

	async function type(text, delay = 25) {
		for (const char of text) {
			currentLine.innerHTML += char;
			consoleBody.scrollTop = consoleBody.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
		currentLine.innerHTML = currentLine.innerHTML.replace('<span class="cursor"></span>', '');
		consoleBody.innerHTML += '\n'; 
	}

	async function addLine(text, className = '') {
		currentLine = document.createElement('span');
		if (className) currentLine.className = className;
		consoleBody.appendChild(currentLine);
		await type(text + ' <span class="cursor"></span>');
	}

	async function runSequence() {
		await addLine('[INFO] Eingehender Request erkannt...', 'info');
		await new Promise(resolve => setTimeout(resolve, 300));
		await addLine(`[INFO] Ziel-Ressource: ${requestUri}`, 'info');
		await new Promise(resolve => setTimeout(resolve, 400));
		await addLine('[INFO] Starte Identitäts-Scan...', 'info');
		await new Promise(resolve => setTimeout(resolve, 500));
		await addLine(`[OK]   ... Subjekt identifiziert: "${username}"`, 'ok');
		await new Promise(resolve => setTimeout(resolve, 200));
		await addLine(`[OK]   ... Zugehörigkeit/Rolle: [${role}]`, 'ok');
		await new Promise(resolve => setTimeout(resolve, 400));
		await addLine('[WARN] Prüfe Berechtigungs-Matrix für Ziel-Ressource...', 'warn');
		await new Promise(resolve => setTimeout(resolve, 800));
		await addLine('[FAIL] >>> ZUGRIFF VERWEIGERT <<<', 'fail');
		await new Promise(resolve => setTimeout(resolve, 200));
		await addLine('[FAIL] >>> Erforderliche Berechtigung nicht im Token des Subjekts gefunden.', 'fail');
		await new Promise(resolve => setTimeout(resolve, 500));
		await addLine('[INFO] Aktion protokolliert. Sicherheits-Subsystem wird heruntergefahren.', 'info');

		currentLine = document.createElement('span');
		consoleBody.appendChild(currentLine);
		currentLine.innerHTML = '> <span class="cursor"></span>';

		redirectContainer.style.opacity = '1';

		setTimeout(() => {
			window.location.href = `${contextPath}/home`;
		}, 5000);
	}

	runSequence();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error404.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const terminalBody = document.getElementById('terminal-body');
	const homeLinkContainer = document.getElementById('home-link-container');
	const contextPath = document.body.dataset.contextPath || '';
	const requestUri = document.body.dataset.requestUri || '/';

	async function type(text, element, delay = 50) {
		for (const char of text) {
			element.textContent += char;
			terminalBody.scrollTop = terminalBody.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
	}

	async function addLine(text, className, delay = 20) {
		const p = document.createElement('p');
		if (className) p.className = className;
		terminalBody.appendChild(p);
		await type(text, p, delay);
	}

	async function runSequence() {
		const p1 = document.createElement('p');
		terminalBody.appendChild(p1);

		const prompt1 = document.createElement('span');
		prompt1.className = 'prompt';
		await type('user@technik-team:~$ ', prompt1, 20);
		p1.appendChild(prompt1);

		const command1 = document.createElement('span');
		command1.className = 'command';
		await type('ls -l ' + requestUri, command1, 50);
		p1.appendChild(command1);

		await new Promise(resolve => setTimeout(resolve, 500));

		await addLine('ls: cannot access \'' + requestUri + '\': No such file or directory', 'error', 15);
		await new Promise(resolve => setTimeout(resolve, 800));

		await addLine('Tipp: Kehren Sie mit dem folgenden Befehl zur Startseite zurück:', 'info', 25);
		await new Promise(resolve => setTimeout(resolve, 300));

		const p_link = document.createElement('p');
		terminalBody.appendChild(p_link);

		const prompt2 = document.createElement('span');
		prompt2.className = 'prompt';
		await type('user@technik-team:~$ ', prompt2, 20);
		p_link.appendChild(prompt2);

		const homeLink = document.createElement('a');
		homeLink.href = `${contextPath}/home`;
		homeLink.className = 'link';
		p_link.appendChild(homeLink);
		await type('cd /home', homeLink, 80);

		const cursor = document.createElement('span');
		cursor.className = 'cursor';
		cursor.innerHTML = ' ';
		p_link.appendChild(cursor);

		homeLinkContainer.style.opacity = '1';
	}

	runSequence();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error500.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const diagBtn = document.getElementById('diagnostic-btn');
	const output = document.getElementById('diagnostic-output');

	const steps = [
		{ text: 'Initialisiere Diagnose-Protokoll...', type: 'info', icon: 'fas fa-cogs' },
		{ text: 'Prüfe Speicher-Integrität...', type: 'info', icon: 'fas fa-memory' },
		{ text: '[OK] RAM Module antworten.', type: 'ok', icon: 'fas fa-check-circle' },
		{ text: 'Verbinde mit Kernel...', type: 'info', icon: 'fas fa-project-diagram' },
		{ text: '[WARN] Kernel antwortet langsam. Kaffee-Level kritisch.', type: 'warn', icon: 'fas fa-exclamation-triangle' },
		{ text: 'Lade KI-Logikmodule...', type: 'info', icon: 'fas fa-brain' },
		{ text: '[FAIL] Logikmodul "Hamster im Laufrad" hat die Arbeit niedergelegt.', type: 'fail', icon: 'fas fa-times-circle' },
		{ text: 'Versuche Workaround: Mehr Glitzer-Effekte laden...', type: 'warn', icon: 'fas fa-magic' },
		{ text: '[FAIL] Glitzer-Puffer übergelaufen.', type: 'fail', icon: 'fas fa-times-circle' },
		{ text: '--------------------------------', type: 'info', icon: '' },
		{ text: 'Diagnose abgeschlossen. Fehler gefunden.', type: 'fail', icon: 'fas fa-skull-crossbones' }
	];

	let isRunning = false;

	async function typeText(element, text, delay = 20) {
		for (let i = 0; i < text.length; i++) {
			element.innerHTML += text.charAt(i);
			output.scrollTop = output.scrollHeight;
			await new Promise(resolve => setTimeout(resolve, delay));
		}
	}

	diagBtn.addEventListener('click', async () => {
		if (isRunning) return;

		isRunning = true;
		diagBtn.disabled = true;
		diagBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Diagnose läuft...';
		output.innerHTML = ''; 

		for (const step of steps) {
			const line = document.createElement('p');
			line.className = step.type;
			const iconHtml = step.icon ? `<i class="${step.icon}" style="margin-right: 8px;"></i>` : '';
			line.innerHTML = `${iconHtml}`;
			output.appendChild(line);

			await typeText(line, step.text);

			await new Promise(resolve => setTimeout(resolve, 300)); 
		}

		const finalLine = document.createElement('p');
		finalLine.innerHTML = '> <span class="cursor"> </span>';
		output.appendChild(finalLine);
		output.scrollTop = output.scrollHeight;

		diagBtn.disabled = false;
		diagBtn.innerHTML = '<i class="fas fa-tasks"></i> Diagnose erneut starten';
		isRunning = false;
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\error\error503.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const output = document.getElementById('reboot-output');
	const progress = document.getElementById('reboot-progress');
	const contextPath = document.body.dataset.contextPath || '';

	const steps = [
		{ text: 'System check initiated...', delay: 100, progress: 10 },
		{ text: 'Checking memory modules... [OK]', delay: 300, progress: 20 },
		{ text: 'Checking CPU cores... [OK]', delay: 300, progress: 30 },
		{ text: 'Pinging gateway... [NO RESPONSE]', delay: 1000, progress: 40 },
		{ text: 'Server overload detected. Reason: Too many requests.', delay: 500, progress: 50 },
		{ text: 'Flushing request queue...', delay: 1500, progress: 70 },
		{ text: 'Initializing reboot sequence...', delay: 500, progress: 80 },
		{ text: 'System will be back online shortly.', delay: 1000, progress: 100 },
		{ text: 'Redirecting to login page...', delay: 2000, progress: 100 }
	];

	let stepIndex = 0;

	function runSequence() {
		if (stepIndex >= steps.length) {
			window.location.href = `${contextPath}/login`;
			return;
		}

		const step = steps[stepIndex];
		const p = document.createElement('p');
		p.textContent = step.text;
		output.appendChild(p);
		output.scrollTop = output.scrollHeight;

		progress.style.width = `${step.progress}%`;

		stepIndex++;
		setTimeout(runSequence, step.delay);
	}

	runSequence();
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\calendar.js
========================================================================

document.addEventListener('DOMContentLoaded', function() {
	const calendarEl = document.getElementById('calendar-container');
	const contextPath = document.body.dataset.contextPath || '';

	// FIX: The calendar must be initialized if the element exists.
	// CSS media queries are responsible for showing/hiding the container, not JS.
	// The previous getComputedStyle check was a race condition.
	if (calendarEl) {
		try {
			const calendar = new FullCalendar.Calendar(calendarEl, {
				initialView: 'dayGridMonth',
				locale: 'de',
				headerToolbar: {
					left: 'prev,next today',
					center: 'title',
					right: 'dayGridMonth,timeGridWeek,listWeek'
				},
				events: `${contextPath}/api/calendar/entries`,
				eventClick: function(info) {
					info.jsEvent.preventDefault();
					if (info.event.url) {
						window.location.href = info.event.url;
					}
				}
			});
			calendar.render();
		} catch (e) {
			console.error("FullCalendar failed to initialize. This is often caused by a corrupted library file.", e);
			calendarEl.innerHTML = `<div class="error-message">Kalender konnte nicht geladen werden. Möglicherweise ist eine Bibliotheksdatei beschädigt.</div>`;
		}
	}
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\dateien.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const uploadModal = document.getElementById('upload-version-modal');
	if (!uploadModal) return;

	const modalTitle = document.getElementById('upload-modal-title');
	const modalFileIdInput = document.getElementById('upload-file-id');
	const modalFileNameSpan = document.getElementById('upload-file-name');
	const fileInput = document.getElementById('new-file-version');
	const closeModalBtn = uploadModal.querySelector('.modal-close-btn');

	document.querySelectorAll('.upload-new-version-btn').forEach(btn => {
		btn.addEventListener('click', () => {
			const fileId = btn.dataset.fileId;
			const fileName = btn.dataset.fileName;

			modalFileIdInput.value = fileId;
			modalFileNameSpan.textContent = fileName;
			fileInput.value = ''; // Reset file input
			uploadModal.classList.add('active');
		});
	});

	const closeModal = () => uploadModal.classList.remove('active');

	closeModalBtn.addEventListener('click', closeModal);
	uploadModal.addEventListener('click', (e) => {
		if (e.target === uploadModal) closeModal();
	});
});
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\js\public\eventDetails.js
========================================================================

document.addEventListener('DOMContentLoaded', () => {
	const contextPath = document.body.dataset.contextPath || '';
	const eventId = document.body.dataset.eventId || '';
	const currentUserId = document.body.dataset.userId || '';
	const isAdmin = document.body.dataset.isAdmin === 'true';

	const taskModal = document.getElementById('task-modal');
	if (taskModal) {
		const allUsers = JSON.parse(document.getElementById('allUsersData')?.textContent || '[]');
		const allItems = JSON.parse(document.getElementById('allItemsData')?.textContent || '[]');
		const allKits = JSON.parse(document.getElementById('allKitsData')?.textContent || '[]');
		const allTasks = JSON.parse(document.getElementById('allTasksData')?.textContent || '[]');

		const form = document.getElementById('task-modal-form');
		const title = document.getElementById('task-modal-title');
		const taskIdInput = document.getElementById('task-id-modal');
		const descInput = document.getElementById('task-description-modal');
		const detailsInput = document.getElementById('task-details-modal');
		const orderInput = document.getElementById('task-display-order-modal');
		const statusGroup = document.getElementById('task-status-group');
		const statusInput = document.getElementById('task-status-modal');
		const deleteBtn = document.getElementById('delete-task-btn');

		const assignmentTypeRadios = form.querySelectorAll('input[name="assignmentType"]');
		const directFields = document.getElementById('direct-assignment-fields');
		const poolFields = document.getElementById('pool-assignment-fields');
		const requiredPersonsInput = document.getElementById('task-required-persons-modal');
		const userCheckboxesContainer = document.getElementById('task-user-checkboxes');

		const itemsContainer = document.getElementById('task-items-container');
		const kitsContainer = document.getElementById('task-kits-container');

		const createRow = (container, onRemove) => {
			const row = document.createElement('div');
			row.className = 'dynamic-row';
			const removeBtn = document.createElement('button');
			removeBtn.type = 'button';
			removeBtn.className = 'btn-small btn-danger';
			removeBtn.innerHTML = '×';
			removeBtn.onclick = () => onRemove(row);
			row.appendChild(removeBtn);
			container.appendChild(row);
			return row;
		};

		const addItemRow = (item = { id: '', quantity: 1 }) => {
			const row = createRow(itemsContainer, r => r.remove());
			const select = document.createElement('select');
			select.name = 'itemIds[]';
			select.className = 'form-group';
			select.innerHTML = '<option value="">-- Material --</option>' + allItems.map(i => `<option value="${i.id}" data-max-qty="${i.availableQuantity}">${i.name}</option>`).join('');
			select.value = item.id;

			const input = document.createElement('input');
			input.type = 'number';
			input.name = 'itemQuantities[]';
			input.value = item.quantity;
			input.min = '1';
			input.className = 'form-group';
			input.style.maxWidth = '100px';

			select.addEventListener('change', () => {
				const selectedOption = select.options[select.selectedIndex];
				const maxQty = selectedOption.dataset.maxQty;
				input.max = maxQty || '';
				if (maxQty) input.title = `Maximal verfügbar: ${maxQty}`;
			});

			row.prepend(select, input);
		};

		const addKitRow = (kit = { id: '' }) => {
			const row = createRow(kitsContainer, r => r.remove());
			const select = document.createElement('select');
			select.name = 'kitIds[]';
			select.className = 'form-group';
			select.innerHTML = '<option value="">-- Kit --</option>' + allKits.map(k => `<option value="${k.id}">${k.name}</option>`).join('');
			select.value = kit.id;
			row.prepend(select);
		};

		const openModal = () => taskModal.classList.add('active');
		const closeModal = () => taskModal.classList.remove('active');

		const resetModal = () => {
			form.reset();
			taskIdInput.value = '';
			itemsContainer.innerHTML = '';
			kitsContainer.innerHTML = '';
			userCheckboxesContainer.innerHTML = '';
			statusGroup.style.display = 'none';
			deleteBtn.style.display = 'none';
			directFields.style.display = 'block';
			poolFields.style.display = 'none';
			form.querySelector('input[name="assignmentType"][value="direct"]').checked = true;
		};

		document.getElementById('new-task-btn')?.addEventListener('click', () => {
			resetModal();
			title.textContent = 'Neue Aufgabe erstellen';
			allUsers.forEach(user => {
				userCheckboxesContainer.innerHTML += `<label><input type="checkbox" name="userIds" value="${user.id}"> ${user.username}</label>`;
			});
			openModal();
		});

		document.querySelectorAll('.edit-task-btn').forEach(btn => {
			btn.addEventListener('click', () => {
				const taskId = parseInt(btn.dataset.taskId, 10);
				const task = allTasks.find(t => t.id === taskId);
				if (!task) return;

				resetModal();
				title.textContent = 'Aufgabe bearbeiten';
				statusGroup.style.display = 'block';
				deleteBtn.style.display = 'inline-block';

				taskIdInput.value = task.id;
				descInput.value = task.description;
				detailsInput.value = task.details || '';
				orderInput.value = task.displayOrder;
				statusInput.value = task.status;

				if (task.requiredPersons > 0) {
					form.querySelector('input[name="assignmentType"][value="pool"]').checked = true;
					poolFields.style.display = 'block';
					directFields.style.display = 'none';
					requiredPersonsInput.value = task.requiredPersons;
				} else {
					const assignedIds = new Set(task.assignedUsers.map(u => u.id));
					allUsers.forEach(user => {
						const isChecked = assignedIds.has(user.id) ? 'checked' : '';
						userCheckboxesContainer.innerHTML += `<label><input type="checkbox" name="userIds" value="${user.id}" ${isChecked}> ${user.username}</label>`;
					});
				}

				task.requiredItems?.forEach(item => addItemRow({ id: item.id, quantity: item.quantity }));
				task.requiredKits?.forEach(kit => addKitRow({ id: kit.id }));
				openModal();
			});
		});

		assignmentTypeRadios.forEach(radio => {
			radio.addEventListener('change', () => {
				directFields.style.display = radio.value === 'direct' ? 'block' : 'none';
				poolFields.style.display = radio.value === 'pool' ? 'block' : 'none';
			});
		});

		deleteBtn.addEventListener('click', () => {
			showConfirmationModal('Diese Aufgabe wirklich löschen?', () => {
				const csrfToken = form.querySelector('input[name="csrfToken"]').value;
				const deleteForm = document.createElement('form');
				deleteForm.method = 'post';
				deleteForm.action = `${contextPath}/task-action`;
				deleteForm.innerHTML = `
					<input type="hidden" name="action" value="delete">
					<input type="hidden" name="taskId" value="${taskIdInput.value}">
					<input type="hidden" name="eventId" value="${eventId}">
					<input type="hidden" name="csrfToken" value="${csrfToken}">`;
				document.body.appendChild(deleteForm);
				deleteForm.submit();
			});
		});

		// FIX: Use event delegation on the body to handle clicks on dynamically added elements
		document.body.addEventListener('click', e => {
			const addItemBtn = e.target.closest('#add-task-item-btn');
			const addKitBtn = e.target.closest('#add-task-kit-btn');

			if (addItemBtn) {
				addItemRow();
			}
			if (addKitBtn) {
				addKitRow();
			}
		});

		taskModal.querySelector('.modal-close-btn').addEventListener('click', closeModal);
	}

	const taskListContainer = document.getElementById('task-list-container');
	if (taskListContainer) {
		taskListContainer.addEventListener('click', (e) => {
			const markDoneBtn = e.target.closest('.mark-task-done-btn');
			if (markDoneBtn) {
				const taskId = markDoneBtn.dataset.taskId;
				const csrfToken = document.body.dataset.csrfToken;
				const params = new URLSearchParams();
				params.append('action', 'updateStatus');
				params.append('taskId', taskId);
				params.append('status', 'ERLEDIGT');
				if (csrfToken) {
					params.append('csrfToken', csrfToken);
				}

				fetch(`${contextPath}/task-action`, {
					method: 'POST',
					body: params
				})
					.then(response => {
						if (response.ok) window.location.reload();
						else alert('Fehler beim Aktualisieren der Aufgabe.');
					})
					.catch(error => {
						console.error("Error updating task status:", error);
						alert('Netzwerkfehler beim Aktualisieren der Aufgabe.');
					});
			}
		});
	}

	const chatBox = document.getElementById('chat-box');
	if (chatBox) {
		const chatForm = document.getElementById('chat-form');
		const chatInput = document.getElementById('chat-message-input');
		const websocketProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
		const websocketUrl = `${websocketProtocol}//${window.location.host}${contextPath}/ws/chat/${eventId}`;
		let socket;

		const connect = () => {
			socket = new WebSocket(websocketUrl);
			socket.onopen = () => fetchMessages();
			socket.onmessage = (event) => {
				const data = JSON.parse(event.data);
				switch (data.type) {
					case 'new_message':
						appendMessage(data.payload);
						break;
					case 'message_soft_deleted':
						handleSoftDelete(data.payload);
						break;
					case 'message_updated':
						const messageTextElement = document.getElementById(`message-text-${data.payload.messageId}`);
						const editedMarkerElement = document.getElementById(`message-edited-marker-${data.payload.messageId}`);
						if (messageTextElement) messageTextElement.innerHTML = marked.parse(data.payload.newText, { sanitize: true });;
						if (editedMarkerElement) editedMarkerElement.style.display = 'inline';
						break;
				}
			};
			socket.onclose = (event) => console.warn('WebSocket connection closed.', event);
			socket.onerror = (error) => console.error('WebSocket error:', error);
		};

		const getTextColorForBackground = (hexColor) => {
			if (!hexColor || hexColor.length < 7) return '#000000';
			const r = parseInt(hexColor.slice(1, 3), 16);
			const g = parseInt(hexColor.slice(3, 5), 16);
			const b = parseInt(hexColor.slice(5, 7), 16);
			const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
			return luminance > 0.5 ? '#000000' : '#FFFFFF';
		};

		const formatAsLocaleTime = (dateString) => {
			if (!dateString) return '';
			return new Date(dateString).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' });
		};

		const appendMessage = (message) => {
			const isCurrentUser = String(message.userId) === String(currentUserId);

			const container = document.createElement('div');
			container.className = 'chat-message-container';
			container.id = `message-container-${message.id}`;
			if (isCurrentUser) container.classList.add('current-user');

			const bubbleElement = document.createElement('div');
			bubbleElement.className = 'chat-bubble';
			bubbleElement.id = `chat-bubble-${message.id}`;

			const bubbleBackgroundColor = isCurrentUser ? 'var(--primary-color)' : (message.chatColor || '#E9ECEF');
			bubbleElement.style.backgroundColor = bubbleBackgroundColor;
			bubbleElement.style.borderColor = bubbleBackgroundColor;
			bubbleElement.style.color = getTextColorForBackground(bubbleBackgroundColor);

			if (message.isDeleted) {
				renderDeletedState(bubbleElement, message);
			} else {
				renderNormalState(bubbleElement, message, isCurrentUser);
				const optionsMenu = createOptionsMenu(message, isCurrentUser);
				container.appendChild(optionsMenu);
			}

			container.prepend(bubbleElement);
			chatBox.appendChild(container);
			chatBox.scrollTop = chatBox.scrollHeight;
		};

		const renderNormalState = (bubbleElement, message, isCurrentUser) => {
			if (!isCurrentUser) {
				const usernameElement = document.createElement('strong');
				usernameElement.className = 'chat-username';
				usernameElement.style.color = 'black';
				usernameElement.textContent = message.username;
				bubbleElement.appendChild(usernameElement);
			}

			const textElement = document.createElement('span');
			textElement.className = 'chat-text';
			textElement.id = `message-text-${message.id}`;
			textElement.innerHTML = marked.parse(message.messageText, { sanitize: true });

			const timeElement = document.createElement('span');
			timeElement.className = 'chat-timestamp';
			timeElement.textContent = formatAsLocaleTime(message.sentAt);
			timeElement.style.color = bubbleElement.style.color === '#FFFFFF' ? 'rgba(255,255,255,0.7)' : 'var(--text-muted-color)';

			const editedMarker = document.createElement('span');
			editedMarker.className = 'chat-edited-marker';
			editedMarker.id = `message-edited-marker-${message.id}`;
			editedMarker.textContent = ' (bearbeitet)';
			editedMarker.style.display = message.edited ? 'inline' : 'none';

			timeElement.prepend(editedMarker);
			bubbleElement.appendChild(textElement);
			bubbleElement.appendChild(timeElement);
		};

		const renderDeletedState = (bubbleElement, message) => {
			let deletedText;
			const deletedByEl = document.createElement('span');
			deletedByEl.textContent = message.deletedByUsername;

			const originalUserEl = document.createElement('span');
			originalUserEl.textContent = message.username;

			const infoSpan = document.createElement('span');
			infoSpan.className = 'chat-deleted-info';

			if (message.username === message.deletedByUsername) {
				infoSpan.textContent = `Nachricht wurde von ${originalUserEl.textContent} gelöscht`;
			} else {
				infoSpan.textContent = `Nachricht von ${originalUserEl.textContent} wurde von ${deletedByEl.textContent} gelöscht`;
			}
			bubbleElement.appendChild(infoSpan);
			bubbleElement.classList.add('deleted');
		};

		const createOptionsMenu = (message, isCurrentUser) => {
			const optionsMenu = document.createElement('div');
			optionsMenu.className = 'chat-options';
			if (isCurrentUser) {
				const editButton = document.createElement('button');
				editButton.className = 'chat-option-btn';
				editButton.innerHTML = '<i class="fas fa-pencil-alt"></i>';
				editButton.onclick = () => handleEdit(message.id);
				optionsMenu.appendChild(editButton);
			}
			if (isAdmin || isCurrentUser) {
				const deleteButton = document.createElement('button');
				deleteButton.className = 'chat-option-btn';
				deleteButton.innerHTML = '<i class="fas fa-trash-alt"></i>';
				deleteButton.onclick = () => handleDelete(message.id, message.userId, message.username);
				optionsMenu.appendChild(deleteButton);
			}
			return optionsMenu;
		};

		const handleDelete = (messageId, originalUserId, originalUsername) => {
			showConfirmationModal("Nachricht wirklich löschen?", () => {
				socket.send(JSON.stringify({ type: 'delete_message', payload: { messageId, originalUserId, originalUsername } }));
			});
		};

		const handleSoftDelete = (payload) => {
			const bubbleElement = document.getElementById(`chat-bubble-${payload.messageId}`);
			const containerElement = document.getElementById(`message-container-${payload.messageId}`);
			if (bubbleElement && containerElement) {
				containerElement.querySelector('.chat-options')?.remove();

				const deletedByEl = document.createElement('span');
				deletedByEl.textContent = payload.deletedByUsername;

				const originalUserEl = document.createElement('span');
				originalUserEl.textContent = payload.originalUsername;

				const infoSpan = document.createElement('span');
				infoSpan.className = 'chat-deleted-info';

				if (payload.originalUsername === payload.deletedByUsername) {
					infoSpan.textContent = `Nachricht von ${originalUserEl.textContent} gelöscht`;
				} else {
					infoSpan.textContent = `Nachricht von ${originalUserEl.textContent} wurde von ${deletedByEl.textContent} gelöscht`;
				}

				bubbleElement.innerHTML = ''; // Clear existing content
				bubbleElement.appendChild(infoSpan);
				bubbleElement.classList.add('deleted');
			}
		};

		const handleEdit = (messageId) => {
			const textElement = document.getElementById(`message-text-${messageId}`);
			const currentText = textElement.textContent;
			const editInput = document.createElement('input');
			editInput.type = 'text';
			editInput.value = currentText;
			editInput.className = 'chat-edit-input';

			editInput.onkeydown = (keyboardEvent) => {
				if (keyboardEvent.key === 'Enter') {
					if (editInput.value.trim() && editInput.value !== currentText) {
						socket.send(JSON.stringify({ type: 'update_message', payload: { messageId, newText: editInput.value } }));
					}
					textElement.style.display = 'block';
					editInput.replaceWith(textElement);
				} else if (keyboardEvent.key === 'Escape') {
					textElement.style.display = 'block';
					editInput.replaceWith(textElement);
				}
			};

			textElement.style.display = 'none';
			textElement.parentElement.insertBefore(editInput, textElement);
			editInput.focus();
		};

		const fetchMessages = () => {
			fetch(`${contextPath}/api/event-chat?eventId=${eventId}`)
				.then(response => response.json())
				.then(messages => {
					chatBox.innerHTML = '';
					if (messages && messages.length > 0) messages.forEach(appendMessage);
				}).catch(error => console.error("Error fetching initial chat messages:", error));
		};

		chatInput.addEventListener('keyup', (e) => {
			const popup = document.getElementById('mention-popup');
			if (e.key === '@') {
				const assignedUsers = JSON.parse(document.getElementById('allUsersData')?.textContent || '[]');
				if (assignedUsers.length > 0) {
					popup.innerHTML = assignedUsers.map(u => `<div class="mention-item" data-username="${u.username}">${u.username}</div>`).join('');
					popup.style.display = 'block';
				}
			} else if (popup.style.display === 'block' && e.key !== 'Shift') { // Avoid closing on shift
				popup.style.display = 'none';
			}
		});

		document.getElementById('mention-popup').addEventListener('click', (e) => {
			if (e.target.classList.contains('mention-item')) {
				const username = e.target.dataset.username;
				const text = chatInput.value;
				const atIndex = text.lastIndexOf('@');
				chatInput.value = text.substring(0, atIndex + 1) + username + ' ';
				document.getElementById('mention-popup').style.display = 'none';
				chatInput.focus();
			}
		});

		chatForm.addEventListener('submit', (event) => {
			event.preventDefault();
			const messageText = chatInput.value.trim();
			if (messageText && socket && socket.readyState === WebSocket.OPEN) {
				const payload = { type: "new_message", payload: { messageText: messageText } };
				socket.send(JSON.stringify(payload));
				chatInput.value = '';
			}
		});

		connect();
	}
});