
========================================================================
FILE: src\main\resources\db\migration\V74__Repopulate_wiki_data_part14.sql
========================================================================

-- Flyway migration V74, Part 14: Overhaul Technical Wiki Documentation (Frontend Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/EventDetailsPage.jsx',
'## 1. File Overview & Purpose

This is a large, multi-functional React component that renders the detailed view for a single event (`/veranstaltungen/details/:eventId`). It serves as a central hub for all event-related information and real-time interaction.

## 2. Architectural Role

This is a complex **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch all initial event data from `/api/v1/public/events/:id`.
- **Tabbed Interface:** Manages the state for switching between different information tabs:
    - **Tasks:** Displays a list of tasks for the event, including their status and assigned users.
    - **Inventory Checklist:** Renders the `ChecklistTab` component for managing equipment load-in/load-out.
    - **Event Chat:** Contains the real-time chat interface for event participants.
    - **Gallery:** (Visible only for completed events) Renders the `EventGalleryTab` component.
- **Real-Time Chat:**
    - Uses the `useWebSocket` hook to connect to the `/ws/chat/:eventId` endpoint.
    - Manages the state of chat messages, receiving new messages and updates (edits/deletions) via the WebSocket connection.
    - Handles sending new messages, including text and file uploads.
- **Authorization:** It reads the `user` object from the `useAuthStore` to determine if the current user has permission to perform actions like deleting chat messages or viewing the admin-only debriefing link.

## 4. State Management

- **Event Data:** Managed by the `useApi` hook.
- **UI State:** Uses `useState` for managing the `activeTab`, chat input, and other UI-related state.
- **Chat Messages:** Managed via `useState`, with updates pushed from the `useWebSocket` hook.
- **Global State:** Accesses the `user` object from `useAuthStore` for permissions.'),

('frontend/src/pages/EventFeedbackPage.jsx',
'## 1. File Overview & Purpose

This React component renders the dedicated form for submitting post-event feedback (`/feedback/event/:eventId`).

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call `/api/v1/public/feedback/forms?eventId=...`. This endpoint provides the event details and checks if the user has already submitted feedback for this event.
- **Conditional Rendering:** If the user has already submitted feedback, it displays a "Thank You" message instead of the form.
- **Controlled Form:** Uses `useState` to manage the state of the star rating and the comments textarea.
- **Submission:** On form submit, it calls the `POST /api/v1/public/feedback/event` endpoint via `apiClient` to save the user''s response.

## 4. State Management

- **Form Data:** Managed via `useState` hooks.
- **Initial Data:** Fetched using the `useApi` hook.'),

('frontend/src/pages/EventsPage.jsx',
'## 1. File Overview & Purpose

This React component renders the main **Events** listing page (`/veranstaltungen`). It displays all upcoming events and allows users to sign up or sign off.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call `/api/v1/public/events`, which returns a list of events enriched with the current user''s status (`userAttendanceStatus`) and qualification (`isUserQualified`) for each.
- **Action Buttons:** Conditionally renders a "Sign Up" or "Sign Off" button based on the `userAttendanceStatus` for each event. The "Sign Up" button is disabled if `isUserQualified` is false.
- **Sign-Up Modal:**
    - Before showing the sign-up modal, it makes an API call to `/api/v1/public/events/:id/custom-fields` to fetch any additional questions required for the sign-up.
    - The modal dynamically renders input fields for these custom questions.
- **Sign-Off Modal:** Shows a confirmation dialog before the user signs off.
- **Responsive View:** The component includes both a desktop table view (`desktop-table-wrapper`) and a mobile card view (`mobile-card-list`), with CSS media queries controlling which one is visible.

## 4. State Management

- **Event List:** Managed by the `useApi` hook.
- **Modal State:** Uses `useState` to control the visibility and content of the sign-up/sign-off modals.'),

('frontend/src/pages/FeedbackPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **General Feedback** page (`/feedback`). It provides a form for users to submit general suggestions or bug reports and displays a history of their own past submissions.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call `/api/v1/public/feedback/user` to retrieve the list of the current user''s past submissions.
- **Controlled Form:** The submission form for new feedback is a controlled component managed with `useState`.
- **Submission:** On submit, it calls `POST /api/v1/public/feedback/general` via `apiClient`.
- **Submission History:** It maps over the fetched submissions and displays each one with its current status (e.g., "NEW", "PLANNED").

## 4. State Management

- **Submission History:** Managed by the `useApi` hook.
- **New Feedback Form:** Managed by `useState` hooks.'),

('frontend/src/pages/FilesPage.jsx',
'## 1. File Overview & Purpose

This React component renders the public **Files & Documents** page (`/dateien`). It fetches and displays a categorized list of all files the current user is permitted to see.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call `/api/v1/public/files`. The backend automatically filters out admin-only files for non-admin users. The data arrives grouped by category.
- **Rendering:** It iterates over the categories (the keys of the data object) and then iterates over the files within each category, rendering a download link for each file.

## 4. State Management

- The component''s state is managed by the `useApi` hook.'),

('frontend/src/pages/HelpDetailsPage.jsx',
'## 1. File Overview & Purpose

This component renders the detailed view for a single help article (`/help/:pageKey`). It displays the features, use cases, and links related to a specific page of the application.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:**
    - Uses `useApi` to fetch the specific documentation entry based on the `pageKey` from the URL via `/api/v1/public/documentation/:pageKey`.
    - Makes a second `useApi` call to fetch *all* documentation entries to resolve the titles for the "Related Pages" links.
- **Content Rendering:**
    - Uses `react-markdown` to render the `features` content.
- **Link Generation:**
    - Provides a direct link to the actual page being documented.
    - Provides a link to the associated technical wiki page, if one is defined.
- **Related Pages:** It parses the JSON array of related page keys and looks them up in the full list of docs to render a navigable list of related topics.

## 4. State Management

- All data is managed by two instances of the `useApi` hook.'),

('frontend/src/pages/HelpListPage.jsx',
'## 1. File Overview & Purpose

This component renders the main help page (`/help`), which acts as a "link tree" or table of contents for all user-facing documentation.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch all available documentation entries from `/api/v1/public/documentation`. The backend automatically filters out admin-only articles for non-admin users.
- **Grouping:** Uses `useMemo` to group the flat list of documentation pages into a nested object based on their `category` property.
- **Rendering:** It iterates over the grouped categories, creating a `card` for each category. Inside each card, it lists the links to the individual `HelpDetailsPage` for each article in that category.

## 4. State Management

- The component''s data is managed by the `useApi` hook.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V75__Repopulate_wiki_data_part15.sql
========================================================================

-- Flyway migration V75, Part 15: Overhaul Technical Wiki Documentation (Frontend Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/LehrgaengePage.jsx',
'## 1. File Overview & Purpose

This React component renders the main **Courses & Meetings** page (`/lehrgaenge`). It lists upcoming training sessions and allows users to sign up, sign off, or request new training topics.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch all upcoming meetings from `/api/v1/public/meetings`. This data is pre-enriched by the backend with the current user''s attendance status.
- **Actions:** Renders "Anmelden" (Sign Up) or "Abmelden" (Sign Off) buttons based on the user''s status for each meeting. Clicking these buttons calls the `POST /api/v1/public/meetings/:id/:action` endpoint.
- **Training Request:** Contains a button that opens the `RequestTrainingModal`, allowing users to submit a new training topic via the `POST /api/v1/public/training-requests` endpoint.
- **Responsive View:** Includes both a desktop table and a mobile card list view.

## 4. State Management

- **Meeting List:** Managed by the `useApi` hook.
- **Modal State:** Uses `useState` to control the visibility of the training request modal.'),

('frontend/src/pages/LoginPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **Login** page (`/login`). It provides the form for username/password authentication.

## 2. Architectural Role

This is a **View** component in the frontend application and is the main entry point for unauthenticated users.

## 3. Key Features & Logic

- **Authentication Flow:**
    1.  The form is a controlled component, with `username` and `password` state managed by `useState`.
    2.  On submit, it calls the `login` function from the `useAuthStore`.
    3.  The `authStore.login` function calls the `POST /api/v1/auth/login` endpoint.
    4.  If successful, the backend sets an HttpOnly JWT cookie, and the `authStore` fetches the full user session.
    5.  An `useEffect` hook detects the change in `isAuthenticated` state and redirects the user to their dashboard (`/home`) or their originally intended page.
- **UI Features:** Includes a password visibility toggle.
- **Error Handling:** Displays error messages returned from the `authStore` if the login fails.

## 4. State Management

- **Form State:** Managed locally with `useState`.
- **Authentication State:** Interacts with the global `useAuthStore` to trigger the login process and react to authentication changes.'),

('frontend/src/pages/MeetingDetailsPage.jsx',
'## 1. File Overview & Purpose

This React component renders the detailed view for a single training meeting (`/lehrgaenge/details/:meetingId`).

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch the meeting''s details and its associated attachments from `/api/v1/public/meetings/:id`.
- **Content Display:** Renders all details of the meeting, including description (with Markdown support) and a list of downloadable attachments.

## 4. State Management

- The component''s state is managed by the `useApi` hook.'),

('frontend/src/pages/PackKitPage.jsx',
'## 1. File Overview & Purpose

This React component renders a special, printer-friendly **Packing List** for an inventory kit (`/pack-kit/:kitId`). It is designed to be accessed via QR code.

## 2. Architectural Role

This is a **View** component that uses the `MinimalLayout` to provide a clean, focused UI without the main application sidebar and header.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get the kit''s details and its item list from `/api/v1/public/kits/:id`.
- **Printable Checklist:** Renders the list of items with checkboxes, making it easy to use as a physical checklist when packing a case.
- **Print Styles:** Includes an embedded `<style>` block with `@media print` rules. These rules ensure that when the user prints the page, only the checklist area is visible, and all other UI elements (like the "Print" button) are hidden.

## 4. State Management

- The component''s state is managed by the `useApi` hook.'),

('frontend/src/pages/PasswordPage.jsx',
'## 1. File Overview & Purpose

This React component renders the dedicated form for a user to change their own password (`/passwort`).

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Controlled Form:** Manages the state for the current password, new password, and confirmation password fields using `useState`.
- **Validation:** Performs client-side checks to ensure the new password is at least 10 characters and that the new password and confirmation match.
- **Submission:** On submit, it calls the `PUT /api/v1/public/profile/password` endpoint with the form data. The backend performs the final, authoritative validation (checking the current password and enforcing the policy).

## 4. State Management

- All form state is managed locally with `useState` hooks.'),

('frontend/src/pages/ProfilePage.jsx',
'## 1. File Overview & Purpose

This React component renders the user''s main **Profile** page (`/profil`). It acts as a container, aggregating and displaying several sub-components that represent different aspects of the user''s profile.

## 2. Architectural Role

This is a **View** and **Layout** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call the aggregated `/api/v1/public/profile` endpoint, which returns all data needed for the page in a single response.
- **Component Composition:** It renders several specialized child components, passing the relevant slice of the fetched data to each one:
    - `ProfileDetails`: For core user data.
    - `ProfileSecurity`: For password management.
    - `ProfileQualifications`: For the user''s completed courses.
    - `ProfileAchievements`: For earned badges.
    - `ProfileEventHistory`: For a list of past events.
- **Update Handling:** It provides an `onUpdate` callback function (which simply calls the `reload` function from `useApi`) to its child components. This allows a child component (like `ProfileDetails`) to trigger a full refresh of all profile data after a change is submitted.

## 4. State Management

- All profile data is managed by the `useApi` hook and passed down to child components as props.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V76__Repopulate_wiki_data_part16.sql
========================================================================

-- Flyway migration V76, Part 16: Overhaul Technical Wiki Documentation (Frontend Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/QrActionPage.jsx',
'## 1. File Overview & Purpose

This React component renders the specialized **QR Action** page (`/lager/qr-aktion/:itemId`). It provides a highly simplified, mobile-first interface for quickly checking an item in or out of the inventory.

## 2. Architectural Role

This is a **View** component that uses the `MinimalLayout` to provide a focused UI without the main application navigation, as it''s intended to be accessed directly via QR code scan.

## 3. Key Features & Logic

- **Data Fetching:** It makes two parallel API calls using `useApi`:
    1.  `/api/v1/public/storage/:itemId` to get the details of the specific item being acted upon.
    2.  `/api/v1/public/events` to get a list of active events for the optional "Assign to Event" dropdown.
- **Transaction Form:** It presents a simple form to specify the quantity, an optional event, and notes.
- **Submission:** The form has two distinct submit buttons ("Entnehmen" and "Einräumen"). The component captures which button was clicked to set the `type` of the transaction and sends the data to the `POST /api/v1/public/storage/transactions` endpoint.

## 4. State Management

- All data is managed by two instances of the `useApi` hook.'),

('frontend/src/pages/SearchResultsPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **Search Results** page (`/suche`). It displays the results of a global search query.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Query Parsing:** It uses the `useSearchParams` hook from React Router to get the search query (`q=...`) from the URL.
- **Data Fetching:** It uses the `useApi` hook to call the `/api/v1/public/search` endpoint, passing the query as a parameter.
- **Result Rendering:** It maps over the array of results returned from the API. For each result, it displays the title, a snippet, the result type (e.g., "Veranstaltung"), and a direct link to the item''s detail page. It also uses a helper function to show a relevant icon for each result type.

## 4. State Management

- The component''s data is managed by the `useApi` hook.'),

('frontend/src/pages/StorageItemDetailsPage.jsx',
'## 1. File Overview & Purpose

This React component renders the detailed view for a single inventory item (`/lager/details/:itemId`). It provides a comprehensive overview of the item, including its history and future availability.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** It makes multiple API calls using `useApi`:
    - `/api/v1/public/storage/:id` to get the core item details.
    - `/api/v1/public/storage/:id/history` to get the transaction and maintenance logs.
    - `/api/v1/public/storage/:id/reservations` to get data for the availability calendar.
- **Tabbed Interface:** Manages state to switch between different tabs:
    - **History:** Shows the transaction log.
    - **Maintenance:** Shows the maintenance log.
    - **Availability:** Renders the `ReservationCalendar` component to show future bookings.
    - **Related Items:** Renders the `RelatedItemsTab` to show associated equipment.
- **Interactive Elements:**
    - **Lightbox:** Clicking the item''s image opens a full-screen `Lightbox` view.
    - **Damage Report:** The "Schaden melden" button opens a `DamageReportModal` for submitting a new report.

## 4. State Management

- All data is managed by multiple instances of the `useApi` hook.
- UI state (active tab, modal visibility) is managed with `useState` hooks.'),

('frontend/src/pages/StoragePage.jsx',
'## 1. File Overview & Purpose

This React component renders the main **Inventory** page (`/lager`). It displays the entire equipment inventory and provides the primary interface for checking items in and out.

## 2. Architectural Role

This is a key **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call the aggregated `/api/v1/public/storage` endpoint, which returns both the inventory items (grouped by location) and the list of active events for the transaction modal.
- **Interactive Filtering:**
    - It uses `useState` hooks to manage state for a live search term, a category filter, and a status filter.
    - A `useMemo` hook is used to efficiently compute the `filteredData` whenever the source data or any filter changes.
- **Cart System:**
    - It manages a `cart` array in its `useState`.
    - "Entnehmen" (Checkout) and "Einräumen" (Checkin) buttons on each item add that item to the cart.
    - A Floating Action Button (FAB) shows the number of items in the cart and opens the `CartModal`.
- **Bulk Transactions:** The `CartModal` allows the user to review all items in their cart and submit them as a series of transactions with a single click. The `handleBulkTransactionSubmit` function sends multiple parallel requests to the `POST /api/v1/public/storage/transactions` endpoint.
- **Responsive View:** It provides both a detailed desktop table and a compact mobile card list view.

## 4. State Management

- **Inventory Data:** Managed by the `useApi` hook.
- **Filters & Cart:** Managed by `useState` hooks.
- **Filtered Results:** Derived state computed using `useMemo`.'),

('frontend/src/pages/TeamDirectoryPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **Team Directory** (`/team`), a searchable list of all team members.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get a list of all users from `/api/v1/users`.
- **Live Search:** A simple text input allows users to filter the directory by name in real-time.
- **Crew Card Modal:** Clicking the "Crew-Karte ansehen" button for a user opens a modal.
    - The `CrewCardModal` component is a separate component that takes a `userId` as a prop.
    - It then triggers its own `useApi` call to the `/api/v1/public/profile/:userId` endpoint to fetch the specific user''s qualifications and achievements for display.

## 4. State Management

- **User List:** Managed by the `useApi` hook in the main component.
- **Search Term & Modal State:** Managed by `useState` hooks.
- **Crew Card Data:** Managed by a separate `useApi` instance within the modal component.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V77__Repopulate_wiki_data_part17.sql
========================================================================

-- Flyway migration V77, Part 17: Overhaul Technical Wiki Documentation (Frontend Admin Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/admin/AdminAnnouncementsPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing **Announcements** (`/admin/announcements`). It provides a full CRUD interface for the bulletin board.

## 2. Architectural Role

This is an **Admin View** component in the frontend.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get all announcements from `/api/v1/admin/announcements`.
- **Modal-Based Editing:**
    - Clicking "Neue Mitteilung" or "Bearbeiten" opens the `AnnouncementModal`.
    - The modal contains a controlled form for the title and content.
    - On submit, it calls either `POST` or `PUT` to the `/api/v1/admin/announcements` endpoint.
- **Deletion:** The "Löschen" button triggers a confirmation dialog and then calls `DELETE /api/v1/admin/announcements/:id`.
- **Markdown Preview:** It renders existing announcements using `react-markdown` to show admins what the final post will look like.

## 4. State Management

- **Announcement List:** Managed by the `useApi` hook.
- **Modal State:** Uses `useState` to control the modal''s visibility and which announcement is being edited.'),

('frontend/src/pages/admin/AdminCoursesPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing **Course Templates** (`/admin/lehrgaenge`). These are the blueprints for training sessions, not the specific dates.

## 2. Architectural Role

This is an **Admin View** component in the frontend.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get all course templates from `/api/v1/courses`.
- **CRUD Operations:** Provides a full CRUD interface via a modal (`Modal`).
    - **Create/Edit:** The modal contains a form for the course name, abbreviation, and description. It calls `POST` or `PUT` to `/api/v1/courses`.
    - **Delete:** A delete button with a confirmation dialog calls `DELETE /api/v1/courses/:id`.
- **Navigation:** Provides a "Meetings" button for each course that links to the `AdminMeetingsPage` for that specific course, allowing admins to schedule actual training dates.

## 4. State Management

- **Course List:** Managed by the `useApi` hook.
- **Modal State:** Managed by `useState`.'),

('frontend/src/pages/admin/AdminDashboardPage.jsx',
'## 1. File Overview & Purpose

This component renders the main **Admin Dashboard** (`/admin/dashboard`), providing administrators with a high-level overview of the application''s status.

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to make a single call to the aggregated `/api/v1/admin/dashboard` endpoint.
- **Widget-Based Layout:** It uses the reusable `Widget` component to display different pieces of information in a grid.
- **Data Visualization:** It uses the `EventTrendChart` component (which wraps `react-chartjs-2`) to display a line chart of event frequency over the past 12 months.
- **Quick Links:** The widgets provide direct links to the relevant management pages (e.g., "Alle Events anzeigen").

## 4. State Management

- All dashboard data is managed by the `useApi` hook.'),

('frontend/src/pages/admin/AdminDocumentationPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing the user-facing **Page Documentation** (`/admin/documentation`). It allows admins to create, edit, and delete the help articles that appear on the `/help` pages.

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** It makes two parallel API calls:
    1.  `/api/v1/admin/documentation` to get the list of documentation pages to display in the main table.
    2.  `/api/v1/wiki/list` to get a flat list of all technical wiki articles, which is used to populate the "Technical Wiki Article" dropdown in the modal.
- **Modal-Based Editing:** All CRUD operations are handled through the `DocumentationModal`.
    - The modal form allows editing of all fields, including title, content (Markdown), category, and related pages.
    - A multi-select input is used for linking related help pages.
    - A dropdown is used for linking a help page to a technical wiki article.
- **Submission:** The modal calls the appropriate `POST`, `PUT`, or `DELETE` endpoints on `/api/v1/admin/documentation`.

## 4. State Management

- **Doc & Wiki Lists:** Managed by `useApi` hooks.
- **Modal State:** Managed by `useState`.'),

('frontend/src/pages/admin/AdminEventsPage.jsx',
'## 1. File Overview & Purpose

This component renders the main administrative page for **Event Management** (`/admin/veranstaltungen`). It provides a full CRUD interface for all events.

## 2. Architectural Role

This is a key **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:**
    - Uses `useApi` to get the list of all events from `/api/v1/events`.
    - It uses the `useAdminData` hook to pre-fetch all data needed for the creation/editing modal (lists of users, courses, and storage items). This prevents the modal from having to make its own data calls.
- **Modal-Based Editing (`EventModal`):**
    - The `EventModal` is a large, complex component with a tabbed interface ("General" and "Details & Requirements").
    - It uses the `DynamicSkillRows` and `DynamicItemRows` components to manage the lists of personnel and material requirements.
    - On submit, it constructs a `FormData` object to send both the JSON event data and an optional file upload in a single multipart request to the backend.
- **Actions:** Provides buttons for editing, cloning, deleting, and accessing the debriefing for each event.

## 4. State Management

- **Event List:** Managed by the `useApi` hook.
- **Form Data for Modal:** The `useAdminData` hook manages fetching this prerequisite data.
- **Modal State:** `useState` controls the modal''s visibility and which event is being edited.'),

('frontend/src/pages/admin/AdminMeetingsPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing specific **Meeting** dates for a given course (`/admin/lehrgaenge/:courseId/meetings`).

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Contextual Data Fetching:** It uses the `courseId` from the URL parameters (via `useParams`) to fetch only the meetings for that specific course from `/api/v1/meetings?courseId=...`. It also fetches a list of all users to populate the "Leader" dropdown in the modal.
- **Modal-Based Editing:** A modal is used for creating and editing meetings.
- **Actions:** Provides buttons for editing, cloning, and deleting meeting dates.

## 4. State Management

- **Meeting List & User List:** Managed by `useApi` hooks.
- **Modal State:** Managed by `useState`.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V78__Repopulate_wiki_data_part18.sql
========================================================================

-- Flyway migration V78, Part 18: Overhaul Technical Wiki Documentation (Frontend Admin Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/admin/AdminStoragePage.jsx',
'## 1. File Overview & Purpose

This component renders the main administrative page for **Inventory Management** (`/admin/lager`). It provides a full CRUD interface for all `StorageItem` entities.

## 2. Architectural Role

This is a key **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get the list of all storage items from `/api/v1/storage`.
- **Modal-Based Editing (`StorageItemModal`):**
    - This is a multi-purpose modal that can switch between different "modes" (`create`, `edit`, `defect`, `repair`, `relations`).
    - The `edit` mode allows changing all core details of an item.
    - The `defect` and `repair` modes provide specialized forms for managing an item''s defective stock count.
    - The `relations` mode allows an admin to manage which other items are considered "related" to this one.
- **Actions:** The main table provides buttons for all actions: Edit, Defect, Repair, QR Code, and Delete.
- **QR Code Generation:** The "QR" button opens a modal that displays a QR code (generated using the `qrcode.react` library) which links to the public `/lager/qr-aktion/:itemId` page for that item.

## 4. State Management

- **Item List:** Managed by the `useApi` hook.
- **Modal State:** A single `useState` object manages the modal''s visibility, the item being edited, and the current `mode` of the modal.'),

('frontend/src/pages/admin/AdminSystemPage.jsx',
'## 1. File Overview & Purpose

This component renders the **System Information** page (`/admin/system`), which displays live statistics about the server''s health.

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to periodically fetch data from the `/api/v1/system/stats` endpoint.
- **Data Display:** It displays metrics like CPU load, RAM usage, and disk space in a clean, readable format within `card` elements. Helper functions are used to format byte values into Gigabytes and numbers into percentages.

## 4. State Management

- All system statistics are managed by the `useApi` hook. The hook''s `reload` function could be called on an interval to create a live-updating dashboard.'),

('frontend/src/pages/admin/AdminTrainingRequestsPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for viewing and managing **User-Initiated Training Requests** (`/admin/training-requests`).

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get all training requests from `/api/v1/admin/training-requests`. The backend enriches this data with a count of how many users have registered interest in each topic.
- **Data Display:** It shows a table of requested topics, who originally requested them, and how many other users are also interested.
- **Deletion:** Allows an admin to delete a request, for example, after a corresponding course has been created or if the request is deemed irrelevant.

## 4. State Management

- The list of requests is managed by the `useApi` hook.'),

('frontend/src/pages/admin/AdminUsersPage.jsx',
'## 1. File Overview & Purpose

This component renders the main **User Management** page (`/admin/mitglieder`). It provides a full CRUD interface for all `User` accounts.

## 2. Architectural Role

This is a key **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:**
    - Uses `useApi` to get the list of all users from `/api/v1/users`.
    - Uses the `useAdminData` hook to pre-fetch data needed for the `UserModal` (roles and permissions).
- **Modal-Based Editing (`UserModal`):**
    - The `UserModal` is a complex modal with tabs for "General", "Permissions", and "Admin Notes".
    - The "Permissions" tab uses the `PermissionsTab` component to render a nested, expandable checklist of all available permissions.
    - On submit, it calls the appropriate `POST` or `PUT` endpoint on `/api/v1/users`.
- **Password Reset:** The "Passwort Reset" button calls `POST /api/v1/users/:id/reset-password`. It then displays the new, temporary password in a separate modal for the admin to copy and securely transmit to the user.

## 4. State Management

- **User List & Prerequisite Data:** Managed by `useApi` and `useAdminData` hooks.
- **Modal State:** Managed with `useState` hooks.'),

('frontend/src/pages/admin/AdminVenuesPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing **Venues** (Veranstaltungsorte) at `/admin/venues`.

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get all venues from `/api/v1/admin/venues`.
- **Modal-Based Editing:** Uses a modal to handle creating and editing venues.
- **File Upload:** The modal form includes a file input for uploading a map image. The `handleSubmit` function constructs a `FormData` object to send both the JSON venue data and the image file in a single multipart request.

## 4. State Management

- **Venue List:** Managed by the `useApi` hook.
- **Modal State:** Managed by `useState`.'),

('frontend/src/pages/admin/AdminWikiPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative interface for the **Technical Wiki** (`/admin/wiki`). It provides a two-pane layout with a file tree navigator and a content editor/viewer.

## 2. Architectural Role

This is a complex **Admin View** component that functions like a small single-page application itself.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get the hierarchical file tree structure from `/api/v1/wiki`.
- **File Tree Navigation:** It recursively renders the file tree structure. Clicking a file triggers an API call via `apiClient` to `/api/v1/wiki/:id` to fetch that specific page''s content.
- **Editing vs. Viewing Mode:**
    - It uses a local `isEditing` state to toggle between a read-only view and an editing view.
    - The read-only view uses `react-markdown` to render the content.
    - The editing view uses a simple `<textarea>` as a controlled component for the Markdown content.
- **CRUD Operations:**
    - **Save:** Calls `PUT /api/v1/wiki/:id` to save the content from the editor.
    - **Delete:** Calls `DELETE /api/v1/wiki/:id` to delete the current page.
    - **Create:** A "+" button opens a modal (`WikiPageModal`) to create a new page by specifying its filename under a parent path. This calls `POST /api/v1/wiki`.

## 4. State Management

- **File Tree:** Managed by the `useApi` hook.
- **Currently Selected Page & Content:** Managed by `useState` hooks.
- **UI State:** `useState` is used for `isEditing` and the new page modal visibility.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V79__Populate_wiki_data_part19.sql
========================================================================

-- Flyway migration V79, Part 19: Overhaul Technical Wiki Documentation (Frontend Misc)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/App.jsx',
'## 1. File Overview & Purpose

This is the root component of the authenticated application. It sets up the main layout, including the `Sidebar` and `Header`, and provides the `<Outlet />` for React Router to render the content of the current route. It also manages global UI elements like the `ToastContainer` and the "What''s New" `ChangelogModal`.

## 2. Architectural Role

This is the main **Layout/Root** component for the authenticated part of the frontend application.

## 3. Key Features & Logic

- **Layout Structure:** Defines the primary HTML structure with the sidebar, a mobile header, the main content area, and an overlay for mobile navigation.
- **Mobile Navigation:** Manages the `isNavOpen` state to toggle the mobile sidebar and the overlay. It includes `useEffect` hooks to add/remove a class to the `<body>` tag and to automatically close the nav on route changes.
- **Changelog Modal:**
    - On mount, if the user is authenticated, it calls the `useCallback`-wrapped `fetchChangelog` function.
    - This function hits the `/api/v1/public/changelog/latest-unseen` endpoint.
    - If an unseen changelog is returned, it sets the state to display the `ChangelogModal`.
    - The modal''s close handler calls `POST /api/v1/public/changelog/:id/mark-seen` to ensure the modal doesn''t appear again for that user.
- **Warning Notifications:** It uses the `useNotifications` hook to listen for real-time "Warning" level notifications and displays the `WarningNotification` component when one is received.
- **Toast Notifications:** It includes the `ToastContainer` and wraps the entire layout in a `ToastProvider` to make the toast context available to all child components.

## 4. State Management

- **Local State (`useState`)**: Manages `isNavOpen`, `changelog`, and `isChangelogVisible`.
- **Custom Hooks**: Uses `useNotifications` to manage warning notifications.
- **Global State (`useAuthStore`)**: Checks `isAuthenticated` before fetching the changelog.
- **Context (`ToastProvider`)**: Provides the toast notification functionality to the entire app.'),

('frontend/src/main.jsx',
'## 1. File Overview & Purpose

This is the main entry point for the React application. Its primary responsibilities are to perform initial setup and then render the application into the DOM.

## 2. Architectural Role

This is the **Application Bootstrap** file for the frontend.

## 3. Key Features & Logic

- **`initializeApp()`**: An asynchronous function that runs before the React application is rendered.
    - **API Client Setup:** It injects the `logout` function from the `authStore` into the `apiClient`. This is a crucial step that allows the `apiClient` to automatically log out the user if it ever receives a 401 Unauthorized response from the backend.
    - **Session Fetching:** It calls `fetchUserSession()` from the `authStore`. This function makes a request to the `/api/v1/auth/me` endpoint to retrieve the current user''s data. This ensures that if a user refreshes the page, their session is re-established before any components are rendered.
- **Rendering:** After `initializeApp` completes, it uses `ReactDOM.createRoot().render()` to mount the `RouterProvider` (from React Router) into the `<div id="root"></div>` element in `index.html`.

## 4. State Management

- This file is the primary consumer of the `useAuthStore`. It directly calls `getState()` and `dispatch` actions (`fetchUserSession`) to initialize the application''s authentication state.'),

('frontend/src/pages/error/ErrorPage.jsx',
'## 1. File Overview & Purpose

This component renders a user-friendly, stylized **500 Internal Server Error** page. It is configured as the `errorElement` for the main application route in `router/index.jsx`, meaning it will be automatically displayed by React Router if an unhandled error occurs during rendering or data loading in any of the child routes.

## 2. Architectural Role

This is a specialized **View** component for error handling.

## 3. Key Features & Logic

- **Error Catching:** Uses the `useRouteError` hook from React Router to catch the error object that was thrown.
- **Stylized Display:** It renders its content inside a `<div class="terminal">` to create a "hacker terminal" aesthetic, making the error page more engaging than a standard blank page.
- **Typing Animation:** It uses the `useTypingAnimation` custom hook to display a series of diagnostic messages one character at a time, enhancing the terminal theme. The actual error message from the `useRouteError` hook is dynamically inserted into this animation.
- **Recovery Action:** Once the typing animation is complete, a "Zum Dashboard" button becomes visible, providing the user with a clear path to navigate away from the error page.

## 4. State Management

- The typing animation and its completion state are managed by the `useTypingAnimation` hook.'),

('frontend/src/pages/error/ForbiddenPage.jsx',
'## 1. File Overview & Purpose

This component renders a **403 Forbidden** error page (`/forbidden`). It is displayed when an authenticated user tries to access a resource they do not have the necessary permissions for.

## 2. Architectural Role

This is a specialized **View** component for handling authorization errors.

## 3. Key Features & Logic

- **Navigation Target:** The `AdminRoute` component explicitly navigates to this page if a non-admin user attempts to access an admin route.
- **Stylized Display:** Similar to the `ErrorPage`, it uses a full-screen terminal aesthetic with a typing animation to display a security-themed message, informing the user that their access attempt was denied and logged.
- **User Personalization:** It retrieves the current user''s username from the `useAuthStore` to include it in the animated text, making the message feel more specific and informative.

## 4. State Management

- The typing animation is managed by the `useTypingAnimation` hook.
- It reads from the `useAuthStore` to get the current username.'),

('frontend/src/pages/error/NotFoundPage.jsx',
'## 1. File Overview & Purpose

This component renders a **404 Not Found** error page. It is configured as the wildcard route (`*`) in `router/index.jsx` and is displayed whenever a user navigates to a URL that does not match any other defined route.

## 2. Architectural Role

This is a specialized **View** component for handling routing errors.

## 3. Key Features & Logic

- **Path Awareness:** It uses the `useLocation` hook from React Router to get the incorrect path that the user tried to access.
- **Stylized Display:** It uses the terminal aesthetic and `useTypingAnimation` hook to display a message that simulates a "file not found" error from a command-line interface, dynamically including the incorrect path in the message.
- **Recovery Action:** Provides a clear link back to the main dashboard.

## 4. State Management

- The typing animation is managed by the `useTypingAnimation` hook.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V7__Populate_wiki_data_part2.sql
========================================================================

-- Flyway migration V7, Part 2

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/dao/AchievementDAO.java', '1.  **File Overview & Purpose**\n\n    This Data Access Object (DAO) is responsible for all database interactions related to achievements. It handles CRUD (Create, Read, Update, Delete) operations on the `achievements` table and manages the relationship between users and achievements in the `user_achievements` junction table.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It directly interacts with the database to persist and retrieve achievement data. It is exclusively called by the `AchievementService` and administrative servlets like `AdminAchievementServlet`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Used to inject the `DatabaseManager` for obtaining database connections.\n    *   `DatabaseManager`: Provides the connection pool for all database operations.\n    *   `Achievement` (Model): The data model object that this DAO creates and populates.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getAllAchievements()`**: Retrieves a list of all defined achievement templates from the `achievements` table.\n    *   **`getAchievementById(int id)`**: Fetches a single achievement template by its primary key.\n    *   **`createAchievement(Achievement achievement)`**: Inserts a new achievement template into the `achievements` table.\n    *   **`updateAchievement(Achievement achievement)`**: Updates an existing achievement template''s name, description, or icon. The `achievement_key` is immutable.\n    *   **`deleteAchievement(int id)`**: Deletes an achievement template from the `achievements` table.\n    *   **`getAchievementsForUser(int userId)`**: Retrieves all achievements that a specific user has earned, joining `achievements` and `user_achievements` tables. It also populates the `earnedAt` timestamp.\n    *   **`grantAchievementToUser(int userId, String achievementKey)`**: Grants an achievement to a user by inserting a record into the `user_achievements` table. It first checks if the user already has the achievement to prevent duplicates.\n    *   **`hasAchievement(int userId, String achievementKey)`**: Checks if a user has already earned a specific achievement.\n    *   **`mapResultSetToAchievement(ResultSet rs)`**: A private helper method to map a row from a `ResultSet` to an `Achievement` model object, reducing code duplication.'),
('src/main/java/de/dao/AdminLogDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all interactions with the `admin_logs` table. Its sole purpose is to create and retrieve audit log entries, providing a history of administrative actions performed within the application.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It provides a structured way for the `AdminLogService` to persist audit trails to the database.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `AdminLog` (Model): The data model representing a single log entry.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createLog(AdminLog log)`**\n        *   **Method Signature:** `public void createLog(AdminLog log)`\n        *   **Purpose:** Inserts a new log entry into the `admin_logs` table.\n        *   **Parameters:**\n            *   `log` (AdminLog): The log entry object containing the admin''s username, action type, and details.\n        *   **Returns:** void.\n        *   **Side Effects:** Writes a new record to the database. It includes robust error logging to ensure that a failure to log does not crash the primary operation.\n\n    *   **`getAllLogs()`**\n        *   **Method Signature:** `public List<AdminLog> getAllLogs()`\n        *   **Purpose:** Retrieves all log entries from the database, ordered from newest to oldest.\n        *   **Parameters:** None.\n        *   **Returns:** A `List` of `AdminLog` objects.\n        *   **Side Effects:** Performs a database read.\n\n    *   **`getRecentLogs(int limit)`**\n        *   **Method Signature:** `public List<AdminLog> getRecentLogs(int limit)`\n        *   **Purpose:** Retrieves the most recent log entries up to a specified limit. Used for dashboard widgets.\n        *   **Parameters:**\n            *   `limit` (int): The maximum number of log entries to retrieve.\n        *   **Returns:** A `List` of `AdminLog` objects.\n        *   **Side Effects:** Performs a database read with a `LIMIT` clause.'),
('src/main/java/de/dao/AttachmentDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO is responsible for managing file attachments associated with parent entities like Events or Meetings. It provides a unified interface for CRUD operations on the `attachments` table, abstracting away the polymorphic relationship defined by the `parent_type` and `parent_id` columns.\n\n2.  **Architectural Role**\n\n    This is a **DAO (Data Access) Tier** class. It is called by services (`EventService`, `MeetingService`) and servlets (`AdminEventServlet`, `AdminMeetingServlet`) that need to manage attachments for their respective entities.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `Attachment` (Model): The data model object this DAO works with.\n\n4.  **In-Depth Breakdown**\n\n    *   **`addAttachment(Attachment attachment, Connection conn)`**: Inserts a new attachment record into the database within an existing transaction.\n    *   **`getAttachmentsForParent(String parentType, int parentId, String userRole)`**: Retrieves all attachments for a specific parent (e.g., all attachments for Event with ID 5). It filters the results based on the user''s role (`ADMIN` or `NUTZER`), ensuring non-admins cannot see admin-only files.\n    *   **`getAttachmentById(int attachmentId)`**: Fetches a single attachment''s metadata by its unique ID. This is used by the `DownloadServlet` to verify existence and get the file path.\n    *   **`deleteAttachment(int attachmentId)`**: Deletes an attachment record from the database. Note: This does not delete the physical file from the disk; that is the responsibility of the calling service or servlet.\n    *   **`mapResultSetToAttachment(ResultSet rs)`**: A private helper method to convert a database row into an `Attachment` object.'),
('src/main/java/de/dao/MaintenanceLogDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all database interactions with the `maintenance_log` table. Its purpose is to create and retrieve maintenance history for specific inventory items, tracking actions like repairs or marking an item for maintenance.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `StorageService` and `AdminStorageServlet` to log maintenance activities and by the `StorageItemDetailsServlet` to display an item''s maintenance history.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `MaintenanceLogEntry` (Model): The data model representing a single maintenance log entry.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createLog(MaintenanceLogEntry log)`**\n        *   **Method Signature:** `public boolean createLog(MaintenanceLogEntry log)`\n        *   **Purpose:** Inserts a new maintenance record into the `maintenance_log` table.\n        *   **Parameters:**\n            *   `log` (MaintenanceLogEntry): An object containing the item ID, user ID, action taken, notes, and any associated cost.\n        *   **Returns:** `true` on successful insertion, `false` otherwise.\n        *   **Side Effects:** Writes a new record to the database.\n\n    *   **`getHistoryForItem(int itemId)`**\n        *   **Method Signature:** `public List<MaintenanceLogEntry> getHistoryForItem(int itemId)`\n        *   **Purpose:** Retrieves the complete maintenance history for a specific storage item, ordered from newest to oldest. It joins with the `users` table to get the username of the person who performed the action.\n        *   **Parameters:**\n            *   `itemId` (int): The ID of the storage item.\n        *   **Returns:** A `List` of `MaintenanceLogEntry` objects.\n        *   **Side Effects:** Performs a database read.'),
('src/main/java/de/dao/MeetingAttendanceDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO handles all database interactions for the `meeting_attendance` table. It is responsible for tracking which users have attended specific meetings, which is the basis for granting qualifications.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `AdminAttendanceServlet` and `MatrixServlet` to update and display attendance records.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `MeetingAttendance` (Model): The data model representing a user''s attendance at a meeting.\n\n4.  **In-Depth Breakdown**\n\n    *   **`setAttendance(int userId, int meetingId, boolean attended, String remarks)`**\n        *   **Method Signature:** `public boolean setAttendance(int userId, int meetingId, boolean attended, String remarks)`\n        *   **Purpose:** Sets or updates a user''s attendance status for a meeting. It uses an `INSERT ... ON DUPLICATE KEY UPDATE` SQL statement, which allows this single method to handle both initial registration and subsequent changes without needing to check for a pre-existing record.\n        *   **Parameters:** All parameters correspond to the columns in the `meeting_attendance` table.\n        *   **Returns:** `true` on success, `false` on SQL error.\n        *   **Side Effects:** Writes or updates a record in the database.\n\n    *   **`getAllAttendance()`**\n        *   **Method Signature:** `public List<MeetingAttendance> getAllAttendance()`\n        *   **Purpose:** Retrieves all attendance records from the database. This is used by the `MatrixServlet` to build a comprehensive map of all user attendance for display in the qualification matrix.\n        *   **Parameters:** None.\n        *   **Returns:** A `List` of all `MeetingAttendance` objects.\n        *   **Side Effects:** Performs a database read.\n\n    *   **`mapResultSetToAttendance(ResultSet rs)`**: A private helper method to map a database row to a `MeetingAttendance` object.'),
('src/main/java/de/dao/MeetingDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all database operations for the `meetings` table. It handles the CRUD lifecycle of individual, schedulable meeting instances, which are always children of a parent `Course`. It also manages user sign-ups for meetings via the `meeting_attendance` table.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It is primarily used by the `AdminMeetingServlet` for managing meetings and by public-facing servlets like `MeetingServlet` and `MeetingDetailsServlet` to display meeting information to users.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `Meeting`, `User` (Models): The data models this DAO works with.\n\n4.  **In-Depth Breakdown**\n\n    *   **CRUD Operations (`createMeeting`, `getMeetingById`, `updateMeeting`, `deleteMeeting`)**: Standard methods for managing meeting records. `deleteMeeting` will cascade-delete all associated attendance records.\n    *   **Listing Methods (`getMeetingsForCourse`, `getAllMeetings`, `getAllUpcomingMeetings`)**: Various methods to retrieve lists of meetings, either for a specific course, for all courses, or only upcoming ones for the calendar view. These queries join with `courses` and `users` to enrich the `Meeting` object with the parent course name and leader''s username.\n    *   **User-Specific Queries (`getUpcomingMeetingsForUser`, `isUserAssociatedWithMeeting`)**:\n        *   `getUpcomingMeetingsForUser`: Fetches upcoming meetings for a specific user and calculates their attendance status (`ANGEMELDET`, `ABGEMELDET`, or `OFFEN`) for each.\n        *   `isUserAssociatedWithMeeting`: A simple check to see if a user is signed up for a meeting, used for authorization checks.\n    *   **`mapResultSetToMeeting(ResultSet rs)`**: A private helper to populate a `Meeting` object from a database row, including data from joined tables.'),
('src/main/java/de/dao/PasskeyDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO is responsible for all database interactions related to WebAuthn/Passkey credentials. It handles the storage, retrieval, and management of public key credentials in the `user_passkeys` table, which enables passwordless authentication for users.\n\n2.  **Architectural Role**\n\n    This class is a critical component of the **DAO (Data Access) Tier**. It provides the persistence layer for the `PasskeyService`, allowing it to manage the lifecycle of user credentials securely.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `PasskeyCredential` (Model): The data model representing a stored credential.\n\n4.  **In-Depth Breakdown**\n\n    *   **`saveCredential(PasskeyCredential credential)`**: Inserts a new passkey record into the database after a user successfully completes the registration ceremony.\n    *   **`getCredentialsByUserId(int userId)`**: Retrieves all passkeys registered by a specific user. This is used during the authentication process where the server can suggest known credentials to the browser.\n    *   **`getCredentialById(String credentialId)`**: Fetches a single credential by its unique `credential_id` (a Base64URL string). This is the primary lookup method during an authentication ceremony to verify a user''s login attempt.\n    *   **`deleteCredential(int credentialDbId, int userId)`**: Removes a passkey from the database. It requires both the internal database ID and the user''s ID to ensure a user can only delete their own credentials.\n    *   **`updateSignatureCount(String credentialId, long newSignatureCount)`**: Updates the signature counter for a credential after a successful authentication. This is a security measure to help detect cloned authenticators.\n    *   **`mapResultSetToCredential(ResultSet rs)`**: A private helper method to map a database row to a `PasskeyCredential` object.'),
('src/main/java/de/dao/PermissionDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO provides read-only access to the application''s permission system. Its primary responsibilities are to fetch all available permission definitions from the `permissions` table and to retrieve the specific set of permissions granted to an individual user from the `user_permissions` junction table.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `UserDAO` to populate a `User` object with their complete set of permissions upon login, and by the `AdminUserServlet` to display the list of all possible permissions in the user editing modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `Permission` (Model): The data model representing a single permission definition.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getAllPermissions()`**\n        *   **Method Signature:** `public List<Permission> getAllPermissions()`\n        *   **Purpose:** Retrieves a complete list of all permissions defined in the system.\n        *   **Parameters:** None.\n        *   **Returns:** A `List` of `Permission` objects.\n        *   **Side Effects:** Performs a database read on the `permissions` table.\n\n    *   **`getPermissionIdsForUser(int userId)`**\n        *   **Method Signature:** `public Set<Integer> getPermissionIdsForUser(int userId)`\n        *   **Purpose:** Fetches the set of primary key IDs for all permissions directly assigned to a specific user.\n        *   **Parameters:**\n            *   `userId` (int): The ID of the user.\n        *   **Returns:** A `Set` of integer permission IDs.\n        *   **Side Effects:** Performs a database read on the `user_permissions` table.'),
('src/main/java/de/dao/ProfileChangeRequestDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages the lifecycle of user profile change requests. It handles all database operations for the `profile_change_requests` table, including creating new requests, fetching pending requests for administrators, and updating their status upon approval or denial.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It is used by the `ProfileServlet` when a user submits a change request and by the `AdminChangeRequestServlet` and its associated `Action` classes (`ApproveChangeAction`, `DenyChangeAction`) for processing these requests.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `ProfileChangeRequest` (Model): The data model for a change request.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createRequest(ProfileChangeRequest request)`**: Inserts a new profile change request into the database with a ''PENDING'' status.\n    *   **`getRequestById(int id)`**: Retrieves a single request by its ID, joining with the `users` table to get the requester''s and reviewer''s usernames.\n    *   **`getPendingRequests()`**: Fetches all requests that currently have a ''PENDING'' status, for display on the admin requests page.\n    *   **`hasPendingRequest(int userId)`**: A quick check to determine if a user already has a pending request, used to prevent them from submitting multiple requests.\n    *   **`updateRequestStatus(int requestId, String status, int adminId)`**: Updates a request''s status to ''APPROVED'' or ''DENIED'', and records which admin reviewed it and when.\n    *   **`mapResultSetToRequest(ResultSet rs)`**: A private helper method to map a database row to a `ProfileChangeRequest` object.'),
('src/main/java/de/dao/ReportDAO.java', '1.  **File Overview & Purpose**\n\n    This is a specialized DAO designed for generating analytical reports and summaries. Unlike other DAOs that focus on CRUD operations for single entities, this class contains complex, aggregate SQL queries that summarize data across multiple tables for administrative dashboards and dedicated report pages.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `AdminReportServlet` and `AdminDashboardService` to fetch data for visualization and export. It encapsulates the most complex SQL logic in the application.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getEventParticipationSummary()`**: Calculates the number of assigned participants for each event.\n    *   **`getUserActivityStats()`**: Aggregates statistics for each user, counting how many events they''ve signed up for and how many meetings they''ve attended.\n    *   **`getInventoryUsageFrequency()`**: Calculates the total number of times each inventory item has been checked out.\n    *   **`getTotalInventoryValue()`**: Calculates the total monetary value of all items in stock by multiplying quantity by price.\n    *   **`getEventCountByMonth(int months)`**: Generates a time-series dataset of how many events occurred each month over a given period, used for the trend chart on the dashboard.\n    *   **`getUserParticipationStats(int limit)`**: Retrieves the top N most active users based on the number of events they have been assigned to.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V80__Repopulate_wiki_data_part20.sql
========================================================================

-- Flyway migration V80, Part 20: Overhaul Technical Wiki Documentation (Frontend Components & Admin Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/components/admin/dashboard/EventTrendChart.jsx',
'## 1. File Overview & Purpose

This is a presentational React component responsible for rendering the **Event Trend Chart** on the Admin Dashboard. It uses the `react-chartjs-2` library to create a line chart.

## 2. Architectural Role

This is a **View** sub-component, specifically for data visualization within the `AdminDashboardPage`.

## 3. Key Features & Logic

- **Library Integration:** It imports and registers the necessary components from `chart.js` (like scales, elements, and tooltips).
- **Data Mapping:** It takes `trendData` (an array of `{ month: string, count: number }`) as a prop and transforms it into the specific `data` and `options` format required by Chart.js.
- **Rendering:** It renders the `<Line />` component from `react-chartjs-2`, passing the prepared data and options to it.'),

('frontend/src/components/admin/dashboard/Widget.jsx',
'## 1. File Overview & Purpose

This is a reusable React component that renders a single **Dashboard Widget**. It provides a standardized layout with a title, an icon, a content area, and an optional "View All" link.

## 2. Architectural Role

This is a reusable **UI Component** used throughout the `AdminDashboardPage`.

## 3. Key Features & Logic

- **Props-Based:** It is a purely presentational component that receives all its content via props: `icon`, `title`, `children` (for the main content), `linkTo`, and `linkText`.
- **Standardized Layout:** It renders its content inside a `<div class="card">`, ensuring a consistent look and feel for all dashboard widgets.'),

('frontend/src/components/admin/events/DynamicItemRows.jsx',
'## 1. File Overview & Purpose

This is a controlled React component that manages a dynamic list of **inventory item reservations** within a form. It allows an administrator to add, remove, and edit multiple item/quantity pairs.

## 2. Architectural Role

This is a **Form Component** used within the `EventModal`.

## 3. Key Features & Logic

- **Controlled Component:** It does not manage its own state. It receives the list of rows (`rows`) and a setter function (`setRows`) as props from its parent (`EventModal`).
- **Dynamic Rows:** It maps over the `rows` array to render a row for each item. Each row contains a `<select>` dropdown for the item and an `<input>` for the quantity.
- **State Manipulation:**
    - `handleAddRow`: Appends a new, empty item object to the `rows` array via the `setRows` prop.
    - `handleRemoveRow`: Removes an item from the array at a specific index.
    - `handleRowChange`: Updates a specific field (itemId or quantity) for an item at a specific index.'),

('frontend/src/components/admin/events/DynamicSkillRows.jsx',
'## 1. File Overview & Purpose

This is a controlled React component that manages a dynamic list of **skill requirements** for an event. It allows an administrator to add, remove, and edit multiple skill/personnel count pairs.

## 2. Architectural Role

This is a **Form Component** used within the `EventModal`.

## 3. Key Features & Logic

- **Controlled Component:** Like `DynamicItemRows`, it receives its state (`rows`, `setRows`) via props from the `EventModal`.
- **Functionality:** Its implementation is nearly identical to `DynamicItemRows`, but the inputs are tailored for selecting a `Course` and specifying the number of required persons.'),

('frontend/src/components/admin/events/EventModal.jsx',
'## 1. File Overview & Purpose

This is a large, stateful React component that provides the **modal dialog for creating and editing events**. It contains the entire form, including the tabbed interface and the dynamic row components.

## 2. Architectural Role

This is a key **UI Container Component** used by the `AdminEventsPage`.

## 3. Key Features & Logic

- **State Management:** It uses `useState` to manage all form data (`formData`), the state of the skill requirement rows (`skillRows`), the item reservation rows (`itemRows`), the selected file for upload, and the active tab.
- **Edit Mode:** It determines if it''s in "edit" or "create" mode based on whether an `event` prop is passed in. In edit mode, an `useEffect` hook populates the form with the existing event''s data.
- **Tabbed Interface:** Manages the `activeTab` state to show/hide the "General" and "Details & Bedarf" sections of the form.
- **Component Composition:** It renders the `DynamicSkillRows` and `DynamicItemRows` components, passing down the relevant state and state setters.
- **Submission:** The `handleSubmit` function assembles all the data from the various state variables into a `FormData` object. This is necessary to send both the JSON event data and the binary file data in a single multipart request to the backend.'),

('frontend/src/components/admin/events/TaskDependenciesForm.jsx',
'## 1. File Overview & Purpose

This is a controlled React component that renders a checklist of tasks, allowing an administrator to define **dependencies** for a specific event task (i.e., which other tasks must be completed first).

## 2. Architectural Role

This is a **Form Component** intended for use within a task editing modal (though not fully implemented in the provided code, it is present).

## 3. Key Features & Logic

- **Controlled Component:** It receives the list of selected dependencies (`selectedDependencies`, a `Set`) and an `onDependencyChange` callback function as props.
- **Rendering:** It receives a list of `allTasks` for the event and renders a checkbox for each one.
- **State Manipulation:** When a checkbox is toggled, it creates a new `Set` based on the previous selection, adds or deletes the toggled task ID, and calls the `onDependencyChange` prop with the new `Set` to update the parent component''s state.'),

('frontend/src/components/admin/kits/KitItemsForm.jsx',
'## 1. File Overview & Purpose

This is a stateful React component that provides the form for managing the **items within an inventory kit**. It is displayed within the accordion view on the `AdminKitsPage`.

## 2. Architectural Role

This is a **Form Component**.

## 3. Key Features & Logic

- **Local State:** Unlike the dynamic rows for events, this component manages its own state for the list of `items`. It initializes this state from the `kit.items` prop.
- **Dynamic Rows:** It provides the standard "add row" and "remove row" functionality for editing the list of items and their quantities.
- **Submission:** On submit, it calls the `PUT /api/v1/kits/:id/items` endpoint to overwrite the entire list of items for that kit. It then calls the `onUpdateSuccess` prop to trigger a data refresh on the parent page.'),

('frontend/src/components/admin/kits/KitModal.jsx',
'## 1. File Overview & Purpose

This component provides the **modal dialog for creating and editing the metadata** of an inventory kit (name, description, location).

## 2. Architectural Role

This is a **UI Container Component** used by the `AdminKitsPage`.

## 3. Key Features & Logic

- **State Management:** It is a controlled form that manages its state (`formData`) with `useState`.
- **Edit vs. Create Mode:** It checks for the presence of a `kit` prop to determine its mode and initialize its state.
- **Submission:** On submit, it calls either `POST /api/v1/kits` (for create) or `PUT /api/v1/kits/:id` (for edit) and then calls the `onSuccess` prop to close the modal and refresh the parent page.'),

('frontend/src/components/admin/matrix/AttendanceModal.jsx',
'## 1. File Overview & Purpose

This component provides the **modal dialog for updating a user''s attendance** for a specific training meeting. It is opened when an admin clicks a cell in the Qualification Matrix.

## 2. Architectural Role

This is a **UI Container Component** used by the `AdminMatrixPage`.

## 3. Key Features & Logic

- **State Management:** It is a controlled form that manages the state for the `attended` checkbox and the `remarks` textarea.
- **Submission:** On submit, it calls the `PUT /api/v1/matrix/attendance` endpoint with the user ID, meeting ID, and the new attendance status. It then calls the `onSuccess` prop to close the modal and refresh the matrix data.'),

('frontend/src/components/admin/reports/UserActivityChart.jsx',
'## 1. File Overview & Purpose

This is a presentational React component that renders a **horizontal bar chart** showing user activity (e.g., event participations).

## 2. Architectural Role

This is a **View** sub-component for data visualization, used within the `AdminReportsPage`.

## 3. Key Features & Logic

- **Library Integration:** It uses `react-chartjs-2` to render a `<Bar />` chart.
- **Data Mapping:** It takes `activityData` as a prop and transforms it into the data format required by Chart.js.
- **Configuration:** It sets the `indexAxis: ''y''` option to make the bar chart horizontal, which is often better for displaying lists of names.'),

('frontend/src/components/admin/storage/StorageItemModal.jsx',
'## 1. File Overview & Purpose

This is a highly versatile, stateful React component that provides the **modal dialog for all administrative actions on a storage item**. It can switch between multiple modes to show different forms.

## 2. Architectural Role

This is a key **UI Container Component** used by `AdminStoragePage` and `AdminDefectivePage`.

## 3. Key Features & Logic

- **Mode Management:** It uses a local `mode` state, initialized by the `initialMode` prop, to control which form is rendered. The available modes are `create`, `edit`, `defect`, `repair`, and `relations`.
- **Multi-Functional Rendering:** A `renderContent()` function contains a `switch` statement that returns the correct form JSX based on the current `mode`.
- **Component Composition:** In `relations` mode, it renders the `RelatedItemsManager` component to handle that specific functionality.
- **Data Fetching:** It uses the `useApi` hook to fetch a list of all storage items, which is needed by the `RelatedItemsManager`.
- **Submission Logic:** It contains multiple separate submission handlers (`handleSubmit`, `handleDefectSubmit`, `handleRepairSubmit`) for each of its primary functions, each calling a different backend API endpoint.'),

('frontend/src/components/admin/users/PermissionTab.jsx',
'## 1. File Overview & Purpose

This is a controlled, presentational React component that renders the **nested checklist of permissions** inside the `UserModal`.

## 2. Architectural Role

This is a **Form Component**.

## 3. Key Features & Logic

- **Controlled Component:** It receives the `groupedPermissions` object, a `Set` of `assignedIds`, and an `onPermissionChange` callback function as props.
- **Rendering Logic:**
    - It iterates over the keys of the `groupedPermissions` object to create a `<details>` section for each permission group (e.g., "USER", "EVENT").
    - Within each group, it maps over the permissions to render a checkbox and label for each.
    - The `checked` status of each checkbox is determined by checking if its ID exists in the `assignedIds` `Set`.
- **State Manipulation:** When a checkbox is clicked, it calls the `onPermissionChange` prop with the permission''s ID, allowing the parent `UserModal` to update its state.'),

('frontend/src/components/admin/users/UserModal.jsx',
'## 1. File Overview & Purpose

This is a large, stateful React component that provides the **modal dialog for creating and editing users**. It contains the entire form, including the tabbed interface for general details, permissions, and admin notes.

## 2. Architectural Role

This is a key **UI Container Component** used by the `AdminUsersPage`.

## 3. Key Features & Logic

- **Data Fetching:** When in edit mode, it makes an API call via `apiClient` to `/api/v1/users/:id` to fetch the full user object, including their currently assigned permissions.
- **State Management:**
    - `useState` is used to manage the `formData` object, which contains all user details and a `Set` of `permissionIds`.
    - It also manages the `activeTab` state.
- **Component Composition:** It renders the `PermissionsTab` component, passing down the `groupedPermissions` (received from `AdminUsersPage`), the `formData.permissionIds` set, and the `handlePermissionChange` callback.
- **Permission Handling:** The `handlePermissionChange` function is responsible for updating the `permissionIds` `Set` in the component''s state when a checkbox is toggled in the child component.
- **Submission:** On submit, it converts the `permissionIds` `Set` back into an array and sends the complete payload to the backend.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V81__Repopulate_wiki_data_part21.sql
========================================================================

-- Flyway migration V81, Part 21: Overhaul Technical Wiki Documentation (Frontend Components)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/components/calendar/CalendarDesktopView.jsx',
'## 1. File Overview & Purpose

This component renders a traditional, grid-based **monthly calendar view** for desktop screens.

## 2. Architectural Role

This is a **View** sub-component, used by `CalendarPage`.

## 3. Key Features & Logic

- **Date Calculation (`date-fns`):** It heavily uses the `date-fns` library to perform all necessary date calculations:
    - `startOfMonth`, `endOfMonth`: To find the boundaries of the current month.
    - `startOfWeek`, `endOfWeek`: To find the start and end of the visible grid, ensuring full weeks are always displayed.
    - `eachDayOfInterval`: To generate an array of all `Date` objects to be rendered in the grid.
- **Data Grouping:** It uses `useMemo` to transform the flat list of `entries` (from props) into a `Map` where keys are date strings (`"yyyy-MM-dd"`) and values are arrays of events for that day. This is an efficient way to look up events for each day cell.
- **Rendering:** It maps over the `daysInGrid` array. For each day, it looks up the events in the memoized map and renders them. Days not in the current month are visually greyed out.'),

('frontend/src/components/calendar/CalendarMobileView.jsx',
'## 1. File Overview & Purpose

This component renders a simple, **chronological list of upcoming events and meetings**, optimized for mobile screens.

## 2. Architectural Role

This is a **View** sub-component, used by `CalendarPage`.

## 3. Key Features & Logic

- **Sorting:** It first sorts the incoming `entries` array by date to ensure they are displayed in chronological order.
- **Rendering:** It maps over the sorted array and renders each entry as a list item (`termin-item`). Each item displays the day, month, title, and type of the entry, and links to the respective details page.'),

('frontend/src/components/chat/ConversationList.jsx',
'## 1. File Overview & Purpose

This component renders the **list of conversations** on the left side of the `ChatPage`. It displays all of the user''s 1-on-1 and group chats and provides controls for starting new ones.

## 2. Architectural Role

This is a **View** sub-component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch the user''s conversation list from `/api/v1/public/chat/conversations`.
- **Starting New Chats:**
    - The "New Direct Message" button opens a `UserSearchModal`. When a user is selected, it calls `POST /api/v1/public/chat/conversations` to find or create a conversation and then navigates to the new chat URL.
    - The "New Group" button opens the `GroupChatModal`, which handles the creation of a new group conversation.
- **Active State:** It compares the `selectedConversationId` prop (from the URL) with each conversation''s ID to apply an "active" CSS class to the currently viewed chat.'),

('frontend/src/components/chat/GroupChatModal.jsx',
'## 1. File Overview & Purpose

This component provides the **modal dialog for creating a new group chat**.

## 2. Architectural Role

This is a **UI Container Component**.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch a list of all users from `/api/v1/users` to populate the member selection checklist.
- **State Management:** Uses `useState` to manage the `groupName` input and a `Set` of `selectedUsers`.
- **Submission:** The "Create Group" button calls the `onCreateGroup` prop (passed from `ConversationList`), providing the group name and the array of selected user IDs.'),

('frontend/src/components/chat/ManageParticipantsModal.jsx',
'## 1. File Overview & Purpose

This component provides the **modal dialog for adding new members to an existing group chat**.

## 2. Architectural Role

This is a **UI Container Component**.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get a list of all users.
- **Filtering:** It filters the list of all users to show only those who are *not* already in the current conversation.
- **Submission:** The "Add" button calls the `onAddUsers` prop (passed from `MessageView`), providing the array of newly selected user IDs.'),

('frontend/src/components/chat/MessageStatus.jsx',
'## 1. File Overview & Purpose

This is a small, presentational component that displays the **read receipt status** (Sent, Delivered, Read) for a chat message.

## 2. Architectural Role

This is a **View** sub-component, used within `MessageView`.

## 3. Key Features & Logic

- **Conditional Rendering:** It only renders if the message was sent by the current user (`isSentByMe` prop is true).
- **Icon Logic:** It uses a `switch` statement on the `status` prop to determine which FontAwesome icon to display (`fa-check`, `fa-check-double`) and whether to apply a different color for the "Read" status.'),

('frontend/src/components/chat/MessageView.jsx',
'## 1. File Overview & Purpose

This is a large, complex component that renders the **main message view** for a single conversation on the `ChatPage`. It handles displaying message history, real-time message updates, and the message input form.

## 2. Architectural Role

This is a key **View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch the initial message history from `/api/v1/public/chat/conversations/:id/messages`.
- **Real-Time Updates:** Uses the `useWebSocket` hook to connect to `/ws/dm/:conversationId`. The `handleWebSocketMessage` callback handles incoming messages (`new_message`, `message_updated`, `message_deleted`, `messages_status_updated`) and updates the local `messages` state accordingly.
- **Read Receipts:** An `useEffect` hook monitors the `messages` state. If it detects unread messages received from another user, it sends a `mark_as_read` event over the WebSocket to inform the server and other clients.
- **Message Rendering:** It maps over the `messages` array, rendering each one as a "bubble". It handles different styles for sent vs. received messages, displays sender info for group chats, and renders message content (including file links) via the `renderMessageContent` helper.
- **Message Actions:** It provides options for editing and deleting messages, which send `update_message` and `delete_message` events over the WebSocket.
- **Input Form:** Provides a controlled form for typing new messages and uploading files.

## 4. State Management

- **Message History:** Managed by `useState`, initialized by `useApi` and updated by `useWebSocket`.
- **Conversation Details:** Managed by a separate `useApi` hook.
- **UI State:** Uses `useState` for the message input, editing state, and modal visibility.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V82__Repopulate_wiki_data_part22.sql
========================================================================

-- Flyway migration V82, Part 22: Overhaul Technical Wiki Documentation (Frontend Components)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/components/events/ChecklistTab.jsx',
'## 1. File Overview & Purpose

This component renders the **Inventory Checklist** tab on the `EventDetailsPage`. It provides an interactive checklist for tracking equipment during event load-in and load-out.

## 2. Architectural Role

This is a **View** sub-component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch the initial checklist items for the event from `/api/v1/events/:id/checklist`.
- **Real-Time Updates:** Uses the `useWebSocket` hook to connect to `/ws/checklist/:id`. It listens for `checklist_update` events and updates the local state in real-time when another user changes an item''s status.
- **Status Changes:** When the user changes the status of an item in the dropdown, it sends a `PUT` request to `/api/v1/events/:id/checklist/:itemId/status`. The component''s state is then updated by the incoming WebSocket broadcast, ensuring consistency across all clients.
- **Generate from Reservations:** Provides a button that calls `POST /api/v1/events/:id/checklist/generate` to populate the checklist from the event''s material reservations.'),

('frontend/src/components/events/EventGalleryTab.jsx',
'## 1. File Overview & Purpose

This component renders the **Photo Gallery** tab on the `EventDetailsPage` for completed events. It displays uploaded photos and provides an interface for participants to upload new ones.

## 2. Architectural Role

This is a **View** sub-component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch all photo metadata for the event from `/api/v1/public/events/:id/gallery`.
- **Photo Upload:**
    - It conditionally renders an "Upload Photo" button only if the current user was a participant in the event.
    - The button opens a `PhotoUploadModal` which handles the file selection and submission to `POST /api/v1/public/events/:id/gallery`.
- **Photo Deletion:** It renders a delete button on each photo. This button is only visible if the current user is the uploader, an admin, or the event leader.
- **Lightbox:** Clicking on any photo opens it in a full-screen `Lightbox` view.

## 4. State Management

- **Photo List & Modals:** Managed by `useApi` and `useState` hooks.'),

('frontend/src/components/layout/ErrorLayout.jsx',
'## 1. File Overview & Purpose

This is a specialized **Layout Component** used by React Router to wrap all error pages (403, 404, 500). Its primary purpose is to apply a consistent, minimal theme and layout to these pages, ensuring they match the user''s selected theme even if the full application fails to render.

## 2. Architectural Role

This is a **Layout** component.

## 3. Key Features & Logic

- **Theme Application:** It directly accesses the `authStore` state via `getState()` to retrieve the user''s theme. It then sets the `data-theme` attribute on the `<html>` element. This is crucial because error pages render outside the main `<App />` component, so they don''t have access to the normal theme context.
- **Styling:** It wraps the error page content (rendered via `<Outlet />` or `children`) in a `<div class="error-page-wrapper">` which provides the necessary styling for the terminal-themed error pages.'),

('frontend/src/components/layout/Header.jsx',
'## 1. File Overview & Purpose

This component renders the **mobile-only header** that appears at the top of the screen on small viewports.

## 2. Architectural Role

This is a **Layout** component, part of the main `App` layout.

## 3. Key Features & Logic

- **Hamburger Menu:** It contains the hamburger menu button (`mobile-nav-toggle`). Clicking this button calls the `onNavToggle` function passed down from the `App` component, which manages the mobile sidebar''s open/closed state.
- **Logo & Profile Link:** It displays the application logo (which links home) and a link to the user''s profile page, showing their selected profile icon.'),

('frontend/src/components/layout/MinimalLayout.jsx',
'## 1. File Overview & Purpose

This is a specialized **Layout Component** for pages that should be displayed without the main application sidebar and header, such as the printable `PackKitPage` or the mobile-focused `QrActionPage`.

## 2. Architectural Role

This is a **Layout** component.

## 3. Key Features & Logic

- **Simplicity:** It simply renders the child route''s content (via `<Outlet />`) inside a basic, centered content wrapper. This provides a clean slate for pages that need a unique, uncluttered layout.'),

('frontend/src/components/layout/Sidebar.jsx',
'## 1. File Overview & Purpose

This component renders the main **sidebar navigation** for the application.

## 2. Architectural Role

This is a key **Layout** component, part of the main `App` layout.

## 3. Key Features & Logic

- **Data Source:** It reads the `user` object and the `navigationItems` array directly from the global `useAuthStore`. The `navigationItems` array is pre-filtered by the backend to only contain links the user is authorized to see.
- **Rendering:** It iterates through the `navigationItems` list and renders a `NavLink` for each. It separates the links into "User" and "Admin" sections.
- **Active Link Styling:** It uses the `isActive` property provided by `NavLink` to apply the `active-nav-link` class to the currently active route.
- **Global Search:** It includes the site-wide search bar. On submit, it navigates the user to the `/suche` page with the search term as a query parameter.
- **User Actions:** It displays the logged-in user''s name, a link to their profile, the logout button, and the `ThemeSwitcher` component.'),

('frontend/src/components/profile/ProfileAchievements.jsx',
'## 1. File Overview & Purpose

This is a presentational component that displays the **user''s earned achievements** on their profile page.

## 2. Architectural Role

This is a **View** sub-component, used within `ProfilePage`.

## 3. Key Features & Logic

- **Props-Based:** It receives the `achievements` array as a prop.
- **Rendering:** It maps over the array and displays each achievement in its own card, showing the icon, name, description, and the date it was earned.'),

('frontend/src/components/profile/ProfileDetails.jsx',
'## 1. File Overview & Purpose

This is a stateful component that manages the display and editing of a user''s **core profile data** on their profile page.

## 2. Architectural Role

This is a **View** and **Form** sub-component, used within `ProfilePage`.

## 3. Key Features & Logic

- **Controlled Form:** It manages the form data for email, class year, etc., in its local `useState`.
- **Change Request Flow:**
    1.  When the user clicks "Save," it doesn''t submit directly. Instead, it compares the current form data with the original `user` prop to detect what has changed.
    2.  It then opens a `ConfirmationModal`, showing the user a summary of their requested changes.
    3.  Only after the user confirms in this modal does it send the `POST` request to `/api/v1/public/profile/request-change`.
- **Update Propagation:** After a successful submission, it calls the `onUpdate` function (passed down from `ProfilePage`) to trigger a full refresh of the profile data.
- **Chat Color:** It also contains a separate, simple form for updating the user''s chat color, which calls the `PUT /api/v1/public/profile/chat-color` endpoint directly.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V83__Repopulate_wiki_data_part23.sql
========================================================================

-- Flyway migration V83, Part 23: Overhaul Technical Wiki Documentation (Frontend Components & UI)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/components/profile/ProfileEventHistory.jsx',
'## 1. File Overview & Purpose

This is a presentational component that displays the user''s **event participation history** on their profile page.

## 2. Architectural Role

This is a **View** sub-component, used within `ProfilePage`.

## 3. Key Features & Logic

- **Props-Based:** It receives the `eventHistory` array as a prop.
- **Rendering:** It renders a table displaying the event name, date, and the user''s status for that event.
- **Feedback Link:** For events that are "ABGESCHLOSSEN" (Completed) and where the user was "ZUGEWIESEN" (Assigned), it renders a link to the `/feedback/event/:id` page, prompting the user to provide feedback.'),

('frontend/src/components/profile/ProfileQualifications.jsx',
'## 1. File Overview & Purpose

This is a presentational component that displays the user''s **earned qualifications** on their profile page.

## 2. Architectural Role

This is a **View** sub-component, used within `ProfilePage`.

## 3. Key Features & Logic

- **Props-Based:** It receives the `qualifications` array as a prop.
- **Rendering:** It renders a simple table listing the names of the courses the user has completed and their status.'),

('frontend/src/components/profile/ProfileSecurity.jsx',
'## 1. File Overview & Purpose

This component handles the **security-related aspects** of the user''s profile, such as changing their password. The Passkey/WebAuthn functionality has been removed and is currently disabled.

## 2. Architectural Role

This is a **View** sub-component, used within `ProfilePage`.

## 3. Key Features & Logic

- **Password Change:** Provides a link to the dedicated `/passwort` page.
- **Passkey (Disabled):** Displays a placeholder message indicating that the passwordless login feature is being reworked. The "Register New Device" button is present but disabled.'),

('frontend/src/components/storage/DamageReportModal.jsx',
'## 1. File Overview & Purpose

This component provides the **modal dialog for a user to report damage** to a specific inventory item.

## 2. Architectural Role

This is a **UI Container Component** used by the `StorageItemDetailsPage`.

## 3. Key Features & Logic

- **Controlled Form:** It is a controlled form that manages the `description` of the damage in its local `useState`.
- **Submission:** On submit, it calls the `POST /api/v1/public/storage/:itemId/report-damage` endpoint.
- **Success Callback:** On a successful submission, it calls the `onSuccess` prop to close the modal and notify the parent component.'),

('frontend/src/components/storage/ReservationCalendar.jsx',
'## 1. File Overview & Purpose

This component renders a simple, read-only **monthly calendar to display future reservations** for a single inventory item.

## 2. Architectural Role

This is a **View** sub-component used within the `StorageItemDetailsPage`.

## 3. Key Features & Logic

- **Data Transformation:** It takes a `reservations` prop (a list of events with start/end times) and uses `useMemo` to convert them into a more easily searchable format (`reservationIntervals`).
- **Date Calculation (`date-fns`):** Like the main calendar, it uses `date-fns` to calculate the days to display in the grid.
- **Rendering:** It iterates through each day of the month grid. For each day, it checks if the day falls within any of the reservation intervals. If it does, it applies a `.reserved` CSS class to visually mark the day and adds a `title` attribute to show which event it''s reserved for.'),

('frontend/src/components/ui/ChangelogModal.jsx',
'## 1. File Overview & Purpose

This component is the **"What''s New" modal** that is automatically shown to a user after an application update.

## 2. Architectural Role

This is a reusable **UI Component**, managed and displayed by the root `App.jsx` component.

## 3. Key Features & Logic

- **Props-Based:** It receives a `changelog` object and an `onClose` callback as props.
- **Markdown Rendering:** It uses `react-markdown` to render the `changelog.notes`, allowing for richly formatted update descriptions.
- **Action:** The "Verstanden!" (Got it!) button simply calls the `onClose` callback. The parent `App` component is responsible for making the API call to mark the changelog as seen.'),

('frontend/src/components/ui/Lightbox.jsx',
'## 1. File Overview & Purpose

This component provides a simple, full-screen **lightbox for viewing images**.

## 2. Architectural Role

This is a reusable **UI Component**.

## 3. Key Features & Logic

- **Rendering:** When its `src` prop is not null, it renders a full-screen overlay with the image centered.
- **Closing:** It can be closed by clicking the overlay, clicking the "×" button, or by pressing the "Escape" key. The Escape key functionality is implemented in a `useEffect` hook that adds and removes a global keydown event listener.'),

('frontend/src/components/ui/Modal.jsx',
'## 1. File Overview & Purpose

This is the generic, reusable **Modal** component used throughout the entire application for dialogs and forms.

## 2. Architectural Role

This is a fundamental, reusable **UI Component**.

## 3. Key Features & Logic

- **Conditional Rendering:** It only renders its content if the `isOpen` prop is `true`.
- **Layout:** It creates the standard modal structure: a semi-transparent overlay (`modal-overlay`) and a centered content box (`modal-content`).
- **Closing:** It provides multiple ways to close:
    - Clicking the overlay calls the `onClose` prop.
    - Clicking the "×" button calls `onClose`.
    - Pressing the "Escape" key triggers the `onClose` prop (managed via a `useEffect` hook).
- **Content Projection:** It uses the `children` prop to render any content passed into it from the parent component.'),

('frontend/src/components/ui/StatusBadge.jsx',
'## 1. File Overview & Purpose

This is a simple, presentational component that renders a **colored status badge**.

## 2. Architectural Role

This is a reusable **UI Component**.

## 3. Key Features & Logic

- **Props-Based:** It takes a single `status` string as a prop.
- **CSS Class Logic:** It contains a `getStatusClass` function that uses a `switch` statement to map different status strings (e.g., "LAUFEND", "GEPLANT", "ABGESCHLOSSEN") to specific CSS classes (`status-warn`, `status-ok`, `status-info`) which control the badge''s color.'),

('frontend/src/components/ui/ThemeSwitcher.jsx',
'## 1. File Overview & Purpose

This component is the **light/dark theme toggle button** found in the sidebar.

## 2. Architectural Role

This is a reusable **UI Component**.

## 3. Key Features & Logic

- **Global State Interaction:** It reads the current `theme` and the `setTheme` function from the global `useAuthStore`.
- **Icon Toggling:** It conditionally renders either a moon icon or a sun icon based on the current theme.
- **Action:** When clicked, it calls the `setTheme` function from the auth store, which handles both updating the global state and making the API call to persist the user''s preference.'),

('frontend/src/components/ui/ToastContainer.jsx',
'## 1. File Overview & Purpose

This component is responsible for rendering the **toast notifications** (small, non-blocking pop-up messages) in the corner of the screen.

## 2. Architectural Role

This is a **UI Component** that is rendered once in the root `App.jsx` component.

## 3. Key Features & Logic

- **Context Consumption:** It uses the `useToast` hook to get the current array of active `toasts` from the `ToastContext`.
- **Rendering:** It maps over the `toasts` array and renders a `Toast` component for each one.
- **`Toast` Sub-Component:**
    - The inner `Toast` component manages its own visibility with a `useEffect` hook. When mounted, it sets itself to visible, and after a timeout, it fades out.
    - It applies the correct CSS class (`toast-success`, `toast-danger`, etc.) based on the `type` prop.
    - If a `url` prop is provided, it wraps the toast in a `<Link>` tag, making the entire notification clickable.'),

('frontend/src/components/ui/WarningNotification.jsx',
'## 1. File Overview & Purpose

This component displays a high-priority, blocking **Warning Notification** modal. It is used for critical, real-time alerts sent from the server.

## 2. Architectural Role

This is a specialized **UI Component**, managed by the `useNotifications` hook and rendered in `App.jsx`.

## 3. Key Features & Logic

- **Attention-Grabbing:** It is designed to be highly disruptive to get the user''s immediate attention.
    - It plays a looping audio alert (`attention.mp3`).
    - A `useEffect` hook adds a `warning-flash` class to the `<body>`, causing the entire page background to flash red.
- **Lifecycle Management:** The `useEffect` hook returns a cleanup function that stops the audio and removes the flashing class when the component is unmounted (i.e., when the user dismisses it).');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V84__Repopulate_wiki_data_part24.sql
========================================================================

-- Flyway migration V84, Part 24: Overhaul Technical Wiki Documentation (Frontend Context, Hooks, Router)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/context/ToastContext.jsx',
'## 1. File Overview & Purpose

This file defines and exports the **Toast Context** and its associated `ToastProvider` and `useToast` hook. It provides a global, application-wide system for creating toast notifications from any component.

## 2. Architectural Role

This is a core **State Management** component using React''s Context API.

## 3. Key Features & Logic

- **`ToastContext`**: Created with `createContext` to hold the toast state and functions.
- **`ToastProvider`**: The wrapper component that provides the context to its children.
    - It uses `useState` to manage an array of `toasts`.
    - It exposes an `addToast` function. When called, this function adds a new toast object (with a unique ID, message, type, etc.) to the state array and sets a `setTimeout` to automatically remove that toast from the array after 5 seconds.
- **`useToast()`**: The custom hook that components use to access the `addToast` function from the context. It includes a check to ensure it''s used within a `ToastProvider`.'),

('frontend/src/hooks/useAdminData.js',
'## 1. File Overview & Purpose

This custom hook provides a centralized and efficient way for admin components to fetch the prerequisite data they need for forms (e.g., lists of users, roles, courses, items).

## 2. Architectural Role

This is a **Data Fetching Hook** in the frontend application.

## 3. Key Features & Logic

- **Data Aggregation:** The main `useAdminData` hook makes multiple parallel API calls using `Promise.all` to fetch all necessary data sources at once.
- **Permission-Aware Fetching:** It reads the current user''s permissions from the `useAuthStore` and conditionally skips API calls for data the user is not allowed to see. For example, if a user doesn''t have `COURSE_READ` permission, it won''t attempt to fetch the courses list.
- **State Management:** It manages a single state object that contains all the fetched data, a `loading` flag, and an `error` state.
- **Granular Hooks:** The file also exports smaller, more focused hooks like `useAdminRolesAndPermissions` for components that only need a subset of the admin data, improving performance and separation of concerns.'),

('frontend/src/hooks/useApi.js',
'## 1. File Overview & Purpose

This is a generic, reusable custom hook for managing the state of an API call. It encapsulates the standard pattern of handling data, loading, and error states for any asynchronous data-fetching operation.

## 2. Architectural Role

This is a fundamental **Data Fetching Hook** used by almost every page and component in the application that needs to retrieve data from the backend.

## 3. Key Features & Logic

- **State Management:** It uses `useState` to manage three key pieces of state: `data`, `loading`, and `error`. The `loading` state is importantly initialized to `true` to prevent race conditions and "component suspended" errors with React.lazy and routing.
- **`fetchData` Function:**
    - It uses `useCallback` to memoize the data-fetching function.
    - It wraps the `apiCall` (passed in as an argument) in a `try...catch...finally` block.
    - On success, it sets the `data`.
    - On failure, it sets the `error` message.
    - In the `finally` block, it always sets `loading` to `false`.
- **`useEffect` Hook:** It calls `fetchData` once when the component mounts and whenever the `apiCall` function itself changes.
- **Return Value:** It returns an object containing the current `data`, `loading` state, `error` state, and a `reload` function (which is simply a reference to `fetchData`) that allows components to manually trigger a data refresh.'),

('frontend/src/hooks/useNotifications.js',
'## 1. File Overview & Purpose

This custom hook encapsulates the logic for connecting to the server''s real-time notification stream (Server-Sent Events) and handling incoming messages.

## 2. Architectural Role

This is a **Real-Time Data Hook** used by the root `App.jsx` component to listen for global notifications.

## 3. Key Features & Logic

- **SSE Connection:** It uses the native browser `EventSource` API to establish a persistent connection to the `/api/v1/admin/notifications/sse` endpoint.
- **Event Listeners:**
    - It sets up an `onmessage` listener for generic messages.
    - It adds a specific event listener for the `"notification"` event type.
- **Message Handling:** When a `"notification"` event is received:
    - If the notification `level` is `"Warning"`, it uses `useState` to set the `warningNotification` state, which causes the `App` component to render the disruptive `WarningNotification` modal.
    - For other levels, it calls the `addToast` function from the `useToast` context to display a less intrusive toast message. It also passes along any `url` from the notification payload to make the toast clickable.
- **Lifecycle Management:** The `useEffect` hook returns a cleanup function that calls `events.close()`, ensuring the SSE connection is terminated when the `App` component unmounts.'),

('frontend/src/hooks/useTypingAnimation.js',
'## 1. File Overview & Purpose

This custom hook implements a **typing animation effect**. It takes an array of text lines and "types" them out one character at a time, simulating a terminal or command-line interface.

## 2. Architectural Role

This is a **UI/Animation Hook** used by the stylized error pages (`ErrorPage`, `NotFoundPage`, `ForbiddenPage`).

## 3. Key Features & Logic

- **State Management:** It uses `useState` to manage the `renderedLines` (the portion of text currently visible) and an `isComplete` flag.
- **Animation Logic:** It uses a series of nested `setTimeout` calls to achieve the animation.
    - The main function `typeLine` handles moving from one line to the next.
    - The inner function `typeChar` handles adding one character at a time to the current line.
- **Cleanup:** The `useEffect` hook returns a cleanup function that clears all pending `setTimeout`s when the component unmounts, preventing memory leaks.
- **Scrolling:** It exposes a `containerRef` that should be attached to the scrollable element. It automatically scrolls this container to the bottom as new lines are typed.'),

('frontend/src/hooks/useWebSocket.js',
'## 1. File Overview & Purpose

This is a generic, reusable custom hook for managing a **WebSocket connection**. It handles connecting, receiving messages, and automatically attempting to reconnect if the connection is dropped.

## 2. Architectural Role

This is a fundamental **Real-Time Data Hook** used by components that require two-way real-time communication, such as `MessageView` and `ChecklistTab`.

## 3. Key Features & Logic

- **Connection Management:**
    - It uses `useRef` to hold a persistent reference to the WebSocket object across renders.
    - A `useEffect` hook establishes the connection when the component mounts and the `url` is provided.
- **Event Handlers:** It sets up all the standard WebSocket event handlers:
    - `onopen`: Updates the `readyState` and logs a success message.
    - `onmessage`: Parses the incoming JSON data and calls the `onMessage` callback function that was passed in from the parent component.
    - `onclose`: Logs the closure and schedules a reconnection attempt after a 5-second delay (unless it was a specific auth-related closure code).
    - `onerror`: Logs errors and closes the connection.
- **Cleanup:** The `useEffect` hook returns a cleanup function that properly closes the WebSocket connection when the component unmounts, preventing reconnection attempts.
- **`sendMessage` Function:** It returns a memoized `sendMessage` function that the parent component can use to send JSON objects over the WebSocket.'),

('frontend/src/router/AdminRoute.jsx',
'## 1. File Overview & Purpose

This is a route wrapper component that protects all administrative routes. It checks if the currently logged-in user has admin privileges.

## 2. Architectural Role

This is a **Routing/Authorization** component.

## 3. Key Features & Logic

- **Authorization Check:** It reads the `isAdmin` boolean flag from the global `useAuthStore`.
- **Protected Content:** If `isAdmin` is `true`, it renders the `<Outlet />`, which allows React Router to render the nested admin page.
- **Access Denied:** If `isAdmin` is `false`, it uses the `<Navigate>` component from React Router to perform a client-side redirect to the `/forbidden` page, preventing the user from accessing the admin content.'),

('frontend/src/router/ProtectedRoute.jsx',
'## 1. File Overview & Purpose

This is a route wrapper component that protects all routes requiring authentication. It checks if a user is currently logged in.

## 2. Architectural Role

This is a **Routing/Authentication** component.

## 3. Key Features & Logic

- **Authentication Check:** It reads the `isAuthenticated` boolean flag from the global `useAuthStore`.
- **Protected Content:** If `isAuthenticated` is `true`, it renders its `children`, which is typically the main `<App />` layout.
- **Redirect to Login:** If `isAuthenticated` is `false`, it uses the `<Navigate>` component to redirect the user to the `/login` page. It also passes the user''s originally intended location in the state, so they can be redirected back to it after a successful login.'),

('frontend/src/router/index.jsx',
'## 1. File Overview & Purpose

This file contains the complete **routing configuration** for the entire frontend application, using `react-router-dom`.

## 2. Architectural Role

This is a core **Configuration** file for the frontend.

## 3. Key Features & Logic

- **`createBrowserRouter`**: The function used to define all the application''s routes.
- **Lazy Loading:** It uses `React.lazy()` for almost all page components. This enables code splitting, meaning the JavaScript for a specific page is only downloaded when the user navigates to it, improving initial load times. `Suspense` is used implicitly by React Router to handle the loading state.
- **Layout Nesting:** It defines a nested route structure:
    - The root path (`/`) is protected by `ProtectedRoute` and renders the main `App` layout.
    - All standard user-facing pages are defined as children of this root route.
    - The `/admin` path is further protected by the `AdminRoute` component. All admin pages are nested as children of this route.
- **Specialized Layouts:** It defines separate top-level routes for pages that need a `MinimalLayout` (like `/pack-kit`) or an `ErrorLayout` (like `/forbidden` and `/not-found`).
- **Error Handling:** It configures the `errorElement` for the main route to point to the `ErrorPage`, which will catch any rendering errors within the protected application.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V85__Repopulate_wiki_data_part25.sql
========================================================================

-- Flyway migration V85, Part 25: Overhaul Technical Wiki Documentation (Frontend Services & Store)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/services/apiClient.js',
'## 1. File Overview & Purpose

This is a singleton service that acts as a centralized wrapper around the native `fetch` API. It is used by every component and hook in the application to communicate with the backend REST API.

## 2. Architectural Role

This is a core **Service** component in the frontend application''s infrastructure layer.

## 3. Key Features & Logic

- **Standardized Responses:** Its `request` method ensures that all API calls have a consistent return format (`{ success: boolean, message: string, data: object }`).
- **Error Handling:** It contains centralized logic to handle different types of errors:
    - **Network Errors:** Catches `Failed to fetch` errors and returns a user-friendly message indicating the backend is likely offline.
    - **HTTP Errors (4xx, 5xx):** Parses the JSON error response from the backend and throws an `Error` with the message provided by the server.
    - **Non-JSON Responses:** Detects if the server returns something other than JSON (like an HTML error page) and provides a generic server connection error.
- **Automatic Logout:** The `setup` method allows the `authStore` to inject its `logout` function. The `request` method will automatically call this function if it ever receives an HTTP 401 (Unauthorized) response, ensuring that an invalid session is immediately cleared.
- **CSRF Protection (Stubbed):** It includes logic to read the `XSRF-TOKEN` from the document cookies and add it as an `X-XSRF-TOKEN` header to all state-changing requests (POST, PUT, DELETE). **However**, this is currently bypassed by the backend''s security configuration, which ignores CSRF for API routes.
- **Convenience Methods:** Provides simple `get`, `post`, `put`, and `delete` methods that pre-configure the `fetch` options.'),

('frontend/src/store/authStore.js',
'## 1. File Overview & Purpose

This file defines the global **authentication and session state** for the entire frontend application, using the **Zustand** state management library. It is the single source of truth for the currently logged-in user, their permissions, and UI preferences.

## 2. Architectural Role

This is the core **State Management** component for the application.

## 3. Key Dependencies & Libraries

- **Zustand (`create`)**: The function for creating a new state store.
- **Zustand Middleware (`persist`)**: Middleware that automatically persists parts of the store''s state to `localStorage`.
- `apiClient`: The service used for all authentication-related API calls.

## 4. In-Depth Breakdown

- **`create(persist(...))`**: The store is created and wrapped with the `persist` middleware.
    - **`partialize`**: This configuration option tells the `persist` middleware to *only* save the `theme` property to localStorage. The user session data is intentionally not persisted for security; it is always re-fetched on application load.
- **State Properties:**
    - `user`: The full user object returned from the backend.
    - `navigationItems`: The user-specific list of navigation links.
    - `isAuthenticated`: A boolean flag derived from the presence of a user object.
    - `isAdmin`: A boolean flag derived from the user''s role.
    - `theme`: The user''s selected UI theme (''light'' or ''dark'').
- **Actions (Functions):**
    - **`login(username, password)`**: Makes the `POST /api/v1/auth/login` call. On success, it calls `fetchUserSession` to populate the store.
    - **`logout()`**: Makes the `POST /api/v1/auth/logout` call to clear the backend cookie, then clears all local state and removes the item from `localStorage`.
    - **`fetchUserSession()`**: Makes the `GET /api/v1/auth/me` call. This is the primary function for populating the session state. It stores the user object and navigation items, and sets the `isAuthenticated` and `isAdmin` flags.
    - **`setTheme(newTheme)`**: Makes the `PUT /api/v1/public/profile/theme` call to persist the user''s theme preference to the database, then updates the local state.'),

('frontend/App.jsx', 'This file is a duplicate of `src/App.jsx` and its documentation is identical. See `src/App.jsx`.'),

('frontend/main.jsx', 'This file is a duplicate of `src/main.jsx` and its documentation is identical. See `src/main.jsx`.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V86__Add_layout_preferences.sql
========================================================================

-- Flyway migration V86: Add detailed layout preferences to users table

-- We will reuse the existing dashboard_layout JSON column and expand its purpose.
-- No schema change is needed if the column already exists and is of a JSON or TEXT type.
-- This migration serves as a marker for the application logic change.
-- The default value will be handled by the application logic if the column is NULL.

ALTER TABLE `users` MODIFY `dashboard_layout` JSON NULL;
========================================================================
FILE: src\main\resources\db\migration\V87__Add_warning_flag_to_files.sql
========================================================================

-- Flyway migration V88: Add a flag to files to indicate if a download warning is needed

ALTER TABLE `files`
ADD COLUMN `needs_warning` BOOLEAN NOT NULL DEFAULT FALSE AFTER `required_role`;
========================================================================
FILE: src\main\resources\db\migration\V88__Add_updated_at_to_tasks.sql
========================================================================

-- Flyway migration V88: Add an auto-updating timestamp to event_tasks

ALTER TABLE `event_tasks`
ADD COLUMN `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP AFTER `created_at`;
========================================================================
FILE: src\main\resources\db\migration\V89__Add_Storage_Item_To_Checklist_Templates.sql
========================================================================

ALTER TABLE preflight_checklist_items
ADD COLUMN storage_item_id INT NULL DEFAULT NULL AFTER item_text,
ADD CONSTRAINT fk_checklist_item_storage_item
    FOREIGN KEY (storage_item_id) REFERENCES storage_items(id)
    ON DELETE SET NULL;

ALTER TABLE preflight_checklist_items
MODIFY COLUMN item_text VARCHAR(255) NULL;
========================================================================
FILE: src\main\resources\db\migration\V8__Populate_wiki_data_part3.sql
========================================================================

-- Flyway migration V8, Part 3

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/dao/RoleDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO provides read-only access to the user roles defined in the `roles` table. It features a simple caching mechanism using Caffeine to avoid repeatedly querying the database for the list of roles, which changes very infrequently.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It is used by the `AdminUserServlet` to populate the roles dropdown in the user editing modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   **Caffeine (`com.github.benmanes.caffeine.cache.LoadingCache`)**: A high-performance caching library used to cache the list of roles in memory.\n\n4.  **In-Depth Breakdown**\n\n    *   **`RoleDAO(DatabaseManager dbManager)` (Constructor)**: Initializes the Caffeine `LoadingCache`. The cache is configured to expire after one hour and to hold only one entry (the list of all roles). The `build` method provides the loader function (`fetchAllRolesFromDb`) that is called automatically on a cache miss.\n    *   **`getAllRoles()`**: The main public method. It retrieves the list of all roles from the cache using `roleCache.get(ALL_ROLES_KEY)`. If the cache is empty or expired, the loader function is automatically triggered.\n    *   **`fetchAllRolesFromDb()`**: A private method that performs the actual database query to get all roles. This method is only called when the cache needs to be populated.'),
('src/main/java/de/dao/StatisticsDAO.java', '1.  **File Overview & Purpose**\n\n    This is a specialized, read-only DAO for retrieving simple statistical counts from the database. It is used to quickly fetch aggregate numbers for display on the admin dashboard without the overhead of more complex reporting queries.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `AdminDashboardServlet` to gather high-level metrics about the system''s state.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getUserCount()`**: Executes a `SELECT COUNT(*)` query on the `users` table to get the total number of registered users.\n    *   **`getActiveEventCount()`**: Executes a `SELECT COUNT(*)` query on the `events` table to count events that have not yet finished.\n    *   **`getCount(String sql)`**: A private helper method that takes a SQL `COUNT` query as a string, executes it, and returns the integer result, reducing code duplication.'),
('src/main/java/de/dao/StorageDAO.java', '1.  **File Overview & Purpose**\n\n    This is the primary DAO for managing the inventory, handling all database operations for the `storage_items` table. It provides comprehensive CRUD functionality, methods for handling defective and repaired items, and transactional logic for checking items in and out.\n\n2.  **Architectural Role**\n\n    This class is a cornerstone of the **DAO (Data Access) Tier**. It is used extensively by the `StorageService` to perform transactional operations and by various servlets (`StorageServlet`, `AdminStorageServlet`, `AdminDefectServlet`) to display and manage inventory data.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `StorageItem` (Model): The data model for an inventory item.\n\n4.  **In-Depth Breakdown**\n\n    *   **Listing Methods (`getAllItemsGroupedByLocation`, `getAllItems`, `getDefectiveItems`, `getLowStockItems`)**: Provide different views of the inventory data, tailored for specific pages like the public lager view or admin dashboard widgets.\n    *   **CRUD Operations (`createItem`, `getItemById`, `updateItem`, `deleteItem`)**: Standard methods for managing the lifecycle of `StorageItem` records. The `updateItem` method is particularly comprehensive, updating nearly every column.\n    *   **Transactional Methods (`performCheckout`, `performCheckin`)**: These methods are designed to be called within a transaction managed by the `StorageService`. They update an item''s `quantity`, `status`, and `current_holder_user_id` atomically. The `performCheckout` query includes a `WHERE` clause to prevent checking out more items than are available.\n    *   **Defect & Repair Management (`updateDefectiveStatus`, `permanentlyReduceQuantities`, `repairItems`)**:\n        *   `updateDefectiveStatus`: Increases the `defective_quantity` for an item.\n        *   `permanentlyReduceQuantities`: Decreases both `quantity` and `defective_quantity`, effectively removing an unrepairable item from the total stock.\n        *   `repairItems`: Decreases the `defective_quantity`, moving an item back into the available pool.\n    *   **`mapResultSetToStorageItem(ResultSet rs)`**: A private helper method to construct a `StorageItem` object from a database query result.'),
('src/main/java/de/dao/StorageLogDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO is responsible for all interactions with the `storage_log` table. Its purpose is to create transaction records when inventory items are checked in or out, and to retrieve the history of these transactions for a specific item.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `StorageService` to log transactions and by the `StorageItemDetailsServlet` to display an item''s history.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `StorageLogEntry` (Model): The data model for a log entry.\n\n4.  **In-Depth Breakdown**\n\n    *   **`logTransaction(...)`**: Inserts a new transaction record into the `storage_log` table. This method takes a `Connection` object as a parameter because it is designed to be called from within a larger transaction managed by the `StorageService`.\n    *   **`getHistoryForItem(int itemId)`**: Retrieves the complete transaction history for a single item, ordered from newest to oldest. It joins with the `users` table to include the username of the person who performed each transaction.'),
('src/main/java/de/dao/TodoDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all database operations for the administrative To-Do list feature. It handles CRUD for both categories (`todo_categories`) and tasks (`todo_tasks`), and includes methods for batch-updating their display order to support drag-and-drop functionality.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used exclusively by the `TodoService` to persist and retrieve all To-Do list data.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `TodoCategory`, `TodoTask` (Models).\n\n4.  **In-Depth Breakdown**\n\n    *   **`getAllCategoriesWithTasks()`**: The main retrieval method. It fetches all categories and, using a `LEFT JOIN`, also fetches all their associated tasks in a single query. It then uses a `LinkedHashMap` to aggregate the flat result set into a structured list of `TodoCategory` objects, each containing its list of `TodoTask` objects.\n    *   **`createCategory(...)` / `createTask(...)`**: These methods use a subquery (`SELECT COALESCE(MAX(display_order), -1) + 1 FROM ...`) to automatically assign the new item the next available display order index, ensuring it appears at the bottom of the list.\n    *   **`updateCategoryOrder(...)` / `updateTaskOrders(...)`**: These methods are crucial for the drag-and-drop feature. They accept a list of IDs in their new order and perform a batch `UPDATE` to efficiently persist the new sorting to the database within a single transaction.'),
('src/main/java/de/dao/UserDAO.java', '1.  **File Overview & Purpose**\n\n    This is the central DAO for managing user accounts. It handles all database operations for the `users` table, including credential validation, CRUD operations, password changes, and managing the user-permission relationship in the `user_permissions` table.\n\n2.  **Architectural Role**\n\n    This is a critical class in the **DAO (Data Access) Tier**. It is used by the `LoginServlet` for authentication, by the `UserService` for transactional updates, and by numerous other servlets and DAOs to retrieve user information.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   **Spring Security Crypto (`BCryptPasswordEncoder`)**: The library used for securely hashing and verifying passwords.\n    *   `PermissionDAO`: Used to fetch the permissions for a user.\n\n4.  **In-Depth Breakdown**\n\n    *   **`validateUser(String username, String password)`**: The core authentication method. It fetches the user''s `password_hash` from the database and uses `passwordEncoder.matches()` to securely compare it with the provided password. If validation is successful, it fetches the user''s permissions and returns a fully populated `User` object.\n    *   **`getPermissionsForUser(int userId)`**: Retrieves all permission keys for a given user.\n    *   **`updateUserPermissions(int userId, String[] permissionIds, Connection conn)`**: A transactional method that first deletes all of a user''s existing permissions and then batch-inserts the new set.\n    *   **`createUser(...)` / `updateUser(...)`**: Standard CRUD methods. `createUser` hashes the provided password before storing it.\n    *   **`changePassword(...)`**: Securely updates a user''s password by hashing the new password before saving it.'),
('src/main/java/de/dao/UserQualificationsDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages the `user_qualifications` table, which links users to the courses they have attended or completed. It is the persistence layer for tracking user skills and qualifications.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It is used by the `MatrixServlet` and `AdminAttendanceServlet` to update qualifications based on meeting attendance, and by the `ProfileServlet` to display a user''s qualifications.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `UserQualification` (Model).\n\n4.  **In-Depth Breakdown**\n\n    *   **`getQualificationsForUser(int userId)`**: Retrieves all qualifications for a single user.\n    *   **`getAllQualifications()`**: Fetches all qualification records for all users, primarily for building the data structures needed by the Qualification Matrix.\n    *   **`updateQualificationStatus(...)`**: The core update method. It uses an `INSERT ... ON DUPLICATE KEY UPDATE` statement (an \"upsert\") to create or update a qualification record. It also contains special logic: if the new status is `\"NICHT BESUCHT\"`, it deletes the record entirely instead of updating it.'),
('src/main/java/de/dao/WikiDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO is responsible for all database interactions with the `wiki_documentation` table. It provides full CRUD (Create, Read, Update, Delete) operations for managing the content of the technical documentation wiki pages.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `WikiService` to load the documentation into its cache at startup, and by the various `Wiki` action classes to display and save changes to the wiki content.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `WikiEntry` (Model): The data model object that this DAO creates and populates.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getWikiEntryById(int id)`**: Retrieves a single wiki page by its primary key.\n    *   **`getAllWikiEntries()`**: Fetches all wiki pages from the database, ordered by their file path. This is used by the `WikiService` to populate its initial cache.\n    *   **`updateWikiContent(int id, String content)`**: Updates the `content` field for a specific wiki entry.\n    *   **`createWikiEntry(WikiEntry entry)`**: Inserts a new documentation record into the database and returns the created object with its new ID.\n    *   **`deleteWikiEntry(int id)`**: Deletes a wiki documentation record from the database by its primary key.'),
('src/main/java/de/service/AchievementService.java', '1.  **File Overview & Purpose**\n\n    This service class contains the business logic for checking and granting achievements to users based on specific trigger events. It decouples the achievement logic from the DAOs and the servlets where the triggering actions occur.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Service Tier**. It is called by other components (like `AdminEventServlet` after an event is marked as ''ABGESCHLOSSEN'') to evaluate a user''s progress and potentially award new achievements. It coordinates between the `AchievementDAO` and other DAOs (`EventDAO`) to gather the necessary data for its checks.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `AchievementDAO` and `EventDAO`.\n    *   `AchievementDAO`: Used to check if a user already has an achievement and to grant new ones.\n    *   `EventDAO`: Used to fetch data about a user''s event history (participation count, leadership count).\n\n4.  **In-Depth Breakdown**\n\n    *   **`checkAndGrantAchievements(User user, String triggerType)`**\n        *   **Method Signature:** `public void checkAndGrantAchievements(User user, String triggerType)`\n        *   **Purpose:** The main entry point for the service. It acts as a router, calling specific check methods based on the `triggerType`.\n        *   **Parameters:**\n            *   `user` (User): The user whose achievements should be checked.\n            *   `triggerType` (String): A string identifying the event that triggered the check (e.g., \"EVENT_COMPLETED\").\n        *   **Side Effects:** Can lead to database writes via the `achievementDAO.grantAchievementToUser` method.\n\n    *   **`checkEventParticipationAchievements(User user)`**\n        *   **Method Signature:** `private void checkEventParticipationAchievements(User user)`\n        *   **Purpose:** Checks if the user has met the criteria for event participation achievements (e.g., 1, 5, or 10 completed events).\n        *   **Logic:** It fetches the number of completed events for the user from the `EventDAO` and then calls `achievementDAO.grantAchievementToUser` for each milestone the user has reached.\n        *   **Side Effects:** Database writes.\n\n    *   **`checkEventLeaderAchievements(User user)`**\n        *   **Method Signature:** `private void checkEventLeaderAchievements(User user)`\n        *   **Purpose:** Checks if the user has met the criteria for event leadership achievements.\n        *   **Logic:** It calculates the number of completed events where the user was the leader and grants the corresponding achievement if the criteria are met.\n        *   **Side Effects:** Database writes.'),
('src/main/java/de/service/AdminDashboardService.java', '1.  **File Overview & Purpose**\n\n    This service class is responsible for aggregating all the data required for the administrative dashboard. It acts as a facade, coordinating calls to various DAOs to collect information for the different dashboard widgets (Upcoming Events, Low Stock, Recent Logs, Event Trend) and assembling it into a single `DashboardDataDTO`.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Service Tier**. It encapsulates the business logic for what data should be displayed on the admin dashboard. It is called by the `AdminDashboardApiServlet` to provide the data needed for the dynamic, client-side rendering of the dashboard.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO`, `StorageDAO`, `AdminLogDAO`, and `ReportDAO`.\n    *   `EventDAO`: Used to fetch upcoming events.\n    *   `StorageDAO`: Used to fetch items with low stock levels.\n    *   `AdminLogDAO`: Used to fetch the most recent log entries.\n    *   `ReportDAO`: Used to fetch the time-series data for the event trend chart.\n    *   `DashboardDataDTO` (Model): The Data Transfer Object this service populates and returns.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getDashboardData()`**\n        *   **Method Signature:** `public DashboardDataDTO getDashboardData()`\n        *   **Purpose:** The single public method of this service. It orchestrates the data retrieval for the entire admin dashboard.\n        *   **Parameters:** None.\n        *   **Returns:** A fully populated `DashboardDataDTO` object containing all the data required by the dashboard''s widgets.\n        *   **Side Effects:** Performs multiple read operations on the database via the injected DAOs. It uses a `WIDGET_LIMIT` constant to control the number of items fetched for list-based widgets.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V90__Add_Quantity_To_Checklist_Items.sql
========================================================================

ALTER TABLE preflight_checklist_items
ADD COLUMN quantity INT NULL DEFAULT NULL AFTER storage_item_id;
========================================================================
FILE: src\main\resources\db\migration\V91__Add_Meeting_Waitlist.sql
========================================================================

-- V27__Add_Meeting_Waitlist.sql
-- Add parent_meeting_id to meetings to reference original meeting when creating repeats
ALTER TABLE meetings
  ADD COLUMN parent_meeting_id INT NULL AFTER course_id,
  ADD CONSTRAINT fk_meetings_parent FOREIGN KEY (parent_meeting_id) REFERENCES meetings (id) ON DELETE SET NULL;

-- Create meeting_waitlist table to store waitlist entries (separate from attendance)
CREATE TABLE meeting_waitlist (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  meeting_id INT NOT NULL,
  user_id INT NOT NULL,
  requested_by INT NULL, -- user who made the request (usually same as user_id, but left for auditing)
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  promoted_by INT NULL,
  promoted_at TIMESTAMP NULL,
  CONSTRAINT fk_waitlist_meeting FOREIGN KEY (meeting_id) REFERENCES meetings (id) ON DELETE CASCADE,
  CONSTRAINT fk_waitlist_user FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
  CONSTRAINT uniq_waitlist_user_meeting UNIQUE (meeting_id, user_id),
  INDEX idx_waitlist_meeting_created (meeting_id, created_at)
);

========================================================================
FILE: src\main\resources\db\migration\V92__Create_User_Notifications_Table.sql
========================================================================

CREATE TABLE user_notifications (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    level VARCHAR(20) NOT NULL, -- Informational, Important, Warning
    url VARCHAR(255),
    is_seen BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user_notifications_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE INDEX idx_user_notifications_user_id_is_seen ON user_notifications(user_id, is_seen);
========================================================================
FILE: src\main\resources\db\migration\V93__Alter_Users_Class_Name_Length.sql
========================================================================

ALTER TABLE users MODIFY COLUMN class_name VARCHAR(255);
========================================================================
FILE: src\main\resources\db\migration\V94__Add_User_Suspension.sql
========================================================================

-- Adds suspension-related columns to the `users` table.
-- Using a status column is efficient for querying suspended users.
-- Using a nullable TIMESTAMP for `suspended_until` allows for both temporary and indefinite suspensions.
ALTER TABLE users
ADD COLUMN status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE' AFTER role_id,
ADD COLUMN suspended_until TIMESTAMP NULL DEFAULT NULL AFTER status,
ADD COLUMN suspended_reason TEXT NULL DEFAULT NULL AFTER suspended_until;

-- Add an index for potentially querying expired suspensions.
CREATE INDEX idx_users_suspended_until ON users(suspended_until);
========================================================================
FILE: src\main\resources\db\migration\V95__Add_Fcm_Token_To_Users.sql
========================================================================

ALTER TABLE users
ADD COLUMN fcm_token VARCHAR(255) NULL DEFAULT NULL AFTER theme;

CREATE INDEX idx_users_fcm_token ON users(fcm_token);
========================================================================
FILE: src\main\resources\db\migration\V96__Add_System_Settings.sql
========================================================================

CREATE TABLE system_settings (
    setting_key VARCHAR(50) PRIMARY KEY NOT NULL,
    setting_value TEXT,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

INSERT INTO system_settings (setting_key, setting_value) VALUES ('maintenance_mode', 'false');
========================================================================
FILE: src\main\resources\db\migration\V97__Add_Log_Revocation.sql
========================================================================

-- Flyway migration V97: Add columns to support revoking admin log actions
-- MODIFIED: Removed ADD COLUMN statements for columns 'status', 'context', 'revoked_by_admin_id', and 'revoked_at' as they are already present in V1.

-- Add constraint to track who revoked an action and when
ALTER TABLE `admin_logs`
ADD CONSTRAINT `fk_admin_log_revoked_by` FOREIGN KEY (`revoked_by_admin_id`) REFERENCES `users`(`id`) ON DELETE SET NULL;

-- Add a new permission for revoking actions
INSERT INTO `permissions` (`permission_key`, `description`)
VALUES ('LOG_REVOKE', 'Kann protokollierte Admin-Aktionen rückgängig machen.');

-- Grant to default admin
INSERT INTO user_permissions (user_id, permission_id)
SELECT 1, LAST_INSERT_ID()
WHERE EXISTS (SELECT 1 FROM users WHERE id = 1);
========================================================================
FILE: src\main\resources\db\migration\V98__Add_Revocable_Flag_To_Suspensions.sql
========================================================================

-- Flyway migration V98: Add context to existing USER_SUSPEND logs to make them revocable

UPDATE admin_logs
SET context = JSON_OBJECT(
    'revocable', TRUE,
    'userId', CAST(SUBSTRING_INDEX(SUBSTRING_INDEX(details, '(ID: ', -1), ')', 1) AS UNSIGNED)
)
WHERE action_type = 'USER_SUSPEND' AND status = 'ACTIVE' AND context IS NULL;
========================================================================
FILE: src\main\resources\db\migration\V99__Add_User_Soft_Delete.sql
========================================================================

-- Flyway migration V100: Add soft delete columns to the users table

ALTER TABLE `users`
ADD COLUMN `is_deleted` BOOLEAN NOT NULL DEFAULT FALSE AFTER `suspended_reason`,
ADD COLUMN `deleted_at` TIMESTAMP NULL DEFAULT NULL AFTER `is_deleted`;

-- Add an index for efficient querying of active users
CREATE INDEX `idx_users_active_username` ON `users` (`is_deleted`, `username`);
========================================================================
FILE: src\main\resources\db\migration\V9__Populate_wiki_data_part4.sql
========================================================================

-- Flyway migration V9, Part 4

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/service/AdminLogService.java', '1.  **File Overview & Purpose**\n\n    This service provides a centralized and safe way to create audit log entries. It acts as an abstraction layer over the `AdminLogDAO`, adding input sanitization and structured logging to ensure that all administrative actions are reliably recorded in both the database and the application logs.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting concern that belongs to the **Service Tier**. It is injected into and used by numerous other services and servlets throughout the administrative side of the application whenever a state-changing action is performed.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `AdminLogDAO`.\n    *   `AdminLogDAO`: The DAO used to persist the log entries.\n    *   `Log4j`: Used to write the audit message to the main application log file in addition to the database.\n\n4.  **In-Depth Breakdown**\n\n    *   **`log(String adminUsername, String actionType, String details)`**\n        *   **Method Signature:** `public void log(String adminUsername, String actionType, String details)`\n        *   **Purpose:** Creates and persists a new audit log entry.\n        *   **Parameters:**\n            *   `adminUsername` (String): The username of the admin performing the action.\n            *   `actionType` (String): A short, standardized key for the action (e.g., \"CREATE_USER\").\n            *   `details` (String): A human-readable description of the action.\n        *   **Returns:** void.\n        *   **Side Effects:**\n            1.  **Sanitization:** It first sanitizes all input strings to remove newlines, preventing log injection or formatting issues.\n            2.  **Application Logging:** It logs the audit event to the application''s main log file at the `INFO` level with a clear `[AUDIT]` prefix.\n            3.  **Database Logging:** It creates an `AdminLog` model object and passes it to the `AdminLogDAO` to be written to the database.\n            4.  **Error Handling:** It wraps the entire process in a `try-catch` block to ensure that a failure in the logging mechanism (e.g., a database connection issue) does not crash the primary operation that was being logged. A critical error is logged if this happens.'),
('src/main/java/de/service/AuthorizationService.java', '1.  **File Overview & Purpose**\n\n    This service provides a centralized mechanism for performing permission checks. It encapsulates the logic for determining whether a given user has the authority to perform a specific action, based on the set of permissions associated with their user object.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting concern that belongs to the **Service Tier**. It is used by servlets and action classes in the **Web/Controller Tier** to enforce fine-grained access control before executing sensitive operations.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `User` (Model): The object containing the user''s set of permissions.\n\n4.  **In-Depth Breakdown**\n\n    *   **`checkPermission(User user, String permissionKey)`**\n        *   **Method Signature:** `public boolean checkPermission(User user, String permissionKey)`\n        *   **Purpose:** Determines if a user has a specific permission.\n        *   **Parameters:**\n            *   `user` (User): The user object to check.\n            *   `permissionKey` (String): The string key of the permission to verify (e.g., \"USER_CREATE\").\n        *   **Returns:** `true` if the user has the permission, `false` otherwise.\n        *   **Logic:**\n            1.  It first performs null checks on the user and their permissions set.\n            2.  It implements a \"superuser\" check: if the user has the `ACCESS_ADMIN_PANEL` permission, the method immediately returns `true`, granting access to any action.\n            3.  Otherwise, it checks if the user''s `permissions` set contains the requested `permissionKey`.'),
('src/main/java/de/service/ConfigurationService.java', '1.  **File Overview & Purpose**\n\n    This service is responsible for loading and providing access to the application''s configuration settings from the `config.properties` file. As a Guice Singleton, it ensures that the properties file is read only once at application startup, and the settings are then available globally.\n\n2.  **Architectural Role**\n\n    This is a core **Infrastructure/Configuration** component that supports all other tiers. It is injected into any class that needs access to configuration parameters, such as the `DatabaseManager` (for DB credentials) and file handling servlets (for the upload directory path).\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.util.Properties`: The standard Java class used to load and store the key-value pairs from the `.properties` file.\n\n4.  **In-Depth Breakdown**\n\n    *   **`ConfigurationService()` (Constructor)**\n        *   **Purpose:** Loads the `config.properties` file from the classpath when the application starts.\n        *   **Side Effects:** Reads the properties file and populates the internal `Properties` object. If the file cannot be found or read, it logs a fatal error and throws a `RuntimeException`, preventing the application from starting in a misconfigured state.\n\n    *   **`getProperty(String key)`**\n        *   **Method Signature:** `public String getProperty(String key)`\n        *   **Purpose:** Retrieves the value for a given configuration key.\n        *   **Parameters:**\n            *   `key` (String): The name of the property to retrieve.\n        *   **Returns:** The property value as a `String`, or `null` if the key is not found.\n\n    *   **`getProperty(String key, String defaultValue)`**\n        *   **Method Signature:** `public String getProperty(String key, String defaultValue)`\n        *   **Purpose:** Retrieves the value for a given configuration key, returning a default value if the key is not found.\n        *   **Parameters:**\n            *   `key` (String): The name of the property to retrieve.\n            *   `defaultValue` (String): The value to return if the key is not present in the properties file.\n        *   **Returns:** The property value or the default value.'),
('src/main/java/de/service/EventService.java', '1.  **File Overview & Purpose**\n\n    This service class orchestrates the complex business logic for creating and updating events. It manages the transactional saving of an event and all its related data (skill requirements, material reservations, custom fields, attachments) in a single, atomic operation.\n\n2.  **Architectural Role**\n\n    This class is a key component of the **Service Tier**. It is called by the `AdminEventServlet` to handle form submissions for creating or editing events. It coordinates multiple DAOs (`EventDAO`, `AttachmentDAO`, `EventCustomFieldDAO`) within a single database transaction to ensure data integrity.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the various DAOs, `DatabaseManager`, `ConfigurationService`, and `AdminLogService`.\n    *   `EventDAO`: For managing the core event record and its direct relationships.\n    *   `AttachmentDAO`: For saving new file attachment records.\n    *   `EventCustomFieldDAO`: For saving custom field definitions.\n    *   `DatabaseManager`: Used to get a connection and manage the transaction (`setAutoCommit`, `commit`, `rollback`).\n\n4.  **In-Depth Breakdown**\n\n    *   **`createOrUpdateEvent(Event event, boolean isUpdate, User adminUser, HttpServletRequest request)`**\n        *   **Method Signature:** `public int createOrUpdateEvent(...)`\n        *   **Purpose:** The main method of the service. It handles the entire process of saving an event and its associated data within a single database transaction.\n        *   **Parameters:**\n            *   `event` (Event): The core event object to save.\n            *   `isUpdate` (boolean): A flag to determine if this is a new event (`INSERT`) or an existing one (`UPDATE`).\n            *   `adminUser` (User): The administrator performing the action, for logging purposes.\n            *   `request` (HttpServletRequest): The request object, used to retrieve arrays of related data like skill requirements, item reservations, and uploaded files.\n        *   **Returns:** The ID of the created or updated event, or `0` on failure.\n        *   **Side Effects:**\n            1.  **Transaction Management:** It gets a connection from the `DatabaseManager` and sets `autoCommit` to `false`.\n            2.  **Core Event Save:** It calls either `eventDAO.createEvent` or `eventDAO.updateEvent`.\n            3.  **Associated Data Save:** It calls the respective DAOs to save skill requirements, reservations, and custom fields, all using the same `Connection` object.\n            4.  **File Upload:** It handles any uploaded file (`Part`) by saving it to disk and creating a corresponding record in the `attachments` table.\n            5.  **Commit/Rollback:** If all operations succeed, it calls `conn.commit()`. If any exception occurs, it calls `conn.rollback()` to undo all changes, ensuring the database remains in a consistent state.\n\n    *   **`signOffUserFromRunningEvent(...)`**: Contains the logic to sign a user off and send a notification to the event leader.'),
('src/main/java/de/service/NotificationService.java', '1.  **File Overview & Purpose**\n\n    This service implements a server-side push notification system using Server-Sent Events (SSE). It manages persistent HTTP connections with clients, allowing the server to push real-time updates to the frontend. It is implemented as a thread-safe Singleton to provide a single, global point for broadcasting messages.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting **Infrastructure/Service Tier** component. It is called by various other services and servlets (e.g., `EventService`, `AdminUserServlet`, `EventChatSocket`) whenever a state change occurs that needs to be reflected in real-time on other users'' browsers. The `NotificationServlet` is the client-facing entry point that registers clients with this service.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.AsyncContext`)**: Used to manage the long-lived asynchronous connections required for SSE.\n    *   **Gson**: Used to serialize notification payloads into JSON strings before sending them to the client.\n\n4.  **In-Depth Breakdown**\n\n    *   **Singleton Implementation**: The service uses a private constructor and a static `INSTANCE` field with a `getInstance()` method to ensure only one instance exists for the entire application.\n    *   **`contextsByUser` (Map<Integer, List<AsyncContext>>)**: A thread-safe `ConcurrentHashMap` that is the core of the service. It maps a `userId` to a list of all active SSE connections for that user (a user can have multiple browser tabs open).\n    *   **`register(HttpServletRequest request)`**: Called by the `NotificationServlet` when a client connects. It starts an `AsyncContext`, sets its timeout to infinite, and adds it to the `contextsByUser` map.\n    *   **`broadcastGenericMessage(String message)`**: Sends a simple text message to *all* connected clients.\n    *   **`broadcastUIUpdate(String type, Object payload)`**: Sends a structured update message to *all* connected clients, indicating a specific type of UI change (e.g., \"user_updated\") and providing the relevant data.\n    *   **`sendNotificationToUser(int userId, Map<String, Object> payload)`**: Sends a targeted notification to all active sessions for a *single* user. This is used for user-specific alerts like mentions or invitations.\n    *   **`sendEventInvitation(...)`**: A specialized convenience method that constructs and sends an event invitation notification.\n    *   **`sendMessageToContext(...)`**: A private helper method that handles the actual writing of the SSE-formatted data (`data: ...\\n\\n`) to a client''s response stream. It includes robust error handling to detect and remove disconnected clients, preventing memory leaks.'),
('src/main/java/de/service/PasskeyService.java', '1.  **File Overview & Purpose**\n\n    This service class encapsulates the server-side business logic for WebAuthn/Passkey authentication. It handles the start and finish of both the registration and authentication ceremonies. **Note: The current implementation is a placeholder/simulation** and does not perform the actual cryptographic operations required for a secure WebAuthn flow. It demonstrates the API structure and interaction with the DAO layer.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Service Tier**. It is called by the Passkey API servlets (`RegistrationStartServlet`, `AuthenticationFinishServlet`, etc.) to process passkey-related requests. It coordinates between the client-side WebAuthn API and the `PasskeyDAO` for credential storage.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `PasskeyDAO` and `UserDAO`.\n    *   `PasskeyDAO`: Used to store and retrieve passkey credential data.\n    *   `UserDAO`: Used to retrieve user information during the ceremonies.\n\n4.  **In-Depth Breakdown**\n\n    *   **`startRegistration(User user)`**\n        *   **Purpose:** Generates the initial challenge and options required by the browser to start the passkey creation process.\n        *   **Logic (Simulated):** Generates a random challenge string and constructs a JSON object containing the Relying Party (RP) information, user details, and public key parameters. In a real implementation, this would use a library like `webauthn-server-core` to generate a cryptographically secure challenge and store it in the session.\n        *   **Returns:** A JSON string with the `PublicKeyCredentialCreationOptions`.\n\n    *   **`finishRegistration(int userId, String credentialData, String deviceName)`**\n        *   **Purpose:** Receives the response from the browser''s `navigator.credentials.create()` call and saves the new credential.\n        *   **Logic (Simulated):** It does not validate the `credentialData`. Instead, it creates a new `PasskeyCredential` object with simulated data (random user handle, credential ID, and a placeholder public key) and saves it via the `PasskeyDAO`.\n        *   **Returns:** `true` on successful save.\n\n    *   **`startAuthentication(String username)`**\n        *   **Purpose:** Generates the challenge and options for the browser to start the passkey authentication process.\n        *   **Logic (Simulated):** Generates a random challenge. In a real implementation, it would also fetch the `credentialId`s for the given username from the DAO to include in the `allowCredentials` list.\n        *   **Returns:** A JSON string with the `PublicKeyCredentialRequestOptions`.\n\n    *   **`finishAuthentication(String credentialData)`**\n        *   **Purpose:** Receives the response from the browser''s `navigator.credentials.get()` call, verifies it, and logs the user in.\n        *   **Logic (Simulated):** This is the most significant simulation. It **does not perform any cryptographic verification**. It simply fetches a hardcoded user (admin user with ID 1) from the `UserDAO` and returns it, effectively logging them in. In a real implementation, this method would be the most complex, involving fetching the stored public key, verifying the signature against the challenge, and updating the signature counter.'),
('src/main/java/de/service/StorageService.java', '1.  **File Overview & Purpose**\n\n    This service class contains the business logic for all inventory-related state changes. It provides transactional methods for processing check-ins/check-outs and for managing the status of defective items, ensuring that all related database updates and logging occur as a single, atomic operation.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Service Tier**. It is called by the `StorageTransactionServlet` and `AdminStorageServlet` to execute inventory operations. It coordinates multiple DAOs (`StorageDAO`, `StorageLogDAO`, `EventDAO`) and the `AdminLogService` within a database transaction.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the DAOs, `DatabaseManager`, and `AdminLogService`.\n    *   `DatabaseManager`: Used to manage database connections and transactions.\n    *   `StorageDAO`: For updating the `storage_items` table.\n    *   `StorageLogDAO`: For creating entries in the `storage_log` table.\n    *   `AdminLogService`: For creating entries in the `admin_logs` table.\n\n4.  **In-Depth Breakdown**\n\n    *   **`processTransaction(int itemId, int quantity, String type, User user, Integer eventId, String notes)`**\n        *   **Method Signature:** `public boolean processTransaction(...)`\n        *   **Purpose:** Handles the check-out and check-in of inventory items within a database transaction.\n        *   **Logic:**\n            1.  Opens a database connection and disables auto-commit.\n            2.  Retrieves the `StorageItem` to perform validation checks (e.g., sufficient stock for checkout).\n            3.  Calls the appropriate method on `StorageDAO` (`performCheckout` or `performCheckin`).\n            4.  If the DAO operation is successful, it calls `StorageLogDAO.logTransaction` to record the event.\n            5.  It then calls `AdminLogService.log` to create an audit trail.\n            6.  If all steps succeed, it calls `conn.commit()`.\n            7.  If any step fails, it calls `conn.rollback()` and logs the error, ensuring the database remains in a consistent state.\n        *   **Returns:** `true` if the entire transaction was successful, `false` otherwise.\n\n    *   **`updateDefectiveItemStatus(int itemId, String status, int quantity, String reason, User adminUser)`**\n        *   **Method Signature:** `public boolean updateDefectiveItemStatus(...)`\n        *   **Purpose:** Manages the process of marking items as defective or unrepairable within a transaction.\n        *   **Logic:** Similar to `processTransaction`, it wraps the database operations in a transaction.\n            *   If `status` is `\"UNREPAIRABLE\"`, it calls `storageDAO.permanentlyReduceQuantities`, which decreases both the total and defective counts.\n            *   If `status` is `\"DEFECT\"`, it calls `storageDAO.updateDefectiveStatus`, which increases the defective count.\n            *   It logs the action to the `admin_logs` table.\n        *   **Returns:** `true` on success, `false` on failure.'),
('src/main/java/de/service/SystemInfoService.java', '1.  **File Overview & Purpose**\n\n    This service is responsible for gathering and formatting live system statistics from the host operating system. It uses Java''s Management Extensions (JMX) and, for Linux-specific data like uptime and battery, reads directly from the `/proc` and `/sys` filesystems to provide a snapshot of the server''s health.\n\n2.  **Architectural Role**\n\n    This is a specialized **Service Tier** component. It is called by the `SystemStatsApiServlet` to provide real-time data for the admin system status page. It is designed to be platform-aware, providing graceful fallbacks for metrics that are not available on non-Linux systems.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **JMX (`com.sun.management.OperatingSystemMXBean`)**: The core Java API for accessing operating system-level metrics like CPU load and memory usage.\n    *   `java.nio.file.Files`: Used to read system files for Linux-specific stats.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getSystemStats()`**\n        *   **Method Signature:** `public SystemStatsDTO getSystemStats()`\n        *   **Purpose:** The main public method that collects all system metrics.\n        *   **Logic:**\n            1.  Gets an instance of `OperatingSystemMXBean`.\n            2.  Retrieves CPU load (`getSystemCpuLoad`), total and free physical memory.\n            3.  Retrieves total and usable disk space for the root partition (`/`).\n            4.  Calls the private helper methods `getSystemUptime()` and `getBatteryPercentage()`.\n            5.  Populates and returns a `SystemStatsDTO` with the collected data, converting byte values to Gigabytes where appropriate.\n        *   **Returns:** A `SystemStatsDTO` object.\n\n    *   **`getSystemUptime()`**: A private helper that reads the uptime in seconds from `/proc/uptime` on Linux and formats it into a human-readable \"days, hours, minutes\" string. It returns \"Nicht verfügbar\" on non-Linux systems or if the file cannot be read.\n\n    *   **`getBatteryPercentage()`**: A private helper that reads the battery capacity from `/sys/class/power_supply/BAT0/capacity` on Linux. It returns `-1` if the file doesn''t exist (e.g., on a desktop or non-Linux system), which signals the UI to hide the battery widget.'),
('src/main/java/de/service/TodoService.java', '1.  **File Overview & Purpose**\n\n    This service class encapsulates the business logic for the administrative To-Do list feature. It provides transactional methods for creating, updating, reordering, and deleting To-Do categories and tasks, ensuring that both the database operations and the corresponding audit logs are handled correctly.\n\n2.  **Architectural Role**\n\n    This class is part of the **Service Tier**. It is used exclusively by the `AdminTodoApiServlet` to perform all state-changing operations on the To-Do list. It coordinates the `TodoDAO` and `AdminLogService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`, `TodoDAO`, and `AdminLogService`.\n    *   `DatabaseManager`: Used for managing database transactions.\n    *   `TodoDAO`: The DAO for all To-Do list database operations.\n    *   `AdminLogService`: Used to create an audit trail for every action performed.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getAllTodos()`**: A simple pass-through method to retrieve all categories and their tasks from the DAO.\n    *   **`createCategory(String name, User admin)`**: Creates a new To-Do category and logs the action.\n    *   **`createTask(int categoryId, String content, User admin)`**: Creates a new task within a category and logs the action.\n    *   **`updateTask(int taskId, String content, Boolean isCompleted, User admin)`**: A transactional method to update a task''s content and/or completion status. It logs the specific action performed.\n    *   **`deleteTask(int taskId, User admin)`**: Deletes a task and logs the action.\n    *   **`deleteCategory(int categoryId, User admin)`**: Deletes a category (which cascades to its tasks) and logs the action.\n    *   **`reorder(Map<String, List<Integer>> reorderData, User admin)`**\n        *   **Method Signature:** `public boolean reorder(Map<String, List<Integer>> reorderData, User admin)`\n        *   **Purpose:** A transactional method to handle complex reordering operations from the drag-and-drop UI.\n        *   **Logic:** It opens a transaction and calls the DAO''s batch update methods to persist the new order of categories and the new order/category assignment of tasks. It commits the transaction if successful and logs a single \"reorder\" event.\n        *   **Returns:** `true` on success, `false` on failure.'),
('src/main/java/de/service/UserService.java', '1.  **File Overview & Purpose**\n\n    This service class contains the business logic for user management operations that require database transactions. It orchestrates the creation and updating of users and their associated permissions as a single, atomic operation to ensure data integrity.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Service Tier**. It is used by the `Action` classes (`CreateUserAction`, `UpdateUserAction`) which are invoked by the `FrontControllerServlet`. It provides a higher-level abstraction over the `UserDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`, `UserDAO`, and `AdminLogService`.\n    *   `DatabaseManager`: Used to obtain a connection and manage transactions.\n    *   `UserDAO`: The DAO for performing the actual user and permission database operations.\n    *   `AdminLogService`: Used to create an audit log entry for the actions.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createUserWithPermissions(User user, String password, String[] permissionIds, String adminUsername)`**\n        *   **Method Signature:** `public int createUserWithPermissions(...)`\n        *   **Purpose:** Creates a new user and assigns their initial permissions within a single database transaction.\n        *   **Logic:**\n            1.  Begins a transaction by disabling auto-commit.\n            2.  Calls `userDAO.createUser()` to insert the new user record.\n            3.  If the user is created successfully (returns a new ID), it calls `userDAO.updateUserPermissions()` to set their permissions.\n            4.  If both operations succeed, it commits the transaction.\n            5.  It then logs the successful creation event to the admin log.\n            6.  If any step fails, it rolls back the transaction.\n        *   **Returns:** The ID of the newly created user, or `0` on failure.\n\n    *   **`updateUserWithPermissions(User user, String[] permissionIds)`**\n        *   **Method Signature:** `public boolean updateUserWithPermissions(...)`\n        *   **Purpose:** Updates a user''s profile information and their set of permissions within a single database transaction.\n        *   **Logic:**\n            1.  Begins a transaction.\n            2.  Calls `userDAO.updateUser()` to save changes to the user''s profile.\n            3.  Calls `userDAO.updateUserPermissions()` to overwrite the user''s existing permissions with the new set.\n            4.  Commits the transaction if both operations succeed, otherwise rolls back.\n        *   **Returns:** `true` if the transaction was successful, `false` otherwise.'),
('src/main/java/de/filter/AdminFilter.java', '1.  **File Overview & Purpose**\n\n    This servlet filter acts as a security gate for all administrative sections of the application. It intercepts every request to URLs matching `/admin/*` and `/api/admin/*` to ensure that only authenticated users with appropriate administrative permissions can access them.\n\n2.  **Architectural Role**\n\n    This class is a core component of the **Web/Controller Tier**. It enforces access control at the entry point of the application, before any admin servlet or API endpoint is executed. It relies on the `User` object stored in the session, which is populated by the `AuthenticationFilter`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.Filter`)**: The core interface for implementing a web filter.\n    *   `User` (Model): The object representing the logged-in user, retrieved from the `HttpSession`.\n\n4.  **In-Depth Breakdown**\n\n    *   **`init(FilterConfig filterConfig)`**: Called once by the servlet container on startup. It logs a confirmation message that the filter has been initialized.\n\n    *   **`doFilter(ServletRequest req, ServletResponse res, FilterChain chain)`**\n        *   **Method Signature:** `public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException`\n        *   **Purpose:** This is the main logic of the filter, executed for every matching request.\n        *   **Parameters:**\n            *   `req` (ServletRequest): The incoming request.\n            *   `res` (ServletResponse): The outgoing response.\n            *   `chain` (FilterChain): An object that allows the filter to pass the request along to the next entity in the chain (another filter or the target servlet).\n        *   **Logic:**\n            1.  It first checks if a user session exists and if a `User` object is present. If not, it redirects the user to the `/login` page.\n            2.  If a user is logged in, it calls the `user.hasAdminAccess()` method. This method centrally determines if the user has any permission that qualifies them for admin access.\n            3.  If `hasAdminAccess()` returns `true`, it calls `chain.doFilter()`, allowing the request to proceed to the requested admin page or API.\n            4.  If `hasAdminAccess()` returns `false`, it logs a warning, sets a user-facing error message in the session, and sends an HTTP 403 (Forbidden) error back to the client.\n\n    *   **`destroy()`**: Called when the application is shut down. Logs a confirmation message.'),
('src/main/java/de/filter/AuthenticationFilter.java', '1.  **File Overview & Purpose**\n\n    This is the primary authentication filter for the entire application. It intercepts every single request (`/*`) to determine if the user is authenticated. It protects all resources except for a defined set of public paths and resource prefixes.\n\n2.  **Architectural Role**\n\n    This class is a fundamental component of the **Web/Controller Tier**. It acts as the first line of defense, ensuring that unauthenticated users cannot access any protected part of the application.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.Filter`)**: The interface it implements.\n    *   `User` (Model): The object it looks for in the `HttpSession` to verify authentication.\n\n4.  **In-Depth Breakdown**\n\n    *   **Static Fields:**\n        *   `PUBLIC_PATHS`: A `Set` containing specific URL paths that do not require authentication (e.g., `/login`, `/logout`).\n        *   `PUBLIC_RESOURCE_PREFIXES`: A `Set` containing URL prefixes for static resources (like CSS, JS, images) and the passkey authentication API (`/api/auth`) that must be publicly accessible.\n    *   **`doFilter(ServletRequest req, ServletResponse res, FilterChain chain)`**:\n        *   **Purpose:** The core filter logic.\n        *   **Logic:**\n            1.  It retrieves the current `HttpSession` (without creating one if it doesn''t exist).\n            2.  It extracts the request path and sanitizes it by removing any `jsessionid` path parameters.\n            3.  It checks if a `User` object exists in the session to determine the `isLoggedIn` status.\n            4.  It checks if the requested path is in the `PUBLIC_PATHS` set or starts with any of the `PUBLIC_RESOURCE_PREFIXES`.\n            5.  If the user is logged in OR the resource is public, it calls `chain.doFilter()` to allow the request to proceed.\n            6.  If the user is not logged in AND the resource is not public, it logs a warning and redirects the user to the `/login` page.');
COMMIT;