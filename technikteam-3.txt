
========================================================================
FILE: src\main\resources\db\migration\V13__Populate_wiki_data_part8.sql
========================================================================

-- Flyway migration V13, Part 8

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/model/Role.java', '1.  **File Overview & Purpose**\n\n    This is a simple POJO representing a user role from the `roles` table. It defines a high-level grouping of users (e.g., \"ADMIN\", \"NUTZER\").\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used by the `RoleDAO` to represent role data and is passed to the `AdminUserServlet` to populate the roles dropdown list.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the role.\n        *   `roleName`: The unique name of the role (e.g., \"ADMIN\").\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/SkillRequirement.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a single skill requirement for an event, corresponding to a record in the `event_skill_requirements` table. It links an event to a specific course (acting as the \"skill\") and specifies how many people with that qualification are needed.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer data about an event''s personnel needs between the `EventDAO`, `EventService`, and the `AdminEventServlet`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `requiredCourseId`: The foreign key ID of the `Course` that represents the required skill.\n        *   `requiredPersons`: The number of people with this skill needed for the event.\n        *   `courseName`: A transient field, populated by a JOIN, to display the name of the required course in the UI.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/StorageItem.java', '1.  **File Overview & Purpose**\n\n    This is a comprehensive model representing a single inventory item from the `storage_items` table. It contains all the core data about an item, such as its name, location, and quantities, as well as transient fields and convenience methods for UI display logic.\n\n2.  **Architectural Role**\n\n    This class is a central part of the **Model Tier**. It''s used across all tiers: managed by the `StorageDAO`, manipulated by the `StorageService`, and displayed in various views like `lager.jsp` and `admin_storage_list.jsp`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None.\n\n4.  **In-Depth Breakdown**\n\n    *   **Core Fields:**\n        *   Maps directly to the columns in the `storage_items` table: `id`, `name`, `location`, `cabinet`, `compartment`, `quantity` (total including defective), `maxQuantity`, `defectiveQuantity`, `defectReason`, `weightKg`, `priceEur`, `imagePath`, `status`, `currentHolderUserId`, `assignedEventId`.\n    *   **Transient UI Fields:**\n        *   `currentHolderUsername`: The name of the user who has checked out the item, populated by a JOIN.\n    *   **Convenience Methods:**\n        *   **`getAvailableQuantity()`**: Calculates the non-defective, available quantity (`quantity` - `defectiveQuantity`). This is a crucial piece of business logic encapsulated within the model.\n        *   **`getAvailabilityStatus()`**: Returns a human-readable status string (\"Vollständig\", \"Niedriger Bestand\", \"Vergriffen\") based on the available quantity relative to the maximum quantity.\n        *   **`getAvailabilityStatusCssClass()`**: Returns a corresponding CSS class (`status-ok`, `status-warn`, `status-danger`) for the availability status, simplifying JSP logic.'),
('src/main/java/de/model/StorageLogEntry.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a single transaction log entry from the `storage_log` table. It serves as a historical record of an item being checked in or out of the inventory.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is created by the `StorageService` to be persisted by the `StorageLogDAO`, and is retrieved by the DAO to be displayed on the `storage_item_details.jsp` page.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `DateFormatter`: Used for the `getFormattedTimestamp()` method.\n    *   `java.time.LocalDateTime` and `DateTimeFormatter`: For handling and formatting the transaction timestamp.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`, `itemId`, `userId`, `notes`, `eventId`, `transactionTimestamp`: These map directly to table columns.\n        *   `quantityChange`: An integer representing the change in quantity. It is negative for check-outs and positive for check-ins.\n        *   `username`: A transient field, populated by a JOIN, for displaying the name of the user who performed the transaction.\n    *   **Convenience Methods (`getFormattedTimestamp`, `getTransactionTimestampLocaleString`)**: Provide different formatted string representations of the `transactionTimestamp` for use in the UI.'),
('src/main/java/de/model/SystemStatsDTO.java', '1.  **File Overview & Purpose**\n\n    This is a Data Transfer Object (DTO) designed to hold a snapshot of the server''s system-level statistics. It aggregates various metrics like CPU, RAM, and disk usage into a single, clean object for easy serialization and transport to the client.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is created by the `SystemInfoService` and serialized to JSON by the `SystemStatsApiServlet` to provide real-time data for the admin system status page.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `cpuLoad` (double): The system-wide CPU load as a percentage (0.0 - 100.0).\n        *   `totalMemory` (long): Total physical RAM in Gigabytes.\n        *   `usedMemory` (long): Used physical RAM in Gigabytes.\n        *   `totalDiskSpace` (long): Total disk space of the root partition in Gigabytes.\n        *   `usedDiskSpace` (long): Used disk space of the root partition in Gigabytes.\n        *   `uptime` (String): A human-readable string representing the server uptime (e.g., \"5 Tage, 10 Stunden, 3 Minuten\").\n        *   `batteryPercentage` (int): The current battery level as a percentage (0-100), or -1 if not available.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/TodoCategory.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a category in the To-Do list feature, corresponding to a record in the `todo_categories` table. It acts as a container for a list of related `TodoTask` objects.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used by the `TodoDAO` and `TodoService` to structure the To-Do list data for the `AdminTodoApiServlet`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `TodoTask`: The model class for the tasks contained within this category.\n    *   `java.util.List`: Used for the `tasks` collection.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the category.\n        *   `name`: The name of the category (e.g., \"Urgent Bugs\", \"Feature Ideas\").\n        *   `displayOrder`: An integer that determines the vertical sorting of categories on the board.\n        *   `tasks` (List<TodoTask>): A list of task objects that belong to this category.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/TodoTask.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a single task item in the To-Do list feature, corresponding to a record in the `todo_tasks` table. It contains the task''s content, its completion status, and its display order within its category.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used as a child object within the `TodoCategory` model and is managed by the `TodoDAO` and `TodoService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the task.\n        *   `categoryId`: A foreign key linking the task to its parent `TodoCategory`.\n        *   `content`: The text of the to-do item.\n        *   `isCompleted`: A boolean flag indicating whether the task is done.\n        *   `displayOrder`: An integer that determines the sorting of tasks within a category.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/User.java', '1.  **File Overview & Purpose**\n\n    This is the central model representing a user in the application, corresponding to a record in the `users` table. It holds all core profile information, as well as the user''s role and the complete, resolved set of their permissions. It includes a key business logic method `hasAdminAccess()` for authorization checks.\n\n2.  **Architectural Role**\n\n    This is a critical class in the **Model Tier**. A `User` object is stored in the `HttpSession` upon successful login and is accessed by nearly every other component in the application—from filters and servlets for authorization to DAOs for identifying the actor in log entries.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `Permissions`: The constants class is used within the `hasAdminAccess()` method.\n    *   `DateFormatter`: Used by the `getFormattedCreatedAt()` convenience method.\n\n4.  **In-Depth Breakdown**\n\n    *   **Core Fields:**\n        *   `id`, `username`, `roleId`, `createdAt`, `classYear`, `className`, `email`, `chatColor`, `theme`: These map to columns in the `users` table.\n    *   **Aggregated/Transient Fields:**\n        *   `roleName`: The name of the user''s role, populated by a JOIN in the `UserDAO`.\n        *   `permissions` (Set<String>): The complete set of permission keys the user has. This is populated at login time by the `UserDAO` by resolving both direct and role-based permissions.\n    *   **`hasAdminAccess()`**\n        *   **Method Signature:** `public boolean hasAdminAccess()`\n        *   **Purpose:** A crucial piece of business logic encapsulated in the model. It provides a single, reliable way to determine if a user should have access to administrative areas.\n        *   **Logic:** It returns `true` if the user has the master `ACCESS_ADMIN_PANEL` permission, or if they have *any* other permission that implies administrative capabilities (e.g., any `_CREATE`, `_DELETE`, `_MANAGE` permission). This is more flexible than just checking for the \"ADMIN\" role name.\n    *   **`getFormattedCreatedAt()`**: A view-helper method to provide a JSP-ready string for the user''s registration date.\n    *   **Constructors and Getters/Setters**: Includes a default constructor, a convenience constructor, and standard property accessors.'),
('src/main/java/de/model/UserQualification.java', '1.  **File Overview & Purpose**\n\n    This POJO represents a user''s qualification, linking a user to a course. It corresponds to a record in the `user_qualifications` table and tracks the user''s status for that course (e.g., \"BESUCHT\", \"ABSOLVIERT\"), the date of completion, and any administrative remarks.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer qualification data between the `UserQualificationsDAO` and the servlets that display this information, such as the `ProfileServlet` and the `MatrixServlet`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDate`: Used for the `completionDate` field.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `userId`: Foreign key to the `users` table.\n        *   `courseId`: Foreign key to the `courses` table.\n        *   `courseName`: A transient field, populated by a JOIN, for displaying the course''s name.\n        *   `status`: An enum-like string indicating the user''s progress in the course.\n        *   `completionDate`: The date on which the user achieved \"ABSOLVIERT\" status.\n        *   `remarks`: Optional administrative notes.\n    *   **Getters and Setters**: Standard methods for property access.'),
('src/main/java/de/model/WikiEntry.java', '1.  **File Overview & Purpose**\n\n    This is a simple Plain Old Java Object (POJO) that serves as the data model for a single wiki documentation page. It represents a record from the `wiki_documentation` table.\n\n2.  **Architectural Role**\n\n    This class is part of the **Model Tier**. It is used to transfer wiki data between the `WikiDAO`, the `WikiService`, and the administrative servlets that manage the wiki.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This is a self-contained POJO.\n\n4.  **In-Depth Breakdown**\n\n    *   **Fields:**\n        *   `id`: The primary key of the wiki entry.\n        *   `filePath`: A unique string representing the path of the documented file within the project (e.g., \"src/main/java/de/service/UserService.java\"). This is the key used for lookups.\n        *   `content`: A `longtext` field containing the Markdown documentation for the file.\n    *   **Getters and Setters**: Standard boilerplate methods for accessing and modifying the object''s properties.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V14__Populate_wiki_data_part9.sql
========================================================================

-- Flyway migration V14, Part 9

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/servlet/admin/action/Action.java', '1.  **File Overview & Purpose**\n\n    This is the interface that defines the contract for the Command pattern used in the `FrontControllerServlet`. Each class that implements this interface represents a single, self-contained, executable administrative action. This pattern promotes a clean separation of concerns, making the `FrontControllerServlet` a simple dispatcher and encapsulating all business logic for an action in its own class.\n\n2.  **Architectural Role**\n\n    This interface is a core part of the **Web/Controller Tier**''s design. It defines the structure for the command objects that are managed by Guice and executed by the Front Controller.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `ApiResponse` (Model): The standardized response object that all actions must return.\n    *   **Jakarta Servlet API**: For the `HttpServletRequest` and `HttpServletResponse` parameters.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Method Signature:** `ApiResponse execute(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException`\n        *   **Purpose:** This is the single method that all action classes must implement. It contains the complete logic for processing a specific request, including parameter validation, authorization checks, calls to service or DAO layers, and constructing the final `ApiResponse`.\n        *   **Parameters:**\n            *   `request`: The HTTP request object, providing access to parameters, the session, etc.\n            *   `response`: The HTTP response object, which can be used to send errors directly if needed.\n        *   **Returns:** An `ApiResponse` object summarizing the outcome of the action.'),
('src/main/java/de/servlet/admin/action/ApproveChangeAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the business logic for approving a user''s profile change request. It retrieves the request, applies the changes to the target user''s profile, updates the request status, and triggers a real-time notification to force the user to log out for security reasons.\n\n2.  **Architectural Role**\n\n    This class is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It coordinates between the `ProfileChangeRequestDAO` and `UserDAO` to perform a multi-step, state-changing operation.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the necessary DAOs and services.\n    *   `ProfileChangeRequestDAO`: To fetch the request and update its status.\n    *   `UserDAO`: To fetch the user to be updated and save the changes.\n    *   `AdminLogService`: To create an audit trail for the approval.\n    *   `NotificationService`: To send a real-time logout notification to the affected user.\n    *   `SessionManager`: To invalidate all of the user''s active sessions.\n    *   **Gson**: To deserialize the `requestedChanges` JSON string into a `Map`.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Performs the approval logic.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_UPDATE` permission.\n            2.  **Data Retrieval:** Fetches the `ProfileChangeRequest` and the target `User` object.\n            3.  **Apply Changes:** It deserializes the JSON string of requested changes into a `Map`. It then iterates through this map and applies the new values to the `userToUpdate` object.\n            4.  **Database Updates:** It calls `userDAO.updateUser()` to save the changes and `requestDAO.updateRequestStatus()` to mark the request as \"APPROVED\".\n            5.  **Logging & Notification:** If the updates are successful, it logs the action, sends a real-time notification to the user, and calls `SessionManager.invalidateSessionsForUser()` to terminate all of the user''s sessions, forcing them to log back in and get a fresh user object.\n            6.  **Response:** Returns an `ApiResponse` indicating success or failure.'),
('src/main/java/de/servlet/admin/action/CreateUserAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for creating a new user. It handles parameter validation, checks the password against the security policy, and calls the `UserService` to perform the transactional creation of the user and their permissions.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It acts as a controller for the user creation process, delegating the core transactional logic to the `UserService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserService` and `RoleDAO`.\n    *   `UserService`: The service that handles the transactional creation of a user and their permissions.\n    *   `RoleDAO`: Used to enrich the response object with the role name after creation.\n    *   `PasswordPolicyValidator`: To ensure the new user''s password meets security standards.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** The main execution method for the create user action.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_CREATE` permission.\n            2.  **Parameter Retrieval:** Gets all user data (username, password, role, etc.) and permission IDs from the request.\n            3.  **Password Validation:** Calls `PasswordPolicyValidator.validate()` on the new password. If it fails, it immediately returns an error `ApiResponse`.\n            4.  **Object Creation:** Creates a new `User` model object and populates it with the form data.\n            5.  **Service Call:** Calls `userService.createUserWithPermissions()`, passing in the new user object, the password, and the permission IDs. This service method handles the database transaction.\n            6.  **Response:** If the service call is successful (returns a new user ID), it enriches the `User` object with its new role name and returns it in a successful `ApiResponse`. Otherwise, it returns an error response.'),
('src/main/java/de/servlet/admin/action/DeleteFeedbackAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for deleting a feedback submission. It handles the database operation and logs the action.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is triggered by an AJAX call from the admin feedback board UI.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FeedbackSubmissionDAO` and `AdminLogService`.\n    *   `FeedbackSubmissionDAO`: The DAO used to perform the deletion.\n    *   `AdminLogService`: To create an audit trail of the deletion.\n    *   `NotificationService`: To broadcast a UI update to other connected admins.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Deletes a feedback submission record.\n        *   **Logic:**\n            1.  **Authorization:** Ensures the user has admin access.\n            2.  **Parameter Parsing:** Retrieves the `submissionId` from the request.\n            3.  **Database Deletion:** Calls `submissionDAO.deleteSubmission()`.\n            4.  **Logging & Notification:** If the deletion is successful, it logs the action and broadcasts a `feedback_deleted` UI update via the `NotificationService` so that the item disappears from the board for all other watching admins.\n            5.  **Response:** Returns an `ApiResponse` indicating success or failure.'),
('src/main/java/de/servlet/admin/action/DeleteUserAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for deleting a user account. It includes several important security checks to prevent administrators from deleting themselves or other higher-privileged administrators.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It handles the user deletion process, which is a critical and destructive action.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserDAO` and `AdminLogService`.\n    *   `UserDAO`: The DAO used to delete the user record.\n    *   `AdminLogService`: To create an audit trail of the deletion.\n    *   `NotificationService`: To broadcast a UI update to other connected admins.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Performs a secure deletion of a user account.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the performing admin has the `USER_DELETE` permission.\n            2.  **Self-Deletion Check:** It verifies that the admin is not trying to delete their own account (`loggedInAdmin.getId() == userIdToDelete`).\n            3.  **Privilege Escalation Check:** It fetches the user to be deleted and checks if they have the master `ACCESS_ADMIN_PANEL` permission. If so, it only allows the deletion if the *performing* admin also has this master permission. This prevents a lower-level admin from deleting a superuser.\n            4.  **Database Deletion:** If all checks pass, it calls `userDAO.deleteUser()`.\n            5.  **Logging & Notification:** If the deletion is successful, it logs the action and broadcasts a `user_deleted` UI update so the user is removed from the user list for all watching admins.\n            6.  **Response:** Returns an `ApiResponse` indicating success or failure.'),
('src/main/java/de/servlet/admin/action/DenyChangeAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for denying a user''s profile change request. It updates the request''s status in the database to \"DENIED\" and creates an audit log entry.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is called via an AJAX request from the admin requests page.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `ProfileChangeRequestDAO` and `AdminLogService`.\n    *   `ProfileChangeRequestDAO`: The DAO used to fetch the request and update its status.\n    *   `AdminLogService`: To create an audit trail of the denial.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Processes the denial of a change request.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_UPDATE` permission.\n            2.  **Data Validation:** It retrieves the request by its ID and ensures it is still in a \"PENDING\" state to prevent race conditions.\n            3.  **Database Update:** It calls `requestDAO.updateRequestStatus()`, passing the new status \"DENIED\" and the admin''s ID.\n            4.  **Logging:** If the update is successful, it logs the denial action.\n            5.  **Response:** Returns an `ApiResponse` indicating success or failure.'),
('src/main/java/de/servlet/admin/action/GetFeedbackDetailsAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class is a simple data retrieval command. Its sole purpose is to fetch the full details of a single feedback submission from the database and return it as the data payload in an `ApiResponse`.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It serves as an API endpoint for the client-side JavaScript (`admin_feedback.js`) to populate the feedback details modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FeedbackSubmissionDAO`.\n    *   `FeedbackSubmissionDAO`: The DAO used to retrieve the feedback entry by its ID.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Fetches and returns the details of one feedback submission.\n        *   **Logic:**\n            1.  It parses the `submissionId` from the request parameters.\n            2.  It calls `submissionDAO.getSubmissionById()`.\n            3.  If a submission is found, it returns an `ApiResponse.success` with the `FeedbackSubmission` object as the data payload.\n            4.  If no submission is found, it returns an `ApiResponse.error`.'),
('src/main/java/de/servlet/admin/action/ResetPasswordAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class handles the administrative function of resetting a user''s password. It generates a new, secure random password, updates the user''s password hash in the database, and returns the new password to the admin so it can be communicated to the user.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is a critical security-related action.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserDAO` and `AdminLogService`.\n    *   `UserDAO`: Used to save the new password hash.\n    *   `AdminLogService`: To create an audit trail of the password reset.\n    *   `java.security.SecureRandom`: Used to generate a cryptographically strong random password.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Resets a user''s password.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_PASSWORD_RESET` permission.\n            2.  It fetches the target `User` object to ensure it exists.\n            3.  It calls the private `generateRandomPassword()` method to create a new, compliant password.\n            4.  It calls `userDAO.changePassword()` to hash and save the new password.\n            5.  If successful, it logs the action and returns an `ApiResponse.success`. The new password is included in the response''s data payload so the client-side script can display it to the admin.\n\n    *   **`generateRandomPassword(int length)`**: A private helper method that generates a secure, random password of a given length, containing a mix of character types.'),
('src/main/java/de/servlet/admin/action/UnlockUserAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class provides the functionality to manually unlock a user account that has been locked due to too many failed login attempts. It interacts with the static `LoginAttemptManager` to clear the lockout status for a given username.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It provides an administrative override for the brute-force protection mechanism.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `AdminLogService`.\n    *   `LoginServlet.LoginAttemptManager`: The static inner class that manages lockout state.\n    *   `AdminLogService`: To create an audit trail of the unlock action.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Unlocks a user account.\n        *   **Logic:**\n            1.  **Authorization:** Ensures the performing user is a full admin (`hasAdminAccess()`).\n            2.  It retrieves the `usernameToUnlock` from the request.\n            3.  It calls the static method `LoginServlet.LoginAttemptManager.clearLoginAttempts(usernameToUnlock)`, which removes all lockout and failed attempt records for that user from the in-memory maps.\n            4.  It logs the action and returns an `ApiResponse.success`.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V15__Populate_wiki_data_part10.sql
========================================================================

-- Flyway migration V15, Part 10

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/servlet/admin/action/UpdateFeedbackOrderAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class handles the complex logic of updating the feedback board after a drag-and-drop operation. It receives the ID of the moved item, its new status (based on the column it was dropped into), and the new order of all items in that destination column. It performs these updates within a single database transaction.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the server-side endpoint for the drag-and-drop functionality on the feedback Kanban board.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FeedbackSubmissionDAO`, `AdminLogService`, and `DatabaseManager`.\n    *   `DatabaseManager`: To manage the database transaction.\n    *   `FeedbackSubmissionDAO`: Provides the transactional methods `updateStatus` and `updateOrderForStatus`.\n    *   `AdminLogService`: For auditing the reorder action.\n    *   **Gson**: For deserializing the JSON payload from the client.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Persists the new state of the Kanban board after a drag-and-drop.\n        *   **Logic:**\n            1.  **Transaction Management:** It opens a database connection and disables auto-commit.\n            2.  **Payload Parsing:** It retrieves the JSON payload containing the `submissionId`, `newStatus`, and the array of `orderedIds` for the destination column.\n            3.  **Database Updates:** It performs two separate updates within the transaction:\n                *   Calls `submissionDAO.updateStatus()` to change the status of the card that was moved.\n                *   Calls `submissionDAO.updateOrderForStatus()` with the list of all IDs in the destination column to perform a batch update of their `display_order`.\n            4.  **Commit/Rollback:** It commits the transaction if both operations succeed, or rolls back if an error occurs.\n            5.  **Logging & Response:** It logs the action and returns an `ApiResponse`.'),
('src/main/java/de/servlet/admin/action/UpdateFeedbackStatusAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class handles updates to a feedback submission made via the details modal (not via drag-and-drop). It allows an admin to change a submission''s status and its optional display title.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the endpoint for the save button in the feedback details modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FeedbackSubmissionDAO` and `AdminLogService`.\n    *   `FeedbackSubmissionDAO`: The DAO used to update the record.\n    *   `AdminLogService`: For auditing the status change.\n    *   `NotificationService`: To broadcast a UI update to other connected admins.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** Updates a feedback submission''s details.\n        *   **Logic:**\n            1.  **Authorization:** Ensures the user is an admin.\n            2.  **Parameter Parsing:** Retrieves `submissionId`, `newStatus`, and `displayTitle` from the request.\n            3.  **Database Update:** Calls `submissionDAO.updateStatusAndTitle()` to persist the changes.\n            4.  **Logging & Notification:** If successful, it logs the action and broadcasts a `feedback_status_updated` UI update to other clients, so they see the change in real-time.\n            5.  **Response:** Returns a standard `ApiResponse`.'),
('src/main/java/de/servlet/admin/action/UpdateUserAction.java', '1.  **File Overview & Purpose**\n\n    This `Action` class encapsulates the logic for updating an existing user''s profile and permissions. It constructs a `User` object with the new data and calls the `UserService` to perform the transactional update.\n\n2.  **Architectural Role**\n\n    This is a command object in the **Web/Controller Tier**, executed by the `FrontControllerServlet`. It is the endpoint for the \"Save\" button in the user edit modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects `UserDAO`, `RoleDAO`, `UserService`, and `AdminLogService`.\n    *   `UserService`: The service that handles the transactional update of a user and their permissions.\n    *   `UserDAO`: To fetch the original user data for logging and comparison.\n    *   `AdminLogService`: To create a detailed audit log of what was changed.\n    *   `NotificationService`: To broadcast the user update to other clients.\n\n4.  **In-Depth Breakdown**\n\n    *   **`execute(...)`**:\n        *   **Purpose:** The main execution method for the update user action.\n        *   **Logic:**\n            1.  **Authorization:** Checks if the admin has `USER_UPDATE` permission.\n            2.  **Fetch Original User:** Retrieves the original `User` object from the database to compare against the new values.\n            3.  **Build Updated User:** Creates a new `User` object and populates it with the data from the form submission.\n            4.  **Change Detection:** It compares each field of the new user object with the original one and builds a detailed `changes` string for the audit log (e.g., \"Benutzername von ''old'' zu ''new'', Rolle-ID von ''1'' zu ''3'', ...\").\n            5.  **Service Call:** Calls `userService.updateUserWithPermissions()` to perform the transactional database update.\n            6.  **Session Update (Self-Edit):** If an admin updates their own profile, it refreshes the `User` object in their session to immediately reflect the changes.\n            7.  **Logging & Notification:** It logs the action with the detailed `changes` string and broadcasts a `user_updated` UI update.\n            8.  **Response:** Returns an `ApiResponse.success` with the refreshed user object as the data payload.'),
('src/main/java/de/servlet/admin/api/AdminTodoApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a complete JSON API for the administrative To-Do list feature. It handles all CRUD and reordering operations for To-Do categories and tasks, allowing the frontend (`admin_todo.js`) to manage the entire feature asynchronously without full page reloads.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (specifically, the API sub-layer). It receives AJAX requests, validates them, calls the `TodoService` to perform the business logic and database operations, and returns a standardized `ApiResponse` in JSON format.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `TodoService`.\n    *   `TodoService`: The service layer component that contains the transactional logic for all To-Do list operations.\n    *   **Gson**: Used for both deserializing incoming JSON payloads (for the `doPut` method) and serializing the `ApiResponse` for the response.\n    *   `CSRFUtil`: For security validation on all state-changing requests (POST, PUT, DELETE).\n\n4.  **In-Depth Breakdown**\n\n    This servlet implements `doGet`, `doPost`, `doPut`, and `doDelete` to correspond to RESTful principles.\n\n    *   **`doGet(...)`**: Fetches and returns the entire list of categories with their nested tasks as a JSON array.\n    *   **`doPost(...)`**: Handles the creation of new items. It uses an `action` parameter to distinguish between creating a category (`\"createCategory\"`) and creating a task (`\"createTask\"`).\n    *   **`doPut(...)`**: Handles updates. It reads a JSON payload from the request body and uses an `action` parameter within that payload to differentiate between updating a task''s content/status (`\"updateTask\"`) and reordering items (`\"reorder\"`).\n    *   **`doDelete(...)`**: Handles deletion. It checks for either a `taskId` or `categoryId` parameter in the URL to determine what to delete.\n    *   **`sendJsonResponse(...)`**: A private helper method to standardize the process of setting the HTTP status code, content type, and writing the JSON response.'),
('src/main/java/de/servlet/admin/api/CrewFinderApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves a specialized JSON API endpoint for the \"Crew Finder\" feature. Given an event ID, it identifies all users who are both qualified (meet all skill requirements) and available (not assigned to a conflicting event) for that specific event.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is called via an AJAX request from the event creation/editing modal in `admin_events_list.js`. It interacts directly with the `EventDAO` to execute the complex query required.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO`.\n    *   `EventDAO`: Contains the `getQualifiedAndAvailableUsersForEvent()` method, which performs the core database query.\n    *   **Gson**: Used to serialize the resulting list of `User` objects into a JSON array.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the GET request to find available crew members.\n        *   **Logic:**\n            1.  **Parameter Validation:** It requires an `eventId` parameter.\n            2.  **Authorization:** It performs a crucial authorization check to ensure the requesting user is either an admin or the leader of the specified event.\n            3.  **Data Fetching:** It calls `eventDAO.getQualifiedAndAvailableUsersForEvent(eventId)`. This single DAO call encapsulates the complex SQL logic involving subqueries and joins to determine user qualification and availability.\n            4.  **JSON Response:** It serializes the list of qualified `User` objects into JSON and writes it to the response.'),
('src/main/java/de/servlet/api/AdminDashboardApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet acts as the JSON API endpoint for the dynamic widgets on the administrative dashboard. It is designed to be called periodically via AJAX from the client-side to refresh the dashboard with the latest data.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is the data source for the `admin_dashboard.js` script. It delegates the task of data aggregation to the `AdminDashboardService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `AdminDashboardService`.\n    *   `AdminDashboardService`: The service that contains the business logic for gathering all the necessary dashboard data.\n    *   **Gson**: Used to serialize the `DashboardDataDTO` into a JSON object.\n    *   `LocalDateTimeAdapter`: A custom Gson adapter required to correctly serialize `LocalDateTime` objects within the DTO.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for dashboard data.\n        *   **Logic:**\n            1.  It calls `dashboardService.getDashboardData()` to get the fully populated `DashboardDataDTO`.\n            2.  It serializes this DTO object into a JSON string.\n            3.  It sets the response content type to `application/json` and writes the JSON string to the response.'),
('src/main/java/de/servlet/api/CalendarApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves as a JSON API endpoint to provide event and meeting data for a full-featured calendar component on the client side. It fetches all upcoming events and meetings from the respective DAOs and formats them into a structure that is compatible with libraries like FullCalendar.js.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as a dedicated data source for the client-side calendar view, responding to AJAX requests from the `calendar.js` script. It directly interacts with the `EventDAO` and `MeetingDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO` and `MeetingDAO`.\n    *   `EventDAO`, `MeetingDAO`: DAOs used to fetch all active and upcoming calendar entries.\n    *   **Gson**: Used to serialize the list of calendar entries into a JSON array.\n    *   `LocalDateTimeAdapter`: A custom Gson adapter to ensure `LocalDateTime` objects are serialized into the correct ISO 8601 format that FullCalendar can parse.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests to fetch calendar data.\n        *   **Logic:**\n            1.  It calls `eventDAO.getAllActiveAndUpcomingEvents()` and `meetingDAO.getAllUpcomingMeetings()` to get the raw data.\n            2.  It iterates through both lists, creating a `Map<String, String>` for each entry.\n            3.  Each map is populated with keys that FullCalendar expects: `title`, `start`, `end`, and `url`.\n            4.  It also adds custom properties like `backgroundColor` and `borderColor` to visually distinguish between events and meetings in the calendar.\n            5.  Finally, it serializes the combined list of maps into a JSON string and writes it to the response.\n        *   **Side Effects:** Performs database reads.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V16__Populate_wiki_data_part11.sql
========================================================================

-- Flyway migration V16, Part 11

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/servlet/api/EventChatApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a JSON API endpoint for fetching the chat history of a specific event. It is called by the client-side `eventDetails.js` script when a user opens an event details page to populate the chat box with previous messages.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It acts as the data source for the initial state of the event chat. It interacts directly with the `EventChatDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventChatDAO`.\n    *   `EventChatDAO`: The DAO used to retrieve the list of messages for an event.\n    *   **Gson**: Used to serialize the list of `EventChatMessage` objects into a JSON array.\n    *   `LocalDateTimeAdapter`: A custom adapter required for correct JSON serialization of `LocalDateTime` objects.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for an event''s chat history.\n        *   **Logic:**\n            1.  **Parameter Validation:** It expects an `eventId` parameter and returns a 400 Bad Request error if it is missing or invalid.\n            2.  **Data Fetching:** It calls `chatDAO.getMessagesForEvent(eventId)` to get the complete, ordered chat history.\n            3.  **JSON Response:** It serializes the returned list into a JSON string and writes it to the response.'),
('src/main/java/de/servlet/api/EventCustomFieldsApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a public JSON API endpoint to fetch the custom sign-up fields for a specific event. It is called by the client-side `events.js` script when a user clicks the \"Anmelden\" (Sign Up) button to dynamically build the sign-up modal form.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is a public-facing API, meaning it can be accessed without full admin rights, but the user must still be authenticated (as enforced by the `AuthenticationFilter`).\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventCustomFieldDAO`.\n    *   `EventCustomFieldDAO`: The DAO used to retrieve the custom field definitions for an event.\n    *   **Gson**: Used to serialize the list of `EventCustomField` objects into a JSON array.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for an event''s custom sign-up fields.\n        *   **Logic:**\n            1.  **Parameter Validation:** It requires an `eventId` parameter.\n            2.  **Data Fetching:** It calls `customFieldDAO.getCustomFieldsForEvent(eventId)` to get the list of field definitions.\n            3.  **JSON Response:** It serializes the returned list into a JSON string and writes it to the response.'),
('src/main/java/de/servlet/api/MarkdownApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is a dedicated endpoint for saving content from the real-time Markdown editor. It receives the updated content and file ID, validates the user''s permission, and persists the changes to the physical file on the server.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It handles state-changing POST requests from the `admin_editor.js` script. It interacts with the `FileDAO` to write to the file system and update the database record.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FileDAO` and `AdminLogService`.\n    *   `FileDAO`: Used to get the file''s path, update its physical content, and \"touch\" its database record to update the timestamp.\n    *   `AdminLogService`: To create an audit trail of the file modification.\n    *   `CSRFUtil`: For security validation.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request to save Markdown content.\n        *   **Logic:**\n            1.  **Security:** It performs authentication, authorization (`FILE_UPDATE` permission), and CSRF token validation.\n            2.  **Parameter Validation:** It retrieves the `fileId` and `content` from the request.\n            3.  **Data Retrieval:** It fetches the `File` object from the database using the `fileId` to get its physical `filepath`.\n            4.  **Persistence:**\n                *   It calls `fileDAO.updateFileContent()` to overwrite the file on disk with the new content.\n                *   It calls `fileDAO.touchFileRecord()` to update the `uploaded_at` timestamp in the database, indicating a modification.\n            5.  **Logging & Feedback:** It logs the update action to the admin log and sets a success message in the session.\n            6.  **Redirect:** It redirects the user back to the editor page for the same file.'),
('src/main/java/de/servlet/api/StorageHistoryApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a JSON API endpoint for fetching the transaction history of a specific storage item. It is used by the `storage_item_details.jsp` page to dynamically load and display the log of check-ins and check-outs for an item.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It responds to AJAX requests from the client-side. It interacts directly with the `StorageLogDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `StorageLogDAO`.\n    *   `StorageLogDAO`: The DAO used to retrieve the transaction history for an item.\n    *   **Gson**: Used to serialize the list of `StorageLogEntry` objects into a JSON array.\n    *   `LocalDateTimeAdapter`: A custom adapter required for correct JSON serialization of `LocalDateTime` objects.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for an item''s history.\n        *   **Logic:**\n            1.  **Parameter Validation:** It expects an `itemId` parameter and returns a 400 Bad Request error if it''s missing or invalid.\n            2.  **Data Fetching:** It calls `logDAO.getHistoryForItem(itemId)` to get the complete transaction log for the specified item.\n            3.  **JSON Response:** It serializes the returned list into a JSON string and writes it to the response.'),
('src/main/java/de/servlet/api/SystemStatsApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet provides a JSON API endpoint that exposes live system statistics of the server. It is designed to be polled by the administrative system status page to create a real-time monitoring dashboard.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is the data source for the `admin_system.js` script. It delegates the task of collecting system metrics to the `SystemInfoService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `SystemInfoService`.\n    *   `SystemInfoService`: The service that contains the logic for gathering OS-level statistics.\n    *   **Gson**: Used to serialize the `SystemStatsDTO` into a JSON object.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for system statistics.\n        *   **Logic:**\n            1.  It calls `systemInfoService.getSystemStats()` to get a fresh snapshot of the server''s CPU, RAM, disk, and other metrics.\n            2.  It serializes the resulting `SystemStatsDTO` object into a JSON string.\n            3.  It sets the response content type to `application/json` and writes the JSON string to the response.'),
('src/main/java/de/servlet/api/UserPreferencesApiServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is a dedicated API endpoint for saving user-specific preferences. Currently, its only function is to handle the user''s choice of theme (light/dark) and persist it to the database.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It handles asynchronous POST requests from the `main.js` script, which are triggered when the user clicks the theme toggle switch. It interacts directly with the `UserDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserDAO`.\n    *   `UserDAO`: Used to update the theme preference in the `users` table.\n    *   `CSRFUtil`: For security validation.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request to update the user''s theme.\n        *   **Logic:**\n            1.  **Security & Authentication:** It ensures a user is logged in and validates the CSRF token.\n            2.  **Parameter Validation:** It retrieves the `theme` parameter and validates it against a `Set` of allowed values (`\"light\"`, `\"dark\"`) to prevent arbitrary data being saved.\n            3.  **Database Update:** It calls `userDAO.updateUserTheme()` to persist the new theme preference.\n            4.  **Session Update:** If the database update is successful, it also updates the `theme` property of the `User` object in the current session. This ensures that subsequent page loads will render with the correct theme without needing a new database query.\n            5.  **Response:** It returns an HTTP 200 OK status on success or an appropriate error code on failure.'),
('src/main/java/de/servlet/api/passkey/AuthenticationFinishServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is the server-side endpoint for completing a WebAuthn/Passkey authentication ceremony. It receives the credential assertion from the browser, validates it, and if successful, establishes a new user session.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It works in tandem with `AuthenticationStartServlet` and the `passkey_auth.js` script to handle passwordless logins. It delegates the complex validation logic to the `PasskeyService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `PasskeyService`.\n    *   `PasskeyService`: The service that performs the (simulated) cryptographic verification of the passkey assertion.\n    *   **Gson**: Used to serialize the `ApiResponse`.\n    *   `CSRFUtil`, `NavigationRegistry`: For setting up the user session upon successful login.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request containing the WebAuthn credential from the client.\n        *   **Logic:**\n            1.  It reads the JSON payload from the request body.\n            2.  It calls `passkeyService.finishAuthentication()` with the payload.\n            3.  **Success Path:** If the service returns a `User` object, the authentication was successful.\n                *   It establishes a new, clean session for the user.\n                *   It stores the `User` object, a new CSRF token, and the user''s navigation items in the session.\n                *   It returns an `ApiResponse.success` with the user object as the data payload.\n            4.  **Failure Path:** If the service returns `null`, the authentication failed. It returns an `ApiResponse.error` with an HTTP 401 Unauthorized status.'),
('src/main/java/de/servlet/api/passkey/AuthenticationStartServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is the server-side endpoint for initiating a WebAuthn/Passkey authentication ceremony. It generates a cryptographic challenge and the necessary options for the browser''s `navigator.credentials.get()` API call.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is the first step in the passkey login flow, called via AJAX from `passkey_auth.js` when the user clicks the \"Login with Passkey\" button. It delegates the logic to the `PasskeyService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `PasskeyService`.\n    *   `PasskeyService`: The service responsible for generating the challenge and options.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request to start the authentication process.\n        *   **Logic:**\n            1.  It retrieves the `username` from the request.\n            2.  It calls `passkeyService.startAuthentication(username)`. The service generates a challenge (and in a real implementation, would store it in the session) and constructs the `PublicKeyCredentialRequestOptions` JSON.\n            3.  It sets the response content type to `application/json` and writes the JSON options string back to the client.'),
('src/main/java/de/servlet/api/passkey/RegistrationFinishServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is the server-side endpoint for completing a WebAuthn/Passkey registration ceremony. It receives the new public key credential from the browser, validates it, and saves it to the database, associating it with the logged-in user.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is called via AJAX from `passkey_auth.js` after the user has successfully created a new passkey on their device. It delegates the validation and persistence logic to the `PasskeyService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `PasskeyService`.\n    *   `PasskeyService`: The service that performs the (simulated) validation and saves the new credential via the `PasskeyDAO`.\n    *   **Gson**: Used to serialize the `ApiResponse`.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the POST request containing the new credential data.\n        *   **Logic:**\n            1.  **Authentication:** It ensures that a user is currently logged into a session before allowing them to register a new device.\n            2.  It retrieves the user-provided `deviceName` from the URL parameters and the credential data (JSON) from the request body.\n            3.  It calls `passkeyService.finishRegistration()` with the user''s ID, the credential data, and the device name.\n            4.  Based on the boolean result from the service, it returns either an `ApiResponse.success` or an `ApiResponse.error` to the client.'),
('src/main/java/de/servlet/api/passkey/RegistrationStartServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is the server-side endpoint for initiating a WebAuthn/Passkey registration ceremony. For an already authenticated user, it generates a cryptographic challenge and the necessary options for the browser''s `navigator.credentials.create()` API call.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier** (API sub-layer). It is the first step in the \"add a new device\" flow, called via AJAX from `passkey_auth.js` when a user clicks the \"Register New Device\" button on their profile page. It delegates the logic to the `PasskeyService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `PasskeyService`.\n    *   `PasskeyService`: The service responsible for generating the challenge and options for registration.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles the GET request to start the registration process.\n        *   **Logic:**\n            1.  **Authentication:** It retrieves the `User` object from the session to ensure only a logged-in user can register a new device.\n            2.  It calls `passkeyService.startRegistration(user)`. The service generates a challenge (which, in a real implementation, would be stored in the session for later verification) and constructs the `PublicKeyCredentialCreationOptions` JSON.\n            3.  It sets the response content type to `application/json` and writes the JSON options string back to the client.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V17__Populate_wiki_data_part12.sql
========================================================================

-- Flyway migration V17, Part 12

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/servlet/http/SessionManager.java', '1.  **File Overview & Purpose**\n\n    This is a utility class that provides a centralized, static registry of all active `HttpSession` objects in the application. Its primary function is to allow services to find and invalidate all sessions belonging to a specific user, which is a crucial security feature after sensitive operations like a profile change approval.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting **Infrastructure/Utility** class that operates within the **Web/Controller Tier**. It is populated by the `SessionListener` and used by `Action` classes like `ApproveChangeAction`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.http.HttpSession`)**: The object type it manages.\n    *   `java.util.concurrent.ConcurrentHashMap`: Used to provide a thread-safe map for storing sessions.\n\n4.  **In-Depth Breakdown**\n\n    *   **`SESSIONS` (static Map)**: A `ConcurrentHashMap` where the key is the session ID and the value is the `HttpSession` object. This map is the central registry.\n    *   **`addSession(HttpSession session)`**: A static method called by `SessionListener` when a new session is created. It adds the session to the map.\n    *   **`removeSession(HttpSession session)`**: A static method called by `SessionListener` when a session is destroyed. It removes the session from the map.\n    *   **`invalidateSessionsForUser(int userId)`**:\n        *   **Method Signature:** `public static void invalidateSessionsForUser(int userId)`\n        *   **Purpose:** The main functional method of the class. It finds all active sessions belonging to a specific user and invalidates them.\n        *   **Logic:** It iterates through the values of the `SESSIONS` map. For each session, it safely retrieves the `User` object, checks if the user''s ID matches the target `userId`, and if so, calls `session.invalidate()`. It includes error handling for already invalidated sessions.'),
('src/main/java/de/servlet/CalendarServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is responsible for rendering the main calendar page (`/kalender`). It fetches all upcoming events and meetings and prepares several data structures to support different views: a full-grid monthly/weekly calendar for desktop and a simple chronological list for mobile devices.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It gathers data from the `EventDAO` and `MeetingDAO`, performs date-based calculations and groupings, and forwards the prepared data to the `calendar.jsp` view for rendering.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO` and `MeetingDAO`.\n    *   `EventDAO`, `MeetingDAO`: DAOs used to fetch calendar entries.\n    *   `java.time` API: Extensively used for date calculations, such as determining the current month, previous/next months, and the days of the week.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the calendar page.\n        *   **Logic:**\n            1.  **Date Calculation:** Determines the current month and year to display, allowing for navigation via URL parameters (`?year=...&month=...`).\n            2.  **Data Fetching:** Calls the DAOs to get lists of all upcoming `Event` and `Meeting` objects.\n            3.  **Data Aggregation:** Creates a unified list of all calendar entries and then groups them into a `Map<LocalDate, List<Map<String, Object>>>`, which is used by the JSP to place entries on the correct days in the monthly view grid.\n            4.  **Monthly View Data:** Calculates the `startDayOfWeekOffset` (how many empty cells to show before the 1st of the month) and the total `daysInMonth`.\n            5.  **Weekly View Data:** Calculates the start date of the current week and creates a list of maps, with each map representing a day of the week.\n            6.  **Mobile View Data:** Calls the `prepareMobileList` helper method to create a single, sorted chronological list for the mobile view.\n            7.  **Forwarding:** Sets all calculated data as request attributes and forwards the request to `calendar.jsp`.\n\n    *   **`prepareMobileList(...)`**: A private helper method that transforms the `Event` and `Meeting` objects into a unified list of maps, each containing display-ready information like the formatted day, month abbreviation, and a unique URL. It then sorts this list chronologically.'),
('src/main/java/de/servlet/DownloadServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet handles secure file downloads for both general files (from `files` table) and specific attachments (from `attachments` table). It validates that the user is authenticated and authorized to access the requested file, protects against path traversal attacks, and serves the physical file with the correct headers.\n\n2.  **Architectural Role**\n\n    This class is a critical component of the **Web/Controller Tier**. It acts as a secure gateway between a user''s download request and the physical files stored on the server''s filesystem. It interacts with multiple DAOs to perform authorization checks.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FileDAO`, `EventDAO`, `MeetingDAO`, `AttachmentDAO`, and `ConfigurationService`.\n    *   DAOs: Used to fetch file metadata and perform authorization checks (e.g., is the user associated with the event the attachment belongs to?).\n    *   `ConfigurationService`: Provides the base path to the file upload directory.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**:\n        *   **Purpose:** Handles a GET request for a file download.\n        *   **Logic:**\n            1.  **Authentication:** Ensures a user is logged in.\n            2.  **Parameter Validation:** Checks for a valid `id` parameter.\n            3.  **Data Retrieval:** It first tries to find the ID in the `attachments` table. If not found, it checks the `files` table. This allows a single download endpoint for both types of files.\n            4.  **Authorization:** It calls `isUserAuthorizedForAttachment` or checks the `required_role` on the `File` object to determine if the user has permission to download the file. Admins are always authorized.\n            5.  **File Serving:** If all checks pass, it calls the `serveFile` helper method.\n            6.  **Error Handling:** Sends appropriate HTTP error codes (400, 401, 403, 404) for various failure scenarios.\n\n    *   **`isUserAuthorizedForAttachment(...)`**: A private helper that encapsulates the logic for checking if a non-admin user can access an attachment. The user must be associated with the parent event or meeting.\n\n    *   **`serveFile(...)`**:\n        *   **Purpose:** The core file-serving logic.\n        *   **Logic:**\n            1.  **Path Traversal Protection:** It constructs the full, canonical path to the requested file and ensures that this path is still within the configured upload directory. This is a critical security measure to prevent users from requesting files outside the intended folder (e.g., `?file=../../../../some/system/file`).\n            2.  **File Existence Check:** Verifies that the requested file exists and is a regular file.\n            3.  **Set Headers:** It sets the `Content-Type` to `application/octet-stream` to force a download prompt, sets the `Content-Length`, and sets the `Content-Disposition` header with a properly URL-encoded filename.\n            4.  **Streaming:** It opens a `FileInputStream` to the physical file and streams its bytes to the `HttpServletResponse`''s `OutputStream`.'),
('src/main/java/de/servlet/EventActionServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet handles user actions related to events, such as signing up or signing off. It processes POST requests from the public events page (`events.jsp`) and updates the user''s attendance status in the database.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as a controller for user-initiated event actions. It interacts with the `EventDAO` and `EventCustomFieldDAO` for data persistence and the `EventService` for more complex business logic.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO`, `EventCustomFieldDAO`, and `EventService`.\n    *   `EventDAO`: Used for simple sign-up and sign-off operations.\n    *   `EventCustomFieldDAO`: Used to save user responses to any custom fields on the sign-up form.\n    *   `EventService`: Used for the special case of signing off from a running event, which involves sending a notification.\n    *   `CSRFUtil`: Used to validate the CSRF token on every POST request.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**:\n        *   **Purpose:** The main method that handles all POST requests.\n        *   **Logic:**\n            1.  **Security:** Validates the CSRF token.\n            2.  **Parameter Validation:** Ensures a user is logged in and that `action` and `eventId` parameters are present.\n            3.  **Action Routing:** It uses a `switch` statement on the `action` parameter to delegate to the appropriate handler method.\n            *   `\"signup\"`: Calls `eventDAO.signUpForEvent` and then iterates through any custom field parameters from the request, saving each response via `customFieldDAO.saveResponse`.\n            *   `\"signoff\"`: Calls `eventDAO.signOffFromEvent` for a simple sign-off.\n            *   `\"signOffWithReason\"`: This special case is for events that are already running. It retrieves the reason from the request and calls `eventService.signOffUserFromRunningEvent`, which handles both the database update and sending a notification to the event leader.\n            4.  **Feedback & Redirect:** Sets a success or error message in the session and redirects the user back to the main events page.'),
('src/main/java/de/servlet/EventDetailsServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is responsible for preparing and displaying the detailed view of a single event. It fetches the core event data and aggregates all related information, such as assigned team members, tasks, attachments, and chat messages, before forwarding the data to the `eventDetails.jsp` page for rendering.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as the controller for the event details page. It coordinates multiple DAOs to assemble a complete, aggregated view of an event.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects all necessary DAOs (`EventDAO`, `EventTaskDAO`, `EventChatDAO`, etc.).\n    *   **DAOs**: Each DAO is used to fetch a specific piece of related data (e.g., `taskDAO.getTasksForEvent`, `attachmentDAO.getAttachmentsForParent`).\n    *   **Gson**: Used to serialize various data lists (like users, items, kits) into JSON for use by the client-side JavaScript on the page.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**:\n        *   **Purpose:** Handles GET requests for the event details page.\n        *   **Logic:**\n            1.  **Authentication & Parameter Validation:** Ensures a user is logged in and that a valid `id` parameter is provided.\n            2.  **Fetch Core Event:** Retrieves the main `Event` object using `eventDAO.getEventById`.\n            3.  **Authorization:** Performs a crucial authorization check. A user can only view the details if they are a global admin, the event leader, or are associated with the event (either signed up or assigned). If the check fails, it sends an HTTP 403 (Forbidden) error.\n            4.  **Data Aggregation:** If authorized, it proceeds to fetch all related data from the various DAOs and sets it on the `event` model object. This includes attachments (filtered by the user''s role), skill requirements, reserved items, assigned attendees, and tasks.\n            5.  **Chat History:** If the event''s status is \"LAUFEND\", it fetches the chat history from `chatDAO`.\n            6.  **JSON Serialization:** It serializes data needed for client-side modals (like the list of assigned users and all available items/kits for the task editor) into JSON strings and places them in request attributes.\n            7.  **Forwarding:** It sets the fully populated `event` object as a request attribute and forwards to `eventDetails.jsp`.'),
('src/main/java/de/servlet/EventServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves the main \"Veranstaltungen\" (Events) page. Its primary role is to fetch a list of all upcoming and active events, determine the current user''s qualification and sign-up status for each, and then pass this enriched data to the `events.jsp` view for rendering.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as the controller for the public event listing. It interacts with the `EventDAO` to retrieve data and applies business logic to determine user-specific states for each event.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO`.\n    *   `EventDAO`: Used to fetch all upcoming events and the specific events a user is qualified for.\n    *   `User` (Model): The logged-in user object, retrieved from the session.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the main events page.\n        *   **Logic:**\n            1.  **Authentication:** Ensures a user is logged in.\n            2.  **Fetch All Events:** It retrieves a list of *all* active and upcoming events via `eventDAO.getAllActiveAndUpcomingEvents()`.\n            3.  **Fetch Qualified Events:** It makes a second, more complex call to `eventDAO.getUpcomingEventsForUser()`. This method returns only the events for which the current user meets the skill requirements and also includes their current sign-up status (`ANGEMELDET`, `ABGEMELDET`, or `OFFEN`).\n            4.  **Data Enrichment:** It iterates through the list of all events. For each event, it checks if its ID is present in the list of qualified events.\n                *   If it is, it sets the `isUserQualified` flag to `true` and copies the `userAttendanceStatus` to the event object.\n                *   If it is not, `isUserQualified` remains `false` (its default), which will cause the \"Anmelden\" button to be disabled in the JSP.\n            5.  **Forwarding:** It sets the final, enriched list of all upcoming events as a request attribute and forwards to `events.jsp`.'),
('src/main/java/de/servlet/FeedbackServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet handles all user interactions with the feedback system. It serves two distinct purposes based on the `action` parameter: displaying the general feedback form and handling its submission, as well as managing the event-specific feedback workflow.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as a controller for both general and event-specific feedback. It interacts with the `FeedbackSubmissionDAO` for general feedback and the `EventFeedbackDAO` for event-specific feedback.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects `EventFeedbackDAO`, `FeedbackSubmissionDAO`, and `EventDAO`.\n    *   `FeedbackSubmissionDAO`: For creating general feedback entries.\n    *   `EventFeedbackDAO`: For creating event feedback forms and saving responses.\n    *   `EventDAO`: To get event details when creating an event feedback form.\n    *   `CSRFUtil`: For security validation on all POST requests.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(...)`**:\n        *   **Purpose:** Renders the appropriate feedback form.\n        *   **Logic:** It checks the `action` parameter.\n            *   If `action=submitEventFeedback`, it calls `showSubmitEventFeedbackForm()` to display the star rating form for a specific event.\n            *   Otherwise, it forwards to the `feedback.jsp` page for general feedback.\n\n    *   **`doPost(...)`**:\n        *   **Purpose:** Handles the submission of feedback forms.\n        *   **Logic:** After validating the CSRF token, it routes based on the `action` parameter.\n            *   `\"submitGeneralFeedback\"`: Calls `handleGeneralFeedback()`.\n            *   `\"submitEventFeedbackResponse\"`: Calls `handleEventFeedbackResponse()`.\n\n    *   **`handleGeneralFeedback(...)`**:\n        *   **Purpose:** Validates and saves a general feedback submission.\n        *   **Logic:** It retrieves the subject and content from the request, performs validation, creates a `FeedbackSubmission` object, and saves it using `submissionDAO`. It sets appropriate session messages and redirects.\n\n    *   **`handleEventFeedbackResponse(...)`**:\n        *   **Purpose:** Saves a user''s response to an event feedback form.\n        *   **Logic:** It parses the form ID, rating, and comments, creates a `FeedbackResponse` object, and saves it using `eventFeedbackDAO`. It then redirects the user to their profile page.\n\n    *   **`showSubmitEventFeedbackForm(...)`**:\n        *   **Purpose:** Prepares the data for the event-specific feedback form.\n        *   **Logic:**\n            1.  It retrieves the `Event` object.\n            2.  It checks if a `FeedbackForm` already exists for this event using `eventFeedbackDAO`. If not, it creates one.\n            3.  It checks if the user has already submitted feedback for this form. If so, it redirects them to their profile with an info message.\n            4.  Otherwise, it sets the `event` and `form` objects as request attributes and forwards to `feedback_form.jsp`.'),
('src/main/java/de/servlet/FileServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is responsible for displaying the public-facing \"Dateien & Dokumente\" page. It fetches the list of files and categories that the currently logged-in user is authorized to see and forwards this data to the `dateien.jsp` view for rendering.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as the controller for the public file listing page. It interacts directly with the `FileDAO` to retrieve data.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FileDAO`.\n    *   `FileDAO`: The DAO used to fetch the list of files, grouped by category.\n    *   `User` (Model): The user object from the session, used to determine which files should be visible.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the `/dateien` page.\n        *   **Logic:**\n            1.  Retrieves the `User` object from the session.\n            2.  Calls `fileDAO.getAllFilesGroupedByCategory(user)`. This DAO method contains the authorization logic to filter out admin-only files if the user is not an admin.\n            3.  Sets the resulting map of grouped files as a request attribute named `fileData`.\n            4.  Forwards the request to `views/public/dateien.jsp`.'),
('src/main/java/de/servlet/HomeServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves as the controller for the user''s main dashboard or home page. It is responsible for fetching personalized data for the logged-in user, such as their upcoming assigned events, their open tasks, and other general upcoming events they might be interested in.\n\n2.  **Architectural Role**\n\n    This class is a key component of the **Web/Controller Tier**. It acts as the entry point for the user after logging in. It interacts with the `EventDAO` and `EventTaskDAO` to aggregate the data needed for the dashboard widgets.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO` and `EventTaskDAO`.\n    *   `EventDAO`: Used to fetch the user''s assigned events and general upcoming events.\n    *   `EventTaskDAO`: Used to fetch the user''s open tasks across all events.\n    *   `User` (Model): The user object from the session, whose ID is used in the DAO queries.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the `/home` page.\n        *   **Logic:**\n            1.  **Authentication Check:** A crucial defensive check ensures that a `User` object exists in the session. If not, it redirects to the login page.\n            2.  **Data Fetching:** It makes three separate calls to the DAOs:\n                *   `eventDAO.getAssignedEventsForUser()`: Gets the top 5 events the user is *assigned* to.\n                *   `eventTaskDAO.getOpenTasksForUser()`: Gets all open tasks assigned to the user.\n                *   `eventDAO.getUpcomingEventsForUser()`: Gets the top 5 general upcoming events for which the user is qualified but not necessarily assigned.\n            3.  **Forwarding:** It sets the three lists of data as request attributes (`assignedEvents`, `openTasks`, `upcomingEvents`) and forwards the request to `views/public/home.jsp`.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V18__Populate_wiki_data_part13.sql
========================================================================

-- Flyway migration V18, Part 13

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/servlet/IcalServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet generates an iCalendar (`.ics`) feed of all active and upcoming events and meetings. This allows users to subscribe to the application''s schedule using external calendar applications like Google Calendar, Outlook, or Apple Calendar.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as a specialized API endpoint that produces data in the iCalendar format instead of HTML or JSON. It interacts with the `EventDAO` and `MeetingDAO` to source its data.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventDAO` and `MeetingDAO`.\n    *   **iCal4j (`net.fortuna.ical4j.*`)**: The core third-party library used to programmatically build the iCalendar data structure.\n    *   `EventDAO`, `MeetingDAO`: Used to fetch all public calendar entries.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests to `/calendar.ics`.\n        *   **Logic:**\n            1.  **Initialize Calendar:** Creates a new iCal4j `Calendar` object and sets the standard `PRODID` and `VERSION` properties.\n            2.  **Fetch Events & Meetings:** Retrieves all active and upcoming events and meetings from the DAOs.\n            3.  **Create VEvents:** It iterates through both lists. For each `Event` and `Meeting`, it creates a `VEvent` component.\n            4.  **Populate VEvent Properties:** It populates each `VEvent` with standard iCalendar properties:\n                *   `UID`: A unique identifier for the event.\n                *   `DTSTART` / `DTEND`: The start and end times. It correctly converts the Java `LocalDateTime` to a `java.util.Date` required by iCal4j.\n                *   `SUMMARY`: The event/meeting title.\n                *   `DESCRIPTION`: The event/meeting description.\n                *   `LOCATION`: The event/meeting location.\n                *   `URL`: A direct link back to the event/meeting details page within the application.\n            5.  **Set Response Headers:** It sets the `Content-Type` to `text/calendar` and the `Content-Disposition` to `inline`, suggesting to the browser that it should be opened by a calendar application.\n            6.  **Output:** Uses a `CalendarOutputter` from iCal4j to write the fully constructed calendar object to the servlet''s response stream.'),
('src/main/java/de/servlet/ImageServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is responsible for securely serving images stored in the `images` subdirectory of the main upload folder. It prevents direct access to the filesystem, performs authorization checks, and includes protection against path traversal attacks.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as a secure proxy for image files, ensuring that only authenticated users can access them and that they cannot request files outside the designated image directory.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `ConfigurationService`.\n    *   `ConfigurationService`: Provides the base path for file uploads.\n    *   `User` (Model): Retrieved from the session for authentication and logging purposes.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for images.\n        *   **Logic:**\n            1.  **Authentication:** Checks for a valid user session.\n            2.  **Parameter Validation:** Ensures the `file` parameter is present.\n            3.  **Path Traversal Protection:** This is the most critical security feature.\n                *   It constructs the canonical (absolute) path for both the base image directory and the requested file.\n                *   It then checks if the canonical path of the requested file *starts with* the canonical path of the base directory. If not, it means the user is trying to access a file outside the intended directory (e.g., using `../`), a path traversal attack.\n                *   In case of a detected attack, it logs a `FATAL` error and returns a 403 Forbidden error.\n            4.  **File Existence Check:** Verifies that the requested file exists and is not a directory.\n            5.  **Set Headers:** It determines the MIME type of the image (e.g., `image/jpeg`, `image/png`) and sets the `Content-Type`, `Content-Length`, and `Content-Disposition: inline` headers. `inline` suggests that the browser should display the image directly rather than prompting for a download.\n            6.  **Streaming:** It streams the file''s bytes from a `FileInputStream` to the response''s `OutputStream`.'),
('src/main/java/de/servlet/LoginServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet handles the user authentication process. It serves the login page (`login.jsp`) for GET requests and processes login form submissions for POST requests. It includes logic for validating credentials, managing failed login attempts, and implementing an escalating lockout mechanism to thwart brute-force attacks.\n\n2.  **Architectural Role**\n\n    This class is a central part of the **Web/Controller Tier**. It is the main entry point for user authentication. It interacts directly with the `UserDAO` to validate credentials and manages the `HttpSession` to establish a logged-in state.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserDAO`.\n    *   `UserDAO`: Used to validate the username and password against the database.\n    *   `NavigationRegistry`: Used to build the user-specific navigation menu after a successful login.\n    *   `CSRFUtil`: Used to generate and store a new CSRF token in the session upon successful login.\n\n4.  **In-Depth Breakdown**\n\n    *   **`LoginAttemptManager` (Inner Class):**\n        *   **Purpose:** A static inner class that encapsulates all logic related to tracking and managing failed login attempts.\n        *   **`MAX_ATTEMPTS`**: The number of failed attempts before a lockout is triggered.\n        *   **`LOCKOUT_DURATIONS_MS`**: An array defining the escalating lockout durations in milliseconds for subsequent lockouts.\n        *   **`isLockedOut(String username)`**: Checks if a user is currently within a lockout period.\n        *   **`recordFailedLogin(String username)`**: Increments the failed attempt counter for a user. If the count reaches the maximum, it initiates a lockout.\n        *   **`clearLoginAttempts(String username)`**: Resets all attempt counters and lockout information for a user, typically after a successful login.\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**:\n        *   **Purpose:** Processes the login form submission.\n        *   **Logic:**\n            1.  Retrieves `username` and `password` from the request.\n            2.  **Lockout Check:** First, it checks if the user is currently locked out using `LoginAttemptManager.isLockedOut()`. If so, it sets session attributes to inform the JSP and redirects back.\n            3.  **Credential Validation:** It calls `userDAO.validateUser()`.\n            4.  **Success Path:** If `validateUser` returns a `User` object, it means the login was successful.\n                *   It clears any previous failed login attempts for that user.\n                *   It invalidates the old session and creates a new one to prevent session fixation attacks.\n                *   It stores the `User` object in the new session.\n                *   It generates a new CSRF token.\n                *   It builds the user''s navigation menu and stores it in the session.\n                *   It redirects the user to the `/home` page.\n            5.  **Failure Path:** If `validateUser` returns `null`, the login failed.\n                *   It records the failed attempt using `LoginAttemptManager.recordFailedLogin()`.\n                *   It sets error messages and the failed username in the session for the JSP to display.\n                *   It redirects the user back to the `/login` page.\n\n    *   **`doGet(...)`**: Simply forwards the request to the `login.jsp` view.'),
('src/main/java/de/servlet/LogoutServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet handles the user logout process. It invalidates the current user''s session, effectively logging them out, and then redirects them to the login page with a success message.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It is the dedicated endpoint for terminating a user''s authenticated session.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API (`jakarta.servlet.http.HttpSession`)**: Used to access and invalidate the user''s session.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests to the `/logout` URL.\n        *   **Logic:**\n            1.  It retrieves the current `HttpSession` without creating a new one (`request.getSession(false)`).\n            2.  If a session exists, it logs which user is logging out and then calls `session.invalidate()`. This is the core action that removes all session attributes and effectively logs the user out.\n            3.  It then creates a *new* session (`request.getSession(true)`) to store a \"successMessage\" that can be displayed on the login page.\n            4.  Finally, it redirects the user to the `/login` page.'),
('src/main/java/de/servlet/MarkdownEditorServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves the real-time Markdown editor page. It is responsible for fetching the content of a specific Markdown file, performing authorization checks to determine if the user can view or edit the file, and then forwarding the data to the `admin_editor.jsp` view.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as the controller for the collaborative editor view. It interacts with the `FileDAO` to retrieve file metadata and content.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FileDAO` and `ConfigurationService`.\n    *   `FileDAO`: Used to get the file''s metadata and read its physical content.\n    *   `ConfigurationService`: Provides the base path to the upload directory.\n    *   `User` (Model): The user object from the session, used for authorization.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the `/editor` page.\n        *   **Logic:**\n            1.  **Authentication & Parameter Validation:** Ensures a user is logged in and that a valid `fileId` is provided.\n            2.  **Fetch File Metadata:** Retrieves the `File` object from the database using `fileDAO.getFileById()`.\n            3.  **Authorization:** It checks the user''s permissions (`FILE_UPDATE` or `ACCESS_ADMIN_PANEL` for editing, `FILE_READ` for viewing). Based on the check, it sets an `editorMode` attribute (\"edit\" or \"view\") for the JSP. If the user has neither permission, it returns a 403 Forbidden error.\n            4.  **Fetch File Content:** It reads the physical file''s content from the disk using the path stored in the `dbFile` object. It includes error handling for cases where the file is in the database but missing from the disk.\n            5.  **Forwarding:** It sets the `file` object and its `fileContent` as request attributes and forwards to `admin_editor.jsp`.'),
('src/main/java/de/servlet/MeetingActionServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet handles user actions related to meetings, specifically signing up for and signing off from a meeting. It processes POST requests from the public meetings list page (`lehrgaenge.jsp`).\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as the controller for user-initiated meeting attendance changes. It interacts directly with the `MeetingAttendanceDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `MeetingAttendanceDAO`.\n    *   `MeetingAttendanceDAO`: The DAO used to update the user''s attendance status.\n    *   `CSRFUtil`: Used for security validation.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles POST requests for meeting actions.\n        *   **Logic:**\n            1.  **Security & Validation:** It validates the CSRF token and ensures a user is logged in and that `action` and `meetingId` parameters are present.\n            2.  **Action Handling:**\n                *   If `action` is `\"signup\"`, it calls `attendanceDAO.setAttendance()` with `attended=true`.\n                *   If `action` is `\"signoff\"`, it calls `attendanceDAO.setAttendance()` with `attended=false`.\n            3.  **Feedback & Redirect:** It sets a success message in the session and redirects the user back to the `/lehrgaenge` page.'),
('src/main/java/de/servlet/MeetingDetailsServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is responsible for preparing and displaying the detailed view of a single meeting. It fetches the meeting''s data and its associated file attachments, performs an authorization check, and forwards the information to the `meetingDetails.jsp` view.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as the controller for the meeting details page. It interacts with the `MeetingDAO` and `AttachmentDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `MeetingDAO` and `AttachmentDAO`.\n    *   `MeetingDAO`: Used to fetch the core meeting data and check for user association.\n    *   `AttachmentDAO`: Used to fetch attachments specific to this meeting.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the meeting details page.\n        *   **Logic:**\n            1.  **Authentication & Validation:** Ensures a user is logged in and a valid `id` parameter is present.\n            2.  **Fetch Meeting Data:** Retrieves the `Meeting` object from the DAO.\n            3.  **Authorization:** A user is authorized to view the details if they are an admin, the meeting leader, or a participant. If not, it sends a 403 Forbidden error.\n            4.  **Fetch Attachments:** It calls `attachmentDAO.getAttachmentsForParent()`, passing \"MEETING\" as the type and filtering by the user''s role to determine which attachments should be visible.\n            5.  **Forwarding:** Sets the `meeting` and `attachments` as request attributes and forwards to `meetingDetails.jsp`.'),
('src/main/java/de/servlet/MeetingServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves the main \"Lehrgänge\" (Courses/Meetings) page. It fetches the list of all upcoming meetings and determines the current user''s sign-up status for each one.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as the controller for the public listing of schedulable meetings. It interacts directly with the `MeetingDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `MeetingDAO`.\n    *   `MeetingDAO`: Used to fetch the upcoming meetings and the user''s status for each.\n    *   `User` (Model): The user object from the session, used to get user-specific data.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the `/lehrgaenge` page.\n        *   **Logic:**\n            1.  Retrieves the logged-in `User`.\n            2.  Calls `meetingDAO.getUpcomingMeetingsForUser(user)`. This single DAO call efficiently retrieves all upcoming meetings and, through a `LEFT JOIN`, also fetches the user''s attendance status (`ANGEMELDET`, `ABGEMELDET`, or `OFFEN`) for each.\n            3.  Sets the resulting list of `Meeting` objects as a request attribute.\n            4.  Forwards the request to `views/public/lehrgaenge.jsp`.'),
('src/main/java/de/servlet/MyFeedbackServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves the \"Mein Feedback\" page, which allows users to view the status of their own previously submitted feedback. It fetches all submissions made by the currently logged-in user.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as the controller for a user''s personal feedback history view. It interacts directly with the `FeedbackSubmissionDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `FeedbackSubmissionDAO`.\n    *   `FeedbackSubmissionDAO`: The DAO used to retrieve submissions by user ID.\n    *   `User` (Model): The user object from the session.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the `/my-feedback` page.\n        *   **Logic:**\n            1.  Ensures a user is logged in.\n            2.  Calls `submissionDAO.getSubmissionsByUserId()` using the logged-in user''s ID.\n            3.  Sets the resulting list of `FeedbackSubmission` objects as a request attribute.\n            4.  Forwards the request to `views/public/my_feedback.jsp`.'),
('src/main/java/de/servlet/NotificationServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is the client-facing endpoint for establishing a Server-Sent Events (SSE) connection. Authenticated clients connect to this servlet to receive real-time push notifications from the server. This servlet''s only job is to register the client''s connection with the `NotificationService`.\n\n2.  **Architectural Role**\n\n    This is a specialized controller in the **Web/Controller Tier**. It handles the initial setup of the long-lived HTTP connection required for SSE. All subsequent communication is managed by the `NotificationService`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `NotificationService`: The singleton service where the client connection is registered.\n    *   **Jakarta Servlet API (`AsyncContext`)**: The underlying mechanism used to keep the connection open asynchronously.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests to `/notifications`.\n        *   **Logic:**\n            1.  **Authentication:** It ensures a user is logged in. Unauthorized requests are rejected.\n            2.  **Set SSE Headers:** It sets the necessary HTTP headers for an SSE connection: `Content-Type: text/event-stream`, `Cache-Control: no-cache`, and `Connection: keep-alive`.\n            3.  **Register with Service:** It calls `NotificationService.getInstance().register(request)`. This call is the core of the servlet; it starts an `AsyncContext`, effectively handing off the connection to the `NotificationService` to be managed for the duration of the SSE session.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V19__Populate_wiki_data_part14.sql
========================================================================

-- Flyway migration V19, Part 14

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/servlet/PackKitServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet generates a printable \"packing list\" page for a specific inventory kit. It is designed to be accessed via a QR code, providing a simple, mobile-friendly checklist of items that belong in a particular case or kit.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as a controller for a read-only, utility view. It interacts directly with the `InventoryKitDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `InventoryKitDAO`.\n    *   `InventoryKitDAO`: Used to fetch the kit''s details and its list of required items.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the `/pack-kit` URL.\n        *   **Logic:**\n            1.  **Parameter Validation:** It requires a `kitId` parameter.\n            2.  **Data Fetching:**\n                *   It retrieves the main `InventoryKit` object (for its name and description) using `kitDAO.getKitById()`.\n                *   It retrieves the list of `InventoryKitItem`s for that kit using `kitDAO.getItemsForKit()`.\n            3.  **Forwarding:** It sets the `kit` and `kitItems` as request attributes and forwards to `views/public/pack_kit.jsp`. This JSP is styled for a clean, printable view and has the main navigation hidden.'),
('src/main/java/de/servlet/PasswordServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet manages the process for a logged-in user to change their own password. It handles rendering the password change form for GET requests and processes the form submission for POST requests, including validation of the current password, new password confirmation, and adherence to the password policy.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It is a self-contained controller for a specific user action. It interacts with the `UserDAO` for credential validation and updates, and uses the `PasswordPolicyValidator` for business logic.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `UserDAO`.\n    *   `UserDAO`: Used to validate the user''s current password and to save the new hashed password.\n    *   `PasswordPolicyValidator`: A utility class that enforces complexity requirements for new passwords.\n    *   `CSRFUtil`: Used to validate the CSRF token on the POST request.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(...)`**: Simply forwards the request to the `passwort.jsp` view, which contains the password change form.\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**:\n        *   **Purpose:** Processes the password change form submission.\n        *   **Logic:**\n            1.  **Authentication & Security:** Ensures a user is logged in and validates the CSRF token.\n            2.  **Parameter Retrieval:** Gets the `currentPassword`, `newPassword`, and `confirmPassword` from the request.\n            3.  **Current Password Validation:** It calls `userDAO.validateUser()` with the current user''s name and the provided `currentPassword`. If this fails, it sets an error message and redirects back.\n            4.  **Confirmation Check:** It verifies that `newPassword` and `confirmPassword` are identical.\n            5.  **Policy Validation:** It calls `PasswordPolicyValidator.validate()` on the `newPassword`. If the new password does not meet the complexity requirements, it sets an error message with the specific reason and redirects.\n            6.  **Database Update:** If all checks pass, it calls `userDAO.changePassword()` to hash and save the new password.\n            7.  **Feedback & Redirect:** It sets a success or error message in the session and redirects the user back to the `/passwort` page.'),
('src/main/java/de/servlet/ProfileServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves as the controller for the \"Mein Profil\" (My Profile) page. For GET requests, it aggregates and displays a comprehensive overview of the logged-in user''s data, including their profile information, event history, qualifications, achievements, and registered passkeys. For POST requests, it handles various profile-related actions like submitting a profile change request or deleting a passkey.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as a central hub for user-specific data display and modification. It interacts with a wide range of DAOs to collect the necessary information.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects `EventDAO`, `UserQualificationsDAO`, `UserDAO`, `AchievementDAO`, `PasskeyDAO`, and `ProfileChangeRequestDAO`.\n    *   **DAOs**: Each DAO is used to fetch a specific slice of the user''s data.\n    *   **Gson**: Used to serialize the JSON payload for the profile change request.\n    *   `CSRFUtil`: For validating all POST actions.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(...)`**:\n        *   **Purpose:** Gathers all data for the profile page.\n        *   **Logic:** It makes calls to multiple DAOs (`eventDAO.getEventHistoryForUser`, `qualificationsDAO.getQualificationsForUser`, etc.) to fetch all the different pieces of information. It also checks if the user has an outstanding change request using `requestDAO.hasPendingRequest()`. All retrieved data is set as request attributes before forwarding to `profile.jsp`.\n\n    *   **`doPost(...)`**:\n        *   **Purpose:** Handles various actions submitted from the profile page.\n        *   **Logic:** After validating the CSRF token, it uses a `switch` statement on the `action` parameter to route to the appropriate handler method.\n\n    *   **`handleDeletePasskey(...)`**: Deletes a user''s passkey credential after they confirm the action.\n\n    *   **`handleUpdateChatColor(...)`**: Updates the user''s preferred chat color in the database and in their current session object.\n\n    *   **`handleProfileChangeRequest(...)`**:\n        *   **Purpose:** Handles the submission of a profile data change request from the user. This is an AJAX endpoint.\n        *   **Logic:**\n            1.  It compares the submitted form values (`email`, `classYear`, `className`) with the values in the current user''s session object.\n            2.  It builds a `Map` containing only the fields that have actually changed.\n            3.  If there are no changes, it returns an error response.\n            4.  If there are changes, it serializes the `Map` to a JSON string.\n            5.  It creates a new `ProfileChangeRequest` object, sets the JSON string as the `requestedChanges`, and saves it to the database via the `requestDAO`.\n            6.  It returns a JSON `ApiResponse` indicating success or failure.'),
('src/main/java/de/servlet/RootServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is mapped to the root URL (`/`) of the application. Its sole purpose is to act as a router, directing users to the appropriate starting page based on their authentication status.\n\n2.  **Architectural Role**\n\n    This is a simple entry point in the **Web/Controller Tier**. It ensures users landing on the base URL are sent to either the login page or their dashboard, preventing them from seeing a blank or error page.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta Servlet API**: The base `HttpServlet` class.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles all GET requests to the application''s root context.\n        *   **Logic:**\n            1.  It checks the `HttpSession` for a `User` object.\n            2.  If a `User` object exists (the user is logged in), it sends a redirect to the `/home` servlet.\n            3.  If no `User` object exists (the user is not logged in), it sends a redirect to the `/login` servlet.'),
('src/main/java/de/servlet/StorageItemActionServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves the dedicated \"QR Action\" page, which is designed to be accessed by scanning a QR code associated with an inventory item. It provides a simplified, mobile-friendly interface for performing a quick check-in or check-out transaction for a specific item.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as the controller for the QR code landing page. It interacts with the `StorageDAO` and `EventDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `StorageDAO` and `EventDAO`.\n    *   `StorageDAO`: To fetch the details of the specific item.\n    *   `EventDAO`: To fetch a list of active events to populate the \"assign to event\" dropdown.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests, typically from a QR code scan.\n        *   **Logic:**\n            1.  **Parameter Validation:** It requires an `id` parameter identifying the storage item.\n            2.  **Data Fetching:**\n                *   It retrieves the full `StorageItem` object using `storageDAO.getItemById()`.\n                *   It fetches all currently active events using `eventDAO.getActiveEvents()`.\n            3.  **Error Handling:** If the item ID is invalid or the item is not found, it sends an appropriate HTTP error.\n            4.  **Forwarding:** It sets the `item` and `activeEvents` as request attributes and forwards to `views/public/qr_action.jsp`. This JSP has a simplified layout without the main navigation, optimized for quick actions on a mobile device.'),
('src/main/java/de/servlet/StorageItemDetailsServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet is responsible for displaying the detailed information page for a single inventory item. It aggregates the item''s core data, its transaction history, and its maintenance history into a single view.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It acts as the controller for the item details page. It coordinates calls to `StorageDAO`, `StorageLogDAO`, and `MaintenanceLogDAO` to build a complete picture of the item.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the three DAOs responsible for storage data.\n    *   `StorageDAO`: To fetch the main `StorageItem` object.\n    *   `StorageLogDAO`: To fetch the item''s checkout/checkin history.\n    *   `MaintenanceLogDAO`: To fetch the item''s repair/maintenance history.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the item details page.\n        *   **Logic:**\n            1.  **Parameter Validation:** It validates that a numerical `id` parameter is present.\n            2.  **Data Fetching:** It makes three separate DAO calls:\n                *   `storageDAO.getItemById()` to get the core item details.\n                *   `storageLogDAO.getHistoryForItem()` to get the transaction log.\n                *   `maintenanceLogDAO.getHistoryForItem()` to get the maintenance log.\n            3.  **Error Handling:** If the item is not found, it sends an HTTP 404 error.\n            4.  **Forwarding:** It sets the `item`, `history`, and `maintenanceHistory` as request attributes and forwards the request to `views/public/storage_item_details.jsp`.'),
('src/main/java/de/servlet/StorageServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves the main public-facing \"Lager\" (Inventory) page. Its job is to fetch all inventory items, grouped by their physical location, and prepare the data for display in the `lager.jsp` view.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as the controller for the main inventory overview page. It interacts with the `StorageDAO` and `EventDAO`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `StorageDAO` and `EventDAO`.\n    *   `StorageDAO`: Used to fetch all inventory items, grouped by location.\n    *   `EventDAO`: Used to fetch a list of active events to populate the dropdown in the transaction modal.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doGet(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles GET requests for the `/lager` page.\n        *   **Logic:**\n            1.  It calls `storageDAO.getAllItemsGroupedByLocation()` to retrieve all storage items, pre-organized into a `Map` where keys are location names and values are lists of items in that location.\n            2.  It calls `eventDAO.getActiveEvents()` to get a list of events that can be associated with a transaction.\n            3.  It sets both the `storageData` map and the `activeEvents` list as request attributes.\n            4.  It forwards the request to `views/public/lager.jsp`.'),
('src/main/java/de/servlet/StorageTransactionServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet processes inventory transaction requests (check-ins and check-outs) submitted from the public inventory page (`lager.jsp`) or the QR action page (`qr_action.jsp`). It acts as the endpoint for these state-changing operations, delegating the complex transactional logic to the `StorageService`.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It receives form data, performs basic validation, and then calls the **Service Tier** (`StorageService`) to execute the core business logic. It should not contain any transaction management or complex logic itself.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `StorageService`.\n    *   `StorageService`: The service that handles the transactional logic of checking items in or out.\n    *   `CSRFUtil`: Used for security validation on the POST request.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**\n        *   **Purpose:** Handles POST requests to perform a storage transaction.\n        *   **Logic:**\n            1.  **Security & Validation:** It validates the CSRF token and retrieves the logged-in `User` from the session.\n            2.  **Parameter Parsing:** It parses all necessary parameters from the request: `itemId`, `quantity`, `type` (\"checkout\" or \"checkin\"), `notes`, and the optional `eventId`.\n            3.  **Service Call:** It calls `storageService.processTransaction()` with the parsed parameters. This single method call handles the entire transactional operation.\n            4.  **Feedback & Redirect:** Based on the boolean result from the service call, it sets either a `successMessage` or an `errorMessage` in the user''s session.\n            5.  It then redirects the user back to their original page (either `/lager` or the QR action page, determined by the `redirectUrl` parameter).'),
('src/main/java/de/servlet/TaskActionServlet.java', '1.  **File Overview & Purpose**\n\n    This servlet serves as a dedicated controller for all actions related to event tasks. It handles a variety of POST requests for creating, updating, deleting, and changing the status of tasks, as well as user-specific actions like claiming or un-claiming a task.\n\n2.  **Architectural Role**\n\n    This class belongs to the **Web/Controller Tier**. It acts as a command handler for task-related operations, primarily receiving requests from the `eventDetails.jsp` page. It coordinates between user actions and the `EventTaskDAO`, and performs necessary authorization checks.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `EventTaskDAO`, `EventDAO`, and `AdminLogService`.\n    *   `EventTaskDAO`: The primary DAO for all task-related database operations.\n    *   `EventDAO`: Used to fetch event details for authorization checks (e.g., to verify if the current user is the event leader).\n    *   `AdminLogService`: To log administrative actions like creating or deleting tasks.\n    *   `CSRFUtil`: For security validation on all POST requests.\n\n4.  **In-Depth Breakdown**\n\n    *   **`doPost(HttpServletRequest request, HttpServletResponse response)`**:\n        *   **Purpose:** The main entry point that routes requests based on the `action` parameter.\n        *   **Logic:** After authenticating the user and validating the CSRF token, it uses a `switch` statement to delegate to the appropriate handler method (`handleSaveTask`, `handleDeleteTask`, etc.).\n\n    *   **`handleSaveTask(...)`**:\n        *   **Purpose:** Handles both creation and updating of a task.\n        *   **Logic:**\n            1.  Performs an authorization check: only an admin or the event leader can save a task.\n            2.  It constructs an `EventTask` object from the request parameters.\n            3.  It determines if it''s a create or update based on the presence of a `taskId`.\n            4.  It collects arrays of associated data (assigned user IDs, required item IDs, etc.) from the request.\n            5.  It calls the transactional `taskDAO.saveTask()` method, which handles saving the task and all its relationships.\n            6.  Logs the action and sets a session message before redirecting back to the event details page.\n\n    *   **`handleDeleteTask(...)`**:\n        *   **Purpose:** Deletes a task.\n        *   **Logic:** Performs an authorization check (admin or event leader), then calls `taskDAO.deleteTask()`, logs the action, sets a session message, and redirects.\n\n    *   **`handleUserTaskAction(...)`**:\n        *   **Purpose:** Handles actions that a regular participant can perform on a task.\n        *   **Logic:**\n            *   For `updateStatus` (e.g., marking as \"ERLEDIGT\"), it checks if the user is an admin, the leader, or an assignee of the task.\n            *   For `claim` and `unclaim`, it checks if the user is a participant in the event.\n            *   It then calls the appropriate `EventTaskDAO` method to perform the action.'),
('src/main/java/de/util/CSRFUtil.java', '1.  **File Overview & Purpose**\n\n    This is a critical security utility class that provides methods to protect the application against Cross-Site Request Forgery (CSRF) attacks. It implements the synchronizer token pattern by generating a secure, random token, storing it in the user''s session, and providing a method to validate that incoming state-changing requests include this same token.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting **Security/Utility** component. It is used throughout the **Web/Controller Tier**. The `storeToken` method is called by the `LoginServlet`, and the `isTokenValid` method is called at the beginning of the `doPost` method of nearly every servlet that handles form submissions.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.security.SecureRandom`: Used to generate cryptographically strong random bytes for the token.\n    *   `java.util.Base64`: Used to encode the random bytes into a URL-safe string.\n\n4.  **In-Depth Breakdown**\n\n    *   **`storeToken(HttpSession session)`**:\n        *   **Purpose:** Generates a new CSRF token and saves it in the user''s session.\n        *   **Logic:** It calls the private `generateToken()` method and sets the result as a session attribute with the key `\"csrfToken\"`. This should be called upon successful login to establish the initial token.\n\n    *   **`generateToken()`**:\n        *   **Purpose:** A private helper to create a secure, random token.\n        *   **Logic:** It uses `SecureRandom` to generate 32 random bytes and then Base64-encodes them into a URL-safe, padding-free string.\n\n    *   **`isTokenValid(HttpServletRequest request)`**:\n        *   **Purpose:** The main validation method. It compares the token submitted in a request parameter with the token stored in the session.\n        *   **Logic:** It retrieves the token from the session and the token from the request parameter named `\"csrfToken\"`. It performs null/empty checks and then uses `Objects.equals()` for a timing-attack-safe comparison. It returns `true` only if both tokens exist and are identical.\n\n    *   **`getCsrfInputField(HttpSession session)`**: A utility method intended for use in JSPs (though the project uses direct EL `$${sessionScope.csrfToken}` instead). It generates the complete `<input type=\"hidden\" ...>` HTML tag needed in forms.');
COMMIT;

========================================================================
FILE: src\main\resources\db\migration\V1__Create_core_tables.sql
========================================================================

-- Flyway migration V1: Create all tables without constraints.

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";

-- ===================================================================
-- CREATE ALL TABLES
-- ===================================================================

CREATE TABLE `achievements` (
  `id` INT NOT NULL,
  `achievement_key` varchar(50) NOT NULL,
  `name` varchar(100) NOT NULL,
  `description` text DEFAULT NULL,
  `icon_class` varchar(50) DEFAULT 'fa-award'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `admin_logs` (
  `id` INT NOT NULL,
  `admin_username` varchar(50) DEFAULT NULL,
  `action_type` varchar(255) DEFAULT NULL,
  `details` text DEFAULT NULL,
  `status` ENUM('ACTIVE', 'REVOKED') NOT NULL DEFAULT 'ACTIVE',
  `context` JSON NULL DEFAULT NULL,
  `action_timestamp` timestamp NOT NULL DEFAULT current_timestamp(),
  `revoked_by_admin_id` INT NULL DEFAULT NULL,
  `revoked_at` TIMESTAMP NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `attachments` (
  `id` INT NOT NULL,
  `parent_type` enum('EVENT','MEETING') NOT NULL,
  `parent_id` INT NOT NULL,
  `filename` varchar(255) NOT NULL,
  `filepath` varchar(255) NOT NULL,
  `required_role` enum('NUTZER','ADMIN') NOT NULL DEFAULT 'NUTZER',
  `uploaded_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `courses` (
  `id` INT NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `abbreviation` varchar(20) DEFAULT NULL,
  `description` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `course_attendance` (
  `user_id` INT NOT NULL,
  `course_id` INT NOT NULL,
  `signup_status` enum('ANGEMELDET','ABGEMELDET') NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `events` (
  `id` INT NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `event_datetime` datetime NOT NULL,
  `end_datetime` datetime DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL,
  `status` enum('GEPLANT','KOMPLETT','LAUFEND','ABGESCHLOSSEN','ABGESAGT') NOT NULL DEFAULT 'GEPLANT',
  `leader_user_id` INT DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_assignments` (
  `assignment_id` INT NOT NULL,
  `event_id` INT NOT NULL,
  `user_id` INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_attendance` (
  `user_id` INT NOT NULL,
  `event_id` INT NOT NULL,
  `signup_status` enum('ANGEMELDET','ABGEMELDET') NOT NULL,
  `commitment_status` enum('BESTÄTIGT','OFFEN','ZUGESAGT') NOT NULL DEFAULT 'OFFEN'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_chat_messages` (
  `id` INT NOT NULL,
  `event_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `username` varchar(255) DEFAULT NULL,
  `message_text` text DEFAULT NULL,
  `edited` BOOLEAN NOT NULL DEFAULT 0,
  `is_deleted` BOOLEAN NOT NULL DEFAULT 0,
  `deleted_by_user_id` INT DEFAULT NULL,
  `deleted_at` timestamp NULL DEFAULT NULL,
  `deleted_by_username` varchar(255) DEFAULT NULL,
  `sent_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_custom_fields` (
  `id` INT NOT NULL,
  `event_id` INT NOT NULL,
  `field_name` varchar(255) DEFAULT NULL,
  `field_type` enum('TEXT','BOOLEAN','DROPDOWN','CHECKBOX_GROUP') NOT NULL,
  `is_required` BOOLEAN NOT NULL DEFAULT 0,
  `field_options` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_custom_field_responses` (
  `id` INT NOT NULL,
  `field_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `response_value` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_skill_requirements` (
  `id` INT NOT NULL,
  `event_id` INT NOT NULL,
  `required_course_id` INT NOT NULL,
  `required_persons` INT NOT NULL DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_storage_reservations` (
  `id` INT NOT NULL,
  `event_id` INT NOT NULL,
  `item_id` INT NOT NULL,
  `reserved_quantity` INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_tasks` (
  `id` INT NOT NULL,
  `event_id` INT NOT NULL,
  `description` text NOT NULL,
  `status` varchar(20) NOT NULL DEFAULT 'OFFEN',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `display_order` INT NOT NULL DEFAULT 0,
  `required_persons` INT NOT NULL DEFAULT 0,
  `details` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_task_assignments` (
  `task_id` INT NOT NULL,
  `user_id` INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_task_kits` (
  `task_id` INT NOT NULL,
  `kit_id` INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `event_task_storage_items` (
  `task_id` INT NOT NULL,
  `item_id` INT NOT NULL,
  `quantity` INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `feedback_forms` (
  `id` INT NOT NULL,
  `event_id` INT NOT NULL,
  `title` varchar(255) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `feedback_responses` (
  `id` INT NOT NULL,
  `form_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `rating` INT NOT NULL COMMENT 'e.g., 1 to 5 stars',
  `comments` text DEFAULT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `feedback_submissions` (
  `id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `subject` varchar(255) NOT NULL,
  `display_title` varchar(255) DEFAULT NULL,
  `content` text NOT NULL,
  `submitted_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `status` enum('NEW','VIEWED','PLANNED','REJECTED','COMPLETED') NOT NULL DEFAULT 'NEW',
  `display_order` INT NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `files` (
  `id` INT NOT NULL,
  `filename` varchar(255) DEFAULT NULL,
  `filepath` varchar(512) DEFAULT NULL,
  `category_id` INT DEFAULT NULL,
  `required_role` varchar(20) DEFAULT NULL,
  `uploaded_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `file_categories` (
  `id` INT NOT NULL,
  `name` varchar(100) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `inventory_kits` (
  `id` INT NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `inventory_kit_items` (
  `kit_id` INT NOT NULL,
  `item_id` INT NOT NULL,
  `quantity` INT NOT NULL DEFAULT 1
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `login_attempts` (
  `username` varchar(50) NOT NULL,
  `attempts` INT NOT NULL DEFAULT 0,
  `last_attempt` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `maintenance_log` (
  `id` INT NOT NULL,
  `item_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `log_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `action` varchar(255) DEFAULT NULL,
  `notes` text DEFAULT NULL,
  `cost` decimal(10,2) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `meetings` (
  `id` INT NOT NULL,
  `course_id` INT NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `meeting_datetime` datetime NOT NULL,
  `end_datetime` datetime DEFAULT NULL,
  `leader_user_id` INT DEFAULT NULL,
  `description` text DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `meeting_attendance` (
  `user_id` INT NOT NULL,
  `meeting_id` INT NOT NULL,
  `attended` BOOLEAN DEFAULT 0,
  `remarks` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `permissions` (
  `id` INT NOT NULL,
  `permission_key` varchar(100) NOT NULL COMMENT 'e.g., USER_CREATE, EVENT_DELETE',
  `description` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `profile_change_requests` (
  `id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `requested_changes` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`requested_changes`)),
  `status` enum('PENDING','APPROVED','DENIED') NOT NULL DEFAULT 'PENDING',
  `requested_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `reviewed_by_admin_id` INT DEFAULT NULL,
  `reviewed_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `roles` (
  `id` INT NOT NULL,
  `role_name` varchar(50) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `shared_documents` (
  `id` INT NOT NULL,
  `document_name` varchar(100) NOT NULL,
  `content` text DEFAULT NULL,
  `last_modified` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `storage_items` (
  `id` INT NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  `location` varchar(50) DEFAULT NULL,
  `cabinet` varchar(50) DEFAULT NULL,
  `compartment` varchar(50) DEFAULT NULL,
  `quantity` INT NOT NULL DEFAULT 1,
  `max_quantity` INT NOT NULL DEFAULT 0,
  `defective_quantity` INT NOT NULL DEFAULT 0,
  `defect_reason` text DEFAULT NULL,
  `weight_kg` decimal(10,2) DEFAULT NULL,
  `price_eur` decimal(10,2) DEFAULT NULL,
  `image_path` varchar(512) DEFAULT NULL,
  `status` enum('IN_STORAGE','CHECKED_OUT','ASSIGNED_TO_EVENT','MAINTENANCE') NOT NULL DEFAULT 'IN_STORAGE',
  `current_holder_user_id` INT DEFAULT NULL,
  `assigned_event_id` INT DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `storage_log` (
  `id` INT NOT NULL,
  `item_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `quantity_change` INT NOT NULL,
  `notes` text DEFAULT NULL,
  `event_id` INT DEFAULT NULL,
  `transaction_timestamp` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `todo_categories` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(255) NOT NULL,
    `display_order` INT NOT NULL,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `todo_tasks` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `category_id` INT NOT NULL,
    `content` TEXT NOT NULL,
    `is_completed` BOOLEAN NOT NULL DEFAULT FALSE,
    `display_order` INT NOT NULL,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `users` (
  `id` INT NOT NULL,
  `username` varchar(50) DEFAULT NULL,
  `password_hash` varchar(255) DEFAULT NULL,
  `role_id` INT DEFAULT NULL,
  `class_year` INT DEFAULT NULL,
  `class_name` varchar(10) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `chat_color` varchar(7) DEFAULT '#E9ECEF',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `theme` varchar(10) DEFAULT 'light'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_achievements` (
  `user_id` INT NOT NULL,
  `achievement_id` INT NOT NULL,
  `earned_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_passkeys` (
  `id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `credential_id` text NOT NULL,
  `public_key` text NOT NULL,
  `signature_count` BIGINT NOT NULL,
  `user_handle` text NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_permissions` (
  `user_id` INT NOT NULL,
  `permission_id` INT NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `user_qualifications` (
  `user_id` INT NOT NULL,
  `course_id` INT NOT NULL,
  `completion_date` date DEFAULT NULL,
  `status` enum('BESUCHT','ABSOLVIERT', 'BESTANDEN', 'NICHT BESUCHT') NOT NULL DEFAULT 'BESUCHT',
  `remarks` text DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `wiki_documentation` (
  `id` INT NOT NULL,
  `file_path` varchar(512) NOT NULL,
  `content` longtext DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V20__Populate_wiki_data_part15.sql
========================================================================

-- Flyway migration V20, Part 15: Populate the wiki with the final set of documentation.

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/util/DaoUtils.java', '1.  **File Overview & Purpose**\n\n    This is a small utility class that provides common helper methods for DAO classes. Its purpose is to encapsulate reusable database-related logic, reducing code duplication across the DAO layer.\n\n2.  **Architectural Role**\n\n    This is a utility class for the **DAO (Data Access) Tier**.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.sql.ResultSet`: The JDBC class it operates on.\n\n4.  **In-Depth Breakdown**\n\n    *   **`hasColumn(ResultSet rs, String columnName)`**\n        *   **Method Signature:** `public static boolean hasColumn(ResultSet rs, String columnName) throws SQLException`\n        *   **Purpose:** Safely checks if a given `ResultSet` contains a column with a specific name, ignoring case.\n        *   **Logic:** It retrieves the `ResultSetMetaData`, iterates through all columns, and compares the provided `columnName` with each column''s name in a case-insensitive manner.\n        *   **Use Case:** This is extremely useful in DAOs that perform complex JOINs where a column might be present in some results but not others (e.g., `holder_username` in `StorageDAO`). Using this check before calling `rs.getString(\"columnName\")` prevents a `SQLException` if the column doesn''t exist for a particular row.'),
('src/main/java/de/util/MarkdownUtil.java', '1.  **File Overview & Purpose**\n\n    This is a security utility class designed to sanitize user-provided Markdown content. It strips out potentially dangerous HTML tags and attributes (like `<script>` tags and `onclick` handlers) to prevent Cross-Site Scripting (XSS) vulnerabilities before the content is stored or rendered.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting **Security/Utility** component. It is used in the **Web/Controller Tier** (specifically in WebSocket endpoints like `DocumentEditorSocket` and `EventChatSocket`) to clean user input before it is broadcast to other clients or saved.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.util.regex.Pattern`: The core Java class for regular expressions, used to define the sanitization rules.\n\n4.  **In-Depth Breakdown**\n\n    *   **Static Patterns:**\n        *   `SCRIPT_PATTERN`: Matches and removes entire `<script>...</script>` blocks.\n        *   `ON_ATTRIBUTE_PATTERN`: Matches and removes any HTML attribute that starts with \"on\" (e.g., `onclick`, `onmouseover`).\n        *   `JAVASCRIPT_URI_PATTERN`: Matches and neutralizes `href` or `src` attributes that use the `javascript:` pseudo-protocol.\n    *   **`sanitize(String markdown)`**\n        *   **Method Signature:** `public static String sanitize(String markdown)`\n        *   **Purpose:** Applies a series of regular expression replacements to remove malicious content from a string.\n        *   **Parameters:**\n            *   `markdown` (String): The raw, potentially unsafe, user-submitted string.\n        *   **Returns:** A sanitized version of the string, safe for rendering in an HTML context (after being processed by a Markdown parser).\n        *   **Side Effects:** None.'),
('src/main/java/de/util/NavigationRegistry.java', '1.  **File Overview & Purpose**\n\n    This class serves as a centralized, static registry for all navigation links in the application''s sidebar. It defines the complete set of possible navigation items and provides a single method to generate a user-specific list of links based on their assigned permissions. This approach ensures a single source of truth for the site''s navigation structure and access control.\n\n2.  **Architectural Role**\n\n    This is a **Configuration/Utility** class that primarily supports the **Web/Controller Tier**. It is called by the `LoginServlet` to populate the user''s session with their authorized navigation menu, which is then rendered by `main_header.jspf` on every page.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `Permissions`: The class containing all permission key constants.\n    *   `NavigationItem` (Model): The object used to represent each link.\n    *   `User` (Model): The user object, which contains the permissions used for filtering.\n\n4.  **In-Depth Breakdown**\n\n    *   **`ALL_ITEMS` (static List)**: A static list that is initialized once with `NavigationItem` objects for every possible link in the application, for both the user and admin sections. Each item is defined with its label, URL, icon, and the required permission key. Links available to all authenticated users have a `null` permission.\n    *   **`getNavigationItemsForUser(User user)`**\n        *   **Method Signature:** `public static List<NavigationItem> getNavigationItemsForUser(User user)`\n        *   **Purpose:** To filter the master `ALL_ITEMS` list down to only those items the provided user is authorized to see.\n        *   **Parameters:**\n            *   `user` (User): The currently logged-in user.\n        *   **Returns:** A `List` of `NavigationItem` objects that should be rendered in the sidebar for that user.\n        *   **Logic:** It uses a Java Stream to filter `ALL_ITEMS`. An item is included if:\n            1.  Its required permission is `null` (it''s a public link for logged-in users).\n            2.  The user has the master `ACCESS_ADMIN_PANEL` permission.\n            3.  The user has the specific permission required by the item.\n            4.  It handles special cases like `ADMIN_DASHBOARD_ACCESS` and `ACHIEVEMENT_VIEW`, which are meta-permissions that depend on the user having *any* other relevant admin permission.'),
('src/main/java/de/util/PasswordPolicyValidator.java', '1.  **File Overview & Purpose**\n\n    This is a utility class for enforcing a strong password policy. It provides a single static method to validate a given password against a set of predefined complexity rules (minimum length, character types). This ensures that all new passwords set in the application, whether during user creation or a password change, meet the required security standards.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting **Security/Utility** component. It is used in the **Web/Controller Tier** by the `PasswordServlet` and in the **Service Tier** via the `CreateUserAction` to validate passwords before they are hashed and stored.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.util.regex.Pattern`: Used to define the regular expressions for checking character types.\n\n4.  **In-Depth Breakdown**\n\n    *   **Static Patterns & Constants**:\n        *   `MIN_LENGTH`: Defines the minimum required password length.\n        *   `HAS_UPPERCASE`, `HAS_LOWERCASE`, `HAS_DIGIT`, `HAS_SPECIAL_CHAR`: Pre-compiled `Pattern` objects for efficient checking of required character types.\n    *   **`ValidationResult` (Inner Class)**: A simple record-like class to return both a boolean `isValid` status and a user-friendly `message` explaining the result.\n    *   **`validate(String password)`**\n        *   **Method Signature:** `public static ValidationResult validate(String password)`\n        *   **Purpose:** The main validation logic.\n        *   **Logic:**\n            1.  It checks for null or empty passwords.\n            2.  It creates a list of error messages.\n            3.  It checks the password against each rule (`MIN_LENGTH`, `HAS_UPPERCASE`, etc.) and adds a descriptive error string to the list for each rule that fails.\n            4.  If the `errors` list is empty, it returns a successful `ValidationResult`.\n            5.  If there are errors, it joins them into a single, comprehensive error message (e.g., \"Das Passwort muss mindestens 10 Zeichen lang sein, mindestens einen Großbuchstaben enthalten.\") and returns a failed `ValidationResult`.'),
('src/main/java/de/websocket/ChatSessionManager.java', '1.  **File Overview & Purpose**\n\n    This class is a thread-safe singleton manager for WebSocket sessions related to event chats. It maintains a map of active chat rooms, where each room (keyed by an event ID) contains a set of connected user sessions. This allows for targeted message broadcasting to all participants in a specific event''s chat.\n\n2.  **Architectural Role**\n\n    This is a core **Infrastructure** component for the real-time communication feature, operating within the **Web/Controller Tier**. It is exclusively used by the `EventChatSocket` WebSocket endpoint to manage session lifecycle and broadcast messages.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta WebSocket API (`jakarta.websocket.Session`)**: The object representing a single client connection.\n    *   `java.util.concurrent.ConcurrentHashMap` & `CopyOnWriteArraySet`: Thread-safe collection classes are used to safely manage sessions from multiple concurrent WebSocket threads.\n\n4.  **In-Depth Breakdown**\n\n    *   **Singleton Implementation**: Uses a private constructor and a static `INSTANCE` field to ensure only one manager exists per application.\n    *   **`sessionsByEvent` (Map)**: The central data structure. The key is the `eventId` as a string, and the value is a `CopyOnWriteArraySet` of `Session` objects. `CopyOnWriteArraySet` is chosen for its thread-safety, being particularly efficient when reads and iterations are more common than writes (add/remove).\n    *   **`addSession(String eventId, Session session)`**: Adds a new user''s session to the set for the corresponding event room.\n    *   **`removeSession(String eventId, Session session)`**: Removes a user''s session when they disconnect. If a room becomes empty, it is removed from the main map to conserve memory.\n    *   **`broadcast(String eventId, String message)`**: Sends a message to *every* active and open session in a specific event room.\n    *   **`broadcastExcept(String eventId, String message, Session excludeSession)`**: Sends a message to every active session in a room *except* the one that originated the message. This is used to prevent a user from receiving an echo of their own message.'),
('src/main/java/de/websocket/DocumentEditorSocket.java', '1.  **File Overview & Purpose**\n\n    This class is a WebSocket endpoint that enables real-time, collaborative editing of Markdown files. It manages WebSocket connections for specific document editing sessions, receives content updates from one client, sanitizes them, saves them to the file system, and broadcasts the changes to all other clients editing the same document.\n\n2.  **Architectural Role**\n\n    This class is part of the **Web/Controller Tier**. It provides the server-side logic for the real-time editor feature. It interacts with the `DocumentSessionManager` for session handling, the `FileDAO` for persistence, and the `MarkdownUtil` for security.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Uses static injection to receive a `FileDAO` instance from Guice.\n    *   **Jakarta WebSocket API (`@ServerEndpoint`, `@OnOpen`, etc.)**: The core annotations for defining a WebSocket endpoint.\n    *   `DocumentSessionManager`: The singleton used to manage sessions for different document rooms.\n    *   `FileDAO`: To read the file path and write updated content to the disk.\n    *   `MarkdownUtil`: For sanitizing user-provided content to prevent XSS.\n    *   **Gson**: For parsing incoming JSON messages.\n\n4.  **In-Depth Breakdown**\n\n    *   **`onOpen(...)`**:\n        *   **Purpose:** Handles a new client connection.\n        *   **Logic:** It retrieves the `User` object from the `EndpointConfig` (placed there by the `GuiceAwareServerEndpointConfigurator`). It performs an authorization check to ensure the user has `FILE_UPDATE` permission. If authorized, it adds the session to the `DocumentSessionManager` for the given `fileId`. If not, it closes the connection.\n    *   **`onMessage(...)`**:\n        *   **Purpose:** Receives a message from a client.\n        *   **Logic:** It parses the incoming JSON message. If the message `type` is `\"content_update\"`, it calls `handleContentUpdate`.\n    *   **`handleContentUpdate(...)`**:\n        *   **Purpose:** The core logic for processing a content change.\n        *   **Logic:**\n            1.  It retrieves the `File` metadata from the `FileDAO` to get the physical `filepath`.\n            2.  It sanitizes the received `content` using `MarkdownUtil.sanitize()`.\n            3.  It calls `fileDAO.updateFileContent()` to write the new content to the physical file.\n            4.  It calls `fileDAO.touchFileRecord()` to update the file''s modification timestamp.\n            5.  It constructs a broadcast message and uses `DocumentSessionManager.broadcastExcept()` to send the updated content to all other clients in the same editing session.\n    *   **`onClose(...)`** and **`onError(...)`**: Standard methods to handle session disconnection and errors by removing the session from the manager and logging the error.'),
('src/main/java/de/websocket/DocumentSessionManager.java', '1.  **File Overview & Purpose**\n\n    This class is a thread-safe singleton manager for WebSocket sessions related to the collaborative document editor. It mirrors the functionality of `ChatSessionManager` but is specifically for document editing rooms, mapping file IDs to sets of connected editor sessions.\n\n2.  **Architectural Role**\n\n    This is an **Infrastructure** component within the **Web/Controller Tier**. It is used exclusively by the `DocumentEditorSocket` to manage session lifecycle and broadcast document updates.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta WebSocket API (`jakarta.websocket.Session`)**: The object representing a single client connection.\n    *   `java.util.concurrent.ConcurrentHashMap` & `CopyOnWriteArraySet`: Thread-safe collections for managing sessions.\n\n4.  **In-Depth Breakdown**\n\n    This class''s implementation is nearly identical to `ChatSessionManager`, but for a different domain.\n    *   **Singleton Implementation**: Standard private constructor and `getInstance()` method.\n    *   **`sessionsByFile` (Map)**: The central map where the key is the `fileId` (as a string) and the value is a `CopyOnWriteArraySet` of `Session` objects.\n    *   **`addSession(String fileId, Session session)`**: Adds a session to the room for a given file.\n    *   **`removeSession(String fileId, Session session)`**: Removes a session and cleans up the room if it becomes empty.\n    *   **`broadcastExcept(String fileId, String message, Session excludeSession)`**: Broadcasts a message (the new document content) to all clients editing the file *except* the client who sent the update.'),
('src/main/java/de/websocket/EventChatSocket.java', '1.  **File Overview & Purpose**\n\n    This class is the WebSocket endpoint that powers the real-time chat feature for events. It manages client connections for specific event chat rooms, processes incoming messages (new, edit, delete), persists them to the database, and broadcasts them to all participants in the room. It also handles advanced features like user mentions.\n\n2.  **Architectural Role**\n\n    This is a key component of the **Web/Controller Tier**. It provides the real-time communication layer for events. It interacts with the `ChatSessionManager` for session management and various DAOs (`EventChatDAO`, `EventDAO`, `UserDAO`) for data persistence and validation.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Uses static injection to receive DAO and service instances from Guice.\n    *   **Jakarta WebSocket API (`@ServerEndpoint`, etc.)**: The core WebSocket annotations.\n    *   `ChatSessionManager`: To manage sessions and broadcast messages.\n    *   `EventChatDAO`: To save, update, and delete messages in the database.\n    *   `EventDAO`: To verify user association with the event.\n    *   `UserDAO`: To look up users for mentions.\n    *   `NotificationService`: To send out-of-app notifications for mentions.\n    *   `MarkdownUtil`: For sanitizing message content.\n\n4.  **In-Depth Breakdown**\n\n    *   **`onOpen(...)`**: Handles new connections. It authorizes the user by checking if they are associated with the event (`eventDAO.isUserAssociatedWithEvent`). If so, it adds their session to the `ChatSessionManager`.\n    *   **`onMessage(...)`**: The main message router. It parses the incoming JSON message and delegates to a specific handler based on the message `type`.\n    *   **`handleNewMessage(...)`**: Sanitizes the message content, saves it to the database via `chatDAO.postMessage()`, broadcasts the saved message (now with an ID and timestamp) to all clients in the room, and calls `handleMentions()`.\n    *   **`handleUpdateMessage(...)`**: Handles a message edit request. It calls `chatDAO.updateMessage()`, which verifies that the user is the original author, and then broadcasts the update to all clients.\n    *   **`handleDeleteMessage(...)`**: Handles a message delete request. It calls `chatDAO.deleteMessage()`, which performs a soft delete and checks if the user is the author or an admin/leader. It then broadcasts a special `message_soft_deleted` event to clients.\n    *   **`handleMentions(...)`**: Parses the message text for `@username` patterns. For each valid mention of a user who is not the sender, it sends a targeted, out-of-app notification via the `NotificationService`.'),
('src/main/java/de/websocket/GetHttpSessionConfigurator.java', '1.  **File Overview & Purpose**\n\n    This is a custom WebSocket `ServerEndpointConfig.Configurator`. Its purpose is to intercept the WebSocket handshake process to extract the `HttpSession` from the initial HTTP upgrade request. It then retrieves the authenticated `User` object from the session and places it into the WebSocket session''s user properties map, making it accessible to the WebSocket endpoint''s methods (`@OnOpen`, `@OnMessage`, etc.).\n\n2.  **Architectural Role**\n\n    This is a critical **Infrastructure/Configuration** component for the WebSocket layer. It bridges the gap between the standard HTTP session-based authentication and the WebSocket protocol, enabling secure, authenticated WebSocket communication.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Jakarta WebSocket API (`ServerEndpointConfig.Configurator`)**: The base class it extends.\n    *   `User` (Model): The object it retrieves from the `HttpSession`.\n\n4.  **In-Depth Breakdown**\n\n    *   **`USER_PROPERTY_KEY`**: A static constant defining the key used to store the `User` object in the WebSocket session''s user properties.\n    *   **`servletContext`**: A static volatile field to hold a reference to the `ServletContext`, which is needed by the `GuiceAwareServerEndpointConfigurator`.\n    *   **`modifyHandshake(...)`**:\n        *   **Purpose:** This method is called by the WebSocket container during the handshake.\n        *   **Logic:**\n            1.  It accesses the `HttpSession` from the `HandshakeRequest`.\n            2.  If a session exists, it retrieves the `User` object stored under the attribute key `\"user\"`.\n            3.  If a `User` object is found, it adds it to the `ServerEndpointConfig`''s user properties map using the `USER_PROPERTY_KEY`. This makes the user object available within the WebSocket endpoint instance.\n            4.  It also caches a reference to the `ServletContext` for Guice integration.'),
('src/main/java/de/websocket/GuiceAwareServerEndpointConfigurator.java', '1.  **File Overview & Purpose**\n\n    This is a custom WebSocket `ServerEndpointConfig.Configurator` that integrates Google Guice with the Jakarta WebSocket lifecycle. Its primary function is to ensure that WebSocket endpoint instances (like `EventChatSocket`) are created by the Guice `Injector` instead of the container''s default mechanism. This allows for dependency injection into the WebSocket classes.\n\n2.  **Architectural Role**\n\n    This is a core **Infrastructure/Configuration** component that enables dependency injection for the WebSocket layer. It is declared on each `@ServerEndpoint` annotation (e.g., `@ServerEndpoint(value = \"/ws/chat/{eventId}\", configurator = GuiceAwareServerEndpointConfigurator.class)`).\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Guice (`com.google.inject.Injector`)**: The dependency injection container.\n    *   **Jakarta WebSocket API (`ServerEndpointConfig.Configurator`)**: The base class it extends.\n    *   `GetHttpSessionConfigurator`: It composes this configurator to also handle session extraction during the handshake.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getEndpointInstance(Class<T> endpointClass)`**:\n        *   **Purpose:** This method is called by the WebSocket container when it needs a new instance of an endpoint class. This override intercepts that call.\n        *   **Logic:**\n            1.  It retrieves the `ServletContext` (which was cached by `GetHttpSessionConfigurator`).\n            2.  It retrieves the Guice `Injector` from the `ServletContext` attributes (where it was placed by the `GuiceConfig` listener).\n            3.  It calls `injector.getInstance(endpointClass)` to have Guice create the endpoint instance. This handles constructor injection.\n            4.  It then calls `injector.injectMembers(instance)`. This crucial step performs member injection, including `@Inject` on static fields, which is the pattern used by the WebSocket endpoints in this project.\n        *   **Returns:** A fully dependency-injected instance of the WebSocket endpoint.\n\n    *   **`modifyHandshake(...)`**: This method is also overridden to ensure that the logic from `GetHttpSessionConfigurator` (extracting the user from the session) is also executed during the handshake process.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V21__Add_profile_picture_to_users.sql
========================================================================

-- Flyway migration V21: Add profile picture path to users table

ALTER TABLE `users`
ADD COLUMN `profile_picture_path` VARCHAR(255) DEFAULT NULL AFTER `theme`;

ALTER TABLE `profile_change_requests`
MODIFY COLUMN `requested_changes` LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL;
========================================================================
FILE: src\main\resources\db\migration\V22__Remove_Default_Admin_User.sql
========================================================================

-- Flyway migration V22: Remove the insecure, hardcoded default admin user

-- First remove permissions to avoid foreign key constraint issues.
DELETE up FROM user_permissions up
JOIN users u ON up.user_id = u.id
WHERE u.username = 'admin';

-- Then delete the user.
DELETE FROM users WHERE username = 'admin';
========================================================================
FILE: src\main\resources\db\migration\V23__Change_profile_picture_to_icon.sql
========================================================================

-- Flyway migration V23: Change profile picture from file path to icon class

ALTER TABLE `users`
DROP COLUMN `profile_picture_path`,
ADD COLUMN `profile_icon_class` VARCHAR(50) DEFAULT 'fa-user-circle' AFTER `theme`;
========================================================================
FILE: src\main\resources\db\migration\V24__Remove_passkey_feature.sql
========================================================================

-- Flyway migration V24: Remove the user_passkeys table and all related data.

DROP TABLE IF EXISTS `user_passkeys`;
========================================================================
FILE: src\main\resources\db\migration\V25__Add_notification_permission.sql
========================================================================

-- Flyway migration V25: Add permission for sending notifications

INSERT INTO `permissions` (`permission_key`, `description`)
VALUES ('NOTIFICATION_SEND', 'Kann systemweite Benachrichtigungen an Benutzer senden.');

-- Grant this new permission to the default admin user created on first startup
INSERT INTO user_permissions (user_id, permission_id)
SELECT 1, LAST_INSERT_ID()
WHERE EXISTS (SELECT 1 FROM users WHERE id = 1);
========================================================================
FILE: src\main\resources\db\migration\V26__Create_chat_tables.sql
========================================================================

-- Flyway migration V26: Add tables for the direct messaging feature

CREATE TABLE `chat_conversations` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `chat_participants` (
    `conversation_id` INT NOT NULL,
    `user_id` INT NOT NULL,
    PRIMARY KEY (`conversation_id`, `user_id`),
    FOREIGN KEY (`conversation_id`) REFERENCES `chat_conversations`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `chat_messages` (
    `id` BIGINT AUTO_INCREMENT PRIMARY KEY,
    `conversation_id` INT NOT NULL,
    `sender_id` INT NOT NULL,
    `message_text` TEXT NOT NULL,
    `sent_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`conversation_id`) REFERENCES `chat_conversations`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`sender_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V27__Add_group_chat_features.sql
========================================================================

-- Flyway migration V28: Enhance chat tables for group functionality and read receipts

-- Add columns to conversations table for group details
ALTER TABLE `chat_conversations`
    ADD COLUMN `is_group_chat` BOOLEAN NOT NULL DEFAULT FALSE AFTER `id`,
    ADD COLUMN `name` VARCHAR(100) DEFAULT NULL AFTER `is_group_chat`,
    ADD COLUMN `creator_id` INT DEFAULT NULL AFTER `name`,
    ADD CONSTRAINT `fk_chat_creator` FOREIGN KEY (`creator_id`) REFERENCES `users`(`id`) ON DELETE SET NULL;

-- Create a table to track read status of messages by user
CREATE TABLE `chat_message_read_status` (
    `message_id` BIGINT NOT NULL,
    `user_id` INT NOT NULL,
    `read_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`message_id`, `user_id`),
    FOREIGN KEY (`message_id`) REFERENCES `chat_messages`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V28__Create_scheduled_notifications.sql
========================================================================

-- Flyway migration V29: Add table for scheduled notifications

CREATE TABLE `scheduled_notifications` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `target_user_id` INT NOT NULL,
    `notification_type` VARCHAR(50) NOT NULL COMMENT 'e.g., EVENT_REMINDER',
    `related_entity_id` INT NOT NULL COMMENT 'e.g., the event_id',
    `send_at` TIMESTAMP NOT NULL,
    `title` VARCHAR(255) NOT NULL,
    `description` TEXT NOT NULL,
    `url` VARCHAR(512) NOT NULL,
    `status` ENUM('PENDING', 'SENT', 'ERROR') NOT NULL DEFAULT 'PENDING',
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    KEY `idx_send_at_status` (`send_at`, `status`),
    FOREIGN KEY (`target_user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V29__Create_damage_reports_table.sql
========================================================================

-- Flyway migration V29: Create table for user-submitted damage reports

CREATE TABLE `damage_reports` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `item_id` INT NOT NULL,
    `reporter_user_id` INT NOT NULL,
    `report_description` TEXT NOT NULL,
    `reported_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `status` ENUM('PENDING', 'CONFIRMED', 'REJECTED') NOT NULL DEFAULT 'PENDING',
    `reviewed_by_admin_id` INT NULL,
    `reviewed_at` TIMESTAMP NULL,
    `admin_notes` TEXT NULL,
    FOREIGN KEY (`item_id`) REFERENCES `storage_items`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`reporter_user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`reviewed_by_admin_id`) REFERENCES `users`(`id`) ON DELETE SET NULL,
    INDEX `idx_damage_reports_status` (`status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V2__Add_keys_and_indexes.sql
========================================================================

-- Flyway migration V2: Add all primary keys, unique constraints, and indexes.

START TRANSACTION;

ALTER TABLE `achievements` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `achievement_key` (`achievement_key`);
ALTER TABLE `admin_logs` ADD PRIMARY KEY (`id`), ADD KEY `fk_admin_log_revoked_by` (`revoked_by_admin_id`);
ALTER TABLE `attachments` ADD PRIMARY KEY (`id`), ADD KEY `idx_attachments_parent` (`parent_type`,`parent_id`);
ALTER TABLE `courses` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`), ADD UNIQUE KEY `abbreviation` (`abbreviation`);
ALTER TABLE `course_attendance` ADD PRIMARY KEY (`user_id`,`course_id`), ADD KEY `course_id` (`course_id`);
ALTER TABLE `events` ADD PRIMARY KEY (`id`), ADD KEY `fk_event_leader` (`leader_user_id`);
ALTER TABLE `event_assignments` ADD PRIMARY KEY (`assignment_id`), ADD UNIQUE KEY `unique_assignment` (`event_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `event_attendance` ADD PRIMARY KEY (`user_id`,`event_id`), ADD KEY `event_id` (`event_id`);
ALTER TABLE `event_chat_messages` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`), ADD KEY `event_chat_messages_ibfk_2` (`user_id`);
ALTER TABLE `event_custom_fields` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`);
ALTER TABLE `event_custom_field_responses` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `field_id` (`field_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `event_skill_requirements` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`), ADD KEY `required_course_id` (`required_course_id`);
ALTER TABLE `event_storage_reservations` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `unique_event_item` (`event_id`,`item_id`), ADD KEY `item_id` (`item_id`);
ALTER TABLE `event_tasks` ADD PRIMARY KEY (`id`), ADD KEY `event_id` (`event_id`);
ALTER TABLE `event_task_assignments` ADD PRIMARY KEY (`task_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `event_task_kits` ADD PRIMARY KEY (`task_id`,`kit_id`), ADD KEY `kit_id` (`kit_id`);
ALTER TABLE `event_task_storage_items` ADD PRIMARY KEY (`task_id`,`item_id`), ADD KEY `item_id` (`item_id`);
ALTER TABLE `feedback_forms` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `event_id_unique` (`event_id`);
ALTER TABLE `feedback_responses` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `form_user_unique` (`form_id`,`user_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `feedback_submissions` ADD PRIMARY KEY (`id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `files` ADD PRIMARY KEY (`id`), ADD KEY `category_id` (`category_id`);
ALTER TABLE `file_categories` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`);
ALTER TABLE `inventory_kits` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `name` (`name`);
ALTER TABLE `inventory_kit_items` ADD PRIMARY KEY (`kit_id`,`item_id`), ADD KEY `item_id` (`item_id`);
ALTER TABLE `login_attempts` ADD PRIMARY KEY (`username`);
ALTER TABLE `maintenance_log` ADD PRIMARY KEY (`id`), ADD KEY `item_id` (`item_id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `meetings` ADD PRIMARY KEY (`id`), ADD KEY `course_id` (`course_id`), ADD KEY `fk_meeting_leader` (`leader_user_id`);
ALTER TABLE `meeting_attendance` ADD PRIMARY KEY (`user_id`,`meeting_id`), ADD KEY `meeting_id` (`meeting_id`);
ALTER TABLE `permissions` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `permission_key_unique` (`permission_key`);
ALTER TABLE `profile_change_requests` ADD PRIMARY KEY (`id`), ADD KEY `user_id` (`user_id`), ADD KEY `status` (`status`), ADD KEY `profile_change_requests_ibfk_2` (`reviewed_by_admin_id`);
ALTER TABLE `roles` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `role_name_unique` (`role_name`);
ALTER TABLE `shared_documents` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `document_name` (`document_name`);
ALTER TABLE `storage_items` ADD PRIMARY KEY (`id`), ADD KEY `fk_holder_user` (`current_holder_user_id`), ADD KEY `fk_assigned_event` (`assigned_event_id`);
ALTER TABLE `storage_log` ADD PRIMARY KEY (`id`), ADD KEY `item_id` (`item_id`), ADD KEY `user_id` (`user_id`), ADD KEY `fk_log_event` (`event_id`);
ALTER TABLE `todo_categories` ADD KEY `idx_todo_categories_display_order` (`display_order`);
ALTER TABLE `todo_tasks` ADD KEY `idx_todo_tasks_display_order` (`display_order`);
ALTER TABLE `users` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `username` (`username`), ADD UNIQUE KEY `email` (`email`), ADD KEY `fk_user_role` (`role_id`);
ALTER TABLE `user_achievements` ADD PRIMARY KEY (`user_id`,`achievement_id`), ADD KEY `achievement_id` (`achievement_id`);
ALTER TABLE `user_passkeys` ADD PRIMARY KEY (`id`), ADD KEY `user_id` (`user_id`);
ALTER TABLE `user_permissions` ADD PRIMARY KEY (`user_id`,`permission_id`), ADD KEY `permission_id` (`permission_id`);
ALTER TABLE `user_qualifications` ADD PRIMARY KEY (`user_id`,`course_id`), ADD KEY `course_id` (`course_id`);
ALTER TABLE `wiki_documentation` ADD PRIMARY KEY (`id`), ADD UNIQUE KEY `idx_wiki_file_path` (`file_path`);

-- Add all auto-increment settings
ALTER TABLE `achievements` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `admin_logs` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `attachments` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `courses` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `events` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_assignments` MODIFY `assignment_id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_chat_messages` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_custom_fields` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_custom_field_responses` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_skill_requirements` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_storage_reservations` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `event_tasks` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `feedback_forms` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `feedback_responses` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `feedback_submissions` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `files` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `file_categories` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `inventory_kits` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `maintenance_log` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `meetings` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `permissions` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `profile_change_requests` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `roles` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `shared_documents` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `storage_items` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `storage_log` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `users` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `user_passkeys` MODIFY `id` INT NOT NULL AUTO_INCREMENT;
ALTER TABLE `wiki_documentation` MODIFY `id` INT NOT NULL AUTO_INCREMENT;

COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V30__Add_damage_report_permission.sql
========================================================================

-- Flyway migration V30: Add permission for managing damage reports

INSERT INTO `permissions` (`permission_key`, `description`)
VALUES ('DAMAGE_REPORT_MANAGE', 'Kann von Benutzern gemeldete Schäden einsehen und bearbeiten.');

-- Grant this new permission to the default admin user created on first startup
INSERT INTO user_permissions (user_id, permission_id)
SELECT 1, LAST_INSERT_ID()
WHERE EXISTS (SELECT 1 FROM users WHERE id = 1);
========================================================================
FILE: src\main\resources\db\migration\V31__Create_event_debriefings_table.sql
========================================================================

-- Flyway migration V31: Create table for post-event debriefing reports

CREATE TABLE `event_debriefings` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `event_id` INT NOT NULL,
    `author_user_id` INT NOT NULL,
    `submitted_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `what_went_well` TEXT NULL,
    `what_to_improve` TEXT NULL,
    `equipment_notes` TEXT NULL,
    `standout_crew_members` TEXT NULL COMMENT 'JSON array of user IDs',
    UNIQUE KEY `uk_event_debriefing_event_id` (`event_id`),
    FOREIGN KEY (`event_id`) REFERENCES `events`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`author_user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V32__Add_debriefing_permissions.sql
========================================================================

-- Flyway migration V32: Add permissions for event debriefings

INSERT INTO `permissions` (`permission_key`, `description`)
VALUES
    ('EVENT_DEBRIEFING_VIEW', 'Kann alle abgeschlossenen Event-Debriefings einsehen.'),
    ('EVENT_DEBRIEFING_MANAGE', 'Kann Debriefings für Events erstellen und bearbeiten, auch wenn nicht Event-Leiter.');

-- Grant this new permission to the default admin user created on first startup
INSERT INTO user_permissions (user_id, permission_id)
SELECT 1, p.id FROM permissions p
WHERE p.permission_key IN ('EVENT_DEBRIEFING_VIEW', 'EVENT_DEBRIEFING_MANAGE')
AND EXISTS (SELECT 1 FROM users WHERE id = 1);
========================================================================
FILE: src\main\resources\db\migration\V33__Add_task_dependencies.sql
========================================================================

-- Flyway migration V33: Add table for event task dependencies

CREATE TABLE `event_task_dependencies` (
    `task_id` INT NOT NULL,
    `depends_on_task_id` INT NOT NULL,
    PRIMARY KEY (`task_id`, `depends_on_task_id`),
    FOREIGN KEY (`task_id`) REFERENCES `event_tasks`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`depends_on_task_id`) REFERENCES `event_tasks`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V34__Add_message_status.sql
========================================================================

-- Flyway migration V34: Add status tracking to chat messages for read receipts

ALTER TABLE `chat_messages`
ADD COLUMN `status` ENUM('SENT', 'DELIVERED', 'READ') NOT NULL DEFAULT 'SENT' AFTER `message_text`;

-- Add an index for performance on status updates

ALTER TABLE `chat_messages` ADD INDEX `idx_chat_messages_conversation_status` (`conversation_id`, `status`);
========================================================================
FILE: src\main\resources\db\migration\V35__Add_dm_message_edit_delete.sql
========================================================================

-- Flyway migration V35: Add edit and delete tracking to direct messages

ALTER TABLE `chat_messages`
ADD COLUMN `edited` BOOLEAN NOT NULL DEFAULT FALSE AFTER `status`,
ADD COLUMN `is_deleted` BOOLEAN NOT NULL DEFAULT FALSE AFTER `edited`,
ADD COLUMN `deleted_at` TIMESTAMP NULL DEFAULT NULL AFTER `is_deleted`,
ADD COLUMN `deleted_by_user_id` INT NULL AFTER `deleted_at`,
ADD CONSTRAINT `fk_chat_message_deleted_by` FOREIGN KEY (`deleted_by_user_id`) REFERENCES `users`(`id`) ON DELETE SET NULL;
========================================================================
FILE: src\main\resources\db\migration\V36__Add_edit_timestamp_to_chats.sql
========================================================================

-- Flyway migration V36: Add edited_at timestamp to chat messages

ALTER TABLE `event_chat_messages`
ADD COLUMN `edited_at` TIMESTAMP NULL DEFAULT NULL AFTER `edited`;

ALTER TABLE `chat_messages`
ADD COLUMN `edited_at` TIMESTAMP NULL DEFAULT NULL AFTER `edited`;
========================================================================
FILE: src\main\resources\db\migration\V37__Create_event_inventory_checklist.sql
========================================================================

-- Flyway migration V37: Add table for event inventory checklists

CREATE TABLE `event_inventory_checklist` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `event_id` INT NOT NULL,
    `item_id` INT NOT NULL,
    `quantity` INT NOT NULL,
    `status` ENUM('PENDING', 'PACKED_OUT', 'RETURNED_CHECKED', 'RETURNED_DEFECT') NOT NULL DEFAULT 'PENDING',
    `last_updated_by_user_id` INT NULL,
    `last_updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY `uk_event_item` (`event_id`, `item_id`),
    FOREIGN KEY (`event_id`) REFERENCES `events`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`item_id`) REFERENCES `storage_items`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`last_updated_by_user_id`) REFERENCES `users`(`id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V38__Add_admin_notes_to_users.sql
========================================================================

-- Flyway migration V38: Add admin-only notes field to users table

ALTER TABLE `users`
ADD COLUMN `admin_notes` TEXT NULL DEFAULT NULL AFTER `profile_icon_class`;
========================================================================
FILE: src\main\resources\db\migration\V39__Create_event_roles.sql
========================================================================

-- Flyway migration V39: Create table for event roles and modify assignments

-- Step 1: Create the new event_roles table
CREATE TABLE `event_roles` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(100) NOT NULL UNIQUE,
    `description` TEXT NULL,
    `icon_class` VARCHAR(50) DEFAULT 'fa-user-tag',
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Step 2: Add role_id column to the event_assignments table
ALTER TABLE `event_assignments`
ADD COLUMN `role_id` INT NULL AFTER `user_id`,
ADD CONSTRAINT `fk_assignment_role` FOREIGN KEY (`role_id`) REFERENCES `event_roles`(`id`) ON DELETE SET NULL;

-- Step 3: Ensure one user can't have multiple roles in the same event by modifying the unique constraint
-- This might drop the old key and add a new one
ALTER TABLE `event_assignments`
DROP INDEX `unique_assignment`,
ADD UNIQUE KEY `uk_event_user_assignment` (`event_id`, `user_id`);
========================================================================
FILE: src\main\resources\db\migration\V3__Add_foreign_keys.sql
========================================================================

-- Flyway migration V3: Add all foreign key constraints.

START TRANSACTION;

ALTER TABLE `course_attendance`
  ADD CONSTRAINT `course_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `course_attendance_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

ALTER TABLE `events`
  ADD CONSTRAINT `fk_event_leader` FOREIGN KEY (`leader_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

ALTER TABLE `event_assignments`
  ADD CONSTRAINT `event_assignments_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_assignments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_attendance`
  ADD CONSTRAINT `event_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_attendance_ibfk_2` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_chat_messages`
  ADD CONSTRAINT `event_chat_messages_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_chat_messages_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_custom_fields`
  ADD CONSTRAINT `event_custom_fields_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_custom_field_responses`
  ADD CONSTRAINT `event_custom_field_responses_ibfk_1` FOREIGN KEY (`field_id`) REFERENCES `event_custom_fields` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_custom_field_responses_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_skill_requirements`
  ADD CONSTRAINT `event_skill_requirements_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_skill_requirements_ibfk_2` FOREIGN KEY (`required_course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_storage_reservations`
  ADD CONSTRAINT `event_storage_reservations_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_storage_reservations_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_tasks`
  ADD CONSTRAINT `event_tasks_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_task_assignments`
  ADD CONSTRAINT `event_task_assignments_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_assignments_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_task_kits`
  ADD CONSTRAINT `event_task_kits_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_kits_ibfk_2` FOREIGN KEY (`kit_id`) REFERENCES `inventory_kits` (`id`) ON DELETE CASCADE;

ALTER TABLE `event_task_storage_items`
  ADD CONSTRAINT `event_task_storage_items_ibfk_1` FOREIGN KEY (`task_id`) REFERENCES `event_tasks` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `event_task_storage_items_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

ALTER TABLE `feedback_forms`
  ADD CONSTRAINT `feedback_forms_ibfk_1` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE CASCADE;

ALTER TABLE `feedback_responses`
  ADD CONSTRAINT `feedback_responses_ibfk_1` FOREIGN KEY (`form_id`) REFERENCES `feedback_forms` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `feedback_responses_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `feedback_submissions`
  ADD CONSTRAINT `feedback_submissions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `files`
  ADD CONSTRAINT `files_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `file_categories` (`id`) ON DELETE SET NULL;

ALTER TABLE `inventory_kit_items`
  ADD CONSTRAINT `inventory_kit_items_ibfk_1` FOREIGN KEY (`kit_id`) REFERENCES `inventory_kits` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `inventory_kit_items_ibfk_2` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE;

ALTER TABLE `maintenance_log`
  ADD CONSTRAINT `maintenance_log_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `maintenance_log_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);

ALTER TABLE `meetings`
  ADD CONSTRAINT `fk_meeting_leader` FOREIGN KEY (`leader_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `meetings_ibfk_1` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

ALTER TABLE `meeting_attendance`
  ADD CONSTRAINT `meeting_attendance_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `meeting_attendance_ibfk_2` FOREIGN KEY (`meeting_id`) REFERENCES `meetings` (`id`) ON DELETE CASCADE;

ALTER TABLE `profile_change_requests`
  ADD CONSTRAINT `profile_change_requests_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `profile_change_requests_ibfk_2` FOREIGN KEY (`reviewed_by_admin_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

ALTER TABLE `storage_items`
  ADD CONSTRAINT `fk_assigned_event` FOREIGN KEY (`assigned_event_id`) REFERENCES `events` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `fk_holder_user` FOREIGN KEY (`current_holder_user_id`) REFERENCES `users` (`id`) ON DELETE SET NULL;

ALTER TABLE `storage_log`
  ADD CONSTRAINT `fk_log_event` FOREIGN KEY (`event_id`) REFERENCES `events` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `storage_log_ibfk_1` FOREIGN KEY (`item_id`) REFERENCES `storage_items` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `storage_log_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `todo_tasks`
    ADD CONSTRAINT `fk_todo_category` FOREIGN KEY (`category_id`) REFERENCES `todo_categories`(`id`) ON DELETE CASCADE;

ALTER TABLE `users`
  ADD CONSTRAINT `fk_user_role` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE SET NULL;

ALTER TABLE `user_achievements`
  ADD CONSTRAINT `user_achievements_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_achievements_ibfk_2` FOREIGN KEY (`achievement_id`) REFERENCES `achievements` (`id`) ON DELETE CASCADE;

ALTER TABLE `user_passkeys`
  ADD CONSTRAINT `user_passkeys_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;

ALTER TABLE `user_permissions`
  ADD CONSTRAINT `user_permissions_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_permissions_ibfk_2` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE;

ALTER TABLE `user_qualifications`
  ADD CONSTRAINT `user_qualifications_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `user_qualifications_ibfk_2` FOREIGN KEY (`course_id`) REFERENCES `courses` (`id`) ON DELETE CASCADE;

COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V40__Populate_default_event_roles.sql
========================================================================

-- Flyway migration V40: Populate with some default event roles

INSERT INTO `event_roles` (`name`, `description`, `icon_class`) VALUES
('Event-Leitung', 'Gesamtverantwortlicher für die Veranstaltung.', 'fa-user-tie'),
('Audio-Technik', 'Verantwortlich für Mikrofone, Mischpult und Beschallung.', 'fa-sliders-h'),
('Licht-Technik', 'Verantwortlich für Scheinwerfer, Lichtpult und Beleuchtung.', 'fa-lightbulb'),
('Video-Technik', 'Verantwortlich für Kameras, Projektoren und Videomischung.', 'fa-video'),
('Bühnenhelfer', 'Allgemeine Unterstützung auf und hinter der Bühne.', 'fa-users');

========================================================================
FILE: src\main\resources\db\migration\V41__Create_venues_table.sql
========================================================================

-- Flyway migration V41: Create venues table and link to events

CREATE TABLE `venues` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(150) NOT NULL UNIQUE,
    `address` VARCHAR(255) NULL,
    `notes` TEXT NULL,
    `map_image_path` VARCHAR(255) NULL,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

ALTER TABLE `events`
ADD COLUMN `venue_id` INT NULL AFTER `location`,
ADD CONSTRAINT `fk_event_venue` FOREIGN KEY (`venue_id`) REFERENCES `venues`(`id`) ON DELETE SET NULL;
========================================================================
FILE: src\main\resources\db\migration\V42__Create_changelog_table.sql
========================================================================

-- Flyway migration V42: Create table for changelogs

CREATE TABLE `changelogs` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `version` VARCHAR(50) NOT NULL UNIQUE,
    `release_date` DATE NOT NULL,
    `title` VARCHAR(255) NOT NULL,
    `notes` TEXT NOT NULL,
    `is_published` BOOLEAN NOT NULL DEFAULT FALSE,
    `seen_by_users` JSON DEFAULT ('[]'),
    INDEX `idx_changelog_published_date` (`is_published`, `release_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V43__Add_announcement_flag_to_chat.sql
========================================================================

-- Flyway migration V43: Add announcement flag to event chat messages

ALTER TABLE `event_chat_messages`
ADD COLUMN `is_announcement` BOOLEAN NOT NULL DEFAULT FALSE AFTER `message_text`;
========================================================================
FILE: src\main\resources\db\migration\V44__Add_user_dashboard_layout.sql
========================================================================

-- Flyway migration V44: Add dashboard layout preference to users table

ALTER TABLE `users`
ADD COLUMN `dashboard_layout` JSON NULL AFTER `admin_notes`;
========================================================================
FILE: src\main\resources\db\migration\V45__Create_preflight_checklists.sql
========================================================================

-- Flyway migration V45: Create tables for pre-flight checklists

-- Table for reusable checklist templates
CREATE TABLE `preflight_checklist_templates` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(150) NOT NULL UNIQUE,
    `description` TEXT NULL,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Table for the items within a template
CREATE TABLE `preflight_checklist_items` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `template_id` INT NOT NULL,
    `item_text` VARCHAR(255) NOT NULL,
    `display_order` INT NOT NULL DEFAULT 0,
    FOREIGN KEY (`template_id`) REFERENCES `preflight_checklist_templates`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Link a template to an event
ALTER TABLE `events`
ADD COLUMN `preflight_template_id` INT NULL AFTER `venue_id`,
ADD CONSTRAINT `fk_event_preflight_template` FOREIGN KEY (`preflight_template_id`) REFERENCES `preflight_checklist_templates`(`id`) ON DELETE SET NULL;

-- Table to track the status of each checklist item for a specific event
CREATE TABLE `event_preflight_checklist_status` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `event_id` INT NOT NULL,
    `item_id` INT NOT NULL,
    `is_completed` BOOLEAN NOT NULL DEFAULT FALSE,
    `completed_by_user_id` INT NULL,
    `completed_at` TIMESTAMP NULL,
    UNIQUE KEY `uk_event_item_status` (`event_id`, `item_id`),
    FOREIGN KEY (`event_id`) REFERENCES `events`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`item_id`) REFERENCES `preflight_checklist_items`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`completed_by_user_id`) REFERENCES `users`(`id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V46__Remove_changelog_draft_feature.sql
========================================================================

-- Flyway migration V46: Simplify changelogs by removing the draft/published feature

ALTER TABLE `changelogs`
DROP COLUMN `is_published`;
========================================================================
FILE: src\main\resources\db\migration\V47__Add_category_to_storage.sql
========================================================================

-- Flyway migration V47: Add category field to storage items for better filtering

ALTER TABLE `storage_items`
ADD COLUMN `category` VARCHAR(100) NULL DEFAULT NULL AFTER `compartment`;

-- Add an index for faster filtering by category
ALTER TABLE `storage_items`
ADD INDEX `idx_storage_item_category` (`category`);
========================================================================
FILE: src\main\resources\db\migration\V49__Create_announcements_table.sql
========================================================================

-- Flyway migration V49: Create table for the digital bulletin board

CREATE TABLE `announcements` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `title` VARCHAR(255) NOT NULL,
    `content` TEXT NOT NULL,
    `author_user_id` INT NOT NULL,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`author_user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V4__Add_initial_data.sql
========================================================================

-- Flyway migration V4: Add essential seed data.

-- Add default roles
INSERT INTO `roles` (`id`, `role_name`) VALUES (1, 'ADMIN'), (2, 'NUTZER');

-- Add all permissions
INSERT INTO `permissions` (`id`, `permission_key`, `description`) VALUES
(1, 'ACCESS_ADMIN_PANEL', 'Globaler Zugriff auf alle Admin-Funktionen. Überschreibt alle anderen Berechtigungen.'),
(2, 'USER_CREATE', 'Kann neue Benutzer anlegen.'),
(3, 'USER_READ', 'Kann Benutzerliste und -details einsehen.'),
(4, 'USER_UPDATE', 'Kann Benutzerprofile und deren Berechtigungen bearbeiten.'),
(5, 'USER_DELETE', 'Kann Benutzer löschen.'),
(6, 'USER_PASSWORD_RESET', 'Kann Passwörter anderer Benutzer zurücksetzen.'),
(7, 'EVENT_CREATE', 'Kann neue Events erstellen.'),
(8, 'EVENT_READ', 'Kann die Event-Verwaltungsliste einsehen.'),
(9, 'EVENT_UPDATE', 'Kann bestehende Events bearbeiten (Details, Personalbedarf, Material).'),
(10, 'EVENT_DELETE', 'Kann Events löschen.'),
(11, 'EVENT_MANAGE_ASSIGNMENTS', 'Kann Benutzer zu Events zuweisen.'),
(12, 'EVENT_MANAGE_TASKS', 'Kann Aufgaben innerhalb eines Events erstellen, bearbeiten und löschen.'),
(13, 'COURSE_CREATE', 'Kann neue Lehrgangs-Vorlagen erstellen.'),
(14, 'COURSE_READ', 'Kann Lehrgangs-Vorlagen und deren Termine einsehen.'),
(15, 'COURSE_UPDATE', 'Kann Lehrgangs-Vorlagen bearbeiten.'),
(16, 'COURSE_DELETE', 'Kann Lehrgangs-Vorlagen löschen.'),
(17, 'STORAGE_CREATE', 'Kann neue Lagerartikel anlegen.'),
(18, 'STORAGE_READ', 'Kann die Lager-Verwaltungsliste einsehen.'),
(19, 'STORAGE_UPDATE', 'Kann Lagerartikel bearbeiten, inkl. Defekt-Status.'),
(20, 'STORAGE_DELETE', 'Kann Lagerartikel löschen.'),
(21, 'KIT_CREATE', 'Kann neue Material-Kits/Koffer erstellen.'),
(22, 'KIT_READ', 'Kann die Kit-Verwaltungsliste einsehen.'),
(23, 'KIT_UPDATE', 'Kann Kits und deren Inhalte bearbeiten.'),
(24, 'KIT_DELETE', 'Kann Kits löschen.'),
(25, 'QUALIFICATION_READ', 'Kann die Qualifikations-Matrix einsehen.'),
(26, 'QUALIFICATION_UPDATE', 'Kann Teilnahme und Qualifikationen in der Matrix bearbeiten.'),
(27, 'FILE_CREATE', 'Kann Dateien hochladen und Kategorien erstellen.'),
(28, 'FILE_READ', 'Kann die Datei-Verwaltungsseite einsehen.'),
(29, 'FILE_DELETE', 'Kann Dateien und Kategorien löschen.'),
(30, 'LOG_READ', 'Kann das Admin-Aktionsprotokoll einsehen.'),
(31, 'REPORT_READ', 'Kann die Berichts- und Analyse-Seite einsehen.'),
(32, 'SYSTEM_READ', 'Kann die Systemstatus-Seite einsehen.'),
(33, 'ACHIEVEMENT_CREATE', 'Kann neue Erfolge und Abzeichen erstellen.'),
(34, 'ACHIEVEMENT_UPDATE', 'Kann bestehende Erfolge und Abzeichen bearbeiten.'),
(35, 'ACHIEVEMENT_DELETE', 'Kann Erfolge und Abzeichen löschen.'),
(36, 'FILE_MANAGE', 'Kann die Datei-Verwaltungsseite einsehen und grundlegende Operationen durchführen.'),
(37, 'FILE_UPDATE', 'Kann den Inhalt von Dateien (z.B. im Markdown-Editor) bearbeiten und neue Versionen hochladen.'),
(38, 'ACHIEVEMENT_VIEW', 'Ermöglicht das Anzeigen des Admin-Menüpunkts für Abzeichen.'),
(39, 'ADMIN_DASHBOARD_ACCESS', 'Ermöglicht das Anzeigen des Admin-Menüpunkts für das Dashboard.');
========================================================================
FILE: src\main\resources\db\migration\V50__Create_training_requests.sql
========================================================================

-- Flyway migration V50: Create tables for user-initiated training requests

CREATE TABLE `training_requests` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `topic` VARCHAR(255) NOT NULL,
    `requester_user_id` INT NOT NULL,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`requester_user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `training_request_interest` (
    `request_id` INT NOT NULL,
    `user_id` INT NOT NULL,
    `registered_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (`request_id`, `user_id`),
    FOREIGN KEY (`request_id`) REFERENCES `training_requests`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V51__Create_event_galleries.sql
========================================================================

-- Flyway migration V51: Create tables for event photo galleries

CREATE TABLE `event_photos` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `event_id` INT NOT NULL,
    `file_id` INT NOT NULL,
    `uploader_user_id` INT NOT NULL,
    `caption` VARCHAR(255) NULL,
    `uploaded_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`event_id`) REFERENCES `events`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`file_id`) REFERENCES `files`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`uploader_user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V52__Create_related_items.sql
========================================================================

-- Flyway migration V52: Create table for related storage items

CREATE TABLE `storage_item_relations` (
    `item_id` INT NOT NULL,
    `related_item_id` INT NOT NULL,
    PRIMARY KEY (`item_id`, `related_item_id`),
    FOREIGN KEY (`item_id`) REFERENCES `storage_items`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`related_item_id`) REFERENCES `storage_items`(`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
========================================================================
FILE: src\main\resources\db\migration\V53__Create_page_documentation.sql
========================================================================

-- Flyway migration V53: Create table for page documentation

CREATE TABLE `page_documentation` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `page_key` VARCHAR(100) NOT NULL UNIQUE COMMENT 'e.g., "dashboard", "admin_users"',
    `title` VARCHAR(255) NOT NULL,
    `page_path` VARCHAR(255) NOT NULL COMMENT 'The frontend route, e.g., "/home"',
    `features` TEXT NOT NULL COMMENT 'Markdown-enabled description of features',
    `related_pages` TEXT NULL COMMENT 'JSON array of related page keys',
    `admin_only` BOOLEAN NOT NULL DEFAULT FALSE,
    `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Add a new permission for managing this documentation
INSERT INTO `permissions` (`permission_key`, `description`)
VALUES ('DOCUMENTATION_MANAGE', 'Kann die Hilfs- und Dokumentationsseiten der Anwendung bearbeiten.');
========================================================================
FILE: src\main\resources\db\migration\V54__Link_page_docs_to_wiki.sql
========================================================================

-- Flyway migration V54: Add a foreign key to link page documentation to the technical wiki

ALTER TABLE `page_documentation`
ADD COLUMN `wiki_entry_id` INT NULL DEFAULT NULL AFTER `admin_only`,
ADD CONSTRAINT `fk_pagedoc_wiki` FOREIGN KEY (`wiki_entry_id`) REFERENCES `wiki_documentation`(`id`) ON DELETE SET NULL;
========================================================================
FILE: src\main\resources\db\migration\V55__Populate_page_documentation_user.sql
========================================================================

-- Flyway migration V55: Populate user-facing page documentation

INSERT INTO `page_documentation` (`page_key`, `title`, `page_path`, `features`, `related_pages`, `admin_only`, `wiki_entry_id`) VALUES
('dashboard', 'Dashboard', '/home',
'## Features
- **Meine nächsten Einsätze:** Zeigt eine Liste der kommenden Veranstaltungen, für die du fest eingeteilt bist.
- **Meine offenen Aufgaben:** Listet alle dir zugewiesenen Aufgaben aus laufenden Events auf.
- **Für Dich empfohlen:** Schlägt dir Events vor, für die du qualifiziert bist, aber noch nicht angemeldet bist.
- **Weitere anstehende Veranstaltungen:** Eine allgemeine Liste kommender Events.

## Use Cases
- Erhalte einen schnellen Überblick über deine anstehenden Verpflichtungen.
- Behalte den Überblick über deine Aufgaben während eines Events.
- Finde neue Möglichkeiten, dich im Team zu engagieren.',
'["events", "lehrgaenge", "profile"]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/service/AdminDashboardService.java')),

('team_directory', 'Team-Verzeichnis', '/team',
'## Features
- **Mitgliederliste:** Zeigt eine Liste aller aktuellen Mitglieder des Technik-Teams.
- **Suche:** Ermöglicht die schnelle Suche nach einem bestimmten Mitglied.
- **Crew-Karte:** Per Klick auf ein Mitglied kann dessen "Crew-Karte" mit Qualifikationen und Erfolgen eingesehen werden.

## Use Cases
- Lerne neue Mitglieder kennen.
- Finde schnell heraus, wer im Team welche Fähigkeiten besitzt.
- Event-Leiter können sich einen schnellen Überblick über die Kompetenzen ihrer Teammitglieder verschaffen.',
'["profile"]',
0, NULL),

('chat', 'Chat', '/chat',
'## Features
- **1-zu-1-Gespräche:** Führe private Chats mit anderen Team-Mitgliedern.
- **Gruppenchats:** Erstelle oder nimm an Gruppenchats für spezifische Themen oder Events teil.
- **Echtzeit-Kommunikation:** Nachrichten werden in Echtzeit zugestellt.
- **Lesebestätigungen:** Sieh, ob deine Nachricht zugestellt und gelesen wurde.
- **Nachrichten bearbeiten & löschen:** Korrigiere Tippfehler oder entferne Nachrichten.

## Use Cases
- Schnelle Absprachen mit anderen Mitgliedern.
- Koordination in kleineren Gruppen für spezifische Projekte.
- Informeller Austausch im Team.',
'[]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/websocket/ChatWebSocketHandler.java')),

('lehrgaenge', 'Lehrgänge', '/lehrgaenge',
'## Features
- **Übersicht:** Listet alle anstehenden Lehrgänge, Kurse und Meetings auf.
- **An- und Abmeldung:** Melde dich mit einem Klick für einen Termin an oder ab.
- **Statusanzeige:** Sieh auf einen Blick, für welche Termine du angemeldet bist.
- **Lehrgang anfragen:** Schlage ein Thema für einen neuen Lehrgang vor, wenn du etwas Bestimmtes lernen möchtest.

## Use Cases
- Erwerbe neue Qualifikationen, um an mehr Events teilnehmen zu können.
- Behalte den Überblick über alle Fortbildungsmöglichkeiten.
- Gib den Admins Feedback, welche Themen für das Team interessant sind.',
'["dashboard", "profile", "calendar"]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/dao/MeetingDAO.java')),

('events', 'Veranstaltungen', '/veranstaltungen',
'## Features
- **Event-Übersicht:** Zeigt alle kommenden Veranstaltungen an.
- **Qualifikations-Check:** Zeigt dir an, ob du die nötigen Qualifikationen für ein Event besitzt.
- **An- und Abmeldung:** Melde dich für Events an, für die du qualifiziert bist.
- **Status-Tracking:** Verfolge deinen aktuellen Status für jedes Event (z.B. Angemeldet, Zugewiesen).

## Use Cases
- Finde heraus, bei welchen Events du mitarbeiten kannst.
- Melde deine Verfügbarkeit für anstehende Veranstaltungen.',
'["dashboard", "profile", "calendar"]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/dao/EventDAO.java')),

('storage', 'Lager', '/lager',
'## Features
- **Inventarübersicht:** Listet das gesamte verfügbare Equipment auf, gruppiert nach Lagerort.
- **Live-Suche & Filter:** Finde schnell Artikel über die Suche oder filtere nach Kategorie und Verfügbarkeitsstatus.
- **Warenkorb-System:** Füge mehrere Artikel zu einem Warenkorb hinzu, um sie gesammelt zu entnehmen oder einzuräumen.
- **Detailansicht:** Klicke auf einen Artikel, um dessen Details, Verlauf und zukünftige Reservierungen zu sehen.

## Use Cases
- Überprüfe die Verfügbarkeit von Equipment für ein Event oder ein persönliches Projekt.
- Bereite eine Materialliste vor und buche alles mit einer einzigen Transaktion aus.
- Finde schnell heraus, wo ein bestimmter Artikel gelagert wird.',
'["storage_details"]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/dao/StorageDAO.java')),

('storage_details', 'Lagerartikel Details', '/lager/details/:itemId',
'## Features
- **Detailinformationen:** Zeigt alle Daten zu einem Artikel, inklusive Gesamtmenge, verfügbarer Menge und Defektstatus.
- **Verlauf (Transaktionen):** Eine lückenlose Historie, wer den Artikel wann entnommen oder zurückgebracht hat.
- **Wartungshistorie:** Ein Protokoll aller Reparaturen und Wartungsarbeiten.
- **Verfügbarkeitskalender:** Ein Kalender, der anzeigt, an welchen zukünftigen Tagen der Artikel für Events reserviert ist.
- **Zubehör/Verknüpfte Artikel:** Zeigt eine Liste von Artikeln, die oft zusammen mit diesem Gerät benötigt werden.
- **Schaden melden:** Ermöglicht es, einen Defekt direkt am Artikel zu melden.

## Use Cases
- Verfolge den Weg eines Artikels nach.
- Überprüfe, ob ein Artikel für ein zukünftiges Datum verfügbar ist.
- Stelle sicher, dass du alle notwendigen Zubehörteile für einen Artikel mitnimmst.',
'["storage"]',
0, NULL),

('files', 'Dateien', '/dateien',
'## Features
- **Zentraler Downloadbereich:** Bietet Zugriff auf wichtige Dokumente, Vorlagen und Anleitungen.
- **Kategorien:** Die Dateien sind zur besseren Übersicht in Kategorien gruppiert.

## Use Cases
- Lade die neueste Version einer Checkliste oder eines Protokollformulars herunter.
- Greife auf Bedienungsanleitungen für komplexes Equipment zu.',
'[]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/dao/FileDAO.java')),

('calendar', 'Kalender', '/kalender',
'## Features
- **Monatsübersicht:** Zeigt alle Events und Lehrgänge in einer klassischen Monatsansicht.
- **Listenansicht (Mobil):** Eine chronologische Liste aller Termine für eine schnelle Übersicht auf dem Handy.
- **Kalender-Abonnement:** Bietet einen iCal-Link, um den Technik-Team Kalender mit deinem persönlichen Kalender (z.B. auf dem Handy oder PC) zu synchronisieren.

## Use Cases
- Plane deine Termine und sieh auf einen Blick, was in den nächsten Wochen ansteht.
- Halte deinen persönlichen Kalender automatisch auf dem neuesten Stand.',
'["events", "lehrgaenge"]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/public_api/PublicCalendarResource.java')),

('feedback', 'Feedback', '/feedback',
'## Features
- **Feedback einreichen:** Gib allgemeines Feedback, melde Fehler oder schlage neue Features für die App vor.
- **Status-Übersicht:** Verfolge den Status deiner eigenen Einreichungen (z.B. Neu, Gesehen, Geplant).

## Use Cases
- Hilf mit, die Anwendung zu verbessern.
- Melde einen Bug, den du gefunden hast.
- Teile eine Idee für eine neue Funktion, die dem Team helfen würde.',
'["admin_feedback"]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/dao/FeedbackSubmissionDAO.java')),

('changelogs', 'Changelogs', '/changelogs',
'## Features
- **Versionshistorie:** Zeigt eine chronologische Liste aller wichtigen Änderungen und neuer Features in der Anwendung.
- **Detailansicht:** Beschreibt, was in jeder neuen Version verbessert oder hinzugefügt wurde.

## Use Cases
- Bleibe auf dem Laufenden über die Entwicklung der App.
- Entdecke neue Funktionen, die dir die Arbeit erleichtern können.',
'[]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/dao/ChangelogDAO.java')),

('profile', 'Mein Profil', '/profil',
'## Features
- **Stammdaten:** Verwalte deine persönlichen Daten wie E-Mail und Klasse.
- **Sicherheit:** Ändere dein Passwort.
- **Qualifikationen:** Sieh eine Liste aller Lehrgänge, die du erfolgreich absolviert hast.
- **Abzeichen:** Zeigt alle Erfolge an, die du durch deine Teilnahme und dein Engagement freigeschaltet hast.
- **Event-Historie:** Eine komplette Übersicht aller Events, an denen du teilgenommen hast.

## Use Cases
- Halte deine Kontaktdaten aktuell.
- Verfolge deinen Lernfortschritt und deine Erfolge im Team.
- Gib Feedback für vergangene Events.',
'["dashboard", "team_directory"]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/public_api/PublicProfileResource.java'));
========================================================================
FILE: src\main\resources\db\migration\V56__Populate_page_documentation_admin.sql
========================================================================

-- Flyway migration V56: Populate admin-facing page documentation

INSERT INTO `page_documentation` (`page_key`, `title`, `page_path`, `features`, `related_pages`, `admin_only`, `wiki_entry_id`) VALUES
('admin_dashboard', 'Admin Dashboard', '/admin/dashboard',
'## Features
- **Anstehende Events:** Schneller Überblick über die nächsten geplanten Veranstaltungen.
- **Niedriger Lagerbestand:** Warnt vor Artikeln, deren verfügbare Menge einen kritischen Schwellenwert unterschreitet.
- **Letzte Aktionen:** Zeigt die neuesten Einträge aus dem Admin-Aktionsprotokoll.
- **Event-Trend:** Eine Grafik, die die Anzahl der Events über die letzten 12 Monate visualisiert.

## Use Cases
- Erhalte einen schnellen Überblick über den Zustand und die Aktivitäten des Systems.
- Identifiziere proaktiv potenzielle Materialengpässe.
- Überwache die letzten administrativen Änderungen.',
'["admin_events", "admin_storage", "admin_log"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/service/AdminDashboardService.java')),

('admin_announcements', 'Admin Anschlagbrett', '/admin/announcements',
'## Features
- **Erstellen & Bearbeiten:** Verfasse neue Mitteilungen mit einem Markdown-Editor.
- **Verwalten:** Bearbeite oder lösche bestehende Mitteilungen.
- **Übersicht:** Sieh alle aktuellen Mitteilungen und wer sie wann erstellt hat.

## Use Cases
- Informiere das gesamte Team über wichtige, aber nicht zeitkritische Themen (z.B. neue Lagerordnung, anstehende Team-Treffen).
- Veröffentliche Protokolle oder Zusammenfassungen.',
'["bulletin_board"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/service/AnnouncementService.java')),

('admin_users', 'Admin Benutzerverwaltung', '/admin/mitglieder',
'## Features
- **Benutzerliste:** Zeigt alle registrierten Benutzer mit ihrer zugewiesenen Rolle.
- **Benutzer erstellen:** Lege neue Benutzerkonten an, vergib ein initiales Passwort und weise eine Rolle zu.
- **Benutzer bearbeiten:** Ändere Benutzerdetails, Rollen und individuelle Berechtigungen.
- **Passwort zurücksetzen:** Generiere ein neues, zufälliges Passwort für einen Benutzer.
- **Benutzer löschen:** Entferne Benutzerkonten permanent.

## Use Cases
- Verwalte den Mitgliederstamm des Technik-Teams.
- Passe Berechtigungen für einzelne Benutzer an, um ihnen spezielle Zugriffsrechte zu geben.
- Hilf Benutzern, die ihr Passwort vergessen haben.',
'["admin_requests"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/service/UserService.java')),

('admin_requests', 'Admin Anträge', '/admin/requests',
'## Features
- **Übersicht:** Listet alle von Benutzern gestellten Anträge auf Profiländerungen.
- **Genehmigen:** Übernimm die beantragten Änderungen mit einem Klick in das Benutzerprofil.
- **Ablehnen:** Lehne einen Antrag ab.

## Use Cases
- Überprüfe und verarbeite von Benutzern gewünschte Änderungen ihrer Stammdaten.
- Sorge für die Datenqualität und -konsistenz der Benutzerprofile.',
'["admin_users"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/service/ProfileRequestService.java')),

('admin_training_requests', 'Admin Lehrgangsanfragen', '/admin/training-requests',
'## Features
- **Anfragenübersicht:** Zeigt alle von Benutzern eingereichten Themenwünsche für neue Lehrgänge.
- **Interessenten-Zähler:** Zählt, wie viele Benutzer ihr Interesse an einem Thema bekundet haben.
- **Verwaltung:** Lösche bearbeitete oder irrelevante Anfragen.

## Use Cases
- Erkenne, welche Fortbildungen im Team am meisten nachgefragt werden.
- Plane zukünftige Lehrgänge basierend auf dem Bedarf der Mitglieder.',
'["lehrgaenge"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/service/TrainingRequestService.java'));
========================================================================
FILE: src\main\resources\db\migration\V57__Repopulate_wiki_data_part1.sql
========================================================================

-- Flyway migration V57, Part 1: Overhaul Technical Wiki Documentation

-- Step 1: Clear all existing documentation to ensure a fresh start.
DELETE FROM `page_documentation` WHERE `wiki_entry_id` IS NOT NULL;
DELETE FROM `wiki_documentation`;

-- Step 2: Repopulate with up-to-date descriptions.

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('pom.xml',
'## 1. File Overview & Purpose

This is the Project Object Model (POM) file for **Maven**. It is the central configuration file that defines the project''s dependencies, build process, and metadata. It ensures that the application is built consistently with all the correct library versions.

## 2. Architectural Role

This is a top-level **Project Configuration** file. It defines the software stack for the entire application, influencing all architectural tiers by providing them with the necessary libraries (e.g., Spring Boot, JWT, database drivers).

## 3. Key Dependencies & Libraries

- **`spring-boot-starter-parent`**: Inherits sensible default configurations from the Spring Boot team, managing dependency versions and plugin settings.
- **Spring Boot Starters**: Bundles of dependencies for specific functionalities:
    - `web`: For building REST APIs with an embedded Tomcat server.
    - `jdbc`: For database access using Spring''s `JdbcTemplate`.
    - `security`: For authentication and authorization.
    - `validation`: For using `@Valid` annotations on DTOs.
    - `websocket`: For real-time communication.
    - `log4j2`: For structured, high-performance logging.
- **Database & Migrations**:
    - `flyway-core` & `flyway-mysql`: For managing and applying SQL database schema migrations.
    - `mariadb-java-client`: The JDBC driver for connecting to MariaDB/MySQL.
- **Security**:
    - `jjwt` (Java JWT): For creating, parsing, and verifying JSON Web Tokens used in authentication.
- **API Documentation**:
    - `springdoc-openapi-starter-webmvc-ui`: Automatically generates OpenAPI 3 documentation and a Swagger UI for the REST API.
- **Utilities**:
    - `ical4j`: For generating iCalendar (.ics) files for the calendar subscription feature.
    - `owasp-java-html-sanitizer`: For preventing Cross-Site Scripting (XSS) by cleaning user-provided HTML content.
    - `bucket4j`: For implementing API rate limiting.

## 4. In-Depth Breakdown

- **`<properties>`**: Centralizes version management for third-party libraries and sets the required Java version to **21**.
- **`<dependencies>`**: The main section listing all required libraries. The use of starters simplifies dependency management significantly.
- **`<build>`**: Configures how the project is built.
    - `spring-boot-maven-plugin`: Packages the application into a single executable JAR file.
    - `flyway-maven-plugin`: Allows running database migrations from the command line.
    - `maven-compiler-plugin`: Ensures the code is compiled with Java 21 compatibility.'),

('src/main/java/deApplication.java',
'## 1. File Overview & Purpose

This is the main entry point of the Spring Boot application. The `@SpringBootApplication` annotation triggers auto-configuration, component scanning, and enables the application to be run as a standalone executable JAR.

## 2. Architectural Role

This is the **Application Bootstrap** component. It initializes the Spring Application Context, which in turn discovers and wires together all the other components (Controllers, Services, DAOs, etc.).

## 3. Key Dependencies & Libraries

- **Spring Boot (`@SpringBootApplication`)**: This single annotation is a meta-annotation that combines `@Configuration`, `@EnableAutoConfiguration`, and `@ComponentScan`.

## 4. In-Depth Breakdown

- **`@SpringBootApplication`**: This is the key annotation that makes this a Spring Boot application.
- **`@ComponentScan(basePackages = "de.technikteam")`**: This explicitly tells Spring to scan the `de.technikteam` package and all its sub-packages for components (like `@Service`, `@RestController`, `@Repository`) to manage.
- **`main(String[] args)`**: The standard Java entry point. `SpringApplication.run()` starts the entire application, including the embedded web server (Tomcat).'),

('src/main/java/de/config/DateFormatter.java',
'## 1. File Overview & Purpose

This is a simple utility class that provides static methods for consistently formatting `java.time.LocalDateTime` objects into German-locale strings. It ensures that dates and times are displayed uniformly across the application.

## 2. Architectural Role

This is a cross-cutting **Utility** class. It is used primarily in the **Model Tier** within `getFormatted...()` methods to provide display-ready strings, abstracting away formatting logic from the views.

## 3. Key Dependencies & Libraries

- **`java.time.format.DateTimeFormatter`**: The core Java 8+ class for defining and using date-time format patterns.

## 4. In-Depth Breakdown

- **Static Formatters**: The class pre-compiles `DateTimeFormatter` instances for different formats (date-time, date-only, time-only) for efficiency.
- **`formatDateTime(LocalDateTime ldt)`**: Formats a `LocalDateTime` into a full date and time string (e.g., "10.06.2025, 17:45").
- **`formatDate(LocalDateTime ldt)`**: Formats a `LocalDateTime` into a date-only string (e.g., "10.06.2025").
- **`formatDateTimeRange(LocalDateTime start, LocalDateTime end)`**: An intelligent formatter that creates a compact range string. For example, if the start and end are on the same day, it produces "10.06.2025, 17:45 - 19:00 Uhr" instead of repeating the date.'),

('src/main/java/de/config/GlobalExceptionHandler.java',
'## 1. File Overview & Purpose

This class acts as a global, centralized exception handler for the entire REST API. By using the `@ControllerAdvice` annotation, it intercepts exceptions thrown from any `@RestController`, preventing raw stack traces from being sent to the client and ensuring that all error responses follow the standard `ApiResponse` JSON format.

## 2. Architectural Role

This is a cross-cutting **Configuration** component that provides a uniform error handling policy for the **Web/API Tier**.

## 3. Key Dependencies & Libraries

- **Spring Framework (`@ControllerAdvice`, `@ExceptionHandler`)**: Core annotations for implementing a global exception handler.
- `ApiResponse` (Model): The standard DTO used for all API responses, including errors.
- **Log4j**: For logging unexpected exceptions.

## 4. In-Depth Breakdown

- **`@ExceptionHandler(MethodArgumentNotValidException.class)`**: This method specifically catches errors from the `@Valid` annotation on DTOs. It extracts the validation error messages and returns a clear, user-friendly summary with an HTTP 400 (Bad Request) status.
- **`@ExceptionHandler(AccessDeniedException.class)`**: This catches security-related exceptions from `@PreAuthorize` or other Spring Security checks. It returns a generic "Access Denied" message with an HTTP 403 (Forbidden) status.
- **`@ExceptionHandler(Exception.class)`**: This is the catch-all handler for any other unhandled exception. It logs the full error for debugging purposes and returns a generic "Internal Server Error" message with an HTTP 500 status, avoiding the leak of implementation details.'),

('src/main/java/de/config/InitialAdminCreator.java',
'## 1. File Overview & Purpose

This component is a `CommandLineRunner` that executes once on application startup. Its sole responsibility is to check if a default "admin" user exists in the database. If not (indicating a first-time setup), it creates the user with full administrative permissions and a strong, randomly generated password.

## 2. Architectural Role

This is a critical **Application Bootstrap / Configuration** component. It ensures that a fresh deployment of the application is always accessible by guaranteeing the existence of at least one superuser.

## 3. Key Dependencies & Libraries

- **Spring Boot (`CommandLineRunner`)**: An interface that signals Spring to run this component after the application context is loaded but before the application starts accepting requests.
- `UserDAO`, `UserService`: Used to check for and create the new user.
- `PermissionDAO`: Used to find the IDs of the essential permissions to grant.
- `java.security.SecureRandom`: Used to generate a cryptographically secure random password.

## 4. In-Depth Breakdown

- **`run(String... args)`**: The main execution method.
    - It first queries the database via `userDAO` to see if a user with the username "admin" already exists.
    - If it does not exist, it proceeds to generate a random password.
    - It then fetches the IDs for the master admin permission (`ACCESS_ADMIN_PANEL`) and the notification permission (`NOTIFICATION_SEND`) from the database.
    - It calls the transactional `userService.createUserWithPermissions` method to create the user and assign these permissions.
    - **Crucially**, it logs the newly generated password to the console with a prominent warning. This password is only ever displayed this one time and must be copied and stored securely by the system administrator.'),

('src/main/java/de/config/LocalDateTimeAdapter.java',
'## 1. File Overview & Purpose

This is a custom `TypeAdapter` for the **Gson** library. It provides explicit instructions on how to serialize `java.time.LocalDateTime` objects into JSON strings and deserialize them back. This is necessary to ensure consistent, standard formatting (ISO 8601) and to work around potential reflection issues in modern Java versions.

## 2. Architectural Role

This is a **Configuration/Utility** class used by the **Web/API Tier**. It is registered with the Gson instance used for serializing `ApiResponse` objects and other DTOs that contain `LocalDateTime` fields.

## 3. Key Dependencies & Libraries

- **Gson (`com.google.gson.TypeAdapter`)**: The base class for creating custom serialization/deserialization logic.
- `java.time.LocalDateTime`: The modern Java date-time class this adapter supports.

## 4. In-Depth Breakdown

- **`write(...)`**: This method is called during serialization (Java -> JSON). It takes a `LocalDateTime` object and writes its ISO 8601 string representation (e.g., `"2025-08-05T22:19:35.516"`) to the JSON output.
- **`read(...)`**: This method is called during deserialization (JSON -> Java). It reads a string from the JSON input and parses it back into a `LocalDateTime` object using the same ISO 8601 format.'),

('src/main/java/de/config/OpenApiConfig.java',
'## 1. File Overview & Purpose

This class configures the **Springdoc OpenAPI** library, which automatically generates interactive API documentation (Swagger UI) for the application''s REST controllers.

## 2. Architectural Role

This is a **Configuration** file for the **Web/API Tier**. It provides metadata and security definitions for the auto-generated documentation.

## 3. Key Dependencies & Libraries

- **Springdoc OpenAPI (`io.swagger.v3.oas.models.*`)**: The core classes for programmatically building an OpenAPI definition.

## 4. In-Depth Breakdown

- **`@Bean`**: This annotation tells Spring to create an `OpenAPI` bean and manage its lifecycle.
- **`info(...)`**: Sets the title, version, and description that appear at the top of the Swagger UI page.
- **`addSecurityItem(...)` & `addSecuritySchemes(...)`**: This is the most important part for a secured API. It defines a security scheme named "bearerAuth" of type "HTTP" with a "Bearer" format for JWTs. This configuration adds the "Authorize" button to the Swagger UI, allowing developers to paste in a JWT and make authenticated API calls directly from the documentation page.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V58__Repopulate_wiki_data_part2.sql
========================================================================

-- Flyway migration V58, Part 2: Overhaul Technical Wiki Documentation

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/config/SanitizerConfig.java',
'## 1. File Overview & Purpose

This configuration class defines multiple security policies for the **OWASP Java HTML Sanitizer** library. It creates different `PolicyFactory` beans, each configured to allow a specific set of HTML tags and attributes. This enables different parts of the application to sanitize user input according to their specific needs (e.g., allowing rich text in an event description but only inline formatting in a chat message).

## 2. Architectural Role

This is a **Configuration** file that provides security components (the policies) to the **Service Tier**. Services inject these policies to clean user-provided content before it''s stored in the database.

## 3. Key Dependencies & Libraries

- **OWASP Java HTML Sanitizer (`org.owasp.html.*`)**: The library used for robust XSS prevention.

## 4. In-Depth Breakdown

- **`@Bean("richTextPolicy")`**: Creates a policy factory that allows a wide range of common formatting tags, including paragraphs, lists, and headings. This is suitable for long-form content like descriptions.
- **`@Bean("inlineFormattingPolicy")`**: Creates a stricter policy that only allows inline formatting elements like `<b>` and `<i>`. It disallows block elements like `<p>` or `<h1>`, making it ideal for single-line inputs or chat messages.
- **`@Bean("plainTextPolicy")`**: Creates the strictest policy, which allows no HTML tags at all. This effectively strips all HTML, leaving only the plain text content.'),

('src/main/java/de/config/WebMvcConfig.java',
'## 1. File Overview & Purpose

This class implements `WebMvcConfigurer` to customize Spring''s web-related configuration. Its primary role in this application is to register custom `HandlerInterceptor` beans, such as the `RateLimitingInterceptor`.

## 2. Architectural Role

This is a **Configuration** file for the **Web/API Tier**. It allows for the insertion of cross-cutting logic (like rate limiting) into the request processing pipeline for specified URL patterns.

## 3. Key Dependencies & Libraries

- **Spring Web MVC (`WebMvcConfigurer`, `InterceptorRegistry`)**: The core Spring interfaces for web configuration.
- `RateLimitingInterceptor`: The custom interceptor being registered.

## 4. In-Depth Breakdown

- **`addInterceptors(InterceptorRegistry registry)`**: This method is the hook for registering interceptors.
- **`registry.addInterceptor(...)`**: This registers the `rateLimitingInterceptor`.
- **`.addPathPatterns(...)`**: This is used to specify which API endpoints should be protected by the interceptor. The current code has the rate limiting logic commented out, but this is where it would be enabled for endpoints like `/api/v1/auth/login` to prevent brute-force attacks.'),

('src/main/java/de/security/JwtAuthFilter.java',
'## 1. File Overview & Purpose

This is a custom Spring Security filter that runs once for every incoming request. Its purpose is to inspect the request for the JWT authentication cookie (`TT_AUTH_TOKEN`). If the cookie is found and contains a valid JWT, this filter validates the token, extracts the user''s identity, and sets up the Spring Security context, effectively authenticating the user for the duration of the request.

## 2. Architectural Role

This is a core component of the **Security Tier**. It integrates the custom JWT-based authentication mechanism into the standard Spring Security filter chain. It runs before the authorization checks.

## 3. Key Dependencies & Libraries

- **Spring Security (`OncePerRequestFilter`, `SecurityContextHolder`)**: The base class for the filter and the context where the user''s authentication principal is stored.
- `AuthService`: The service used to validate the JWT and retrieve the corresponding `UserDetails`.

## 4. In-Depth Breakdown

- **`doFilterInternal(...)`**: The main logic of the filter.
    1.  It retrieves all cookies from the `HttpServletRequest`.
    2.  It finds the cookie with the name `AUTH_COOKIE_NAME`.
    3.  If the cookie is found, it passes the token value to `authService.validateTokenAndGetUser()`.
    4.  If the service returns a valid `UserDetails` object (our `SecurityUser`), it means the token is valid.
    5.  It then creates a `UsernamePasswordAuthenticationToken` and sets it in the `SecurityContextHolder`. This is the standard way to tell Spring Security that the current user is authenticated.
    6.  Finally, it calls `filterChain.doFilter()` to pass the request along to the next filter in the chain.'),

('src/main/java/de/security/RateLimitingInterceptor.java',
'## 1. File Overview & Purpose

This is a Spring `HandlerInterceptor` that provides rate limiting for specific API endpoints. It uses the client''s IP address as a key to track the number of requests made within a certain time window, preventing abuse and brute-force attacks.

## 2. Architectural Role

This is a component of the **Security Tier**, operating at the request-interception level of the **Web/API Tier**. It is registered in `WebMvcConfig`.

## 3. Key Dependencies & Libraries

- **Spring Web (`HandlerInterceptor`)**: The interface it implements to hook into the request lifecycle.
- `RateLimitingService`: The service that manages the rate limiting logic and buckets.

## 4. In-Depth Breakdown

- **`preHandle(...)`**: This method is executed *before* the controller method is called.
    1.  It extracts the client''s IP address.
    2.  It calls `rateLimitingService.resolveBucket(ipAddress)` to get or create a "bucket" of tokens for that IP.
    3.  It calls `bucket.tryConsumeAndReturnRemaining(1)` to attempt to consume one token.
    4.  **Success Path**: If the consumption is successful (`probe.isConsumed()` is true), it adds a `X-Rate-Limit-Remaining` header to the response and returns `true`, allowing the request to proceed.
    5.  **Failure Path**: If the bucket is empty, it adds a `X-Rate-Limit-Retry-After-Seconds` header and sends an HTTP 429 (Too Many Requests) error response, returning `false` to block the request.'),

('src/main/java/de/security/SecurityConfig.java',
'## 1. File Overview & Purpose

This is the central configuration class for **Spring Security**. It defines the entire security policy for the application, including which endpoints are public, which are protected, how CSRF protection is handled, how sessions are managed, and how the custom JWT filter is integrated.

## 2. Architectural Role

This is the cornerstone of the **Security Tier**. It defines the rules that govern all access to the application''s API endpoints.

## 3. Key Dependencies & Libraries

- **Spring Security (`@EnableWebSecurity`, `SecurityFilterChain`)**: The core components for security configuration.
- `JwtAuthFilter`: The custom filter for JWT authentication.
- `UserDAO`: Used to provide the `UserDetailsService`.

## 4. In-Depth Breakdown

- **`securityFilterChain(HttpSecurity http)`**: The main configuration method. It defines a chain of security rules in a fluent API style.
    - **CSRF Protection (`.csrf(...)`)**:
        - `CookieCsrfTokenRepository.withHttpOnlyFalse()`: Configures CSRF protection to use a cookie-based strategy. The `HttpOnly=false` part is crucial so that the frontend JavaScript can read the token from the `XSRF-TOKEN` cookie and include it in request headers.
        - `.ignoringRequestMatchers(...)`: This is a critical section that **disables CSRF protection for all API endpoints**. This is a deliberate choice for a stateless API where JWTs in HttpOnly cookies provide the primary defense. **NOTE:** This is a significant security decision and implies that the frontend will not be sending the `X-XSRF-TOKEN` header.
    - **Authorization (`.authorizeHttpRequests(...)`)**:
        - `.requestMatchers(...).permitAll()`: Defines a whitelist of endpoints that can be accessed without any authentication (e.g., login, swagger docs).
        - `.anyRequest().authenticated()`: A catch-all rule that specifies that any other request not on the whitelist requires successful authentication.
    - **Session Management (`.sessionManagement(...)`)**:
        - `SessionCreationPolicy.STATELESS`: This tells Spring Security not to create or manage `HttpSession` objects, as the API is stateless and relies on the JWT for authentication on each request.
    - **Filter Integration (`.addFilterBefore(...)`)**: This is where our custom `JwtAuthFilter` is inserted into the filter chain before the standard `UsernamePasswordAuthenticationFilter`.
- **`userDetailsService()`**: Creates a bean that integrates our `UserDAO` with Spring Security. When Spring needs to look up a user by username (after a token is validated), it will call this service, which in turn calls `userDAO.getUserByUsername()`.
- **`passwordEncoder()`**: Defines the `BCryptPasswordEncoder` as the official password hashing algorithm for the application.'),

('src/main/java/de/security/SecurityUser.java',
'## 1. File Overview & Purpose

This class is an adapter that wraps our application''s `User` model to make it compatible with Spring Security''s `UserDetails` interface. It acts as the bridge between our custom user representation and the framework''s security context.

## 2. Architectural Role

This is a core component of the **Security Tier**. An instance of this class is created for the authenticated user and stored as the "principal" in the `SecurityContext`.

## 3. Key Dependencies & Libraries

- **Spring Security (`UserDetails`)**: The interface it implements.
- `User` (Model): The application''s user object that it wraps.

## 4. In-Depth Breakdown

- **`getAuthorities()`**: This is the most important method. It takes the `Set<String>` of permission keys from our `User` object and converts them into a `Collection` of `SimpleGrantedAuthority` objects, which is the format Spring Security expects for authorization checks (e.g., in `@PreAuthorize` annotations).
- **`getPassword()`**: Returns the hashed password from the `User` object.
- **`getUsername()`**: Returns the username.
- **Other `is...()` methods**: These methods are part of the `UserDetails` contract and are hardcoded to `true` in this application, as account status (like expiration or locking) is handled by other services (`LoginAttemptService`).
- **`getUser()`**: A custom getter to allow easy access back to the original, full `User` model object from the security principal.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V59__Repopulate_wiki_data_part3.sql
========================================================================

-- Flyway migration V59, Part 3: Overhaul Technical Wiki Documentation

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/websocket/ChatSessionManager.java',
'## 1. File Overview & Purpose

This class is a thread-safe singleton manager for WebSocket sessions related to **event-specific** chats. It maintains a map of active chat rooms, where each room (keyed by an `eventId`) contains a set of connected user sessions. This allows for targeted message broadcasting to all participants in a specific event''s chat.

## 2. Architectural Role

This is an **Infrastructure** component for the real-time communication feature, operating within the **Web/Controller Tier**. It is used by the `EventChatSocketHandler` to manage session lifecycle and broadcast messages.

## 3. Key Dependencies & Libraries

- **Spring WebSockets (`org.springframework.web.socket.WebSocketSession`)**: The object representing a single client connection.
- `java.util.concurrent.ConcurrentHashMap` & `CopyOnWriteArraySet`: Thread-safe collection classes are used to safely manage sessions from multiple concurrent WebSocket threads.

## 4. In-Depth Breakdown

- **`sessionsByEvent` (Map)**: The central data structure. The key is the `eventId` as a string, and the value is a `CopyOnWriteArraySet` of `WebSocketSession` objects. `CopyOnWriteArraySet` is chosen for its thread-safety, being particularly efficient when reads and iterations are more common than writes (add/remove).
- **`addSession(String eventId, WebSocketSession session)`**: Adds a new user''s session to the set for the corresponding event room.
- **`removeSession(String eventId, WebSocketSession session)`**: Removes a user''s session when they disconnect. If a room becomes empty, it is removed from the main map to conserve memory.
- **`broadcast(String eventId, String message)`**: Sends a message to *every* active and open session in a specific event room.'),

('src/main/java/de/websocket/ChatWebSocketHandler.java',
'## 1. File Overview & Purpose

This is the WebSocket endpoint that powers the real-time **direct messaging and group chat** feature. It manages client connections for specific conversation rooms, processes incoming messages (new, edit, delete, read receipts), persists them to the database via `ChatDAO`, and broadcasts them to all participants in the room.

## 2. Architectural Role

This is a key component of the **Web/Controller Tier**. It provides the real-time communication layer for the `/chat` page. It interacts with the `ChatWebSocketSessionManager` for session handling and the `ChatDAO` for data persistence.

## 3. Key Dependencies & Libraries

- **Spring WebSockets (`TextWebSocketHandler`)**: The base class for handling text-based WebSocket communication.
- `ChatWebSocketSessionManager`: To manage sessions and broadcast messages.
- `ChatDAO`: To save, update, and delete messages, and to authorize users for conversations.
- `NotificationService`: To send out-of-app notifications to users about new messages.
- **Gson**: For parsing incoming JSON messages from the client.

## 4. In-Depth Breakdown

- **`afterConnectionEstablished(...)`**: Handles a new client connection. It extracts the `conversationId` from the URL and the `User` from the security principal. It performs an authorization check using `chatDAO.isUserInConversation` before adding the session to the `ChatWebSocketSessionManager`.
- **`handleTextMessage(...)`**: The main message router. It parses the incoming JSON message and delegates to a specific handler based on the message `type`.
- **`handleNewMessage(...)`**: Persists a new message via the DAO and then broadcasts a `new_message` event to all clients in the conversation. It also triggers an out-of-app notification via the `NotificationService`.
- **`handleMarkAsRead(...)`**: Updates the status of multiple messages in the database and broadcasts a `messages_status_updated` event so clients can update their UI to show the "read" status.
- **`handleUpdateMessage(...)`**: Handles a message edit request. It performs a DAO update (which includes a check to ensure only the original author can edit within a 24-hour window) and then broadcasts the `message_updated` event.
- **`handleDeleteMessage(...)`**: Performs a soft delete in the database and broadcasts a `message_deleted` event.'),

('src/main/java/de/websocket/ChatWebSocketSessionManager.java',
'## 1. File Overview & Purpose

This class is a thread-safe singleton manager for WebSocket sessions related to the **direct messaging and group chat** feature. It is functionally identical to `ChatSessionManager` but operates on `conversationId`s instead of `eventId`s, keeping the two real-time features isolated.

## 2. Architectural Role

This is an **Infrastructure** component within the **Web/Controller Tier**. It is used exclusively by the `ChatWebSocketHandler` to manage session lifecycle and broadcast updates for the `/chat` page.

## 3. Key Dependencies & Libraries

- **Spring WebSockets (`org.springframework.web.socket.WebSocketSession`)**: The object representing a single client connection.
- `java.util.concurrent.ConcurrentHashMap` & `CopyOnWriteArraySet`: Thread-safe collections for managing sessions.

## 4. In-Depth Breakdown

- **`sessionsByConversation` (Map)**: The central map where the key is the `conversationId` (as a string) and the value is a `CopyOnWriteArraySet` of `WebSocketSession` objects.
- **`addSession(...)`, `removeSession(...)`, `broadcast(...)`**: These methods provide the core functionality for adding, removing, and broadcasting messages to all sessions within a specific conversation room.'),

('src/main/java/de/websocket/EventChatSocketHandler.java',
'## 1. File Overview & Purpose

This is the WebSocket endpoint that powers the real-time **event-specific chat** feature (the chat tab on an event''s detail page). It manages client connections for event chat rooms, processes incoming messages (new, edit, delete), persists them to the database, and broadcasts them to all participants in the room.

## 2. Architectural Role

This is a key component of the **Web/Controller Tier**. It provides the real-time communication layer for events. It interacts with the `ChatSessionManager` for session management and various DAOs (`EventChatDAO`, `EventDAO`) for data persistence and validation.

## 3. Key Dependencies & Libraries

- **Spring WebSockets (`TextWebSocketHandler`)**: The base class for WebSocket handlers.
- `ChatSessionManager`: To manage sessions for event rooms.
- `EventChatDAO`: To save, update, and delete messages in the database.
- `EventDAO`: To verify that a connecting user is actually a participant of the event.
- `NotificationService`: To send out-of-app notifications for user mentions.

## 4. In-Depth Breakdown

- **`afterConnectionEstablished(...)`**: Handles new connections. It authorizes the user by checking if they are associated with the event (`eventDAO.isUserAssociatedWithEvent`). If so, it adds their session to the `ChatSessionManager`.
- **`handleTextMessage(...)`**: The main message router. It parses the incoming JSON message and delegates to a specific handler based on the message `type` (`new_message`, `update_message`, `delete_message`).
- **`handleNewMessage(...)`**: Sanitizes the message content, saves it to the database, broadcasts the saved message to all clients in the room, and calls `handleMentions()`.
- **`handleUpdateMessage(...)`**: Handles a message edit request, updating it in the database and broadcasting the change.
- **`handleDeleteMessage(...)`**: Handles a message delete request, performing a soft delete and broadcasting the change. It includes logic to check if the deleter is an admin or the event leader.
- **`handleMentions(...)`**: Parses the message text for `@username` patterns and sends targeted, out-of-app notifications via the `NotificationService`.'),

('src/main/java/de/websocket/WebSocketConfig.java',
'## 1. File Overview & Purpose

This class configures the WebSocket endpoints for the Spring application. It registers the different `WebSocketHandler` classes and maps them to specific URL paths.

## 2. Architectural Role

This is a **Configuration** file for the **Web/API Tier**. It is responsible for setting up the WebSocket infrastructure.

## 3. Key Dependencies & Libraries

- **Spring WebSockets (`@EnableWebSocket`, `WebSocketConfigurer`)**: The core components for enabling and configuring WebSockets in Spring.
- `EventChatSocketHandler`, `ChatWebSocketHandler`: The specific handler beans that are being registered.

## 4. In-Depth Breakdown

- **`@EnableWebSocket`**: This annotation enables WebSocket support in the Spring application.
- **`registerWebSocketHandlers(WebSocketHandlerRegistry registry)`**: This is the main configuration method.
    - `registry.addHandler(eventChatSocketHandler, "/ws/chat/{eventId}")`: This line maps the `EventChatSocketHandler` to the URL pattern `/ws/chat/{eventId}`. The `{eventId}` part is a path parameter that allows each event to have its own dedicated chat room.
    - `registry.addHandler(chatWebSocketHandler, "/ws/dm/{conversationId}")`: This maps the `ChatWebSocketHandler` to the URL pattern `/ws/dm/{conversationId}` for the direct messaging feature.
    - `.setAllowedOrigins("*")`: This configures CORS for the WebSocket connections, allowing connections from any origin. In a production environment, this should be restricted to the specific domain of the frontend application.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V5__Add_storage_item_data.sql
========================================================================

-- Flyway migration V5: Insert initial set of storage items.

INSERT INTO `storage_items` (`id`, `name`, `location`, `cabinet`, `compartment`, `quantity`, `max_quantity`, `defective_quantity`, `defect_reason`, `weight_kg`, `price_eur`, `image_path`, `status`, `current_holder_user_id`, `assigned_event_id`) VALUES
(4, 'Movingheads', 'Oben', '1', '2', 2, 4, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(5, 'Tri leds', 'Oben', '1', '2', 2, 2, 0, NULL, 0.00, 0.00, '1000014818.jpg', 'IN_STORAGE', NULL, NULL),
(6, 'Par 56', 'Oben', '1', '3', 4, 14, 0, NULL, 0.00, 0.00, '1000014819.jpg', 'IN_STORAGE', NULL, NULL),
(7, 'Mischpult (alt)', 'Erdgeschoss', '2', '4', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2714.43.484538135326788297692.jpg', 'IN_STORAGE', NULL, NULL),
(8, 'Strand Lighting', 'Erdgeschoss', '2', '4', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2714.45.122077548250905478222.jpg', 'IN_STORAGE', NULL, NULL),
(10, 'DMX Kabel ', 'Erdgeschoss', '1', '/', 12, 12, 0, '', 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(11, 'Traversen', 'Oben', '1-3', '1', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(12, 'Laser', 'Oben', '1', '3', 2, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(13, 'Led bars', 'Oben', '2', '2', 7, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(14, 'Mikrofonstativ', 'Erdgeschoss ', '2', '4', 6, 6, 0, NULL, 0.00, 0.00, '1000004426.jpg', 'IN_STORAGE', NULL, NULL),
(15, 'Par Scheinwerfer', 'Oben', '2', '3', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(16, 'XLR Kabel (normal)', 'Erdgeschoss', '1', 'Hängend', 19, 19, 0, NULL, 0.00, 0.00, '2025-06-2716.17.57144115011978189604.jpg', 'IN_STORAGE', NULL, NULL),
(17, 'DMX dimmer', 'Oben', '2', '2', 6, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(18, 'Mehrfachstecker', 'Erdgeschoss', '2', 'Hängend', 12, 10, 0, NULL, 0.00, 0.00, '2025-06-2716.20.283964599778401908342.jpg', 'IN_STORAGE', NULL, NULL),
(19, 'Farbfolien', 'Oben', '4', '3', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(20, 'Farbfolienhalter', 'Oben', '4', '2', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(21, 'Plugboxen', 'Oben', '5', '2-4', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(22, 'Große Lampe', 'Oben', '5', '4', 0, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(23, 'Mikrofonklemmen (groß)', 'Erdgeschoss', '2', '2', 10, 10, 0, NULL, 0.00, 0.00, '2025-06-2716.25.505575202287104074157.jpg', 'IN_STORAGE', NULL, NULL),
(24, 'leuchtmittel', 'Oben', '/', '1', 15, 0, 2, '', 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(25, 'Lampenstative', 'Oben', 'ganz hinten', '0', 4, 0, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(26, 'Mikrofonhalterung', 'Erdgeschoss', '2', '2', 2, 2, 0, NULL, 0.00, 0.00, '1000004428.jpg', 'IN_STORAGE', NULL, NULL),
(27, 'Mikrofonständer Zubehör ', 'Erdgeschoss', '2', '2', 7, 7, 0, NULL, 0.00, 0.00, '2025-06-2716.43.268863184837397618557.jpg', 'IN_STORAGE', NULL, NULL),
(28, 'XLR 1m', 'Erdgeschoss ', '2', 'Hängend', 14, 14, 0, NULL, 0.00, 0.00, '2025-06-2716.44.217215765873591130197.jpg', 'IN_STORAGE', NULL, NULL),
(29, 'Verlängerungskabel', 'Erdgeschoss', '1', 'Hängend', 17, 17, 0, NULL, 0.00, 0.00, '2025-06-2716.46.3329023597302231662.jpg', 'IN_STORAGE', NULL, NULL),
(30, 'Klinke (groß)', 'Erdgeschoss ', '1', 'Hängend', 7, 7, 0, NULL, 0.00, 0.00, '2025-06-2716.47.474256954529147799815.jpg', 'IN_STORAGE', NULL, NULL),
(31, 'Kat 5e', 'Erdgeschoss', '1', 'Hängend', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2716.48.438613619599782685040.jpg', 'IN_STORAGE', NULL, NULL),
(32, 'Tape (schwarz)', 'Erdgeschoss', '1', 'Hängend', 5, 5, 0, NULL, 0.00, 0.00, '2025-06-2716.50.189037015943349490192.jpg', 'IN_STORAGE', NULL, NULL),
(33, 'Isolierband (mehrfarbig)', 'Erdgeschoss', '1', 'Hängend', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2716.52.326139423796119518903.jpg', 'IN_STORAGE', NULL, NULL),
(34, 'Klettband', 'Erdgeschoss', '2', 'Hängend', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2716.54.436320883725802641087.jpg', 'IN_STORAGE', NULL, NULL),
(35, 'LAN Kabel', 'Erdgeschoss', '2', '1', 24, 24, 0, NULL, 0.00, 0.00, '2025-06-2717.00.06154248686898973087.jpg', 'IN_STORAGE', NULL, NULL),
(36, 'Kameramikrofon', 'Erdgeschoss', '2', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2717.03.512938281413325712878.jpg', 'IN_STORAGE', NULL, NULL),
(37, 'Shotgun Mikrofon', 'Erdgeschoss ', '2', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.06.098569123668927925595.jpg', 'IN_STORAGE', NULL, NULL),
(38, 'Oberflächenmikrofon', 'Erdgeschoss ', '2', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2717.10.391795435121197552263.jpg', 'IN_STORAGE', NULL, NULL),
(39, 'Kaltgeräte Kabel', 'Erdgeschoss ', '2', '2', 77, 77, 0, NULL, 0.00, 0.00, '2025-06-2717.15.074914010989957328333.jpg', 'IN_STORAGE', NULL, NULL),
(40, 'Funkzubehör', 'Erdgeschoss', '2', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.17.043830938027829171798.jpg', 'IN_STORAGE', NULL, NULL),
(41, 'Kaltgeräte Kabel (Daisy Chain)', 'Erdgeschoss', '1', '1', 11, 11, 1, 'Defekte Buchse ', 0.00, 0.00, '2025-06-2717.18.125709401359377594527.jpg', 'IN_STORAGE', NULL, NULL),
(42, 'Kennzeichnungsringe (mehrfarbig)', 'Erdgeschoss ', '2', '2', 7, 8, 0, NULL, 0.00, 0.00, '2025-06-2717.20.11195938865415073150.jpg', 'IN_STORAGE', NULL, NULL),
(43, 'Mikrofonklemmen (klein)', 'Erdgeschoss ', '2', '2', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2717.27.274588107262469783348.jpg', 'IN_STORAGE', NULL, NULL),
(44, 'HDMI Kabel', 'Erdgeschoss ', '2', '1', 10, 10, 0, NULL, 0.00, 0.00, '2025-06-2717.56.305143014867881008801.jpg', 'IN_STORAGE', NULL, NULL),
(45, 'Kabelmikrofon', 'Erdgeschoss', '2', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2717.58.177946197060559751805.jpg', 'IN_STORAGE', NULL, NULL),
(46, 'Adapter (Klinke - VGA)', 'Erdgeschoss', '2', '2', 1, 1, 1, 'VGA Anschluss fehlen Pole', 0.00, 0.00, '2025-06-2717.59.556036963108161859221.jpg', 'IN_STORAGE', NULL, NULL),
(47, 'Adapterkabel (2 XLR - Klinke (klein))', 'Erdgeschoss ', '2', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(48, 'Adapterkabel (Klinke - RCA)', 'Erdgeschoss ', '2', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(49, 'Adapterkabel (2 Klinke - Klinke (klein))', 'Erdgeschoss ', '2', '1', 3, 3, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(50, 'Adapterkabel (Klinke (klein) - Klinke)', 'Erdgeschoss ', '2', '1', 2, 2, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(51, 'Adapterkabel (XLR - Klinke)', 'Erdgeschoss ', '2', '1', 9, 9, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(52, 'Klinke (klein)', 'Erdgeschoss', '2', '1', 1, 1, 0, NULL, 0.00, 0.00, NULL, 'IN_STORAGE', NULL, NULL),
(53, 'Adapter (Klinke (klein) - Chinch)', 'Erdgeschoss ', '2', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.23.499020825943256947204.jpg', 'IN_STORAGE', NULL, NULL),
(54, 'Adapter (Klinke (klein) - Klinke (groß))', 'Erdgeschoss ', '2', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.25.576661925063283895663.jpg', 'IN_STORAGE', NULL, NULL),
(55, 'Adapter (XLR (5-polig) - XLR (3-polig))', 'Erdgeschoss ', '2', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.27.096864481674443203081.jpg', 'IN_STORAGE', NULL, NULL),
(56, 'Adapter (XLR - XLR)', 'Erdgeschoss', '2', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2718.28.148498265326953710617.jpg', 'IN_STORAGE', NULL, NULL),
(57, 'Adapter (Klinke (groß) - Klinke (klein))', 'Erdgeschoss ', '2', '2', 2, 2, 0, NULL, 0.00, 0.00, '2025-06-2718.29.288337895956067779676.jpg', 'IN_STORAGE', NULL, NULL),
(58, 'Adapter (Klinke (klein) - Klinke (groß))', 'Erdgeschoss ', '2', '2', 8, 8, 0, NULL, 0.00, 0.00, '2025-06-2718.31.31210849178064261929.jpg', 'IN_STORAGE', NULL, NULL),
(59, 'Adapter (XLR (3-polig) - XLR (5-polig))', 'Erdgeschoss ', '2', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2718.59.517877817548047227728.jpg', 'IN_STORAGE', NULL, NULL),
(60, 'Adapter (XLR - Chinch)', 'Erdgeschoss ', '2', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.01.268681550318375427445.jpg', 'IN_STORAGE', NULL, NULL),
(61, 'Adapter (Klinke (groß) - 2 Klinke (groß))', 'Erdgeschoss ', '2', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.03.262282293221670794195.jpg', 'IN_STORAGE', NULL, NULL),
(62, 'Adapter (Klinke (groß) - Klinke (klein))', 'Erdgeschoss ', '2', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.04.443477670903409475836.jpg', 'IN_STORAGE', NULL, NULL),
(63, 'Adapter (Dell Strom)', 'Erdgeschoss ', '2', '2', 1, 1, 0, NULL, 0.00, 0.00, '2025-06-2719.09.478882073636558604076.jpg', 'IN_STORAGE', NULL, NULL),
(64, 'BNC Kabel ', 'Erdgeschoss ', '2', '1', 3, 0, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(65, 'Klinke (klein) - 2x RCA (Male)', 'Erdgeschoss ', '2', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(66, 'Doppel RCA', 'Erdgeschoss ', '2', '1', 4, 4, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(67, 'Dreifach RCA', 'Erdgeschoss ', '2', '1', 3, 3, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(68, 'RCA', 'Erdgeschoss ', '2', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(69, 'Nebelmaschine (klein) ', 'Erdgeschoss ', '1', '1', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(70, 'Nebelmaschine (groß)', 'Erdgeschoss ', '1', '0', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(71, 'Boden Nebelmaschine  ', 'Erdgeschoss ', '1', '0', 1, 1, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(72, 'Nebelfluid (divers)', 'Erdgeschoss ', '1', '1', 12, 12, 0, NULL, 0.00, 0.00, 'image.jpg', 'IN_STORAGE', NULL, NULL),
(73, 'Traversenbolzen', 'Erdgeschoss ', 'Riggingkiste', 'Riggingkiste', 13, 13, 0, NULL, 0.00, 0.00, '2025-06-2812.24.214632515314181386114.jpg', 'IN_STORAGE', NULL, NULL);

-- Set auto-increment start value
ALTER TABLE `storage_items` AUTO_INCREMENT = 75;
========================================================================
FILE: src\main\resources\db\migration\V60__Repopulate_wiki_data_part4.sql
========================================================================

-- Flyway migration V60, Part 4: Overhaul Technical Wiki Documentation

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/util/DaoUtils.java',
'## 1. File Overview & Purpose

This is a small utility class that provides common helper methods for DAO classes. Its purpose is to encapsulate reusable database-related logic, reducing code duplication across the DAO layer.

## 2. Architectural Role

This is a utility class for the **DAO (Data Access) Tier**.

## 3. Key Dependencies & Libraries

- **`java.sql.ResultSet`**: The standard JDBC class it operates on.

## 4. In-Depth Breakdown

- **`hasColumn(ResultSet rs, String columnName)`**: This is a crucial helper method used in many DAOs. It safely checks if a given `ResultSet` contains a column with a specific name (case-insensitively). This is extremely useful in DAOs that perform complex JOINs where a column might be present in some results but not others (e.g., `leader_username`). Using this check before calling `rs.getString(...)` prevents a `SQLException` if the column doesn''t exist for a particular row.'),

('src/main/java/de/util/FileSignatureValidator.java',
'## 1. File Overview & Purpose

This is a security utility class designed to validate uploaded files based on their "magic numbers" (the first few bytes of the file) rather than just their file extension or MIME type. This provides a strong defense against attacks where a malicious executable file is renamed to something benign like `.jpg`.

## 2. Architectural Role

This is a cross-cutting **Security/Utility** component. It is used by the `FileService` before any file is saved to the disk to ensure the file''s actual content matches its declared type.

## 3. Key Dependencies & Libraries

- **Spring (`MultipartFile`)**: The object representing the uploaded file.

## 4. In-Depth Breakdown

- **`MAGIC_NUMBERS` (static Map)**: A map that stores the known byte signatures for a whitelist of allowed MIME types (JPEG, PNG, PDF, etc.).
- **`isFileTypeAllowed(MultipartFile file)`**: The main validation method.
    1.  It gets the MIME type declared by the browser (e.g., `image/jpeg`).
    2.  It looks up the expected byte signature(s) for that MIME type in the `MAGIC_NUMBERS` map. If the type is not in the map, the file is rejected.
    3.  It reads the first few bytes from the actual file''s input stream.
    4.  It compares these actual bytes with the expected signature. If they match, the file is considered valid and the method returns `true`.
    5.  If they do not match, it logs a security warning and returns `false`, preventing the file from being processed further.'),

('src/main/java/de/util/MarkdownUtil.java',
'## 1. File Overview & Purpose

This is a **deprecated** utility class. Its original purpose was to sanitize Markdown content to prevent XSS attacks. However, it has been replaced by the much more robust **OWASP Java HTML Sanitizer**, which is configured in `SanitizerConfig.java`.

## 2. Architectural Role

This is a **Legacy/Utility** class. It is no longer used in security-sensitive contexts. It is kept for historical reference or for potential use in non-security-related text transformations.

## 3. Key Dependencies & Libraries

- None of significance to the current application.

## 4. In-Depth Breakdown

The `transform` method is now a simple pass-through and performs no sanitization. All sanitization logic has been moved to the `PolicyFactory` beans defined in `SanitizerConfig.java`.'),

('src/main/java/de/util/NavigationRegistry.java',
'## 1. File Overview & Purpose

This class is a centralized, static registry for all navigation links in the application''s sidebar. It defines the complete set of possible navigation items and provides a single method to generate a user-specific list of links based on their assigned permissions. This approach ensures a single source of truth for the site''s navigation structure and access control.

## 2. Architectural Role

This is a **Configuration/Utility** class that primarily supports the **Web/Controller Tier**. It is called by the `AuthService` (when generating the `/auth/me` response) to provide the frontend with the correct navigation items for the logged-in user.

## 3. Key Dependencies & Libraries

- `Permissions`: The class containing all permission key constants.
- `NavigationItem` (Model): The object used to represent each link.
- `User` (Model): The user object, which contains the permissions used for filtering.

## 4. In-Depth Breakdown

- **`ALL_ITEMS` (static List)**: A static list that is initialized once with `NavigationItem` objects for every possible link in the application, for both the user and admin sections. Each item is defined with its label, URL, icon, and the required permission key. Links available to all authenticated users have a `null` permission.
- **`getNavigationItemsForUser(User user)`**: The core method. It filters the master `ALL_ITEMS` list down to only those items the provided user is authorized to see. An item is included if:
    1.  Its required permission is `null`.
    2.  The user has the master `ACCESS_ADMIN_PANEL` permission.
    3.  The user''s set of permissions contains the specific permission required by the item.'),

('src/main/java/de/util/PasswordPolicyValidator.java',
'## 1. File Overview & Purpose

This is a utility class for enforcing a strong password policy. It provides a single static method to validate a given password against a set of predefined complexity rules (minimum length, character types). This ensures that all new passwords set in the application meet the required security standards.

## 2. Architectural Role

This is a cross-cutting **Security/Utility** component. It is used in the **Web/API Tier** by the `UserResource` (for creating new users) and `PublicProfileResource` (for password changes) to validate passwords before they are hashed and stored.

## 3. Key Dependencies & Libraries

- `java.util.regex.Pattern`: Used to define the regular expressions for checking character types.

## 4. In-Depth Breakdown

- **Static Patterns & Constants**: The class pre-compiles `Pattern` objects for efficient checking of required character types (uppercase, lowercase, digit, special character) and defines a `MIN_LENGTH`.
- **`ValidationResult` (Inner Class)**: A simple record-like class to return both a boolean `isValid` status and a user-friendly `message` explaining the result.
- **`validate(String password)`**: The main validation logic. It checks the password against each rule and builds a list of human-readable error messages. If any rules fail, it concatenates the errors into a single, comprehensive message (e.g., "Das Passwort muss mindestens 10 Zeichen lang sein, mindestens einen Großbuchstaben enthalten.") and returns it in the `ValidationResult`.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V61__Repopulate_wiki_data_part5.sql
========================================================================

-- Flyway migration V61, Part 5: Overhaul Technical Wiki Documentation

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/model/Announcement.java',
'## 1. File Overview & Purpose

This is a Plain Old Java Object (POJO) that serves as the data model for an announcement on the Digital Bulletin Board. It represents a record from the `announcements` table and includes fields for its title, content, author, and creation date.

## 2. Architectural Role

This class is part of the **Model Tier**. It is used to transfer announcement data between the `AnnouncementDAO`, `AnnouncementService`, and the API controllers (`AdminAnnouncementResource`, `PublicAnnouncementResource`).

## 3. Key Dependencies & Libraries

- `java.time.LocalDateTime`: Used for the `createdAt` timestamp.

## 4. In-Depth Breakdown

- **Fields:**
    - `id`: The primary key.
    - `title`: The user-visible title of the announcement.
    - `content`: The main body of the announcement, which supports Markdown formatting.
    - `authorUserId`: The ID of the admin who created the post.
    - `createdAt`: The timestamp of when the post was created.
- **Transient Fields:**
    - `authorUsername`: Populated by a JOIN in the DAO to display the author''s name without needing a separate query.'),

('src/main/java/de/model/EventRole.java',
'## 1. File Overview & Purpose

This POJO represents a reusable, predefined role that can be assigned to a user within the context of a specific event (e.g., "Audio Tech", "Lighting Operator"). It corresponds to a record in the `event_roles` table.

## 2. Architectural Role

This class is part of the **Model Tier**. It is managed via the `AdminEventRoleResource` and used in the `Event` model to structure the assigned team list.

## 3. Key Dependencies & Libraries

- `java.time.LocalDateTime`: For the `createdAt` timestamp.

## 4. In-Depth Breakdown

- **Fields:**
    - `id`: The primary key.
    - `name`: The user-visible name of the role.
    - `description`: A brief explanation of the role''s responsibilities.
    - `iconClass`: A FontAwesome CSS class for a representative icon.
    - `createdAt`: The timestamp of when the role was defined.'),

('src/main/java/de/model/EventPhoto.java',
'## 1. File Overview & Purpose

This POJO represents the metadata for a single photo uploaded to an event''s gallery. It corresponds to a record in the `event_photos` junction table, linking a `File` record to an `Event` record.

## 2. Architectural Role

This class is part of the **Model Tier**. It is used to transfer photo metadata between the `EventPhotoDAO`, `EventGalleryService`, and the `PublicEventGalleryResource` API.

## 3. Key Dependencies & Libraries

- `java.time.LocalDateTime`: For the `uploadedAt` timestamp.

## 4. In-Depth Breakdown

- **Fields:**
    - `id`: The primary key of the gallery entry.
    - `eventId`: Foreign key to the `events` table.
    - `fileId`: Foreign key to the `files` table, pointing to the actual image file record.
    - `uploaderUserId`: The ID of the user who uploaded the photo.
    - `caption`: An optional user-provided caption for the photo.
- **Transient Fields:**
    - `filepath`: The path to the image file, populated by a JOIN for easy access.
    - `uploaderUsername`: The name of the uploader, populated by a JOIN.'),

('src/main/java/de/model/PageDocumentation.java',
'## 1. File Overview & Purpose

This POJO represents a single user-facing help page. It corresponds to a record in the `page_documentation` table and contains all the structured content needed to render a complete help article, including its title, features, and links to related help pages and technical wiki articles.

## 2. Architectural Role

This class is part of the **Model Tier**. It is managed via the `AdminDocumentationResource` and displayed to users via the `PublicDocumentationResource` and the `/help` pages.

## 3. Key Dependencies & Libraries

- `java.time.LocalDateTime`: For timestamps.

## 4. In-Depth Breakdown

- **Fields:**
    - `pageKey`: A unique, URL-safe string identifier for the page (e.g., "admin_users").
    - `title`: The human-readable title of the help page.
    - `pagePath`: The actual frontend route that this page documents (e.g., "/admin/mitglieder").
    - `features`: A Markdown-enabled text block describing the page''s functionality.
    - `relatedPages`: A JSON string containing an array of `pageKey`s for other relevant help pages.
    - `adminOnly`: A boolean flag to restrict visibility of the help page to admins.
    - `wikiEntryId`: A nullable foreign key linking this help page to a more detailed technical article in the `wiki_documentation` table.
- **Transient Fields:**
    - `wikiLink`: A URL string generated on the backend to provide a direct link to the associated wiki page.'),

('src/main/java/de/model/TrainingRequest.java',
'## 1. File Overview & Purpose

This POJO represents a user-initiated request for a new training course. It corresponds to a record in the `training_requests` table and captures the requested topic and the original requester.

## 2. Architectural Role

This class is part of the **Model Tier**. It is used to transfer data about training requests between the DAOs, services, and the relevant public and admin API resources.

## 3. Key Dependencies & Libraries

- `java.time.LocalDateTime`: For the `createdAt` timestamp.

## 4. In-Depth Breakdown

- **Fields:**
    - `id`: Primary key.
    - `topic`: The user-submitted topic for the desired training.
    - `requesterUserId`: The ID of the user who created the request.
- **Transient Fields:**
    - `requesterUsername`: The name of the user who created the request, populated by a JOIN.
    - `interestCount`: The total number of users who have registered interest in this topic, calculated via a subquery in the DAO.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V62__Populate_page_documentation_admin_part2.sql
========================================================================

-- Flyway migration V62, Part 2: Populate admin-facing page documentation

INSERT INTO `page_documentation` (`page_key`, `title`, `page_path`, `features`, `related_pages`, `admin_only`, `wiki_entry_id`) VALUES
('admin_events', 'Admin Event-Verwaltung', '/admin/veranstaltungen',
'## Features
- **Event-Übersicht:** Listet alle Events mit Datum und Status auf.
- **Event erstellen:** Öffnet einen detaillierten Dialog zur Erstellung eines neuen Events, inklusive Definition von Personalbedarf und Materialreservierungen.
- **Event bearbeiten:** Ermöglicht die Änderung aller Aspekte eines bestehenden Events.
- **Event klonen:** Erstellt eine Kopie eines Events als Vorlage für eine wiederkehrende Veranstaltung.
- **Event löschen:** Entfernt ein Event und alle zugehörigen Daten permanent.
- **Debriefing:** Link zur Nachbereitungsseite für abgeschlossene Events.

## Use Cases
- Plane und organisiere alle Veranstaltungen der Schule.
- Verwalte den gesamten Lebenszyklus eines Events von der Planung bis zur Nachbereitung.
- Erstelle schnell neue Events auf Basis alter Vorlagen.',
'["admin_debriefings_list", "admin_event_roles", "admin_venues"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminEventResource.java')),

('admin_debriefing_details', 'Admin Event-Debriefing', '/admin/veranstaltungen/:eventId/debriefing',
'## Features
- **Strukturierte Erfassung:** Formular zur Eingabe von Feedback in den Kategorien "Was lief gut?", "Was kann verbessert werden?" und "Anmerkungen zum Material".
- **Hervorhebung von Mitgliedern:** Ermöglicht die Auswahl von Team-Mitgliedern, die sich besonders ausgezeichnet haben.
- **Ansichts- & Bearbeitungsmodus:** Zeigt gespeicherte Debriefings an und erlaubt autorisierten Benutzern (Admins, Event-Leiter) die Bearbeitung.

## Use Cases
- Sammle strukturiertes Feedback nach einem Event, um zukünftige Veranstaltungen zu verbessern.
- Erkenne und würdige herausragende Leistungen von Team-Mitgliedern.
- Dokumentiere Probleme mit dem Equipment, die während des Events aufgetreten sind.',
'["admin_events", "admin_debriefings_list"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminEventDebriefingResource.java')),

('admin_debriefings_list', 'Admin Debriefing-Übersicht', '/admin/debriefings',
'## Features
- **Zentrale Übersicht:** Zeigt alle eingereichten Debriefings für alle vergangenen Veranstaltungen.
- **Schnellzugriff:** Ermöglicht den direkten Sprung zur Detailansicht eines Debriefings.

## Use Cases
- Analysiere das Feedback mehrerer Veranstaltungen, um wiederkehrende Muster oder Probleme zu erkennen.
- Nutze die gesammelten Erkenntnisse zur langfristigen Verbesserung der Team-Prozesse.',
'["admin_events", "admin_debriefing_details"]',
1, NULL),

('admin_event_roles', 'Admin Event-Rollen', '/admin/event-roles',
'## Features
- **Rollen-Verwaltung:** Erstelle, bearbeite und lösche wiederverwendbare Rollen (z.B. "Tontechnik", "Lichttechnik").
- **Icon-Zuweisung:** Weise jeder Rolle ein passendes FontAwesome-Icon für eine bessere visuelle Darstellung zu.

## Use Cases
- Definiere einen Standardkatalog von Verantwortlichkeiten für Events.
- Strukturiere die Team-Zuweisung bei der Event-Planung.',
'["admin_events"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminEventRoleResource.java')),

('admin_venues', 'Admin Veranstaltungsorte', '/admin/venues',
'## Features
- **Orte verwalten:** Erstelle, bearbeite und lösche häufig genutzte Veranstaltungsorte.
- **Zusatzinformationen:** Speichere Adressen, Notizen und Ansprechpartner für jeden Ort.
- **Raumplan-Upload:** Lade ein Bild (z.B. einen Grundriss oder Lageplan) für jeden Ort hoch.

## Use Cases
- Erstelle eine zentrale Datenbank aller relevanten Veranstaltungsorte.
- Vereinfache die Event-Planung durch schnellen Zugriff auf Ortsdetails und Pläne.',
'["admin_events"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminVenueResource.java')),

('admin_courses', 'Admin Lehrgangs-Vorlagen', '/admin/lehrgaenge',
'## Features
- **Vorlagen-Verwaltung:** Erstelle, bearbeite und lösche Lehrgangs-Vorlagen (z.B. "Grundkurs Licht").
- **Detail-Management:** Klicke auf "Meetings", um die spezifischen Termine für eine Vorlage zu verwalten.

## Use Cases
- Strukturiere das Ausbildungsangebot des Technik-Teams.
- Definiere die Qualifikationen, die für Events benötigt werden können.',
'["admin_meetings", "admin_matrix"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/CourseResource.java')),

('admin_meetings', 'Admin Meetings', '/admin/lehrgaenge/:courseId/meetings',
'## Features
- **Terminplanung:** Plane, bearbeite und lösche spezifische Termine (Meetings) für einen Lehrgang.
- **Detail-Zuweisung:** Lege für jeden Termin einen Ort, eine Zeit und einen Leiter fest.
- **Klonen:** Erstelle schnell Kopien von Terminen für wiederkehrende Schulungen.

## Use Cases
- Organisiere die konkreten Schulungstermine für das Team.
- Verwalte den Kalender der Ausbildungsveranstaltungen.',
'["admin_courses"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/MeetingResource.java')),

('admin_storage', 'Admin Lagerverwaltung', '/admin/lager',
'## Features
- **Artikel-Verwaltung:** Erstelle, bearbeite und lösche alle Artikel im Inventar.
- **Detail-Management:** Definiere alle Eigenschaften eines Artikels, inklusive Name, Ort, Kategorie, Mengen und Preis.
- **Defekt-Management:** Markiere Artikel als defekt oder repariert.
- **Beziehungs-Management:** Lege fest, welche Artikel oft zusammen verwendet werden (Zubehör).
- **QR-Code-Ansicht:** Zeige einen QR-Code für schnelle Aktionen an.

## Use Cases
- Pflege den kompletten Inventarstamm der Technik-AG.
- Halte die Bestandszahlen und den Zustand des Equipments aktuell.',
'["admin_defective_items", "storage_details"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/StorageResource.java')),

('admin_files', 'Admin Dateien', '/admin/dateien',
'## Features
- **Datei-Upload:** Lade neue Dateien hoch und weise sie einer Kategorie und Sichtbarkeitsstufe (Alle/Admin) zu.
- **Kategorie-Verwaltung:** Erstelle und lösche Dateikategorien.
- **Löschen:** Entferne nicht mehr benötigte Dateien.

## Use Cases
- Verwalte den zentralen Dokumentenpool für das Team.
- Stelle sicher, dass sensible Dokumente nur für Admins sichtbar sind.',
'["files"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminFileResource.java')),

('admin_kits', 'Admin Kit-Verwaltung', '/admin/kits',
'## Features
- **Kit erstellen:** Definiere neue Kits (Koffer, Material-Sets) mit Namen und Beschreibung.
- **Inhalt zusammenstellen:** Weise jedem Kit eine Liste von Lagerartikeln mit den jeweiligen Mengen zu.
- **QR-Code:** Generiere einen QR-Code, der direkt zu einer druckbaren Packliste für das Kit führt.

## Use Cases
- Standardisiere Materialzusammenstellungen für wiederkehrende Aufgaben.
- Vereinfache das Packen für Events durch vordefinierte Listen.',
'["pack_kit", "admin_storage"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/KitResource.java')),

('admin_feedback', 'Admin Feedback-Board', '/admin/feedback',
'## Features
- **Kanban-Board:** Zeigt alle allgemeinen Feedback-Einreichungen in einem visuellen Board mit den Spalten Neu, Gesehen, Geplant, Erledigt und Abgelehnt.
- **Drag-and-Drop:** Verschiebe Feedback-Karten zwischen den Spalten, um ihren Status zu aktualisieren.
- **Detailansicht:** Klicke auf eine Karte, um den vollständigen Inhalt und den Einsender zu sehen.

## Use Cases
- Verarbeite und organisiere Feature-Wünsche und Bug-Reports von Benutzern.
- Behalte den Überblick über den Bearbeitungsstatus von Feedback.',
'["feedback"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminFeedbackResource.java')),

('admin_notifications', 'Admin Benachrichtigungen', '/admin/benachrichtigungen',
'## Features
- **Benachrichtigung erstellen:** Verfasse Nachrichten mit Titel, Beschreibung und Dringlichkeitsstufe.
- **Zielgruppen-Auswahl:** Sende Benachrichtigungen an alle Benutzer, nur an Teilnehmer eines bestimmten Events oder nur an Teilnehmer eines Meetings.
- **Notfall-Warnungen:** Versende "Warning"-Benachrichtigungen, die beim Empfänger einen Alarmton und einen blinkenden Bildschirm auslösen.

## Use Cases
- Informiere das Team schnell über wichtige, zeitkritische Ereignisse.
- Sende gezielte Erinnerungen an die Teilnehmer eines bevorstehenden Events.
- Alarmiere das Team in einem echten Notfall.',
'[]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminNotificationResource.java'));
========================================================================
FILE: src\main\resources\db\migration\V63__Populate_page_documentation_admin_part3.sql
========================================================================

-- Flyway migration V63, Part 3: Populate admin-facing page documentation

INSERT INTO `page_documentation` (`page_key`, `title`, `page_path`, `features`, `related_pages`, `admin_only`, `wiki_entry_id`) VALUES
('admin_achievements', 'Admin Abzeichen', '/admin/achievements',
'## Features
- **Abzeichen verwalten:** Erstelle, bearbeite und lösche alle Abzeichen (Achievements), die Benutzer verdienen können.
- **System-Schlüssel:** Definiere einen einzigartigen `achievement_key`, über den das System ein Abzeichen programmatisch verleihen kann.

## Use Cases
- Erweitere das Gamification-System der Anwendung.
- Schaffe neue Anreize für Engagement und Teilnahme im Team.',
'["profile"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminAchievementResource.java')),

('admin_defective_items', 'Admin Defekte Artikel', '/admin/defekte',
'## Features
- **Übersicht:** Listet alle Lagerartikel auf, von denen mindestens ein Exemplar als defekt markiert ist.
- **Status-Management:** Ermöglicht die Bearbeitung des Defekt-Status eines Artikels.

## Use Cases
- Behalte den Überblick über alle reparaturbedürftigen Geräte.
- Koordiniere Reparaturen und Wartungsarbeiten.',
'["admin_storage", "admin_damage_reports"]',
1, NULL),

('admin_damage_reports', 'Admin Schadensmeldungen', '/admin/damage-reports',
'## Features
- **Übersicht:** Zeigt alle von Benutzern eingereichten, noch offenen Schadensmeldungen.
- **Bearbeitung:** Erlaubt Admins, eine Meldung zu bestätigen (und den Artikel als defekt zu markieren) oder abzulehnen.

## Use Cases
- Verarbeite schnell und effizient Meldungen von Benutzern über defektes Equipment.
- Stelle sicher, dass keine Schadensmeldung verloren geht.',
'["admin_defective_items", "storage_details"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminDamageReportResource.java')),

('admin_checklist_templates', 'Admin Checklisten-Vorlagen', '/admin/checklist-templates',
'## Features
- **Vorlagen erstellen:** Definiere wiederverwendbare Checklisten-Vorlagen für Standardaufgaben (z.B. "Bühnenaufbau Aula").
- **Items verwalten:** Füge jeder Vorlage beliebig viele Checklistenpunkte hinzu.

## Use Cases
- Standardisiere wiederkehrende Arbeitsabläufe bei Events.
- Erstelle "Pre-Flight-Checklisten", um sicherzustellen, dass vor einem Event nichts vergessen wird.',
'["admin_events"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminChecklistTemplateResource.java')),

('admin_matrix', 'Admin Qualifikations-Matrix', '/admin/matrix',
'## Features
- **Visuelle Übersicht:** Zeigt eine Matrix aller Benutzer und aller Lehrgangs-Termine.
- **Teilnahme-Management:** Ermöglicht es, per Klick auf eine Zelle die Teilnahme eines Benutzers an einem Meeting zu bestätigen oder zu widerrufen.
- **Anmerkungen:** Füge Anmerkungen zu einer Teilnahme hinzu (z.B. "entschuldigt gefehlt").

## Use Cases
- Verfolge den Ausbildungsfortschritt des gesamten Teams auf einen Blick.
- Pflege die Anwesenheitslisten für alle Lehrgänge an einem zentralen Ort.',
'["admin_courses"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/MatrixResource.java')),

('admin_reports', 'Admin Berichte', '/admin/berichte',
'## Features
- **Visualisierungen:** Zeigt Grafiken zum Event-Trend und den aktivsten Benutzern.
- **CSV-Export:** Bietet die Möglichkeit, detaillierte Berichte (z.B. zur Event-Teilnahme, Materialnutzung) als CSV-Datei herunterzuladen.
- **KPIs:** Zeigt wichtige Kennzahlen wie den Gesamtwert des Lagers.

## Use Cases
- Analysiere die Entwicklung und das Wachstum des Technik-Teams über die Zeit.
- Erstelle Auswertungen und Statistiken für Jahresberichte oder Präsentationen.',
'[]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/ReportResource.java')),

('admin_changelogs', 'Admin Changelogs', '/admin/changelogs',
'## Features
- **Changelog-Verwaltung:** Erstelle und bearbeite die "Was ist neu?"-Einträge, die Benutzern nach einem Update angezeigt werden.
- **Markdown-Editor:** Verfasse die Einträge mit Markdown für eine ansprechende Formatierung.

## Use Cases
- Informiere die Benutzer über neue Features und wichtige Änderungen in der Anwendung.',
'["changelogs"]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/AdminChangelogResource.java')),

('admin_log', 'Admin Aktions-Log', '/admin/log',
'## Features
- **Audit Trail:** Protokolliert alle wichtigen administrativen Aktionen, die im System durchgeführt werden.
- **Detailansicht:** Zeigt an, wer wann was getan hat.

## Use Cases
- Nachvollziehbarkeit und Sicherheit: Überprüfe, wer kritische Änderungen vorgenommen hat.
- Fehlersuche: Analysiere vergangene Aktionen, um Probleme zu verstehen.',
'[]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/LogResource.java')),

('admin_system', 'Admin System', '/admin/system',
'## Features
- **Live-Statistiken:** Zeigt die aktuelle CPU-Auslastung, RAM-Nutzung und Festplattenbelegung des Servers.
- **Laufzeit & Energie:** Informiert über die Server-Laufzeit und den Batteriestatus (falls vorhanden).

## Use Cases
- Überwache die Systemgesundheit des Anwendungsservers.
- Diagnostiziere Performance-Probleme.',
'[]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/SystemResource.java')),

('admin_wiki', 'Admin Wiki', '/admin/wiki',
'## Features
- **Technische Dokumentation:** Ein Ort zur Pflege der internen, technischen Dokumentation der Anwendung.
- **Hierarchische Struktur:** Organisiere die Dokumentation in einer Ordner- und Dateistruktur.
- **Markdown-Editor:** Erstelle und bearbeite die Wiki-Seiten mit Markdown.

## Use Cases
- Dokumentiere die Software-Architektur und wichtige Code-Teile.
- Schaffe eine Wissensdatenbank für Entwickler und Administratoren.',
'[]',
1, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/WikiResource.java')),

('admin_documentation', 'Admin Hilfeseiten', '/admin/documentation',
'## Features
- **Hilfeseiten verwalten:** Erstelle und bearbeite die Inhalte für die benutzerfreundlichen Hilfeseiten.
- **Verknüpfungen:** Verlinke Hilfeseiten untereinander und mit der technischen Wiki.
- **Sichtbarkeit:** Lege fest, ob eine Hilfeseite für alle Benutzer oder nur für Admins sichtbar ist.

## Use Cases
- Erstelle eine umfassende Anleitung für die Benutzer der Anwendung.
- Halte die Dokumentation aktuell, wenn neue Features hinzukommen.',
'["help_list", "help_details"]',
1, NULL);
========================================================================
FILE: src\main\resources\db\migration\V64__Populate_page_documentation_misc.sql
========================================================================

-- Flyway migration V64: Populate miscellaneous and special page documentation

INSERT INTO `page_documentation` (`page_key`, `title`, `page_path`, `features`, `related_pages`, `admin_only`, `wiki_entry_id`) VALUES
('event_details', 'Event Details', '/veranstaltungen/details/:eventId',
'## Features
- **Umfassende Übersicht:** Zeigt alle relevanten Informationen zu einem Event an einem Ort.
- **Tabs:** Gliedert die Informationen in die Bereiche Aufgaben, Inventar-Checkliste und Event-Chat.
- **Echtzeit-Chat:** Ermöglicht die Live-Kommunikation mit allen anderen zugewiesenen Team-Mitgliedern während eines Events.
- **Aufgabenliste:** Zeigt alle für das Event definierten Aufgaben und deren Status.
- **Checkliste:** Eine interaktive Liste des reservierten Materials zum Abhaken beim Ein- und Ausladen.
- **Galerie (nach Abschluss):** Zeigt eine Fotogalerie des Events.

## Use Cases
- Informiere dich umfassend über ein Event, für das du dich interessierst oder für das du eingeteilt bist.
- Koordiniere dich während des Events in Echtzeit mit deinem Team.',
'["events", "admin_debriefing_details"]',
0, NULL),

('meeting_details', 'Lehrgangs-Details', '/lehrgaenge/details/:meetingId',
'## Features
- **Termindetails:** Zeigt alle Informationen zu einem spezifischen Lehrgangs-Termin, inklusive Datum, Ort, Leiter und Beschreibung.
- **Anhänge:** Bietet Zugriff auf relevante Dokumente oder Präsentationen für den Lehrgang.

## Use Cases
- Informiere dich vor einem Lehrgang über die genauen Details und lade ggf. Schulungsmaterial herunter.',
'["lehrgaenge"]',
0, NULL),

('password_change', 'Passwort Ändern', '/passwort',
'## Features
- **Sichere Passwortänderung:** Ermöglicht es dir, dein eigenes Passwort zu ändern.
- **Validierung:** Stellt sicher, dass dein neues Passwort den Sicherheitsrichtlinien entspricht.

## Use Cases
- Ändere dein initiales, zufälliges Passwort nach der ersten Anmeldung.
- Ändere dein Passwort regelmäßig, um die Sicherheit deines Kontos zu gewährleisten.',
'["profile"]',
0, NULL),

('event_feedback_form', 'Event-Feedback', '/feedback/event/:eventId',
'## Features
- **Sterne-Bewertung:** Gib eine schnelle Bewertung für den Gesamteindruck des Events ab.
- **Text-Feedback:** Formuliere detaillierte Kommentare und Verbesserungsvorschläge.

## Use Cases
- Gib den Organisatoren nach einem Event eine schnelle und unkomplizierte Rückmeldung.',
'["profile", "admin_feedback"]',
0, NULL),

('search_results', 'Suchergebnisse', '/suche',
'## Features
- **Globale Suche:** Zeigt die Ergebnisse deiner Suche über alle Bereiche der Anwendung (Events, Lager, Doku, etc.) an.
- **Kategorisierung:** Gruppiert die Ergebnisse nach Typ für eine bessere Übersicht.
- **Direktlinks:** Führt dich mit einem Klick direkt zur Detailseite des gefundenen Eintrags.

## Use Cases
- Finde schnell Informationen, ohne durch die einzelnen Menüs navigieren zu müssen.',
'[]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/service/SearchService.java')),

('pack_kit', 'Kit Packliste', '/pack-kit/:kitId',
'## Features
- **Druckbare Ansicht:** Zeigt eine übersichtliche, für den Ausdruck optimierte Liste aller Artikel, die in ein Kit gehören.
- **Checklisten-Format:** Ermöglicht das Abhaken der einzelnen Positionen beim Packen.

## Use Cases
- Scanne den QR-Code auf einem Koffer, um sofort die Packliste auf deinem Handy zu sehen.
- Drucke die Liste aus, um das Packen für ein Event zu erleichtern.',
'["admin_kits"]',
0, NULL),

('qr_action', 'QR-Code Aktion', '/lager/qr-aktion/:itemId',
'## Features
- **Schnellaktionen:** Bietet eine extrem vereinfachte Oberfläche zur schnellen Entnahme oder Rückgabe eines Artikels.
- **Optimiert für Mobilgeräte:** Das Layout ist speziell für die schnelle Bedienung auf einem Handy konzipiert.

## Use Cases
- Scanne den QR-Code auf einem Lagerartikel, um ihn schnell auszubuchen, ohne einen Computer benutzen zu müssen.',
'["storage_details"]',
0, NULL),

('login', 'Login', '/login',
'## Features
- **Benutzer-Authentifizierung:** Ermöglicht die Anmeldung mit Benutzername und Passwort.

## Use Cases
- Greife auf deinen personalisierten Bereich der Anwendung zu.',
'[]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/api/v1/auth/AuthResource.java')),

('forbidden', 'Zugriff Verweigert (403)', '/forbidden',
'## Features
- **Sicherheits-Feedback:** Informiert dich darüber, dass du versucht hast, auf einen Bereich zuzugreifen, für den deine aktuelle Rolle oder deine Berechtigungen nicht ausreichen.

## Use Cases
- Tritt auf, wenn ein normaler Benutzer versucht, eine Admin-URL direkt aufzurufen.',
'[]',
0, NULL),

('not_found', 'Seite Nicht Gefunden (404)', '*',
'## Features
- **Fehlerseite:** Informiert dich darüber, dass die von dir aufgerufene URL nicht existiert.

## Use Cases
- Tritt auf, wenn du einen veralteten Link oder eine falsch eingegebene URL aufrufst.',
'[]',
0, NULL),

('error_page', 'Interner Serverfehler (500)', 'errorElement',
'## Features
- **Fehlerseite:** Informiert dich darüber, dass ein unerwarteter Fehler auf dem Server aufgetreten ist.

## Use Cases
- Tritt auf, wenn ein Programmierfehler oder ein unvorhergesehenes Problem im Backend auftritt.',
'[]',
0, (SELECT id FROM wiki_documentation WHERE file_path = 'src/main/java/de/config/GlobalExceptionHandler.java')),

('help_list', 'Hilfe-Übersicht', '/help',
'## Features
- **Inhaltsverzeichnis:** Listet alle verfügbaren Hilfeseiten der Anwendung auf.
- **Navigation:** Dient als zentraler Einstiegspunkt in die Anwendungsdokumentation.

## Use Cases
- Finde schnell eine Anleitung für die Seite, bei der du gerade nicht weiterweißt.',
'["help_details"]',
0, NULL),

('help_details', 'Hilfe-Detailseite', '/help/:pageKey',
'## Features
- **Detaillierte Erklärung:** Beschreibt die Funktionen und Anwendungsfälle einer spezifischen Seite.
- **Verknüpfungen:** Bietet Links zu verwandten Hilfeseiten und zur technischen Dokumentation in der Admin-Wiki.

## Use Cases
- Lerne im Detail, wie eine bestimmte Seite funktioniert und wofür du sie verwenden kannst.',
'["help_list"]',
0, NULL);
========================================================================
FILE: src\main\resources\db\migration\V65__Repopulate_wiki_data_part6.sql
========================================================================

-- Flyway migration V65, Part 6: Overhaul Technical Wiki Documentation

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/api/v1/AdminAchievementResource.java',
'## 1. File Overview & Purpose

This class is a Spring `@RestController` that exposes administrative **CRUD (Create, Read, Update, Delete) endpoints** for managing `Achievement` entities. It provides the API for the admin page where achievements (badges) are defined.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It handles incoming HTTP requests for the `/api/v1/achievements` path, delegates the business logic to the `AchievementDAO`, and returns standardized `ApiResponse` objects in JSON format.

## 3. Key Dependencies & Libraries

- **Spring Web (`@RestController`, `@GetMapping`, etc.)**: Core annotations for defining REST endpoints.
- `AchievementDAO`: The Data Access Object used for all database operations related to achievements.
- `ApiResponse` (Model): The standard DTO for JSON responses.
- **Swagger/OpenAPI**: Annotations like `@Tag` and `@Operation` are used to generate API documentation.

## 4. In-Depth Breakdown

- **`getAllAchievements()`**: Handles `GET /`. Fetches all achievement definitions from the DAO.
- **`createAchievement(...)`**: Handles `POST /`. Takes an `Achievement` object from the request body and saves it via the DAO.
- **`updateAchievement(...)`**: Handles `PUT /{id}`. Updates an existing achievement.
- **`deleteAchievement(...)`**: Handles `DELETE /{id}`. Deletes an achievement.'),

('src/main/java/de/api/v1/AdminAnnouncementResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing announcements on the Digital Bulletin Board. It is the backend for the `/admin/announcements` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It handles HTTP requests, delegates logic to the `AnnouncementService`, and returns standardized JSON responses.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `AnnouncementService`: The service layer containing the business logic for managing announcements, including sanitization and logging.
- `SecurityUser`: Used to get the currently authenticated admin user for logging purposes.

## 4. In-Depth Breakdown

- **`getAllAnnouncements()`**: `GET /` - Fetches all announcements.
- **`createAnnouncement(...)`**: `POST /` - Creates a new announcement. It passes the DTO and the current admin user to the service.
- **`updateAnnouncement(...)`**: `PUT /{id}` - Updates an existing announcement.
- **`deleteAnnouncement(...)`**: `DELETE /{id}` - Deletes an announcement.'),

('src/main/java/de/api/v1/AdminChangelogResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing `Changelog` entries. It is the backend for the `/admin/changelogs` page, allowing admins to communicate updates to users.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It handles HTTP requests related to changelog management and delegates logic to the `ChangelogService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `ChangelogService`: The service layer containing business logic for changelogs.

## 4. In-Depth Breakdown

- **`getAllChangelogs()`**: `GET /` - Retrieves all changelog entries.
- **`createChangelog(...)`**: `POST /` - Creates a new changelog entry.
- **`updateChangelog(...)`**: `PUT /{id}` - Updates an existing entry.
- **`deleteChangelog(...)`**: `DELETE /{id}` - Deletes an entry.'),

('src/main/java/de/api/v1/AdminChecklistTemplateResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing `ChecklistTemplate` entities. It serves as the backend for the admin page where pre-flight checklist templates are created and managed.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It handles HTTP requests, delegates logic to the `ChecklistTemplateDAO`, and returns standardized JSON responses.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `ChecklistTemplateDAO`: The DAO for all database operations related to checklist templates.

## 4. In-Depth Breakdown

- **`getAllTemplates()`**: `GET /` - Retrieves all templates.
- **`createTemplate(...)`**: `POST /` - Creates a new template and its associated items in a transaction.
- **`updateTemplate(...)`**: `PUT /{id}` - Updates a template and its items.
- **`deleteTemplate(...)`**: `DELETE /{id}` - Deletes a template.'),

('src/main/java/de/api/v1/AdminDamageReportResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides endpoints for administrators to manage user-submitted `DamageReport`s. It allows admins to view pending reports and then either confirm (which marks the item as defective) or reject them.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/admin/damage-reports` page and delegates the complex, transactional logic to the `StorageService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `StorageService`: The service containing the business logic for confirming or rejecting a damage report.
- `DamageReportDAO`: Used to fetch the list of pending reports.

## 4. In-Depth Breakdown

- **`getPendingReports()`**: `GET /pending` - Fetches all reports with a "PENDING" status.
- **`confirmReport(...)`**: `POST /{reportId}/confirm` - Triggers the `storageService` to mark the associated item as defective and update the report''s status to "CONFIRMED".
- **`rejectReport(...)`**: `POST /{reportId}/reject` - Triggers the `storageService` to update the report''s status to "REJECTED" and record the admin''s notes.'),

('src/main/java/de/api/v1/AdminDashboardResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides a single, aggregated API endpoint for the administrative dashboard. It fetches all the data required for the dashboard widgets in one call.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the sole data source for the `/admin/dashboard` frontend page. It delegates all data aggregation logic to the `AdminDashboardService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining the REST endpoint.
- `AdminDashboardService`: The service that gathers data from multiple DAOs to build the `DashboardDataDTO`.

## 4. In-Depth Breakdown

- **`getDashboardData()`**: `GET /` - Calls the `dashboardService` to get a `DashboardDataDTO` containing upcoming events, low-stock items, recent logs, and event trend data, then returns it as a JSON response.'),

('src/main/java/de/api/v1/AdminDocumentationResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing the user-facing `PageDocumentation`. It is the backend for the `/admin/documentation` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It handles HTTP requests and delegates business logic to the `PageDocumentationService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `PageDocumentationService`: The service that handles the business logic for documentation pages.

## 4. In-Depth Breakdown

- **`getAllDocs()`**: `GET /` - Retrieves all documentation pages.
- **`getDocByKey(...)`**: `GET /{pageKey}` - Retrieves a single documentation page by its unique key.
- **`createDoc(...)`**: `POST /` - Creates a new documentation page.
- **`updateDoc(...)`**: `PUT /{id}` - Updates an existing page.
- **`deleteDoc(...)`**: `DELETE /{id}` - Deletes a page.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V66__Repopulate_wiki_data_part7.sql
========================================================================

-- Flyway migration V66, Part 7: Overhaul Technical Wiki Documentation

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/api/v1/AdminEventDebriefingResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the API endpoints for managing post-event `EventDebriefing` reports. It allows authorized users (admins or event leaders) to create, view, and update these reports.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/admin/veranstaltungen/:eventId/debriefing` and `/admin/debriefings` pages. It delegates complex business logic, such as data enrichment and notifications, to the `EventDebriefingService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `EventDebriefingService`: The service that handles the creation, updating, and data enrichment of debriefings.
- `EventDAO`, `EventDebriefingDAO`: Used by the service and controller for database access.

## 4. In-Depth Breakdown

- **`getAllDebriefings()`**: `GET /debriefings` - Retrieves a list of all debriefing reports.
- **`getDebriefingForEvent(...)`**: `GET /{eventId}/debriefing` - Fetches the specific debriefing for a given event.
- **`saveDebriefing(...)`**: `POST /{eventId}/debriefing` - This is an "upsert" endpoint. It creates a new debriefing if one doesn''t exist for the event, or updates the existing one if it does.'),

('src/main/java/de/api/v1/AdminEventResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing `Event` entities. It handles complex multipart requests that include both JSON data for the event and an optional file upload for attachments.

## 2. Architectural Role

This is a key component of the **Web/API Tier**. It serves as the backend for the main event management page (`/admin/veranstaltungen`). It delegates the complex, transactional logic of saving an event and all its related data (skills, reservations, attachments) to the `EventService`.

## 3. Key Dependencies & Libraries

- **Spring Web (`@RequestPart`)**: Used to handle multipart form data, separating the JSON part from the file part.
- `EventService`: The service that contains the transactional logic for creating, updating, and cloning events.
- `EventDAO`: Used for basic event data retrieval and deletion.
- `EventUpdateRequest` (DTO): A record used to represent the structured JSON data part of the request.

## 4. In-Depth Breakdown

- **`getAllEvents()`**: `GET /` - Retrieves a list of all events.
- **`createEvent(...)`**: `POST /` - Handles the creation of a new event. It receives a multipart request and passes the event data and optional file to the `eventService`.
- **`updateEvent(...)`**: `POST /{id}` - Handles updating an existing event, also using a multipart request.
- **`cloneEvent(...)`**: `POST /{id}/clone` - Triggers the `eventService` to create a deep copy of an existing event, including its skill requirements and tasks.
- **`deleteEvent(...)`**: `DELETE /{id}` - Deletes an event.'),

('src/main/java/de/api/v1/AdminEventRoleResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing reusable `EventRole` entities. It is the backend for the `/admin/event-roles` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It delegates database operations directly to the `EventRoleDAO`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `EventRoleDAO`: The DAO for all database operations related to event roles.

## 4. In-Depth Breakdown

- **`getAllRoles()`**: `GET /` - Retrieves all defined event roles.
- **`createRole(...)`**: `POST /` - Creates a new event role.
- **`updateRole(...)`**: `PUT /{id}` - Updates an existing role.
- **`deleteRole(...)`**: `DELETE /{id}` - Deletes a role.'),

('src/main/java/de/api/v1/AdminFeedbackResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative API endpoints for managing general `FeedbackSubmission`s. It is the backend for the Kanban-style feedback board on the `/admin/feedback` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It handles fetching all submissions and updating their status.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `FeedbackSubmissionDAO`: The DAO for all database operations related to feedback.

## 4. In-Depth Breakdown

- **`getAllSubmissions()`**: `GET /` - Retrieves all feedback submissions, ordered correctly for display on the Kanban board.
- **`updateStatus(...)`**: `PUT /{id}/status` - Updates the status of a single feedback submission (e.g., from "NEW" to "VIEWED"). This is triggered when a card is moved on the board or updated in the modal.'),

('src/main/java/de/api/v1/AdminFileResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative API for managing files and `FileCategory` entities. It handles file uploads, deletions, and category management.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/admin/dateien` page. It delegates file storage and database logic to the `FileService`.

## 3. Key Dependencies & Libraries

- **Spring Web (`@RequestParam`, `@RequestPart`)**: For handling multipart file uploads.
- `FileService`: The service that contains the logic for securely storing and deleting files, including validation.
- `FileDAO`: Used by the service and for category management.

## 4. In-Depth Breakdown

- **`uploadFile(...)`**: `POST /` - Handles a multipart request to upload a new file, assign it to a category, and set its required role.
- **`deleteFile(...)`**: `DELETE /{id}` - Deletes a file record from the database and the corresponding physical file from the disk.
- **`createCategory(...)`**: `POST /categories` - Creates a new file category.
- **`deleteCategory(...)`**: `DELETE /categories/{id}` - Deletes a category.
- **`getAllFiles()`**: `GET /` - Retrieves all files, regardless of role, for the admin view.
- **`getAllCategories()`**: `GET /categories` - Retrieves all defined file categories.'),

('src/main/java/de/api/v1/AdminFormDataResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides a specialized, aggregated API endpoint that serves up all the data needed to populate the administrative user creation and editing forms. It fetches all available roles and permissions in a single request.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It acts as an efficient data source for the frontend''s `AdminUsersPage`, reducing the number of initial HTTP requests required to render the user modal.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining the REST endpoint.
- `RoleDAO`, `PermissionDAO`: The DAOs used to fetch the form data.

## 4. In-Depth Breakdown

- **`getFormDataForUserForms()`**: `GET /` - The single endpoint in this controller.
    - It calls `roleDAO.getAllRoles()` to get the list of all possible user roles.
    - It calls `permissionDAO.getAllPermissions()` to get a flat list of all permissions.
    - It then processes the permissions list, grouping them by their prefix (e.g., "USER_", "EVENT_") into a `Map` structure.
    - It returns a single JSON object containing both the `roles` list and the `groupedPermissions` map.'),

('src/main/java/de/api/v1/AdminNotificationResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the API endpoints for the real-time notification system. It includes an endpoint for clients to subscribe to Server-Sent Events (SSE) and an endpoint for administrators to send broadcast notifications.

## 2. Architectural Role

This is a key component of the **Web/API Tier** for real-time features. It is the backend for the `/admin/benachrichtigungen` page and the primary entry point for clients to receive live updates.

## 3. Key Dependencies & Libraries

- **Spring Web (`SseEmitter`)**: The core Spring class for handling Server-Sent Events.
- `NotificationService`: The service that manages all SSE connections and broadcasting logic.
- `NotificationRequest` (DTO): A record used for validating the incoming notification payload.

## 4. In-Depth Breakdown

- **`handleSse(...)`**: `GET /sse` - This is the subscription endpoint. When a client connects, this method registers their connection (as an `SseEmitter`) with the `NotificationService` and keeps the connection open to receive push notifications.
- **`sendNotification(...)`**: `POST /` - This endpoint allows an admin to send a notification. It takes a `NotificationRequest` DTO, determines the target audience (all users, event participants, etc.), and calls the `notificationService` to push the message to all relevant connected clients.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V67__Repopulate_wiki_data_part8.sql
========================================================================

-- Flyway migration V67, Part 8: Overhaul Technical Wiki Documentation

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/api/v1/AdminRequestResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative endpoints for managing user-submitted `ProfileChangeRequest`s. It allows admins to view pending requests and to either approve or deny them.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/admin/requests` page. It delegates the transactional logic of approving/denying requests to the `ProfileRequestService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `ProfileRequestService`: The service containing the business logic for processing change requests.
- `ProfileChangeRequestDAO`: Used by the service and controller for database access.

## 4. In-Depth Breakdown

- **`getPendingRequests()`**: `GET /pending` - Fetches all requests with a "PENDING" status for display in the admin UI.
- **`approveRequest(...)`**: `POST /{id}/approve` - Approves a request. The service handles updating the user''s profile, marking the request as "APPROVED", and sending notifications.
- **`denyRequest(...)`**: `POST /{id}/deny` - Denies a request, which simply updates its status in the database.'),

('src/main/java/de/api/v1/AdminStorageRelationsResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative API for managing relationships between `StorageItem`s. It is the backend for the "Related Items" management modal in the admin storage interface.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is scoped under `/api/v1/admin/storage/{itemId}/relations`. It delegates all logic to the `StorageItemRelationService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `StorageItemRelationService`: The service that handles the transactional logic of updating item relationships.

## 4. In-Depth Breakdown

- **`getRelatedItems(...)`**: `GET /` - Fetches the list of items currently related to the specified `itemId`.
- **`updateRelatedItems(...)`**: `PUT /` - Takes a list of `relatedItemIds` and completely overwrites the existing relationships for the specified `itemId`.'),

('src/main/java/de/api/v1/AdminTrainingRequestResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative endpoints for managing user-submitted `TrainingRequest`s. It allows admins to view and delete these requests.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/admin/training-requests` page.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `TrainingRequestService`: The service for handling the business logic of training requests.

## 4. In-Depth Breakdown

- **`getAllRequests()`**: `GET /` - Retrieves all training requests, including a count of how many users are interested in each.
- **`deleteRequest(...)`**: `DELETE /{id}` - Deletes a training request.'),

('src/main/java/de/api/v1/AdminVenueResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing `Venue` entities. It handles multipart requests for creating/updating venues with an optional map image upload.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/admin/venues` page.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints and handling multipart data.
- `VenueDAO`: The DAO for all database operations related to venues.
- `FileService`: Used to handle the storage of the uploaded map image.

## 4. In-Depth Breakdown

- **`getAllVenues()`**: `GET /` - Retrieves all defined venues.
- **`createVenue(...)`**: `POST /` - Creates a new venue. It takes a JSON part for the venue data and an optional file part for the map image.
- **`updateVenue(...)`**: `PUT /{id}` - Updates an existing venue.
- **`deleteVenue(...)`**: `DELETE /{id}` - Deletes a venue.'),

('src/main/java/de/api/v1/ChecklistResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the API endpoints for interacting with an event''s inventory checklist. This is a user-facing API, used by participants of an event on the `EventDetailsPage`.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is scoped under `/api/v1/events/{eventId}/checklist`. It delegates all database logic to the `ChecklistDAO`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `ChecklistDAO`: The DAO for all checklist-related database operations.

## 4. In-Depth Breakdown

- **`getChecklist(...)`**: `GET /` - Retrieves all checklist items for the specified event.
- **`generateChecklist(...)`**: `POST /generate` - A utility endpoint that populates or refreshes the event''s checklist based on the items currently reserved for that event.
- **`updateStatus(...)`**: `PUT /{checklistItemId}/status` - Updates the status of a single checklist item (e.g., from "PENDING" to "PACKED_OUT").'),

('src/main/java/de/api/v1/CourseResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing `Course` templates. It is the backend for the `/admin/lehrgaenge` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It delegates all database operations directly to the `CourseDAO`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `CourseDAO`: The DAO for all database operations related to course templates.

## 4. In-Depth Breakdown

- **`getAllCourses()`**: `GET /` - Retrieves all course templates.
- **`createCourse(...)`**: `POST /` - Creates a new course template.
- **`updateCourse(...)`**: `PUT /{id}` - Updates an existing template.
- **`deleteCourse(...)`**: `DELETE /{id}` - Deletes a template.'),

('src/main/java/de/api/v1/KitResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing `InventoryKit` entities. It is the backend for the `/admin/kits` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It delegates all database operations directly to the `InventoryKitDAO`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `InventoryKitDAO`: The DAO for all database operations related to inventory kits.

## 4. In-Depth Breakdown

- **`getAllKits()`**: `GET /` - Retrieves all kits, including their item contents.
- **`createKit(...)`**: `POST /` - Creates a new kit.
- **`updateKit(...)`**: `PUT /{id}` - Updates a kit''s metadata (name, description, etc.). Note: Updating kit *items* is handled by a separate endpoint.
- **`deleteKit(...)`**: `DELETE /{id}` - Deletes a kit.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V68__Repopulate_wiki_data_part9.sql
========================================================================

-- Flyway migration V68, Part 9: Overhaul Technical Wiki Documentation

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/api/v1/LogResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides an API endpoint for viewing the `AdminLog`. It is the backend for the `/admin/log` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It directly interacts with the `AdminLogDAO` to retrieve log data.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `AdminLogDAO`: The DAO for retrieving log entries.

## 4. In-Depth Breakdown

- **`getLogs(...)`**: `GET /` - Retrieves admin action logs. It accepts an optional `limit` query parameter to fetch only the most recent N entries, which is used by the admin dashboard widget.'),

('src/main/java/de/api/v1/MatrixResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the API endpoints for the Qualification Matrix feature. It serves the aggregated data needed to build the matrix view and handles updates to attendance records.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/admin/matrix` page. It coordinates several DAOs to assemble the matrix data.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `UserDAO`, `CourseDAO`, `MeetingDAO`, `MeetingAttendanceDAO`: The various DAOs needed to fetch all users, all courses, all meetings for those courses, and all attendance records.

## 4. In-Depth Breakdown

- **`getMatrixData()`**: `GET /` - This is the main data-fetching endpoint. It queries all necessary tables and returns a single, large JSON object containing lists of users, courses, meetings grouped by course, and a map of all attendance records. The frontend then uses this data to construct the visual matrix.
- **`updateAttendance(...)`**: `PUT /attendance` - This endpoint is called when an admin clicks a cell in the matrix. It takes a `MeetingAttendance` object and updates the database, marking a user as having attended (or not attended) a specific meeting.'),

('src/main/java/de/api/v1/MeetingResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for managing `Meeting` entities (specific training dates). It is the backend for the `/admin/lehrgaenge/:courseId/meetings` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It delegates database operations to the `MeetingDAO` and business logic (like cloning) to the `EventService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `MeetingDAO`: The DAO for meeting-related database operations.
- `EventService`: Contains the logic for cloning a meeting.
- `MeetingRequest` (DTO): A record for validating incoming create/update requests.

## 4. In-Depth Breakdown

- **`getMeetingsForCourse(...)`**: `GET /` - Retrieves all meetings for a specific parent course.
- **`getMeetingById(...)`**: `GET /{id}` - Retrieves a single meeting''s details.
- **`createMeeting(...)`**: `POST /` - Creates a new meeting.
- **`updateMeeting(...)`**: `PUT /{id}` - Updates an existing meeting.
- **`cloneMeeting(...)`**: `POST /{id}/clone` - Clones a meeting to serve as a template for a new one.
- **`deleteMeeting(...)`**: `DELETE /{id}` - Deletes a meeting.'),

('src/main/java/de/api/v1/ReportResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides API endpoints for generating analytical reports and aggregated statistics. It is the backend for the `/admin/berichte` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It delegates the execution of complex, aggregate SQL queries to the specialized `ReportDAO`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `ReportDAO`: The DAO containing all the analytical queries.

## 4. In-Depth Breakdown

- **`getDashboardReport()`**: `GET /dashboard` - A dedicated endpoint that aggregates several key metrics (event trend, user activity, inventory value) required specifically for the admin reports dashboard page. This provides all necessary data in a single API call.'),

('src/main/java/de/api/v1/StorageResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the primary administrative CRUD endpoints for managing `StorageItem` entities. It is the backend for the main `/admin/lager` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It delegates database operations directly to the `StorageDAO`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `StorageDAO`: The DAO for all inventory item database operations.

## 4. In-Depth Breakdown

- **`getAllItems()`**: `GET /` - Retrieves all items in the inventory.
- **`createItem(...)`**: `POST /` - Creates a new inventory item.
- **`updateItem(...)`**: `PUT /{id}` - Updates an existing item.
- **`deleteItem(...)`**: `DELETE /{id}` - Deletes an item.'),

('src/main/java/de/api/v1/SystemResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides an API endpoint to retrieve live statistics about the server''s system health. It is the backend for the `/admin/system` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It delegates the task of collecting OS-level metrics to the `SystemInfoService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `SystemInfoService`: The service that interacts with the OS to get stats like CPU, RAM, and disk usage.

## 4. In-Depth Breakdown

- **`getSystemStats()`**: `GET /stats` - Calls the `systemInfoService` to gather current system statistics and returns them in a `SystemStatsDTO`.'),

('src/main/java/de/api/v1/UserResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the primary administrative CRUD and management endpoints for `User` accounts. It is the backend for the `/admin/mitglieder` page.

## 2. Architectural Role

This is a key component of the **Web/API Tier**. It handles all user management tasks, delegating transactional operations to the `UserService` and simple queries to the `UserDAO`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `UserService`: For transactional creation and updates of users and their permissions.
- `UserDAO`: For fetching and deleting users.
- `LoginAttemptService`: For unlocking user accounts.
- `PasswordPolicyValidator`: For validating new passwords.
- `UserCreateRequest`, `UserUpdateRequest` (DTOs): For validating incoming request bodies.

## 4. In-Depth Breakdown

- **`getAllUsers()`**: `GET /` - Retrieves a list of all users.
- **`getUserById(...)`**: `GET /{id}` - Retrieves a single user with their full set of permissions.
- **`createUser(...)`**: `POST /` - Creates a new user after validating the password policy.
- **`updateUser(...)`**: `PUT /{id}` - Updates a user''s details and permissions.
- **`deleteUser(...)`**: `DELETE /{id}` - Deletes a user, with a check to prevent the deletion of the default admin.
- **`resetPassword(...)`**: `POST /{id}/reset-password` - Generates a new random password for a user and returns it in the API response.
- **`unlockUser(...)`**: `POST /{id}/unlock` - Clears the failed login attempts for a user, unlocking their account.'),

('src/main/java/de/api/v1/WikiResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the administrative CRUD endpoints for the technical `WikiEntry` documentation. It is the backend for the `/admin/wiki` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It delegates data retrieval and persistence to the `WikiDAO` and the hierarchical tree generation to the `WikiService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `WikiService`: For generating the navigation tree structure.
- `WikiDAO`: For all database operations related to wiki pages.
- `WikiUpdateRequest` (DTO): For validating update requests.

## 4. In-Depth Breakdown

- **`getWikiTree()`**: `GET /` - Retrieves all wiki pages and structures them into a nested map for the frontend navigation tree.
- **`getWikiList()`**: `GET /list` - Retrieves a flat list of all wiki pages, used for populating dropdowns in other parts of the admin UI.
- **`getWikiEntryById(...)`**: `GET /{id}` - Fetches the content of a single wiki page.
- **`createWikiEntry(...)`**: `POST /` - Creates a new wiki page.
- **`updateWikiEntry(...)`**: `PUT /{id}` - Updates the content of an existing wiki page.
- **`deleteWikiEntry(...)`**: `DELETE /{id}` - Deletes a wiki page.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V69__Repopulate_wiki_data_part10.sql
========================================================================

-- Flyway migration V69, Part 10: Overhaul Technical Wiki Documentation

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/api/v1/auth/AuthResource.java',
'## 1. File Overview & Purpose

This `@RestController` handles all primary authentication and session management endpoints. It is responsible for user login, logout, and retrieving the current user''s session data.

## 2. Architectural Role

This is a core component of the **Security Tier**, operating at the **Web/API Tier**. It is the main entry point for users to authenticate with the application.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- **Spring Security (`@AuthenticationPrincipal`)**: For accessing the currently authenticated user details.
- `AuthService`: The service containing the logic for JWT creation, validation, and cookie management.
- `LoginAttemptService`: The service used to track and block failed login attempts.
- `UserDAO`: For validating user credentials.
- `LoginRequest` (DTO): A record for the login request payload.

## 4. In-Depth Breakdown

- **`login(...)`**: `POST /login` - This is the main login endpoint.
    1.  It first checks if the user is currently locked out via the `LoginAttemptService`.
    2.  If not locked out, it calls `userDAO.validateUser()` to check the credentials against the database.
    3.  On success, it clears any failed login attempts, calls `authService.addJwtCookie()` to set the secure, HttpOnly authentication cookie on the response, and returns the `User` object.
    4.  On failure, it records the failed attempt and returns an HTTP 401 (Unauthorized) error.
- **`getCurrentUser(...)`**: `GET /me` - This endpoint is called by the frontend on application load to establish the user''s session. It uses the `@AuthenticationPrincipal` (populated by the `JwtAuthFilter`) to get the current user, retrieves their authorized navigation items from the `NavigationRegistry`, and returns both in the response.
- **`logout(...)`**: `POST /logout` - Calls `authService.clearJwtCookie()` to send a response header that immediately expires the authentication cookie on the client''s browser, effectively logging them out.'),

('src/main/java/de/api/v1/auth/LoginRequest.java',
'## 1. File Overview & Purpose

This is a simple **Data Transfer Object (DTO)** implemented as a Java `record`. Its purpose is to define a strongly-typed structure for the JSON payload of a login request.

## 2. Architectural Role

This class is part of the **Model Tier**, specifically for the **Web/API Tier**. It is used as the `@RequestBody` in the `AuthResource`''s login method.

## 3. Key Dependencies & Libraries

- **Jakarta Validation (`@NotBlank`)**: Provides declarative validation, ensuring that both username and password fields are not empty.
- **Swagger/OpenAPI (`@Schema`)**: Provides metadata for the auto-generated API documentation, describing the fields and marking them as required.

## 4. In-Depth Breakdown

- **`record`**: Using a Java record automatically generates a final class with a constructor, getters, `equals()`, `hashCode()`, and `toString()` methods, reducing boilerplate code for this simple, immutable data container.'),

('src/main/java/de/api/v1/dto/CategoryRequest.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for a request to create a new file category.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `AdminFileResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation (`@NotBlank`, `@Size`)**: For declarative validation of the category name.

## 4. In-Depth Breakdown

- The record ensures that any request to create a category must contain a non-blank `name` field that is between 2 and 100 characters long.'),

('src/main/java/de/api/v1/dto/EventDebriefingDTO.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for a request to create or update an `EventDebriefing`.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `AdminEventDebriefingResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation (`@NotNull`)**: Ensures that the core feedback fields are not null.

## 4. In-Depth Breakdown

- The record defines the fields for what went well, what to improve, equipment notes, and a list of user IDs for standout crew members. This provides a clear, strongly-typed contract for the API endpoint.'),

('src/main/java/de/api/v1/dto/EventUpdateRequest.java',
'## 1. File Overview & Purpose

This is a comprehensive Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for the JSON part of a multipart request to create or update an `Event`.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestPart` in the `AdminEventResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation**: For declarative validation of key fields like `name` and `eventDateTime`.

## 4. In-Depth Breakdown

- This record aggregates all possible data for an event into a single object:
    - Core event details (name, times, location, etc.).
    - Skill requirements (`requiredCourseIds`, `requiredPersons`).
    - Item reservations (`itemIds`, `quantities`).
- This simplifies the controller logic, as all this data can be deserialized and validated automatically from a single JSON object.'),

('src/main/java/de/api/v1/dto/GeneralFeedbackRequest.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for a user submitting general feedback.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `PublicFeedbackResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation**: For declarative validation of the `subject` and `content` fields.

## 4. In-Depth Breakdown

- The record ensures that all general feedback submissions have a non-blank subject and content, enforcing data integrity at the API boundary.'),

('src/main/java/de/api/v1/dto/MeetingRequest.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for creating or updating a `Meeting`.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `MeetingResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation**: Provides validation rules, such as `@FutureOrPresent` to ensure a meeting is not scheduled in the past.

## 4. In-Depth Breakdown

- This record encapsulates all the necessary data for a meeting and uses validation annotations to enforce business rules directly on the DTO, simplifying validation logic in the controller.'),

('src/main/java/de/api/v1/dto/NotificationRequest.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for an administrative request to send a broadcast notification.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `AdminNotificationResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation**: Provides validation rules for the notification fields.
- **Swagger/OpenAPI (`@Schema`)**: The `allowableValues` attribute is used to document the valid options for `level` and `targetType` in the API documentation.

## 4. In-Depth Breakdown

- This record defines all the parameters for a notification: its content (`title`, `description`), its severity (`level`), and its audience (`targetType`, `targetId`). This structured approach makes the notification sending process robust and easy to validate.'),

('src/main/java/de/api/v1/dto/PasswordChangeRequest.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for a request from a user to change their own password.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `PublicProfileResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation**: Ensures all three password fields are not blank.

## 4. In-Depth Breakdown

- The record contains the user''s `currentPassword` (for verification), the `newPassword`, and a `confirmPassword`. The service logic will then validate that the current password is correct and that the new password and confirmation match.'),

('src/main/java/de/api/v1/dto/ProfileChangeRequestDTO.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for a user submitting a request to change their profile data.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `PublicProfileResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation**: Includes an `@Email` annotation for basic email format validation.

## 4. In-Depth Breakdown

- This record contains all the fields a user is allowed to request changes for. The fields are nullable (`Integer`, not `int`) because a user might only want to change one field at a time. The service logic will compare the non-null values in this DTO against the user''s current data to determine what has actually changed.'),

('src/main/java/de/api/v1/dto/UserCreateRequest.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for an administrative request to create a new user.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `UserResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation**: Provides comprehensive validation rules for all fields, ensuring data integrity before the service layer is even invoked.

## 4. In-Depth Breakdown

- This record defines all the necessary fields for creating a new user, including their username, initial password, role, and initial set of individual permissions. Using a dedicated DTO for creation allows for stricter validation (e.g., making the password non-blank).'),

('src/main/java/de/api/v1/dto/UserUpdateRequest.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for an administrative request to update an existing user.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `UserResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation**: Provides validation rules for the user fields.

## 4. In-Depth Breakdown

- This DTO is similar to the `UserCreateRequest` but notably lacks a `password` field, as password changes are handled by a separate, dedicated "reset password" endpoint. This follows the principle of specific DTOs for specific actions.'),

('src/main/java/de/api/v1/dto/WikiUpdateRequest.java',
'## 1. File Overview & Purpose

This is a Data Transfer Object (DTO) implemented as a Java `record`. It defines the structure for a request to update the content of a wiki page.

## 2. Architectural Role

This class is part of the **Model Tier** and is used in the **Web/API Tier** as the `@RequestBody` for the `WikiResource`.

## 3. Key Dependencies & Libraries

- **Jakarta Validation**: Ensures that the `content` field is not null.

## 4. In-Depth Breakdown

- This simple record encapsulates the new Markdown content for a wiki page, providing a clear and type-safe API contract for the update operation.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V6__Populate_wiki_data_part1.sql
========================================================================

-- Flyway migration V6, Part 1

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('pom.xml', '1.  **File Overview & Purpose**\n\n    This is the Project Object Model (POM) file for Maven, the build and dependency management tool for this project. It defines the project''s coordinates, dependencies, build settings, and plugins. It is the central configuration file for building the `TechnikTeam.jar` artifact.\n\n2.  **Architectural Role**\n\n    This is a core project configuration file, not belonging to a specific architectural tier. It defines the project''s structure and the libraries that will be available at runtime for all tiers.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Spring Boot Starters**: Provide a one-stop-shop for all the dependencies needed for a specific functionality (e.g., `spring-boot-starter-web`, `spring-boot-starter-security`).\n    *   **Flyway**: Manages database schema migrations, ensuring the database is always in a consistent and up-to-date state.\n    *   **MariaDB/MySQL Connector**: The JDBC driver for the database.\n    *   **Log4j 2**: A robust logging framework used for application-wide logging and auditing.\n    *   **JWT (jjwt)**: A library for creating and parsing JSON Web Tokens for stateless authentication.\n    *   **Swagger/Springdoc**: For automatic generation of API documentation.\n\n4.  **In-Depth Breakdown**\n\n    *   **`<parent>`**: Inherits default settings from the `spring-boot-starter-parent`, which manages dependency versions and default plugin configurations.\n    *   **`<properties>`**: Defines common version numbers for dependencies (`springdoc-openapi.version`, `jjwt.version`, etc.) and sets the project''s Java version to `21`.\n    *   **`<dependencies>`**: Contains the list of all external libraries the project depends on. Key groups include:\n        *   **Spring Boot**: Core starters for Web, Data JPA, Security, Validation, WebSocket, and Log4j2.\n        *   **Database**: `flyway-core`, `flyway-mysql`, and `mariadb-java-client` provide everything needed for database migration and connectivity.\n        *   **Security**: The `jjwt` artifacts for JWT handling and `webauthn-server-core` for Passkey support.\n        *   **API Documentation**: `springdoc-openapi-starter-webmvc-ui` integrates Swagger UI.\n        *   **Utilities**: Various libraries for tasks like iCalendar generation (`ical4j`), caching (`caffeine`), and JSON serialization (`gson` is included via Spring Boot).\n    *   **`<build>`**: Configures the Maven build process.\n        *   `spring-boot-maven-plugin`: Packages the application as an executable JAR.\n        *   `maven-compiler-plugin`: Configures the Java compiler version.'),
('src/main/java/de/config/DateFormatter.java', '1.  **File Overview & Purpose**\n\n    This is a utility class providing static methods for consistent date and time formatting throughout the application. It ensures that all `java.time.LocalDateTime` objects are displayed in a standardized, German-locale format (e.g., \"10.06.2025, 17:45 Uhr\").\n\n2.  **Architectural Role**\n\n    This is a cross-cutting concern utility, used primarily in the **Model** and **Web/API** tiers. Models use it to provide pre-formatted strings for DTOs, ensuring a consistent user experience.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `java.time.LocalDateTime`: The modern Java date-time API object that this class formats.\n    *   `java.time.format.DateTimeFormatter`: The core Java class used for defining and applying date-time format patterns.\n\n4.  **In-Depth Breakdown**\n\n    *   **`formatDateTime(LocalDateTime ldt)`**\n        *   **Method Signature:** `public static String formatDateTime(LocalDateTime ldt)`\n        *   **Purpose:** Formats a `LocalDateTime` into a full date and time string.\n        *   **Parameters:**\n            *   `ldt` (LocalDateTime): The date-time object to format.\n        *   **Returns:** A formatted string like \"dd.MM.yyyy, HH:mm\" (e.g., \"10.06.2025, 17:45\"), or an empty string if the input is null.\n        *   **Side Effects:** None.\n\n    *   **`formatDate(LocalDateTime ldt)`**\n        *   **Method Signature:** `public static String formatDate(LocalDateTime ldt)`\n        *   **Purpose:** Formats a `LocalDateTime` into a date-only string.\n        *   **Parameters:**\n            *   `ldt` (LocalDateTime): The date-time object to format.\n        *   **Returns:** A formatted string like \"dd.MM.yyyy\" (e.g., \"10.06.2025\"), or an empty string if the input is null.\n        *   **Side Effects:** None.\n\n    *   **`formatDateTimeRange(LocalDateTime start, LocalDateTime end)`**\n        *   **Method Signature:** `public static String formatDateTimeRange(LocalDateTime start, LocalDateTime end)`\n        *   **Purpose:** Intelligently formats a date range. It provides a more compact format if the start and end times are on the same day.\n        *   **Parameters:**\n            *   `start` (LocalDateTime): The start of the range.\n            *   `end` (LocalDateTime): The end of the range (can be null).\n        *   **Returns:** A user-friendly string representing the range.\n            *   If `end` is null: \"10.06.2025, 17:45 Uhr\"\n            *   If same day: \"10.06.2025, 17:45 - 19:00 Uhr\"\n            *   If different days: \"10.06.2025, 17:45 Uhr - 11.06.2025, 18:00 Uhr\"\n        *   **Side Effects:** None.'),
('src/main/java/de/config/GlobalExceptionHandler.java', '1.  **File Overview & Purpose**\n\n    This class is a centralized, global exception handler for the Spring Boot application. Annotated with `@ControllerAdvice`, it intercepts exceptions thrown from any controller (`@RestController`) and transforms them into a standardized, user-friendly JSON `ApiResponse` object. This ensures that the frontend always receives a consistent error structure and prevents the leakage of sensitive stack traces.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting **Configuration** component that operates at the boundary of the **Web/API Tier**. It provides a uniform error handling policy for the entire REST API.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Spring Framework (`@ControllerAdvice`, `@ExceptionHandler`)**: Core annotations for creating a global exception handler.\n    *   `ApiResponse` (Model): The standard DTO used for all API responses, including errors.\n\n4.  **In-Depth Breakdown**\n\n    *   **`handleValidationExceptions(MethodArgumentNotValidException ex)`**\n        *   **Purpose:** Specifically handles exceptions thrown when `@Valid` validation fails on a request body (DTO).\n        *   **Logic:** It extracts all field validation errors, concatenates them into a single, human-readable message, and returns an `ApiResponse` with an HTTP 400 (Bad Request) status.\n\n    *   **`handleAccessDeniedException(AccessDeniedException ex)`**\n        *   **Purpose:** Handles exceptions thrown by Spring Security when a user, although authenticated, does not have the required permission/authority to access an endpoint (e.g., due to `@PreAuthorize` checks).\n        *   **Logic:** Returns a standard `ApiResponse` with a clear "Access Denied" message and an HTTP 403 (Forbidden) status.\n\n    *   **`handleAllExceptions(Exception ex)`**\n        *   **Purpose:** A catch-all handler for any other unhandled exceptions that may occur within the application.\n        *   **Logic:** It logs the exception (implicitly done by Spring Boot) and returns a generic "internal server error" `ApiResponse` with an HTTP 500 status. It includes the exception message in the data payload for debugging purposes (which might be stripped in a hardened production environment).'),
('src/main/java/de/config/LocalDateTimeAdapter.java', '1.  **File Overview & Purpose**\n\n    This is a custom `TypeAdapter` for the Gson library, designed to handle both serialization and deserialization of `java.time.LocalDateTime` objects. It ensures these objects are consistently formatted as ISO 8601 strings (e.g., \"2025-07-25T10:30:00\") in JSON, which is a robust and standard way to exchange date-time information.\n\n2.  **Architectural Role**\n\n    This is a **Configuration** / **Utility** class. It is crucial for the **Web/API Tier** controllers that consume or produce JSON containing `LocalDateTime` objects. A `TypeAdapter` handles both directions of data conversion.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Gson (`com.google.gson.TypeAdapter`)**: The base class from the Gson library for creating custom serialization and deserialization logic.\n    *   `java.time.LocalDateTime`: The modern Java date-time API class this adapter handles.\n\n4.  **In-Depth Breakdown**\n\n    *   **`write(JsonWriter out, LocalDateTime value)`**\n        *   **Method Signature:** `public void write(JsonWriter out, LocalDateTime value) throws IOException`\n        *   **Purpose:** Serializes a `LocalDateTime` object to its JSON string representation.\n        *   **Parameters:**\n            *   `out` (JsonWriter): The Gson stream writer.\n            *   `value` (LocalDateTime): The object to write.\n        *   **Returns:** void.\n        *   **Side Effects:** Writes the ISO-formatted date-time string or `null` to the output JSON stream.\n\n    *   **`read(JsonReader in)`**\n        *   **Method Signature:** `public LocalDateTime read(JsonReader in) throws IOException`\n        *   **Purpose:** Deserializes an ISO-formatted date-time string from JSON into a `LocalDateTime` object.\n        *   **Parameters:**\n            *   `in` (JsonReader): The Gson stream reader.\n        *   **Returns:** A `LocalDateTime` object, or `null` if the JSON value was null.\n        *   **Side Effects:** Reads from the input JSON stream.'),
('src/main/java/de/config/GuiceConfig.java', '1.  **File Overview & Purpose**\n\n    This class serves as the central configuration entry point for the Google Guice dependency injection framework. As a `GuiceServletContextListener`, it is automatically invoked by the servlet container on application startup, creating the main Guice `Injector` that will manage the lifecycle of all services, DAOs, and servlets.\n\n2.  **Architectural Role**\n\n    This is a core **Configuration** file that bootstraps the entire application''s architecture. It connects the servlet container''s lifecycle to the Guice dependency injection container.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Guice (`com.google.inject.Guice`)**: The main class from the Guice library used to create the injector.\n    *   **Guice Servlet (`com.google.inject.servlet.GuiceServletContextListener`)**: The base class that integrates Guice with the Jakarta Servlet lifecycle.\n    *   `ServiceModule.java`: The custom module where all the application''s bindings (dependencies) are defined.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getInjector()`**\n        *   **Method Signature:** `protected Injector getInjector()`\n        *   **Purpose:** This is the core method of the `GuiceServletContextListener`. It is called once by the container when the application starts. Its responsibility is to create and return the application''s central `Injector`.\n        *   **Parameters:** None.\n        *   **Returns:** The configured `Injector` instance.\n        *   **Side Effects:** It instantiates the `ServiceModule`, which in turn defines all the dependency injection bindings for the entire application. The returned injector is then stored in the `ServletContext` by the `GuiceFilter` for later use.'),
('src/main/java/de/config/LocalDateAdapter.java', '1.  **File Overview & Purpose**\n\n    This is a custom serializer for the Gson library, specifically designed to handle the `java.time.LocalDate` class. Its purpose is to ensure `LocalDate` objects are consistently converted into a standard `YYYY-MM-DD` string format when serializing Java objects to JSON.\n\n2.  **Architectural Role**\n\n    This is a **Configuration** / **Utility** class that operates at the boundary between the **Service/Controller Tiers** and the **View/Client-Side Tier**. It is used by any servlet that needs to serialize data containing `LocalDate` objects into JSON for an API response.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Gson (`com.google.gson.JsonSerializer`)**: The core interface from the Gson library that this class implements to provide custom serialization logic.\n    *   **java.time.LocalDate**: The modern Java Date API class for representing a date without time-of-day.\n\n4.  **In-Depth Breakdown**\n\n    *   **`serialize(LocalDate date, Type typeOfSrc, JsonSerializationContext context)`**\n        *   **Method Signature:** `public JsonElement serialize(LocalDate date, Type typeOfSrc, JsonSerializationContext context)`\n        *   **Purpose:** This method is called by Gson whenever it encounters a `LocalDate` object during serialization. It formats the date into an ISO standard string.\n        *   **Parameters:**\n            *   `date` (LocalDate): The `LocalDate` object to be serialized.\n            *   `typeOfSrc` (Type): The specific generic type of the source object.\n            *   `context` (JsonSerializationContext): The context for serialization that Gson is using.\n        *   **Returns:** A `JsonPrimitive` containing the date as a string in `YYYY-MM-DD` format (e.g., \"2025-07-25\"), or `null` if the input date is null.\n        *   **Side Effects:** None.'),
('src/main/java/de/config/Permissions.java', '1.  **File Overview & Purpose**\n\n    This final class acts as a central, static repository for all permission key constants used in the application. Its primary purpose is to eliminate \"magic strings\" when checking for user permissions, thereby improving code readability, maintainability, and preventing hard-to-find bugs from typos.\n\n2.  **Architectural Role**\n\n    This is a cross-cutting **Configuration** file. It is used by the **Service Tier** (e.g., `AuthorizationService`), the **Web/Controller Tier** (e.g., `AdminFilter`, servlets), and the **View Tier** (JSPs) to perform consistent permission checks.\n\n3.  **Key Dependencies & Libraries**\n\n    *   None. This class is self-contained.\n\n4.  **In-Depth Breakdown**\n\n    The class contains a series of `public static final String` constants. Each constant represents a specific, granular permission within the system. The constants are grouped by functional area (e.g., User Management, Event Management) for clarity.\n\n    *   **`ACCESS_ADMIN_PANEL`**: The most powerful permission. It grants unrestricted access to all administrative functions, acting as a \"superuser\" or \"root\" key.\n    *   **`USER_*` constants**: Permissions related to creating, reading, updating, deleting, and resetting passwords for user accounts.\n    *   **`EVENT_*` constants**: Permissions for managing events, including creating, editing, deleting, assigning personnel, and managing tasks within an event.\n    *   **`ACHIEVEMENT_VIEW`**: A special key used specifically by the `NavigationRegistry` to determine if the \"Abzeichen\" link should be visible in the admin sidebar. It''s a meta-permission based on having any other achievement-related CRUD permission.\n    *   **`ADMIN_DASHBOARD_ACCESS`**: Another special key for the `NavigationRegistry` that grants visibility to the \"Admin Dashboard\" link if the user has *any* administrative permission.'),
('src/main/java/de/config/ServiceModule.java', '1.  **File Overview & Purpose**\n\n    This is the core configuration module for the Google Guice dependency injection framework. It defines all the application''s bindings, instructing Guice how to create and wire together objects. It binds service interfaces to their implementations, registers DAOs as singletons, and maps URL patterns to their corresponding servlets.\n\n2.  **Architectural Role**\n\n    This is a central **Configuration** file that orchestrates the entire application''s object graph. It defines the relationships between the **Web/Controller**, **Service**, and **DAO** tiers.\n\n3.  **Key Dependencies & Libraries**\n\n    *   **Guice Servlet (`com.google.inject.servlet.ServletModule`)**: The base class for modules that configure servlets and filters.\n\n4.  **In-Depth Breakdown**\n\n    *   **`configureServlets()`**: This method contains all the binding logic.\n        *   **Service, DAO, and Action Bindings**: The first section uses `bind(ClassName.class).in(Scopes.SINGLETON);` to register all service, DAO, and action classes as singletons. This ensures that only one instance of each of these classes exists throughout the application''s lifecycle, which is crucial for managing shared resources like caches and database connections.\n        *   **Servlet Bindings**: The second section explicitly binds every servlet class in the application as a singleton. This is a prerequisite before they can be mapped to a URL.\n        *   **Servlet Mappings**: The final, large section uses `serve(\"url-pattern\").with(ServletClass.class);` to map URL patterns to the servlets that should handle them. This is the heart of the application''s routing.\n            *   It maps public-facing URLs like `/home` and `/lager`.\n            *   It maps all administrative URLs under `/admin/*`.\n            *   It maps all API endpoints under `/api/*`.\n            *   The `FrontControllerServlet` is mapped to `/admin/action/*` to handle various administrative POST actions using a Command pattern.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V70__Add_category_to_page_docs.sql
========================================================================

-- Flyway migration V70: Add category to page_documentation for link tree grouping

ALTER TABLE `page_documentation`
ADD COLUMN `category` VARCHAR(100) NULL DEFAULT 'Sonstiges' AFTER `wiki_entry_id`;

-- Let's categorize the existing pages
UPDATE `page_documentation` SET `category` = 'Allgemein' WHERE `page_key` IN ('dashboard', 'team_directory', 'chat', 'calendar', 'feedback', 'changelogs', 'profile', 'password_change', 'files', 'search_results');
UPDATE `page_documentation` SET `category` = 'Events & Lehrgänge' WHERE `page_key` IN ('lehrgaenge', 'events', 'event_details', 'meeting_details', 'event_feedback_form');
UPDATE `page_documentation` SET `category` = 'Lager & Material' WHERE `page_key` IN ('storage', 'storage_details', 'pack_kit', 'qr_action');
UPDATE `page_documentation` SET `category` = 'System & Hilfe' WHERE `page_key` IN ('help_list', 'help_details', 'login', 'forbidden', 'not_found', 'error_page');

UPDATE `page_documentation` SET `category` = 'Admin: Dashboard & Berichte' WHERE `page_key` IN ('admin_dashboard', 'admin_reports', 'admin_log', 'admin_system');
UPDATE `page_documentation` SET `category` = 'Admin: Benutzer & Anträge' WHERE `page_key` IN ('admin_users', 'admin_requests', 'admin_training_requests');
UPDATE `page_documentation` SET `category` = 'Admin: Events & Lehrgänge' WHERE `page_key` IN ('admin_events', 'admin_debriefing_details', 'admin_debriefings_list', 'admin_event_roles', 'admin_venues', 'admin_courses', 'admin_meetings', 'admin_matrix', 'admin_checklist_templates');
UPDATE `page_documentation` SET `category` = 'Admin: Lager & Material' WHERE `page_key` IN ('admin_storage', 'admin_defective_items', 'admin_damage_reports', 'admin_kits');
UPDATE `page_documentation` SET `category` = 'Admin: Inhalte & Kommunikation' WHERE `page_key` IN ('admin_announcements', 'admin_feedback', 'admin_notifications', 'admin_files', 'admin_changelogs', 'admin_wiki', 'admin_documentation');
UPDATE `page_documentation` SET `category` = 'Admin: Gamification' WHERE `page_key` IN ('admin_achievements');
========================================================================
FILE: src\main\resources\db\migration\V71__Repopulate_wiki_data_part11.sql
========================================================================

-- Flyway migration V71, Part 11: Overhaul Technical Wiki Documentation (Backend API DTOs)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/api/v1/public_api/PublicAnnouncementResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the public-facing API endpoint for viewing announcements from the Digital Bulletin Board. It is the backend for the `/bulletin-board` page.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It handles read-only requests for announcement data and delegates to the `AnnouncementService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining the REST endpoint.
- `AnnouncementService`: The service used to fetch all announcements.

## 4. In-Depth Breakdown

- **`getAllAnnouncements()`**: `GET /` - Fetches all announcements from the service and returns them to the client. The service/DAO layer ensures they are ordered newest first.'),

('src/main/java/de/api/v1/public_api/PublicCalendarEntriesResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides a public API endpoint that serves a combined list of upcoming events and meetings, formatted specifically for use in a client-side calendar component like FullCalendar.js or the custom calendar view in this application.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the data source for the `/kalender` page. It aggregates data from both the `EventDAO` and `MeetingDAO`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining the REST endpoint.
- `EventDAO`, `MeetingDAO`: The DAOs used to fetch all upcoming calendar entries.

## 4. In-Depth Breakdown

- **`getCalendarEntries()`**: `GET /entries` - The main method.
    1.  It fetches all active/upcoming `Event` objects.
    2.  It fetches all upcoming `Meeting` objects.
    3.  It iterates through both lists, transforming each object into a standardized `Map` with common keys (`id`, `title`, `start`, `end`, `type`, `url`). This creates a uniform structure that the frontend can easily consume to render different types of calendar entries.'),

('src/main/java/de/api/v1/public_api/PublicCalendarResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides a public endpoint that generates and serves an **iCalendar (.ics) file**. This allows users to subscribe to the application''s schedule with their personal calendar applications (e.g., Google Calendar, Outlook).

## 2. Architectural Role

This is a specialized component of the **Web/API Tier**. Instead of JSON, it produces a `text/calendar` response.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining the REST endpoint.
- `EventDAO`, `MeetingDAO`: The DAOs used to fetch the event and meeting data.
- **iCal4j**: A third-party library used to programmatically construct the `.ics` file format.

## 4. In-Depth Breakdown

- **`getICalendarFeed(...)`**: `GET /calendar.ics` - The main method.
    1.  It creates a new iCal4j `Calendar` object.
    2.  It fetches all upcoming events and meetings from the DAOs.
    3.  For each event and meeting, it creates a `VEvent` component and populates it with standard iCalendar properties like `SUMMARY` (title), `DTSTART` (start time), `DTEND` (end time), `LOCATION`, `DESCRIPTION`, and a `URL` that links back to the details page within the application.
    4.  It uses a `CalendarOutputter` to serialize the `Calendar` object into the correct `.ics` format.
    5.  It sets the appropriate HTTP headers (`Content-Type: text/calendar`) and streams the file content to the client.'),

('src/main/java/de/api/v1/public_api/PublicChangelogResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the public-facing API endpoints for the `Changelog` feature. It allows users to view changelogs and interact with the "seen" status.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It serves the `/changelogs` page and the "What''s New" modal.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `ChangelogDAO`: The DAO for all changelog-related database operations.

## 4. In-Depth Breakdown

- **`getAllPublishedChangelogs()`**: `GET /` - Retrieves all changelogs.
- **`getLatestUnseenChangelog(...)`**: `GET /latest-unseen` - A specific endpoint that finds the most recent changelog the currently logged-in user has not yet marked as seen. This is used to trigger the "What''s New" modal.
- **`markAsSeen(...)`**: `POST /{id}/mark-seen` - Updates the database to record that the current user has seen a specific changelog entry.'),

('src/main/java/de/api/v1/public_api/PublicChatResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the primary API endpoints for the direct messaging and group chat feature. It handles fetching conversations and messages, creating new conversations, and managing participants. Real-time messaging itself is handled by the `ChatWebSocketHandler`.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/chat` page, providing the data needed to render the conversation list and message history.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `ChatDAO`: The DAO for all chat-related database operations.
- `FileService`: Used to handle file uploads within chats.

## 4. In-Depth Breakdown

- **`getConversations(...)`**: `GET /conversations` - Retrieves the conversation list for the current user.
- **`getConversationById(...)`**: `GET /conversations/{id}` - Fetches detailed information for a single conversation, including its participant list.
- **`getMessages(...)`**: `GET /conversations/{id}/messages` - Retrieves the message history for a conversation.
- **`findOrCreateConversation(...)`**: `POST /conversations` - Creates a new 1-on-1 conversation or finds the existing one between two users.
- **`createGroupConversation(...)`**: `POST /conversations/group` - Creates a new group chat.
- **`addParticipants(...)`**: `POST /conversations/{id}/participants` - Adds new members to an existing group chat.
- **`uploadChatFile(...)`**: `POST /upload` - Handles file uploads for chat, storing the file and returning its metadata.'),

('src/main/java/de/api/v1/public_api/PublicDashboardResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides a single, aggregated API endpoint for the main user dashboard (`/home` page). It fetches all the personalized data required for the dashboard widgets.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It serves as the data source for the `DashboardPage.jsx` component.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining the REST endpoint.
- `EventDAO`, `EventTaskDAO`: The DAOs used to fetch the user''s assigned events, open tasks, and recommended events.

## 4. In-Depth Breakdown

- **`getDashboardData(...)`**: `GET /` - The main method. It makes several calls to the DAOs to fetch different slices of data for the current user and bundles them into a single JSON response object for efficiency.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V72__Repopulate_wiki_data_part12.sql
========================================================================

-- Flyway migration V72, Part 12: Overhaul Technical Wiki Documentation (Backend Public API)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/api/v1/public_api/PublicDocumentationResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the public-facing API endpoints for viewing the `PageDocumentation`. It is the backend for the `/help` and `/help/:pageKey` pages.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It handles read-only requests for documentation.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `PageDocumentationService`: The service used to fetch documentation and handle authorization logic.

## 4. In-Depth Breakdown

- **`getAllDocs(...)`**: `GET /` - Fetches all documentation pages, automatically filtering out admin-only pages if the current user is not an admin.
- **`getDocByKey(...)`**: `GET /{pageKey}` - Fetches a single documentation page. It includes an authorization check to ensure non-admins cannot access admin-only documentation via a direct URL.'),

('src/main/java/de/api/v1/public_api/PublicEventGalleryResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the public API endpoints for interacting with an event''s photo gallery. It allows participants to view, upload, and delete photos.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the "Gallery" tab on the `EventDetailsPage`. It delegates logic to the `EventGalleryService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints and handling multipart file uploads.
- `EventGalleryService`: The service containing the business and authorization logic for gallery operations.

## 4. In-Depth Breakdown

- **`getGallery(...)`**: `GET /{eventId}/gallery` - Retrieves all photo metadata for a given event''s gallery.
- **`uploadPhoto(...)`**: `POST /{eventId}/gallery` - Handles the upload of a new photo. The service layer performs authorization checks to ensure only participants of a completed event can upload.
- **`deletePhoto(...)`**: `DELETE /gallery/{photoId}` - Deletes a photo. The service layer ensures a user can only delete their own photos, unless they are an admin or the event leader.'),

('src/main/java/de/api/v1/public_api/PublicEventResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the main public-facing API endpoints for user interactions with events. It handles fetching event lists, viewing details, and signing up/off.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/veranstaltungen` and `/veranstaltungen/details/:eventId` pages.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `EventDAO`, `EventService`: For database operations and business logic related to events.
- `EventCustomFieldDAO`: For handling custom sign-up fields.
- `FileService`: For handling file uploads in the event chat.

## 4. In-Depth Breakdown

- **`getUpcomingEventsForUser(...)`**: `GET /` - Retrieves the list of upcoming events, enriched with the current user''s specific status (qualified, signed-up, assigned) for each.
- **`getEventDetails(...)`**: `GET /{id}` - Fetches all detailed information for a single event.
- **`signUpForEvent(...)`**: `POST /{id}/signup` - Handles the user sign-up process, including saving any responses to custom fields.
- **`signOffFromEvent(...)`**: `POST /{id}/signoff` - Handles the user sign-off process.
- **`getEventCustomFields(...)`**: `GET /{id}/custom-fields` - Fetches the custom questions for an event''s sign-up form.
- **`uploadEventChatFile(...)`**: `POST /{eventId}/chat/upload` - Handles file uploads specifically for the event chat.'),

('src/main/java/de/api/v1/public_api/PublicFeedbackResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the public API endpoints for the feedback system. It allows users to submit general feedback and event-specific feedback, and to view their own submission history.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/feedback` and `/feedback/event/:eventId` pages.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `FeedbackSubmissionDAO`, `EventFeedbackDAO`: The DAOs for the two types of feedback.

## 4. In-Depth Breakdown

- **`getMyFeedbackSubmissions(...)`**: `GET /user` - Fetches the history of general feedback submissions for the current user.
- **`submitGeneralFeedback(...)`**: `POST /general` - Submits a new general feedback entry.
- **`getEventFeedbackForm(...)`**: `GET /forms` - Retrieves the necessary data to render the event-specific feedback form, including a check to see if the user has already submitted it.
- **`submitEventFeedback(...)`**: `POST /event` - Submits a user''s rating and comments for a specific event. **This includes a security check** to ensure a user can only submit feedback for events they were actually assigned to.'),

('src/main/java/de/api/v1/public_api/PublicFilesResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides a public API endpoint for fetching the list of downloadable files.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/dateien` page.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining the REST endpoint.
- `FileDAO`: The DAO used to retrieve files.

## 4. In-Depth Breakdown

- **`getFiles(...)`**: `GET /` - Fetches all files, grouped by category. The DAO method automatically filters the results based on the current user''s role, so non-admins will not see admin-only files in the list.'),

('src/main/java/de/api/v1/public_api/PublicFileStreamResource.java',
'## 1. File Overview & Purpose

This `@RestController` is a specialized controller for securely streaming file content (downloads and images) to the client. It acts as a secure gateway to the file system, performing validation and authorization before serving a file.

## 2. Architectural Role

This is a critical component of the **Web/API Tier** that bridges the gap to the physical **File System**. It handles byte-stream responses rather than JSON.

## 3. Key Dependencies & Libraries

- **Spring Web (`ResponseEntity<Resource>`)**: The core components for streaming file data.
- **DAOs (`FileDAO`, `AttachmentDAO`, etc.)**: Used to get file metadata and perform authorization checks (which are currently stubbed but would be implemented here).

## 4. In-Depth Breakdown

- **`downloadFile(...)`**: `GET /download/{id}` - The endpoint for general file downloads. It retrieves the file''s metadata from the database, then calls the `serveFile` helper.
- **`getImage(...)`**: `GET /images/{filename:.+}` - The endpoint for serving images. The `:.+` is a regex to ensure the filename extension is correctly captured.
- **`serveFile(...)` (private helper)**: This is the core security method.
    1.  It resolves the requested file path against the configured base upload directory.
    2.  **Path Traversal Protection**: It crucially checks that the final, resolved path is still *inside* the base upload directory. This prevents attacks where a user might try to access files outside this directory (e.g., `../../../../etc/passwd`).
    3.  It sets the appropriate `Content-Type` and `Content-Disposition` headers (`attachment` for downloads, `inline` for images) and streams the file''s bytes to the response.'),

('src/main/java/de/api/v1/public_api/PublicMeetingResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the public API endpoints for user interactions with `Meeting` entities (training sessions).

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/lehrgaenge` page.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `MeetingDAO`, `MeetingAttendanceDAO`: For all database operations.

## 4. In-Depth Breakdown

- **`getUpcomingMeetings(...)`**: `GET /` - Retrieves the list of upcoming meetings, enriched with the current user''s sign-up status for each.
- **`handleMeetingAction(...)`**: `POST /{id}/{action}` - A single endpoint that handles both signing up (`action=signup`) and signing off (`action=signoff`) from a meeting.'),

('src/main/java/de/api/v1/public_api/PublicProfileResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the API endpoints for managing a user''s own profile. It handles fetching all data for the profile page, submitting change requests, and updating preferences like theme and password.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/profil` page and related pages like `/passwort`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- **Various DAOs**: It injects a wide range of DAOs to aggregate all the necessary data for a user''s profile (event history, qualifications, achievements, etc.).
- `ProfileRequestService`: To handle the logic of creating a profile change request.

## 4. In-Depth Breakdown

- **`getMyProfile()`**: `GET /` - Fetches all data for the currently authenticated user''s profile page.
- **`getUserProfile(...)`**: `GET /{userId}` - Fetches a public-safe subset of another user''s profile data. This is used for the "Crew Card" modal in the Team Directory.
- **`requestProfileChange(...)`**: `POST /request-change` - Submits a request for an admin to approve changes to the user''s profile.
- **`updateUserTheme(...)`**: `PUT /theme` - Updates the user''s theme preference.
- **`updateChatColor(...)`**: `PUT /chat-color` - Updates the user''s preferred chat message color.
- **`updatePassword(...)`**: `PUT /password` - Handles the secure password change process, including validating the current password and the new password policy.
- **`updateDashboardLayout(...)`**: `PUT /dashboard-layout` - Saves the user''s custom widget layout for their dashboard.'),

('src/main/java/de/api/v1/public_api/PublicSearchResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides a single API endpoint for the global, site-wide search functionality.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/suche` page. It delegates the search logic to the `SearchService`.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining the REST endpoint.
- `SearchService`: The service that orchestrates the search across multiple DAOs.

## 4. In-Depth Breakdown

- **`search(...)`**: `GET /` - Takes a `query` parameter. It includes a basic validation to ensure the query is at least 3 characters long. It then calls the `searchService` to perform the multi-table search and returns the aggregated results.'),

('src/main/java/de/api/v1/public_api/PublicStorageDetailsResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides public API endpoints for retrieving detailed information about a single `StorageItem`, including its history and future reservations.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/lager/details/:itemId` page.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `StorageDAO`, `StorageLogDAO`, `MaintenanceLogDAO`: The DAOs used to fetch all the detailed data for an item.
- `StorageItemRelationService`: The service used to fetch related items.

## 4. In-Depth Breakdown

- **`getStorageItemById(...)`**: `GET /{itemId}` - Retrieves the core details of a single item.
- **`getStorageItemHistory(...)`**: `GET /{itemId}/history` - Fetches both the transaction log and the maintenance log for the item.
- **`getStorageItemReservations(...)`**: `GET /{itemId}/reservations` - Fetches a list of all future events for which this item is reserved.
- **`getRelatedItems(...)`**: `GET /{itemId}/relations` - Fetches the list of items that are defined as "related" to this one.'),

('src/main/java/de/api/v1/public_api/PublicStorageResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the public API endpoints for general inventory interaction. It handles fetching the data for the main `/lager` page and processing check-in/checkout transactions.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the `/lager` page and the `/lager/qr-aktion/:itemId` page.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `StorageService`: Contains the transactional business logic for processing check-ins/checkouts and creating damage reports.
- `StorageDAO`, `EventDAO`: Used to fetch the necessary data for the page view.

## 4. In-Depth Breakdown

- **`getStoragePageData()`**: `GET /` - Fetches all inventory items (grouped by location) and the list of active events to populate the main inventory page and its modals.
- **`performTransaction(...)`**: `POST /transactions` - The endpoint for the multi-item cart system. It receives a single transaction request and passes it to the `StorageService` to be processed atomically.
- **`reportDamage(...)`**: `POST /{itemId}/report-damage` - Allows a user to submit a damage report for an item.'),

('src/main/java/de/api/v1/public_api/PublicTrainingRequestResource.java',
'## 1. File Overview & Purpose

This `@RestController` provides the public API endpoints for the user-initiated training request feature. It allows users to submit new requests and register their interest in existing ones.

## 2. Architectural Role

This is a component of the **Web/API Tier**. It is the backend for the "Request a New Course" feature on the `/lehrgaenge` page.

## 3. Key Dependencies & Libraries

- **Spring Web**: For defining REST endpoints.
- `TrainingRequestService`: The service that handles the business logic for creating requests.

## 4. In-Depth Breakdown

- **`submitRequest(...)`**: `POST /` - Creates a new training request based on a user-submitted topic.
- **`registerInterest(...)`**: `POST /{id}/interest` - Allows a user to "upvote" an existing training request, incrementing its interest counter.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V73__Repopulate_wiki_data_part13.sql
========================================================================

-- Flyway migration V73, Part 13: Overhaul Technical Wiki Documentation (Frontend Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/AnnouncementsPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **Digital Bulletin Board** (`/bulletin-board`). It fetches and displays all announcements created by administrators.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses the `useApi` hook to call the `/api/v1/public/announcements` endpoint to retrieve all announcement posts.
- **Rendering:** It iterates over the fetched announcements and displays each one in a `card` element.
- **Markdown Support:** It uses the `react-markdown` library to safely render the content of each announcement, allowing for rich text formatting.

## 4. State Management

- The component''s state (announcements, loading, error) is managed by the `useApi` custom hook.'),

('frontend/src/pages/CalendarPage.jsx',
'## 1. File Overview & Purpose

This React component renders the main **Calendar** page (`/kalender`). It displays all upcoming events and training meetings in two different, responsive views.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses the `useApi` hook to call `/api/v1/public/calendar/entries` to get a unified list of all schedulable items.
- **iCal Subscription:** Provides a direct link to `/api/v1/public/calendar.ics` for users to subscribe to the feed in their external calendar applications.
- **Responsive Views:**
    - **Mobile:** Renders the `CalendarMobileView` component, which displays a simple, chronological list of upcoming dates.
    - **Desktop:** Renders the `CalendarDesktopView` component, which displays a traditional, interactive month-grid calendar.
- **CSS Media Queries:** Plain CSS is used to toggle the visibility of the mobile vs. desktop views based on screen width.

## 4. State Management

- The component''s state is managed by the `useApi` hook.'),

('frontend/src/pages/ChangelogPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **Changelogs** page (`/changelogs`). It displays a historical list of all application updates and new features.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses the `useApi` hook to call `/api/v1/public/changelog` to get all entries.
- **Rendering:** It maps over the changelog entries, displaying the version, title, release date, and notes for each in a separate `card`.
- **Markdown Support:** Uses `react-markdown` to render the detailed notes for each version.

## 4. State Management

- The component''s state is managed by the `useApi` hook.'),

('frontend/src/pages/ChatPage.jsx',
'## 1. File Overview & Purpose

This React component renders the main **Chat** interface (`/chat` and `/chat/:conversationId`). It acts as a layout container for the `ConversationList` and `MessageView` components, managing their responsive behavior.

## 2. Architectural Role

This is a **View** and **Layout** component in the frontend application.

## 3. Key Features & Logic

- **Dynamic Layout:** The core logic of this component is to manage which pane (conversation list or message view) is visible on mobile devices.
- **Routing:** It uses the `useParams` hook from React Router to detect if a `conversationId` is present in the URL.
- **CSS-Driven Swapping:** The presence of a `conversationId` adds a CSS class (`message-view-visible`) to the main container. This class uses CSS transforms to slide the conversation list out of view and the message view into view, creating a smooth mobile navigation experience.
- **Component Rendering:**
    - If a `conversationId` is present, it renders the `MessageView` component, passing the ID as a prop.
    - If no `conversationId` is present, it displays a "Welcome" message in the main pane.
    - The `ConversationList` is always rendered but may be hidden by CSS on mobile.

## 4. State Management

- The component''s layout state is derived directly from the URL parameters via React Router.'),

('frontend/src/pages/DashboardPage.jsx',
'## 1. File Overview & Purpose

This React component renders the user''s main **Dashboard** (`/home`). It displays a personalized overview of the user''s current status, tasks, and relevant upcoming events.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses the `useApi` hook to call the aggregated `/api/v1/public/dashboard` endpoint, which provides all necessary data in a single request.
- **Personalized Widgets:**
    - **Recommended Events:** A prominent widget that shows events the user is qualified for but not yet signed up for.
    - **Assigned Events:** Shows the user''s next confirmed assignments.
    - **Open Tasks:** Lists tasks assigned to the user from currently running events.
    - **Upcoming Events:** A general list of other events.
- **Conditional Rendering:** Widgets are only displayed if they contain data (e.g., the "Recommended" widget only appears if there are recommendations).

## 4. State Management

- The component''s state (dashboard data, loading, error) is managed by the `useApi` hook.
- It also reads the current `user` object from the `useAuthStore` to display a personalized welcome message.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V74__Repopulate_wiki_data_part14.sql
========================================================================

-- Flyway migration V74, Part 14: Overhaul Technical Wiki Documentation (Frontend Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/EventDetailsPage.jsx',
'## 1. File Overview & Purpose

This is a large, multi-functional React component that renders the detailed view for a single event (`/veranstaltungen/details/:eventId`). It serves as a central hub for all event-related information and real-time interaction.

## 2. Architectural Role

This is a complex **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch all initial event data from `/api/v1/public/events/:id`.
- **Tabbed Interface:** Manages the state for switching between different information tabs:
    - **Tasks:** Displays a list of tasks for the event, including their status and assigned users.
    - **Inventory Checklist:** Renders the `ChecklistTab` component for managing equipment load-in/load-out.
    - **Event Chat:** Contains the real-time chat interface for event participants.
    - **Gallery:** (Visible only for completed events) Renders the `EventGalleryTab` component.
- **Real-Time Chat:**
    - Uses the `useWebSocket` hook to connect to the `/ws/chat/:eventId` endpoint.
    - Manages the state of chat messages, receiving new messages and updates (edits/deletions) via the WebSocket connection.
    - Handles sending new messages, including text and file uploads.
- **Authorization:** It reads the `user` object from the `useAuthStore` to determine if the current user has permission to perform actions like deleting chat messages or viewing the admin-only debriefing link.

## 4. State Management

- **Event Data:** Managed by the `useApi` hook.
- **UI State:** Uses `useState` for managing the `activeTab`, chat input, and other UI-related state.
- **Chat Messages:** Managed via `useState`, with updates pushed from the `useWebSocket` hook.
- **Global State:** Accesses the `user` object from `useAuthStore` for permissions.'),

('frontend/src/pages/EventFeedbackPage.jsx',
'## 1. File Overview & Purpose

This React component renders the dedicated form for submitting post-event feedback (`/feedback/event/:eventId`).

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call `/api/v1/public/feedback/forms?eventId=...`. This endpoint provides the event details and checks if the user has already submitted feedback for this event.
- **Conditional Rendering:** If the user has already submitted feedback, it displays a "Thank You" message instead of the form.
- **Controlled Form:** Uses `useState` to manage the state of the star rating and the comments textarea.
- **Submission:** On form submit, it calls the `POST /api/v1/public/feedback/event` endpoint via `apiClient` to save the user''s response.

## 4. State Management

- **Form Data:** Managed via `useState` hooks.
- **Initial Data:** Fetched using the `useApi` hook.'),

('frontend/src/pages/EventsPage.jsx',
'## 1. File Overview & Purpose

This React component renders the main **Events** listing page (`/veranstaltungen`). It displays all upcoming events and allows users to sign up or sign off.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call `/api/v1/public/events`, which returns a list of events enriched with the current user''s status (`userAttendanceStatus`) and qualification (`isUserQualified`) for each.
- **Action Buttons:** Conditionally renders a "Sign Up" or "Sign Off" button based on the `userAttendanceStatus` for each event. The "Sign Up" button is disabled if `isUserQualified` is false.
- **Sign-Up Modal:**
    - Before showing the sign-up modal, it makes an API call to `/api/v1/public/events/:id/custom-fields` to fetch any additional questions required for the sign-up.
    - The modal dynamically renders input fields for these custom questions.
- **Sign-Off Modal:** Shows a confirmation dialog before the user signs off.
- **Responsive View:** The component includes both a desktop table view (`desktop-table-wrapper`) and a mobile card view (`mobile-card-list`), with CSS media queries controlling which one is visible.

## 4. State Management

- **Event List:** Managed by the `useApi` hook.
- **Modal State:** Uses `useState` to control the visibility and content of the sign-up/sign-off modals.'),

('frontend/src/pages/FeedbackPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **General Feedback** page (`/feedback`). It provides a form for users to submit general suggestions or bug reports and displays a history of their own past submissions.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call `/api/v1/public/feedback/user` to retrieve the list of the current user''s past submissions.
- **Controlled Form:** The submission form for new feedback is a controlled component managed with `useState`.
- **Submission:** On submit, it calls `POST /api/v1/public/feedback/general` via `apiClient`.
- **Submission History:** It maps over the fetched submissions and displays each one with its current status (e.g., "NEW", "PLANNED").

## 4. State Management

- **Submission History:** Managed by the `useApi` hook.
- **New Feedback Form:** Managed by `useState` hooks.'),

('frontend/src/pages/FilesPage.jsx',
'## 1. File Overview & Purpose

This React component renders the public **Files & Documents** page (`/dateien`). It fetches and displays a categorized list of all files the current user is permitted to see.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call `/api/v1/public/files`. The backend automatically filters out admin-only files for non-admin users. The data arrives grouped by category.
- **Rendering:** It iterates over the categories (the keys of the data object) and then iterates over the files within each category, rendering a download link for each file.

## 4. State Management

- The component''s state is managed by the `useApi` hook.'),

('frontend/src/pages/HelpDetailsPage.jsx',
'## 1. File Overview & Purpose

This component renders the detailed view for a single help article (`/help/:pageKey`). It displays the features, use cases, and links related to a specific page of the application.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:**
    - Uses `useApi` to fetch the specific documentation entry based on the `pageKey` from the URL via `/api/v1/public/documentation/:pageKey`.
    - Makes a second `useApi` call to fetch *all* documentation entries to resolve the titles for the "Related Pages" links.
- **Content Rendering:**
    - Uses `react-markdown` to render the `features` content.
- **Link Generation:**
    - Provides a direct link to the actual page being documented.
    - Provides a link to the associated technical wiki page, if one is defined.
- **Related Pages:** It parses the JSON array of related page keys and looks them up in the full list of docs to render a navigable list of related topics.

## 4. State Management

- All data is managed by two instances of the `useApi` hook.'),

('frontend/src/pages/HelpListPage.jsx',
'## 1. File Overview & Purpose

This component renders the main help page (`/help`), which acts as a "link tree" or table of contents for all user-facing documentation.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch all available documentation entries from `/api/v1/public/documentation`. The backend automatically filters out admin-only articles for non-admin users.
- **Grouping:** Uses `useMemo` to group the flat list of documentation pages into a nested object based on their `category` property.
- **Rendering:** It iterates over the grouped categories, creating a `card` for each category. Inside each card, it lists the links to the individual `HelpDetailsPage` for each article in that category.

## 4. State Management

- The component''s data is managed by the `useApi` hook.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V75__Repopulate_wiki_data_part15.sql
========================================================================

-- Flyway migration V75, Part 15: Overhaul Technical Wiki Documentation (Frontend Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/LehrgaengePage.jsx',
'## 1. File Overview & Purpose

This React component renders the main **Courses & Meetings** page (`/lehrgaenge`). It lists upcoming training sessions and allows users to sign up, sign off, or request new training topics.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch all upcoming meetings from `/api/v1/public/meetings`. This data is pre-enriched by the backend with the current user''s attendance status.
- **Actions:** Renders "Anmelden" (Sign Up) or "Abmelden" (Sign Off) buttons based on the user''s status for each meeting. Clicking these buttons calls the `POST /api/v1/public/meetings/:id/:action` endpoint.
- **Training Request:** Contains a button that opens the `RequestTrainingModal`, allowing users to submit a new training topic via the `POST /api/v1/public/training-requests` endpoint.
- **Responsive View:** Includes both a desktop table and a mobile card list view.

## 4. State Management

- **Meeting List:** Managed by the `useApi` hook.
- **Modal State:** Uses `useState` to control the visibility of the training request modal.'),

('frontend/src/pages/LoginPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **Login** page (`/login`). It provides the form for username/password authentication.

## 2. Architectural Role

This is a **View** component in the frontend application and is the main entry point for unauthenticated users.

## 3. Key Features & Logic

- **Authentication Flow:**
    1.  The form is a controlled component, with `username` and `password` state managed by `useState`.
    2.  On submit, it calls the `login` function from the `useAuthStore`.
    3.  The `authStore.login` function calls the `POST /api/v1/auth/login` endpoint.
    4.  If successful, the backend sets an HttpOnly JWT cookie, and the `authStore` fetches the full user session.
    5.  An `useEffect` hook detects the change in `isAuthenticated` state and redirects the user to their dashboard (`/home`) or their originally intended page.
- **UI Features:** Includes a password visibility toggle.
- **Error Handling:** Displays error messages returned from the `authStore` if the login fails.

## 4. State Management

- **Form State:** Managed locally with `useState`.
- **Authentication State:** Interacts with the global `useAuthStore` to trigger the login process and react to authentication changes.'),

('frontend/src/pages/MeetingDetailsPage.jsx',
'## 1. File Overview & Purpose

This React component renders the detailed view for a single training meeting (`/lehrgaenge/details/:meetingId`).

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch the meeting''s details and its associated attachments from `/api/v1/public/meetings/:id`.
- **Content Display:** Renders all details of the meeting, including description (with Markdown support) and a list of downloadable attachments.

## 4. State Management

- The component''s state is managed by the `useApi` hook.'),

('frontend/src/pages/PackKitPage.jsx',
'## 1. File Overview & Purpose

This React component renders a special, printer-friendly **Packing List** for an inventory kit (`/pack-kit/:kitId`). It is designed to be accessed via QR code.

## 2. Architectural Role

This is a **View** component that uses the `MinimalLayout` to provide a clean, focused UI without the main application sidebar and header.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get the kit''s details and its item list from `/api/v1/public/kits/:id`.
- **Printable Checklist:** Renders the list of items with checkboxes, making it easy to use as a physical checklist when packing a case.
- **Print Styles:** Includes an embedded `<style>` block with `@media print` rules. These rules ensure that when the user prints the page, only the checklist area is visible, and all other UI elements (like the "Print" button) are hidden.

## 4. State Management

- The component''s state is managed by the `useApi` hook.'),

('frontend/src/pages/PasswordPage.jsx',
'## 1. File Overview & Purpose

This React component renders the dedicated form for a user to change their own password (`/passwort`).

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Controlled Form:** Manages the state for the current password, new password, and confirmation password fields using `useState`.
- **Validation:** Performs client-side checks to ensure the new password is at least 10 characters and that the new password and confirmation match.
- **Submission:** On submit, it calls the `PUT /api/v1/public/profile/password` endpoint with the form data. The backend performs the final, authoritative validation (checking the current password and enforcing the policy).

## 4. State Management

- All form state is managed locally with `useState` hooks.'),

('frontend/src/pages/ProfilePage.jsx',
'## 1. File Overview & Purpose

This React component renders the user''s main **Profile** page (`/profil`). It acts as a container, aggregating and displaying several sub-components that represent different aspects of the user''s profile.

## 2. Architectural Role

This is a **View** and **Layout** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call the aggregated `/api/v1/public/profile` endpoint, which returns all data needed for the page in a single response.
- **Component Composition:** It renders several specialized child components, passing the relevant slice of the fetched data to each one:
    - `ProfileDetails`: For core user data.
    - `ProfileSecurity`: For password management.
    - `ProfileQualifications`: For the user''s completed courses.
    - `ProfileAchievements`: For earned badges.
    - `ProfileEventHistory`: For a list of past events.
- **Update Handling:** It provides an `onUpdate` callback function (which simply calls the `reload` function from `useApi`) to its child components. This allows a child component (like `ProfileDetails`) to trigger a full refresh of all profile data after a change is submitted.

## 4. State Management

- All profile data is managed by the `useApi` hook and passed down to child components as props.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V76__Repopulate_wiki_data_part16.sql
========================================================================

-- Flyway migration V76, Part 16: Overhaul Technical Wiki Documentation (Frontend Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/QrActionPage.jsx',
'## 1. File Overview & Purpose

This React component renders the specialized **QR Action** page (`/lager/qr-aktion/:itemId`). It provides a highly simplified, mobile-first interface for quickly checking an item in or out of the inventory.

## 2. Architectural Role

This is a **View** component that uses the `MinimalLayout` to provide a focused UI without the main application navigation, as it''s intended to be accessed directly via QR code scan.

## 3. Key Features & Logic

- **Data Fetching:** It makes two parallel API calls using `useApi`:
    1.  `/api/v1/public/storage/:itemId` to get the details of the specific item being acted upon.
    2.  `/api/v1/public/events` to get a list of active events for the optional "Assign to Event" dropdown.
- **Transaction Form:** It presents a simple form to specify the quantity, an optional event, and notes.
- **Submission:** The form has two distinct submit buttons ("Entnehmen" and "Einräumen"). The component captures which button was clicked to set the `type` of the transaction and sends the data to the `POST /api/v1/public/storage/transactions` endpoint.

## 4. State Management

- All data is managed by two instances of the `useApi` hook.'),

('frontend/src/pages/SearchResultsPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **Search Results** page (`/suche`). It displays the results of a global search query.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Query Parsing:** It uses the `useSearchParams` hook from React Router to get the search query (`q=...`) from the URL.
- **Data Fetching:** It uses the `useApi` hook to call the `/api/v1/public/search` endpoint, passing the query as a parameter.
- **Result Rendering:** It maps over the array of results returned from the API. For each result, it displays the title, a snippet, the result type (e.g., "Veranstaltung"), and a direct link to the item''s detail page. It also uses a helper function to show a relevant icon for each result type.

## 4. State Management

- The component''s data is managed by the `useApi` hook.'),

('frontend/src/pages/StorageItemDetailsPage.jsx',
'## 1. File Overview & Purpose

This React component renders the detailed view for a single inventory item (`/lager/details/:itemId`). It provides a comprehensive overview of the item, including its history and future availability.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** It makes multiple API calls using `useApi`:
    - `/api/v1/public/storage/:id` to get the core item details.
    - `/api/v1/public/storage/:id/history` to get the transaction and maintenance logs.
    - `/api/v1/public/storage/:id/reservations` to get data for the availability calendar.
- **Tabbed Interface:** Manages state to switch between different tabs:
    - **History:** Shows the transaction log.
    - **Maintenance:** Shows the maintenance log.
    - **Availability:** Renders the `ReservationCalendar` component to show future bookings.
    - **Related Items:** Renders the `RelatedItemsTab` to show associated equipment.
- **Interactive Elements:**
    - **Lightbox:** Clicking the item''s image opens a full-screen `Lightbox` view.
    - **Damage Report:** The "Schaden melden" button opens a `DamageReportModal` for submitting a new report.

## 4. State Management

- All data is managed by multiple instances of the `useApi` hook.
- UI state (active tab, modal visibility) is managed with `useState` hooks.'),

('frontend/src/pages/StoragePage.jsx',
'## 1. File Overview & Purpose

This React component renders the main **Inventory** page (`/lager`). It displays the entire equipment inventory and provides the primary interface for checking items in and out.

## 2. Architectural Role

This is a key **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to call the aggregated `/api/v1/public/storage` endpoint, which returns both the inventory items (grouped by location) and the list of active events for the transaction modal.
- **Interactive Filtering:**
    - It uses `useState` hooks to manage state for a live search term, a category filter, and a status filter.
    - A `useMemo` hook is used to efficiently compute the `filteredData` whenever the source data or any filter changes.
- **Cart System:**
    - It manages a `cart` array in its `useState`.
    - "Entnehmen" (Checkout) and "Einräumen" (Checkin) buttons on each item add that item to the cart.
    - A Floating Action Button (FAB) shows the number of items in the cart and opens the `CartModal`.
- **Bulk Transactions:** The `CartModal` allows the user to review all items in their cart and submit them as a series of transactions with a single click. The `handleBulkTransactionSubmit` function sends multiple parallel requests to the `POST /api/v1/public/storage/transactions` endpoint.
- **Responsive View:** It provides both a detailed desktop table and a compact mobile card list view.

## 4. State Management

- **Inventory Data:** Managed by the `useApi` hook.
- **Filters & Cart:** Managed by `useState` hooks.
- **Filtered Results:** Derived state computed using `useMemo`.'),

('frontend/src/pages/TeamDirectoryPage.jsx',
'## 1. File Overview & Purpose

This React component renders the **Team Directory** (`/team`), a searchable list of all team members.

## 2. Architectural Role

This is a **View** component in the frontend application.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get a list of all users from `/api/v1/users`.
- **Live Search:** A simple text input allows users to filter the directory by name in real-time.
- **Crew Card Modal:** Clicking the "Crew-Karte ansehen" button for a user opens a modal.
    - The `CrewCardModal` component is a separate component that takes a `userId` as a prop.
    - It then triggers its own `useApi` call to the `/api/v1/public/profile/:userId` endpoint to fetch the specific user''s qualifications and achievements for display.

## 4. State Management

- **User List:** Managed by the `useApi` hook in the main component.
- **Search Term & Modal State:** Managed by `useState` hooks.
- **Crew Card Data:** Managed by a separate `useApi` instance within the modal component.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V77__Repopulate_wiki_data_part17.sql
========================================================================

-- Flyway migration V77, Part 17: Overhaul Technical Wiki Documentation (Frontend Admin Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/admin/AdminAnnouncementsPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing **Announcements** (`/admin/announcements`). It provides a full CRUD interface for the bulletin board.

## 2. Architectural Role

This is an **Admin View** component in the frontend.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get all announcements from `/api/v1/admin/announcements`.
- **Modal-Based Editing:**
    - Clicking "Neue Mitteilung" or "Bearbeiten" opens the `AnnouncementModal`.
    - The modal contains a controlled form for the title and content.
    - On submit, it calls either `POST` or `PUT` to the `/api/v1/admin/announcements` endpoint.
- **Deletion:** The "Löschen" button triggers a confirmation dialog and then calls `DELETE /api/v1/admin/announcements/:id`.
- **Markdown Preview:** It renders existing announcements using `react-markdown` to show admins what the final post will look like.

## 4. State Management

- **Announcement List:** Managed by the `useApi` hook.
- **Modal State:** Uses `useState` to control the modal''s visibility and which announcement is being edited.'),

('frontend/src/pages/admin/AdminCoursesPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing **Course Templates** (`/admin/lehrgaenge`). These are the blueprints for training sessions, not the specific dates.

## 2. Architectural Role

This is an **Admin View** component in the frontend.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get all course templates from `/api/v1/courses`.
- **CRUD Operations:** Provides a full CRUD interface via a modal (`Modal`).
    - **Create/Edit:** The modal contains a form for the course name, abbreviation, and description. It calls `POST` or `PUT` to `/api/v1/courses`.
    - **Delete:** A delete button with a confirmation dialog calls `DELETE /api/v1/courses/:id`.
- **Navigation:** Provides a "Meetings" button for each course that links to the `AdminMeetingsPage` for that specific course, allowing admins to schedule actual training dates.

## 4. State Management

- **Course List:** Managed by the `useApi` hook.
- **Modal State:** Managed by `useState`.'),

('frontend/src/pages/admin/AdminDashboardPage.jsx',
'## 1. File Overview & Purpose

This component renders the main **Admin Dashboard** (`/admin/dashboard`), providing administrators with a high-level overview of the application''s status.

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to make a single call to the aggregated `/api/v1/admin/dashboard` endpoint.
- **Widget-Based Layout:** It uses the reusable `Widget` component to display different pieces of information in a grid.
- **Data Visualization:** It uses the `EventTrendChart` component (which wraps `react-chartjs-2`) to display a line chart of event frequency over the past 12 months.
- **Quick Links:** The widgets provide direct links to the relevant management pages (e.g., "Alle Events anzeigen").

## 4. State Management

- All dashboard data is managed by the `useApi` hook.'),

('frontend/src/pages/admin/AdminDocumentationPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing the user-facing **Page Documentation** (`/admin/documentation`). It allows admins to create, edit, and delete the help articles that appear on the `/help` pages.

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** It makes two parallel API calls:
    1.  `/api/v1/admin/documentation` to get the list of documentation pages to display in the main table.
    2.  `/api/v1/wiki/list` to get a flat list of all technical wiki articles, which is used to populate the "Technical Wiki Article" dropdown in the modal.
- **Modal-Based Editing:** All CRUD operations are handled through the `DocumentationModal`.
    - The modal form allows editing of all fields, including title, content (Markdown), category, and related pages.
    - A multi-select input is used for linking related help pages.
    - A dropdown is used for linking a help page to a technical wiki article.
- **Submission:** The modal calls the appropriate `POST`, `PUT`, or `DELETE` endpoints on `/api/v1/admin/documentation`.

## 4. State Management

- **Doc & Wiki Lists:** Managed by `useApi` hooks.
- **Modal State:** Managed by `useState`.'),

('frontend/src/pages/admin/AdminEventsPage.jsx',
'## 1. File Overview & Purpose

This component renders the main administrative page for **Event Management** (`/admin/veranstaltungen`). It provides a full CRUD interface for all events.

## 2. Architectural Role

This is a key **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:**
    - Uses `useApi` to get the list of all events from `/api/v1/events`.
    - It uses the `useAdminData` hook to pre-fetch all data needed for the creation/editing modal (lists of users, courses, and storage items). This prevents the modal from having to make its own data calls.
- **Modal-Based Editing (`EventModal`):**
    - The `EventModal` is a large, complex component with a tabbed interface ("General" and "Details & Requirements").
    - It uses the `DynamicSkillRows` and `DynamicItemRows` components to manage the lists of personnel and material requirements.
    - On submit, it constructs a `FormData` object to send both the JSON event data and an optional file upload in a single multipart request to the backend.
- **Actions:** Provides buttons for editing, cloning, deleting, and accessing the debriefing for each event.

## 4. State Management

- **Event List:** Managed by the `useApi` hook.
- **Form Data for Modal:** The `useAdminData` hook manages fetching this prerequisite data.
- **Modal State:** `useState` controls the modal''s visibility and which event is being edited.'),

('frontend/src/pages/admin/AdminMeetingsPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing specific **Meeting** dates for a given course (`/admin/lehrgaenge/:courseId/meetings`).

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Contextual Data Fetching:** It uses the `courseId` from the URL parameters (via `useParams`) to fetch only the meetings for that specific course from `/api/v1/meetings?courseId=...`. It also fetches a list of all users to populate the "Leader" dropdown in the modal.
- **Modal-Based Editing:** A modal is used for creating and editing meetings.
- **Actions:** Provides buttons for editing, cloning, and deleting meeting dates.

## 4. State Management

- **Meeting List & User List:** Managed by `useApi` hooks.
- **Modal State:** Managed by `useState`.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V78__Repopulate_wiki_data_part18.sql
========================================================================

-- Flyway migration V78, Part 18: Overhaul Technical Wiki Documentation (Frontend Admin Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/pages/admin/AdminStoragePage.jsx',
'## 1. File Overview & Purpose

This component renders the main administrative page for **Inventory Management** (`/admin/lager`). It provides a full CRUD interface for all `StorageItem` entities.

## 2. Architectural Role

This is a key **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get the list of all storage items from `/api/v1/storage`.
- **Modal-Based Editing (`StorageItemModal`):**
    - This is a multi-purpose modal that can switch between different "modes" (`create`, `edit`, `defect`, `repair`, `relations`).
    - The `edit` mode allows changing all core details of an item.
    - The `defect` and `repair` modes provide specialized forms for managing an item''s defective stock count.
    - The `relations` mode allows an admin to manage which other items are considered "related" to this one.
- **Actions:** The main table provides buttons for all actions: Edit, Defect, Repair, QR Code, and Delete.
- **QR Code Generation:** The "QR" button opens a modal that displays a QR code (generated using the `qrcode.react` library) which links to the public `/lager/qr-aktion/:itemId` page for that item.

## 4. State Management

- **Item List:** Managed by the `useApi` hook.
- **Modal State:** A single `useState` object manages the modal''s visibility, the item being edited, and the current `mode` of the modal.'),

('frontend/src/pages/admin/AdminSystemPage.jsx',
'## 1. File Overview & Purpose

This component renders the **System Information** page (`/admin/system`), which displays live statistics about the server''s health.

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to periodically fetch data from the `/api/v1/system/stats` endpoint.
- **Data Display:** It displays metrics like CPU load, RAM usage, and disk space in a clean, readable format within `card` elements. Helper functions are used to format byte values into Gigabytes and numbers into percentages.

## 4. State Management

- All system statistics are managed by the `useApi` hook. The hook''s `reload` function could be called on an interval to create a live-updating dashboard.'),

('frontend/src/pages/admin/AdminTrainingRequestsPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for viewing and managing **User-Initiated Training Requests** (`/admin/training-requests`).

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get all training requests from `/api/v1/admin/training-requests`. The backend enriches this data with a count of how many users have registered interest in each topic.
- **Data Display:** It shows a table of requested topics, who originally requested them, and how many other users are also interested.
- **Deletion:** Allows an admin to delete a request, for example, after a corresponding course has been created or if the request is deemed irrelevant.

## 4. State Management

- The list of requests is managed by the `useApi` hook.'),

('frontend/src/pages/admin/AdminUsersPage.jsx',
'## 1. File Overview & Purpose

This component renders the main **User Management** page (`/admin/mitglieder`). It provides a full CRUD interface for all `User` accounts.

## 2. Architectural Role

This is a key **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:**
    - Uses `useApi` to get the list of all users from `/api/v1/users`.
    - Uses the `useAdminData` hook to pre-fetch data needed for the `UserModal` (roles and permissions).
- **Modal-Based Editing (`UserModal`):**
    - The `UserModal` is a complex modal with tabs for "General", "Permissions", and "Admin Notes".
    - The "Permissions" tab uses the `PermissionsTab` component to render a nested, expandable checklist of all available permissions.
    - On submit, it calls the appropriate `POST` or `PUT` endpoint on `/api/v1/users`.
- **Password Reset:** The "Passwort Reset" button calls `POST /api/v1/users/:id/reset-password`. It then displays the new, temporary password in a separate modal for the admin to copy and securely transmit to the user.

## 4. State Management

- **User List & Prerequisite Data:** Managed by `useApi` and `useAdminData` hooks.
- **Modal State:** Managed with `useState` hooks.'),

('frontend/src/pages/admin/AdminVenuesPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative page for managing **Venues** (Veranstaltungsorte) at `/admin/venues`.

## 2. Architectural Role

This is an **Admin View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get all venues from `/api/v1/admin/venues`.
- **Modal-Based Editing:** Uses a modal to handle creating and editing venues.
- **File Upload:** The modal form includes a file input for uploading a map image. The `handleSubmit` function constructs a `FormData` object to send both the JSON venue data and the image file in a single multipart request.

## 4. State Management

- **Venue List:** Managed by the `useApi` hook.
- **Modal State:** Managed by `useState`.'),

('frontend/src/pages/admin/AdminWikiPage.jsx',
'## 1. File Overview & Purpose

This component renders the administrative interface for the **Technical Wiki** (`/admin/wiki`). It provides a two-pane layout with a file tree navigator and a content editor/viewer.

## 2. Architectural Role

This is a complex **Admin View** component that functions like a small single-page application itself.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get the hierarchical file tree structure from `/api/v1/wiki`.
- **File Tree Navigation:** It recursively renders the file tree structure. Clicking a file triggers an API call via `apiClient` to `/api/v1/wiki/:id` to fetch that specific page''s content.
- **Editing vs. Viewing Mode:**
    - It uses a local `isEditing` state to toggle between a read-only view and an editing view.
    - The read-only view uses `react-markdown` to render the content.
    - The editing view uses a simple `<textarea>` as a controlled component for the Markdown content.
- **CRUD Operations:**
    - **Save:** Calls `PUT /api/v1/wiki/:id` to save the content from the editor.
    - **Delete:** Calls `DELETE /api/v1/wiki/:id` to delete the current page.
    - **Create:** A "+" button opens a modal (`WikiPageModal`) to create a new page by specifying its filename under a parent path. This calls `POST /api/v1/wiki`.

## 4. State Management

- **File Tree:** Managed by the `useApi` hook.
- **Currently Selected Page & Content:** Managed by `useState` hooks.
- **UI State:** `useState` is used for `isEditing` and the new page modal visibility.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V79__Populate_wiki_data_part19.sql
========================================================================

-- Flyway migration V79, Part 19: Overhaul Technical Wiki Documentation (Frontend Misc)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/App.jsx',
'## 1. File Overview & Purpose

This is the root component of the authenticated application. It sets up the main layout, including the `Sidebar` and `Header`, and provides the `<Outlet />` for React Router to render the content of the current route. It also manages global UI elements like the `ToastContainer` and the "What''s New" `ChangelogModal`.

## 2. Architectural Role

This is the main **Layout/Root** component for the authenticated part of the frontend application.

## 3. Key Features & Logic

- **Layout Structure:** Defines the primary HTML structure with the sidebar, a mobile header, the main content area, and an overlay for mobile navigation.
- **Mobile Navigation:** Manages the `isNavOpen` state to toggle the mobile sidebar and the overlay. It includes `useEffect` hooks to add/remove a class to the `<body>` tag and to automatically close the nav on route changes.
- **Changelog Modal:**
    - On mount, if the user is authenticated, it calls the `useCallback`-wrapped `fetchChangelog` function.
    - This function hits the `/api/v1/public/changelog/latest-unseen` endpoint.
    - If an unseen changelog is returned, it sets the state to display the `ChangelogModal`.
    - The modal''s close handler calls `POST /api/v1/public/changelog/:id/mark-seen` to ensure the modal doesn''t appear again for that user.
- **Warning Notifications:** It uses the `useNotifications` hook to listen for real-time "Warning" level notifications and displays the `WarningNotification` component when one is received.
- **Toast Notifications:** It includes the `ToastContainer` and wraps the entire layout in a `ToastProvider` to make the toast context available to all child components.

## 4. State Management

- **Local State (`useState`)**: Manages `isNavOpen`, `changelog`, and `isChangelogVisible`.
- **Custom Hooks**: Uses `useNotifications` to manage warning notifications.
- **Global State (`useAuthStore`)**: Checks `isAuthenticated` before fetching the changelog.
- **Context (`ToastProvider`)**: Provides the toast notification functionality to the entire app.'),

('frontend/src/main.jsx',
'## 1. File Overview & Purpose

This is the main entry point for the React application. Its primary responsibilities are to perform initial setup and then render the application into the DOM.

## 2. Architectural Role

This is the **Application Bootstrap** file for the frontend.

## 3. Key Features & Logic

- **`initializeApp()`**: An asynchronous function that runs before the React application is rendered.
    - **API Client Setup:** It injects the `logout` function from the `authStore` into the `apiClient`. This is a crucial step that allows the `apiClient` to automatically log out the user if it ever receives a 401 Unauthorized response from the backend.
    - **Session Fetching:** It calls `fetchUserSession()` from the `authStore`. This function makes a request to the `/api/v1/auth/me` endpoint to retrieve the current user''s data. This ensures that if a user refreshes the page, their session is re-established before any components are rendered.
- **Rendering:** After `initializeApp` completes, it uses `ReactDOM.createRoot().render()` to mount the `RouterProvider` (from React Router) into the `<div id="root"></div>` element in `index.html`.

## 4. State Management

- This file is the primary consumer of the `useAuthStore`. It directly calls `getState()` and `dispatch` actions (`fetchUserSession`) to initialize the application''s authentication state.'),

('frontend/src/pages/error/ErrorPage.jsx',
'## 1. File Overview & Purpose

This component renders a user-friendly, stylized **500 Internal Server Error** page. It is configured as the `errorElement` for the main application route in `router/index.jsx`, meaning it will be automatically displayed by React Router if an unhandled error occurs during rendering or data loading in any of the child routes.

## 2. Architectural Role

This is a specialized **View** component for error handling.

## 3. Key Features & Logic

- **Error Catching:** Uses the `useRouteError` hook from React Router to catch the error object that was thrown.
- **Stylized Display:** It renders its content inside a `<div class="terminal">` to create a "hacker terminal" aesthetic, making the error page more engaging than a standard blank page.
- **Typing Animation:** It uses the `useTypingAnimation` custom hook to display a series of diagnostic messages one character at a time, enhancing the terminal theme. The actual error message from the `useRouteError` hook is dynamically inserted into this animation.
- **Recovery Action:** Once the typing animation is complete, a "Zum Dashboard" button becomes visible, providing the user with a clear path to navigate away from the error page.

## 4. State Management

- The typing animation and its completion state are managed by the `useTypingAnimation` hook.'),

('frontend/src/pages/error/ForbiddenPage.jsx',
'## 1. File Overview & Purpose

This component renders a **403 Forbidden** error page (`/forbidden`). It is displayed when an authenticated user tries to access a resource they do not have the necessary permissions for.

## 2. Architectural Role

This is a specialized **View** component for handling authorization errors.

## 3. Key Features & Logic

- **Navigation Target:** The `AdminRoute` component explicitly navigates to this page if a non-admin user attempts to access an admin route.
- **Stylized Display:** Similar to the `ErrorPage`, it uses a full-screen terminal aesthetic with a typing animation to display a security-themed message, informing the user that their access attempt was denied and logged.
- **User Personalization:** It retrieves the current user''s username from the `useAuthStore` to include it in the animated text, making the message feel more specific and informative.

## 4. State Management

- The typing animation is managed by the `useTypingAnimation` hook.
- It reads from the `useAuthStore` to get the current username.'),

('frontend/src/pages/error/NotFoundPage.jsx',
'## 1. File Overview & Purpose

This component renders a **404 Not Found** error page. It is configured as the wildcard route (`*`) in `router/index.jsx` and is displayed whenever a user navigates to a URL that does not match any other defined route.

## 2. Architectural Role

This is a specialized **View** component for handling routing errors.

## 3. Key Features & Logic

- **Path Awareness:** It uses the `useLocation` hook from React Router to get the incorrect path that the user tried to access.
- **Stylized Display:** It uses the terminal aesthetic and `useTypingAnimation` hook to display a message that simulates a "file not found" error from a command-line interface, dynamically including the incorrect path in the message.
- **Recovery Action:** Provides a clear link back to the main dashboard.

## 4. State Management

- The typing animation is managed by the `useTypingAnimation` hook.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V7__Populate_wiki_data_part2.sql
========================================================================

-- Flyway migration V7, Part 2

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('src/main/java/de/dao/AchievementDAO.java', '1.  **File Overview & Purpose**\n\n    This Data Access Object (DAO) is responsible for all database interactions related to achievements. It handles CRUD (Create, Read, Update, Delete) operations on the `achievements` table and manages the relationship between users and achievements in the `user_achievements` junction table.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It directly interacts with the database to persist and retrieve achievement data. It is exclusively called by the `AchievementService` and administrative servlets like `AdminAchievementServlet`.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Used to inject the `DatabaseManager` for obtaining database connections.\n    *   `DatabaseManager`: Provides the connection pool for all database operations.\n    *   `Achievement` (Model): The data model object that this DAO creates and populates.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getAllAchievements()`**: Retrieves a list of all defined achievement templates from the `achievements` table.\n    *   **`getAchievementById(int id)`**: Fetches a single achievement template by its primary key.\n    *   **`createAchievement(Achievement achievement)`**: Inserts a new achievement template into the `achievements` table.\n    *   **`updateAchievement(Achievement achievement)`**: Updates an existing achievement template''s name, description, or icon. The `achievement_key` is immutable.\n    *   **`deleteAchievement(int id)`**: Deletes an achievement template from the `achievements` table.\n    *   **`getAchievementsForUser(int userId)`**: Retrieves all achievements that a specific user has earned, joining `achievements` and `user_achievements` tables. It also populates the `earnedAt` timestamp.\n    *   **`grantAchievementToUser(int userId, String achievementKey)`**: Grants an achievement to a user by inserting a record into the `user_achievements` table. It first checks if the user already has the achievement to prevent duplicates.\n    *   **`hasAchievement(int userId, String achievementKey)`**: Checks if a user has already earned a specific achievement.\n    *   **`mapResultSetToAchievement(ResultSet rs)`**: A private helper method to map a row from a `ResultSet` to an `Achievement` model object, reducing code duplication.'),
('src/main/java/de/dao/AdminLogDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all interactions with the `admin_logs` table. Its sole purpose is to create and retrieve audit log entries, providing a history of administrative actions performed within the application.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It provides a structured way for the `AdminLogService` to persist audit trails to the database.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `AdminLog` (Model): The data model representing a single log entry.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createLog(AdminLog log)`**\n        *   **Method Signature:** `public void createLog(AdminLog log)`\n        *   **Purpose:** Inserts a new log entry into the `admin_logs` table.\n        *   **Parameters:**\n            *   `log` (AdminLog): The log entry object containing the admin''s username, action type, and details.\n        *   **Returns:** void.\n        *   **Side Effects:** Writes a new record to the database. It includes robust error logging to ensure that a failure to log does not crash the primary operation.\n\n    *   **`getAllLogs()`**\n        *   **Method Signature:** `public List<AdminLog> getAllLogs()`\n        *   **Purpose:** Retrieves all log entries from the database, ordered from newest to oldest.\n        *   **Parameters:** None.\n        *   **Returns:** A `List` of `AdminLog` objects.\n        *   **Side Effects:** Performs a database read.\n\n    *   **`getRecentLogs(int limit)`**\n        *   **Method Signature:** `public List<AdminLog> getRecentLogs(int limit)`\n        *   **Purpose:** Retrieves the most recent log entries up to a specified limit. Used for dashboard widgets.\n        *   **Parameters:**\n            *   `limit` (int): The maximum number of log entries to retrieve.\n        *   **Returns:** A `List` of `AdminLog` objects.\n        *   **Side Effects:** Performs a database read with a `LIMIT` clause.'),
('src/main/java/de/dao/AttachmentDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO is responsible for managing file attachments associated with parent entities like Events or Meetings. It provides a unified interface for CRUD operations on the `attachments` table, abstracting away the polymorphic relationship defined by the `parent_type` and `parent_id` columns.\n\n2.  **Architectural Role**\n\n    This is a **DAO (Data Access) Tier** class. It is called by services (`EventService`, `MeetingService`) and servlets (`AdminEventServlet`, `AdminMeetingServlet`) that need to manage attachments for their respective entities.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `Attachment` (Model): The data model object this DAO works with.\n\n4.  **In-Depth Breakdown**\n\n    *   **`addAttachment(Attachment attachment, Connection conn)`**: Inserts a new attachment record into the database within an existing transaction.\n    *   **`getAttachmentsForParent(String parentType, int parentId, String userRole)`**: Retrieves all attachments for a specific parent (e.g., all attachments for Event with ID 5). It filters the results based on the user''s role (`ADMIN` or `NUTZER`), ensuring non-admins cannot see admin-only files.\n    *   **`getAttachmentById(int attachmentId)`**: Fetches a single attachment''s metadata by its unique ID. This is used by the `DownloadServlet` to verify existence and get the file path.\n    *   **`deleteAttachment(int attachmentId)`**: Deletes an attachment record from the database. Note: This does not delete the physical file from the disk; that is the responsibility of the calling service or servlet.\n    *   **`mapResultSetToAttachment(ResultSet rs)`**: A private helper method to convert a database row into an `Attachment` object.'),
('src/main/java/de/dao/MaintenanceLogDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all database interactions with the `maintenance_log` table. Its purpose is to create and retrieve maintenance history for specific inventory items, tracking actions like repairs or marking an item for maintenance.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `StorageService` and `AdminStorageServlet` to log maintenance activities and by the `StorageItemDetailsServlet` to display an item''s maintenance history.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `MaintenanceLogEntry` (Model): The data model representing a single maintenance log entry.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createLog(MaintenanceLogEntry log)`**\n        *   **Method Signature:** `public boolean createLog(MaintenanceLogEntry log)`\n        *   **Purpose:** Inserts a new maintenance record into the `maintenance_log` table.\n        *   **Parameters:**\n            *   `log` (MaintenanceLogEntry): An object containing the item ID, user ID, action taken, notes, and any associated cost.\n        *   **Returns:** `true` on successful insertion, `false` otherwise.\n        *   **Side Effects:** Writes a new record to the database.\n\n    *   **`getHistoryForItem(int itemId)`**\n        *   **Method Signature:** `public List<MaintenanceLogEntry> getHistoryForItem(int itemId)`\n        *   **Purpose:** Retrieves the complete maintenance history for a specific storage item, ordered from newest to oldest. It joins with the `users` table to get the username of the person who performed the action.\n        *   **Parameters:**\n            *   `itemId` (int): The ID of the storage item.\n        *   **Returns:** A `List` of `MaintenanceLogEntry` objects.\n        *   **Side Effects:** Performs a database read.'),
('src/main/java/de/dao/MeetingAttendanceDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO handles all database interactions for the `meeting_attendance` table. It is responsible for tracking which users have attended specific meetings, which is the basis for granting qualifications.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `AdminAttendanceServlet` and `MatrixServlet` to update and display attendance records.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `MeetingAttendance` (Model): The data model representing a user''s attendance at a meeting.\n\n4.  **In-Depth Breakdown**\n\n    *   **`setAttendance(int userId, int meetingId, boolean attended, String remarks)`**\n        *   **Method Signature:** `public boolean setAttendance(int userId, int meetingId, boolean attended, String remarks)`\n        *   **Purpose:** Sets or updates a user''s attendance status for a meeting. It uses an `INSERT ... ON DUPLICATE KEY UPDATE` SQL statement, which allows this single method to handle both initial registration and subsequent changes without needing to check for a pre-existing record.\n        *   **Parameters:** All parameters correspond to the columns in the `meeting_attendance` table.\n        *   **Returns:** `true` on success, `false` on SQL error.\n        *   **Side Effects:** Writes or updates a record in the database.\n\n    *   **`getAllAttendance()`**\n        *   **Method Signature:** `public List<MeetingAttendance> getAllAttendance()`\n        *   **Purpose:** Retrieves all attendance records from the database. This is used by the `MatrixServlet` to build a comprehensive map of all user attendance for display in the qualification matrix.\n        *   **Parameters:** None.\n        *   **Returns:** A `List` of all `MeetingAttendance` objects.\n        *   **Side Effects:** Performs a database read.\n\n    *   **`mapResultSetToAttendance(ResultSet rs)`**: A private helper method to map a database row to a `MeetingAttendance` object.'),
('src/main/java/de/dao/MeetingDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages all database operations for the `meetings` table. It handles the CRUD lifecycle of individual, schedulable meeting instances, which are always children of a parent `Course`. It also manages user sign-ups for meetings via the `meeting_attendance` table.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It is primarily used by the `AdminMeetingServlet` for managing meetings and by public-facing servlets like `MeetingServlet` and `MeetingDetailsServlet` to display meeting information to users.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `Meeting`, `User` (Models): The data models this DAO works with.\n\n4.  **In-Depth Breakdown**\n\n    *   **CRUD Operations (`createMeeting`, `getMeetingById`, `updateMeeting`, `deleteMeeting`)**: Standard methods for managing meeting records. `deleteMeeting` will cascade-delete all associated attendance records.\n    *   **Listing Methods (`getMeetingsForCourse`, `getAllMeetings`, `getAllUpcomingMeetings`)**: Various methods to retrieve lists of meetings, either for a specific course, for all courses, or only upcoming ones for the calendar view. These queries join with `courses` and `users` to enrich the `Meeting` object with the parent course name and leader''s username.\n    *   **User-Specific Queries (`getUpcomingMeetingsForUser`, `isUserAssociatedWithMeeting`)**:\n        *   `getUpcomingMeetingsForUser`: Fetches upcoming meetings for a specific user and calculates their attendance status (`ANGEMELDET`, `ABGEMELDET`, or `OFFEN`) for each.\n        *   `isUserAssociatedWithMeeting`: A simple check to see if a user is signed up for a meeting, used for authorization checks.\n    *   **`mapResultSetToMeeting(ResultSet rs)`**: A private helper to populate a `Meeting` object from a database row, including data from joined tables.'),
('src/main/java/de/dao/PasskeyDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO is responsible for all database interactions related to WebAuthn/Passkey credentials. It handles the storage, retrieval, and management of public key credentials in the `user_passkeys` table, which enables passwordless authentication for users.\n\n2.  **Architectural Role**\n\n    This class is a critical component of the **DAO (Data Access) Tier**. It provides the persistence layer for the `PasskeyService`, allowing it to manage the lifecycle of user credentials securely.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `PasskeyCredential` (Model): The data model representing a stored credential.\n\n4.  **In-Depth Breakdown**\n\n    *   **`saveCredential(PasskeyCredential credential)`**: Inserts a new passkey record into the database after a user successfully completes the registration ceremony.\n    *   **`getCredentialsByUserId(int userId)`**: Retrieves all passkeys registered by a specific user. This is used during the authentication process where the server can suggest known credentials to the browser.\n    *   **`getCredentialById(String credentialId)`**: Fetches a single credential by its unique `credential_id` (a Base64URL string). This is the primary lookup method during an authentication ceremony to verify a user''s login attempt.\n    *   **`deleteCredential(int credentialDbId, int userId)`**: Removes a passkey from the database. It requires both the internal database ID and the user''s ID to ensure a user can only delete their own credentials.\n    *   **`updateSignatureCount(String credentialId, long newSignatureCount)`**: Updates the signature counter for a credential after a successful authentication. This is a security measure to help detect cloned authenticators.\n    *   **`mapResultSetToCredential(ResultSet rs)`**: A private helper method to map a database row to a `PasskeyCredential` object.'),
('src/main/java/de/dao/PermissionDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO provides read-only access to the application''s permission system. Its primary responsibilities are to fetch all available permission definitions from the `permissions` table and to retrieve the specific set of permissions granted to an individual user from the `user_permissions` junction table.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `UserDAO` to populate a `User` object with their complete set of permissions upon login, and by the `AdminUserServlet` to display the list of all possible permissions in the user editing modal.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `Permission` (Model): The data model representing a single permission definition.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getAllPermissions()`**\n        *   **Method Signature:** `public List<Permission> getAllPermissions()`\n        *   **Purpose:** Retrieves a complete list of all permissions defined in the system.\n        *   **Parameters:** None.\n        *   **Returns:** A `List` of `Permission` objects.\n        *   **Side Effects:** Performs a database read on the `permissions` table.\n\n    *   **`getPermissionIdsForUser(int userId)`**\n        *   **Method Signature:** `public Set<Integer> getPermissionIdsForUser(int userId)`\n        *   **Purpose:** Fetches the set of primary key IDs for all permissions directly assigned to a specific user.\n        *   **Parameters:**\n            *   `userId` (int): The ID of the user.\n        *   **Returns:** A `Set` of integer permission IDs.\n        *   **Side Effects:** Performs a database read on the `user_permissions` table.'),
('src/main/java/de/dao/ProfileChangeRequestDAO.java', '1.  **File Overview & Purpose**\n\n    This DAO manages the lifecycle of user profile change requests. It handles all database operations for the `profile_change_requests` table, including creating new requests, fetching pending requests for administrators, and updating their status upon approval or denial.\n\n2.  **Architectural Role**\n\n    This class belongs to the **DAO (Data Access) Tier**. It is used by the `ProfileServlet` when a user submits a change request and by the `AdminChangeRequestServlet` and its associated `Action` classes (`ApproveChangeAction`, `DenyChangeAction`) for processing these requests.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n    *   `ProfileChangeRequest` (Model): The data model for a change request.\n\n4.  **In-Depth Breakdown**\n\n    *   **`createRequest(ProfileChangeRequest request)`**: Inserts a new profile change request into the database with a ''PENDING'' status.\n    *   **`getRequestById(int id)`**: Retrieves a single request by its ID, joining with the `users` table to get the requester''s and reviewer''s usernames.\n    *   **`getPendingRequests()`**: Fetches all requests that currently have a ''PENDING'' status, for display on the admin requests page.\n    *   **`hasPendingRequest(int userId)`**: A quick check to determine if a user already has a pending request, used to prevent them from submitting multiple requests.\n    *   **`updateRequestStatus(int requestId, String status, int adminId)`**: Updates a request''s status to ''APPROVED'' or ''DENIED'', and records which admin reviewed it and when.\n    *   **`mapResultSetToRequest(ResultSet rs)`**: A private helper method to map a database row to a `ProfileChangeRequest` object.'),
('src/main/java/de/dao/ReportDAO.java', '1.  **File Overview & Purpose**\n\n    This is a specialized DAO designed for generating analytical reports and summaries. Unlike other DAOs that focus on CRUD operations for single entities, this class contains complex, aggregate SQL queries that summarize data across multiple tables for administrative dashboards and dedicated report pages.\n\n2.  **Architectural Role**\n\n    This class is part of the **DAO (Data Access) Tier**. It is used by the `AdminReportServlet` and `AdminDashboardService` to fetch data for visualization and export. It encapsulates the most complex SQL logic in the application.\n\n3.  **Key Dependencies & Libraries**\n\n    *   `@Inject`: Injects the `DatabaseManager`.\n    *   `DatabaseManager`: Provides database connections.\n\n4.  **In-Depth Breakdown**\n\n    *   **`getEventParticipationSummary()`**: Calculates the number of assigned participants for each event.\n    *   **`getUserActivityStats()`**: Aggregates statistics for each user, counting how many events they''ve signed up for and how many meetings they''ve attended.\n    *   **`getInventoryUsageFrequency()`**: Calculates the total number of times each inventory item has been checked out.\n    *   **`getTotalInventoryValue()`**: Calculates the total monetary value of all items in stock by multiplying quantity by price.\n    *   **`getEventCountByMonth(int months)`**: Generates a time-series dataset of how many events occurred each month over a given period, used for the trend chart on the dashboard.\n    *   **`getUserParticipationStats(int limit)`**: Retrieves the top N most active users based on the number of events they have been assigned to.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V80__Repopulate_wiki_data_part20.sql
========================================================================

-- Flyway migration V80, Part 20: Overhaul Technical Wiki Documentation (Frontend Components & Admin Pages)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/components/admin/dashboard/EventTrendChart.jsx',
'## 1. File Overview & Purpose

This is a presentational React component responsible for rendering the **Event Trend Chart** on the Admin Dashboard. It uses the `react-chartjs-2` library to create a line chart.

## 2. Architectural Role

This is a **View** sub-component, specifically for data visualization within the `AdminDashboardPage`.

## 3. Key Features & Logic

- **Library Integration:** It imports and registers the necessary components from `chart.js` (like scales, elements, and tooltips).
- **Data Mapping:** It takes `trendData` (an array of `{ month: string, count: number }`) as a prop and transforms it into the specific `data` and `options` format required by Chart.js.
- **Rendering:** It renders the `<Line />` component from `react-chartjs-2`, passing the prepared data and options to it.'),

('frontend/src/components/admin/dashboard/Widget.jsx',
'## 1. File Overview & Purpose

This is a reusable React component that renders a single **Dashboard Widget**. It provides a standardized layout with a title, an icon, a content area, and an optional "View All" link.

## 2. Architectural Role

This is a reusable **UI Component** used throughout the `AdminDashboardPage`.

## 3. Key Features & Logic

- **Props-Based:** It is a purely presentational component that receives all its content via props: `icon`, `title`, `children` (for the main content), `linkTo`, and `linkText`.
- **Standardized Layout:** It renders its content inside a `<div class="card">`, ensuring a consistent look and feel for all dashboard widgets.'),

('frontend/src/components/admin/events/DynamicItemRows.jsx',
'## 1. File Overview & Purpose

This is a controlled React component that manages a dynamic list of **inventory item reservations** within a form. It allows an administrator to add, remove, and edit multiple item/quantity pairs.

## 2. Architectural Role

This is a **Form Component** used within the `EventModal`.

## 3. Key Features & Logic

- **Controlled Component:** It does not manage its own state. It receives the list of rows (`rows`) and a setter function (`setRows`) as props from its parent (`EventModal`).
- **Dynamic Rows:** It maps over the `rows` array to render a row for each item. Each row contains a `<select>` dropdown for the item and an `<input>` for the quantity.
- **State Manipulation:**
    - `handleAddRow`: Appends a new, empty item object to the `rows` array via the `setRows` prop.
    - `handleRemoveRow`: Removes an item from the array at a specific index.
    - `handleRowChange`: Updates a specific field (itemId or quantity) for an item at a specific index.'),

('frontend/src/components/admin/events/DynamicSkillRows.jsx',
'## 1. File Overview & Purpose

This is a controlled React component that manages a dynamic list of **skill requirements** for an event. It allows an administrator to add, remove, and edit multiple skill/personnel count pairs.

## 2. Architectural Role

This is a **Form Component** used within the `EventModal`.

## 3. Key Features & Logic

- **Controlled Component:** Like `DynamicItemRows`, it receives its state (`rows`, `setRows`) via props from the `EventModal`.
- **Functionality:** Its implementation is nearly identical to `DynamicItemRows`, but the inputs are tailored for selecting a `Course` and specifying the number of required persons.'),

('frontend/src/components/admin/events/EventModal.jsx',
'## 1. File Overview & Purpose

This is a large, stateful React component that provides the **modal dialog for creating and editing events**. It contains the entire form, including the tabbed interface and the dynamic row components.

## 2. Architectural Role

This is a key **UI Container Component** used by the `AdminEventsPage`.

## 3. Key Features & Logic

- **State Management:** It uses `useState` to manage all form data (`formData`), the state of the skill requirement rows (`skillRows`), the item reservation rows (`itemRows`), the selected file for upload, and the active tab.
- **Edit Mode:** It determines if it''s in "edit" or "create" mode based on whether an `event` prop is passed in. In edit mode, an `useEffect` hook populates the form with the existing event''s data.
- **Tabbed Interface:** Manages the `activeTab` state to show/hide the "General" and "Details & Bedarf" sections of the form.
- **Component Composition:** It renders the `DynamicSkillRows` and `DynamicItemRows` components, passing down the relevant state and state setters.
- **Submission:** The `handleSubmit` function assembles all the data from the various state variables into a `FormData` object. This is necessary to send both the JSON event data and the binary file data in a single multipart request to the backend.'),

('frontend/src/components/admin/events/TaskDependenciesForm.jsx',
'## 1. File Overview & Purpose

This is a controlled React component that renders a checklist of tasks, allowing an administrator to define **dependencies** for a specific event task (i.e., which other tasks must be completed first).

## 2. Architectural Role

This is a **Form Component** intended for use within a task editing modal (though not fully implemented in the provided code, it is present).

## 3. Key Features & Logic

- **Controlled Component:** It receives the list of selected dependencies (`selectedDependencies`, a `Set`) and an `onDependencyChange` callback function as props.
- **Rendering:** It receives a list of `allTasks` for the event and renders a checkbox for each one.
- **State Manipulation:** When a checkbox is toggled, it creates a new `Set` based on the previous selection, adds or deletes the toggled task ID, and calls the `onDependencyChange` prop with the new `Set` to update the parent component''s state.'),

('frontend/src/components/admin/kits/KitItemsForm.jsx',
'## 1. File Overview & Purpose

This is a stateful React component that provides the form for managing the **items within an inventory kit**. It is displayed within the accordion view on the `AdminKitsPage`.

## 2. Architectural Role

This is a **Form Component**.

## 3. Key Features & Logic

- **Local State:** Unlike the dynamic rows for events, this component manages its own state for the list of `items`. It initializes this state from the `kit.items` prop.
- **Dynamic Rows:** It provides the standard "add row" and "remove row" functionality for editing the list of items and their quantities.
- **Submission:** On submit, it calls the `PUT /api/v1/kits/:id/items` endpoint to overwrite the entire list of items for that kit. It then calls the `onUpdateSuccess` prop to trigger a data refresh on the parent page.'),

('frontend/src/components/admin/kits/KitModal.jsx',
'## 1. File Overview & Purpose

This component provides the **modal dialog for creating and editing the metadata** of an inventory kit (name, description, location).

## 2. Architectural Role

This is a **UI Container Component** used by the `AdminKitsPage`.

## 3. Key Features & Logic

- **State Management:** It is a controlled form that manages its state (`formData`) with `useState`.
- **Edit vs. Create Mode:** It checks for the presence of a `kit` prop to determine its mode and initialize its state.
- **Submission:** On submit, it calls either `POST /api/v1/kits` (for create) or `PUT /api/v1/kits/:id` (for edit) and then calls the `onSuccess` prop to close the modal and refresh the parent page.'),

('frontend/src/components/admin/matrix/AttendanceModal.jsx',
'## 1. File Overview & Purpose

This component provides the **modal dialog for updating a user''s attendance** for a specific training meeting. It is opened when an admin clicks a cell in the Qualification Matrix.

## 2. Architectural Role

This is a **UI Container Component** used by the `AdminMatrixPage`.

## 3. Key Features & Logic

- **State Management:** It is a controlled form that manages the state for the `attended` checkbox and the `remarks` textarea.
- **Submission:** On submit, it calls the `PUT /api/v1/matrix/attendance` endpoint with the user ID, meeting ID, and the new attendance status. It then calls the `onSuccess` prop to close the modal and refresh the matrix data.'),

('frontend/src/components/admin/reports/UserActivityChart.jsx',
'## 1. File Overview & Purpose

This is a presentational React component that renders a **horizontal bar chart** showing user activity (e.g., event participations).

## 2. Architectural Role

This is a **View** sub-component for data visualization, used within the `AdminReportsPage`.

## 3. Key Features & Logic

- **Library Integration:** It uses `react-chartjs-2` to render a `<Bar />` chart.
- **Data Mapping:** It takes `activityData` as a prop and transforms it into the data format required by Chart.js.
- **Configuration:** It sets the `indexAxis: ''y''` option to make the bar chart horizontal, which is often better for displaying lists of names.'),

('frontend/src/components/admin/storage/StorageItemModal.jsx',
'## 1. File Overview & Purpose

This is a highly versatile, stateful React component that provides the **modal dialog for all administrative actions on a storage item**. It can switch between multiple modes to show different forms.

## 2. Architectural Role

This is a key **UI Container Component** used by `AdminStoragePage` and `AdminDefectivePage`.

## 3. Key Features & Logic

- **Mode Management:** It uses a local `mode` state, initialized by the `initialMode` prop, to control which form is rendered. The available modes are `create`, `edit`, `defect`, `repair`, and `relations`.
- **Multi-Functional Rendering:** A `renderContent()` function contains a `switch` statement that returns the correct form JSX based on the current `mode`.
- **Component Composition:** In `relations` mode, it renders the `RelatedItemsManager` component to handle that specific functionality.
- **Data Fetching:** It uses the `useApi` hook to fetch a list of all storage items, which is needed by the `RelatedItemsManager`.
- **Submission Logic:** It contains multiple separate submission handlers (`handleSubmit`, `handleDefectSubmit`, `handleRepairSubmit`) for each of its primary functions, each calling a different backend API endpoint.'),

('frontend/src/components/admin/users/PermissionTab.jsx',
'## 1. File Overview & Purpose

This is a controlled, presentational React component that renders the **nested checklist of permissions** inside the `UserModal`.

## 2. Architectural Role

This is a **Form Component**.

## 3. Key Features & Logic

- **Controlled Component:** It receives the `groupedPermissions` object, a `Set` of `assignedIds`, and an `onPermissionChange` callback function as props.
- **Rendering Logic:**
    - It iterates over the keys of the `groupedPermissions` object to create a `<details>` section for each permission group (e.g., "USER", "EVENT").
    - Within each group, it maps over the permissions to render a checkbox and label for each.
    - The `checked` status of each checkbox is determined by checking if its ID exists in the `assignedIds` `Set`.
- **State Manipulation:** When a checkbox is clicked, it calls the `onPermissionChange` prop with the permission''s ID, allowing the parent `UserModal` to update its state.'),

('frontend/src/components/admin/users/UserModal.jsx',
'## 1. File Overview & Purpose

This is a large, stateful React component that provides the **modal dialog for creating and editing users**. It contains the entire form, including the tabbed interface for general details, permissions, and admin notes.

## 2. Architectural Role

This is a key **UI Container Component** used by the `AdminUsersPage`.

## 3. Key Features & Logic

- **Data Fetching:** When in edit mode, it makes an API call via `apiClient` to `/api/v1/users/:id` to fetch the full user object, including their currently assigned permissions.
- **State Management:**
    - `useState` is used to manage the `formData` object, which contains all user details and a `Set` of `permissionIds`.
    - It also manages the `activeTab` state.
- **Component Composition:** It renders the `PermissionsTab` component, passing down the `groupedPermissions` (received from `AdminUsersPage`), the `formData.permissionIds` set, and the `handlePermissionChange` callback.
- **Permission Handling:** The `handlePermissionChange` function is responsible for updating the `permissionIds` `Set` in the component''s state when a checkbox is toggled in the child component.
- **Submission:** On submit, it converts the `permissionIds` `Set` back into an array and sends the complete payload to the backend.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V81__Repopulate_wiki_data_part21.sql
========================================================================

-- Flyway migration V81, Part 21: Overhaul Technical Wiki Documentation (Frontend Components)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/components/calendar/CalendarDesktopView.jsx',
'## 1. File Overview & Purpose

This component renders a traditional, grid-based **monthly calendar view** for desktop screens.

## 2. Architectural Role

This is a **View** sub-component, used by `CalendarPage`.

## 3. Key Features & Logic

- **Date Calculation (`date-fns`):** It heavily uses the `date-fns` library to perform all necessary date calculations:
    - `startOfMonth`, `endOfMonth`: To find the boundaries of the current month.
    - `startOfWeek`, `endOfWeek`: To find the start and end of the visible grid, ensuring full weeks are always displayed.
    - `eachDayOfInterval`: To generate an array of all `Date` objects to be rendered in the grid.
- **Data Grouping:** It uses `useMemo` to transform the flat list of `entries` (from props) into a `Map` where keys are date strings (`"yyyy-MM-dd"`) and values are arrays of events for that day. This is an efficient way to look up events for each day cell.
- **Rendering:** It maps over the `daysInGrid` array. For each day, it looks up the events in the memoized map and renders them. Days not in the current month are visually greyed out.'),

('frontend/src/components/calendar/CalendarMobileView.jsx',
'## 1. File Overview & Purpose

This component renders a simple, **chronological list of upcoming events and meetings**, optimized for mobile screens.

## 2. Architectural Role

This is a **View** sub-component, used by `CalendarPage`.

## 3. Key Features & Logic

- **Sorting:** It first sorts the incoming `entries` array by date to ensure they are displayed in chronological order.
- **Rendering:** It maps over the sorted array and renders each entry as a list item (`termin-item`). Each item displays the day, month, title, and type of the entry, and links to the respective details page.'),

('frontend/src/components/chat/ConversationList.jsx',
'## 1. File Overview & Purpose

This component renders the **list of conversations** on the left side of the `ChatPage`. It displays all of the user''s 1-on-1 and group chats and provides controls for starting new ones.

## 2. Architectural Role

This is a **View** sub-component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch the user''s conversation list from `/api/v1/public/chat/conversations`.
- **Starting New Chats:**
    - The "New Direct Message" button opens a `UserSearchModal`. When a user is selected, it calls `POST /api/v1/public/chat/conversations` to find or create a conversation and then navigates to the new chat URL.
    - The "New Group" button opens the `GroupChatModal`, which handles the creation of a new group conversation.
- **Active State:** It compares the `selectedConversationId` prop (from the URL) with each conversation''s ID to apply an "active" CSS class to the currently viewed chat.'),

('frontend/src/components/chat/GroupChatModal.jsx',
'## 1. File Overview & Purpose

This component provides the **modal dialog for creating a new group chat**.

## 2. Architectural Role

This is a **UI Container Component**.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch a list of all users from `/api/v1/users` to populate the member selection checklist.
- **State Management:** Uses `useState` to manage the `groupName` input and a `Set` of `selectedUsers`.
- **Submission:** The "Create Group" button calls the `onCreateGroup` prop (passed from `ConversationList`), providing the group name and the array of selected user IDs.'),

('frontend/src/components/chat/ManageParticipantsModal.jsx',
'## 1. File Overview & Purpose

This component provides the **modal dialog for adding new members to an existing group chat**.

## 2. Architectural Role

This is a **UI Container Component**.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to get a list of all users.
- **Filtering:** It filters the list of all users to show only those who are *not* already in the current conversation.
- **Submission:** The "Add" button calls the `onAddUsers` prop (passed from `MessageView`), providing the array of newly selected user IDs.'),

('frontend/src/components/chat/MessageStatus.jsx',
'## 1. File Overview & Purpose

This is a small, presentational component that displays the **read receipt status** (Sent, Delivered, Read) for a chat message.

## 2. Architectural Role

This is a **View** sub-component, used within `MessageView`.

## 3. Key Features & Logic

- **Conditional Rendering:** It only renders if the message was sent by the current user (`isSentByMe` prop is true).
- **Icon Logic:** It uses a `switch` statement on the `status` prop to determine which FontAwesome icon to display (`fa-check`, `fa-check-double`) and whether to apply a different color for the "Read" status.'),

('frontend/src/components/chat/MessageView.jsx',
'## 1. File Overview & Purpose

This is a large, complex component that renders the **main message view** for a single conversation on the `ChatPage`. It handles displaying message history, real-time message updates, and the message input form.

## 2. Architectural Role

This is a key **View** component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch the initial message history from `/api/v1/public/chat/conversations/:id/messages`.
- **Real-Time Updates:** Uses the `useWebSocket` hook to connect to `/ws/dm/:conversationId`. The `handleWebSocketMessage` callback handles incoming messages (`new_message`, `message_updated`, `message_deleted`, `messages_status_updated`) and updates the local `messages` state accordingly.
- **Read Receipts:** An `useEffect` hook monitors the `messages` state. If it detects unread messages received from another user, it sends a `mark_as_read` event over the WebSocket to inform the server and other clients.
- **Message Rendering:** It maps over the `messages` array, rendering each one as a "bubble". It handles different styles for sent vs. received messages, displays sender info for group chats, and renders message content (including file links) via the `renderMessageContent` helper.
- **Message Actions:** It provides options for editing and deleting messages, which send `update_message` and `delete_message` events over the WebSocket.
- **Input Form:** Provides a controlled form for typing new messages and uploading files.

## 4. State Management

- **Message History:** Managed by `useState`, initialized by `useApi` and updated by `useWebSocket`.
- **Conversation Details:** Managed by a separate `useApi` hook.
- **UI State:** Uses `useState` for the message input, editing state, and modal visibility.');
COMMIT;
========================================================================
FILE: src\main\resources\db\migration\V82__Repopulate_wiki_data_part22.sql
========================================================================

-- Flyway migration V82, Part 22: Overhaul Technical Wiki Documentation (Frontend Components)

INSERT INTO `wiki_documentation` (`file_path`, `content`) VALUES
('frontend/src/components/events/ChecklistTab.jsx',
'## 1. File Overview & Purpose

This component renders the **Inventory Checklist** tab on the `EventDetailsPage`. It provides an interactive checklist for tracking equipment during event load-in and load-out.

## 2. Architectural Role

This is a **View** sub-component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch the initial checklist items for the event from `/api/v1/events/:id/checklist`.
- **Real-Time Updates:** Uses the `useWebSocket` hook to connect to `/ws/checklist/:id`. It listens for `checklist_update` events and updates the local state in real-time when another user changes an item''s status.
- **Status Changes:** When the user changes the status of an item in the dropdown, it sends a `PUT` request to `/api/v1/events/:id/checklist/:itemId/status`. The component''s state is then updated by the incoming WebSocket broadcast, ensuring consistency across all clients.
- **Generate from Reservations:** Provides a button that calls `POST /api/v1/events/:id/checklist/generate` to populate the checklist from the event''s material reservations.'),

('frontend/src/components/events/EventGalleryTab.jsx',
'## 1. File Overview & Purpose

This component renders the **Photo Gallery** tab on the `EventDetailsPage` for completed events. It displays uploaded photos and provides an interface for participants to upload new ones.

## 2. Architectural Role

This is a **View** sub-component.

## 3. Key Features & Logic

- **Data Fetching:** Uses `useApi` to fetch all photo metadata for the event from `/api/v1/public/events/:id/gallery`.
- **Photo Upload:**
    - It conditionally renders an "Upload Photo" button only if the current user was a participant in the event.
    - The button opens a `PhotoUploadModal` which handles the file selection and submission to `POST /api/v1/public/events/:id/gallery`.
- **Photo Deletion:** It renders a delete button on each photo. This button is only visible if the current user is the uploader, an admin, or the event leader.
- **Lightbox:** Clicking on any photo opens it in a full-screen `Lightbox` view.

## 4. State Management

- **Photo List & Modals:** Managed by `useApi` and `useState` hooks.'),

('frontend/src/components/layout/ErrorLayout.jsx',
'## 1. File Overview & Purpose

This is a specialized **Layout Component** used by React Router to wrap all error pages (403, 404, 500). Its primary purpose is to apply a consistent, minimal theme and layout to these pages, ensuring they match the user''s selected theme even if the full application fails to render.

## 2. Architectural Role

This is a **Layout** component.

## 3. Key Features & Logic

- **Theme Application:** It directly accesses the `authStore` state via `getState()` to retrieve the user''s theme. It then sets the `data-theme` attribute on the `<html>` element. This is crucial because error pages render outside the main `<App />` component, so they don''t have access to the normal theme context.
- **Styling:** It wraps the error page content (rendered via `<Outlet />` or `children`) in a `<div class="error-page-wrapper">` which provides the necessary styling for the terminal-themed error pages.'),

('frontend/src/components/layout/Header.jsx',
'## 1. File Overview & Purpose

This component renders the **mobile-only header** that appears at the top of the screen on small viewports.

## 2. Architectural Role

This is a **Layout** component, part of the main `App` layout.

## 3. Key Features & Logic

- **Hamburger Menu:** It contains the hamburger menu button (`mobile-nav-toggle`). Clicking this button calls the `onNavToggle` function passed down from the `App` component, which manages the mobile sidebar''s open/closed state.
- **Logo & Profile Link:** It displays the application logo (which links home) and a link to the user''s profile page, showing their selected profile icon.'),

('frontend/src/components/layout/MinimalLayout.jsx',
'## 1. File Overview & Purpose

This is a specialized **Layout Component** for pages that should be displayed without the main application sidebar and header, such as the printable `PackKitPage` or the mobile-focused `QrActionPage`.

## 2. Architectural Role

This is a **Layout** component.

## 3. Key Features & Logic

- **Simplicity:** It simply renders the child route''s content (via `<Outlet />`) inside a basic, centered content wrapper. This provides a clean slate for pages that need a unique, uncluttered layout.'),

('frontend/src/components/layout/Sidebar.jsx',
'## 1. File Overview & Purpose

This component renders the main **sidebar navigation** for the application.

## 2. Architectural Role

This is a key **Layout** component, part of the main `App` layout.

## 3. Key Features & Logic

- **Data Source:** It reads the `user` object and the `navigationItems` array directly from the global `useAuthStore`. The `navigationItems` array is pre-filtered by the backend to only contain links the user is authorized to see.
- **Rendering:** It iterates through the `navigationItems` list and renders a `NavLink` for each. It separates the links into "User" and "Admin" sections.
- **Active Link Styling:** It uses the `isActive` property provided by `NavLink` to apply the `active-nav-link` class to the currently active route.
- **Global Search:** It includes the site-wide search bar. On submit, it navigates the user to the `/suche` page with the search term as a query parameter.
- **User Actions:** It displays the logged-in user''s name, a link to their profile, the logout button, and the `ThemeSwitcher` component.'),

('frontend/src/components/profile/ProfileAchievements.jsx',
'## 1. File Overview & Purpose

This is a presentational component that displays the **user''s earned achievements** on their profile page.

## 2. Architectural Role

This is a **View** sub-component, used within `ProfilePage`.

## 3. Key Features & Logic

- **Props-Based:** It receives the `achievements` array as a prop.
- **Rendering:** It maps over the array and displays each achievement in its own card, showing the icon, name, description, and the date it was earned.'),

('frontend/src/components/profile/ProfileDetails.jsx',
'## 1. File Overview & Purpose

This is a stateful component that manages the display and editing of a user''s **core profile data** on their profile page.

## 2. Architectural Role

This is a **View** and **Form** sub-component, used within `ProfilePage`.

## 3. Key Features & Logic

- **Controlled Form:** It manages the form data for email, class year, etc., in its local `useState`.
- **Change Request Flow:**
    1.  When the user clicks "Save," it doesn''t submit directly. Instead, it compares the current form data with the original `user` prop to detect what has changed.
    2.  It then opens a `ConfirmationModal`, showing the user a summary of their requested changes.
    3.  Only after the user confirms in this modal does it send the `POST` request to `/api/v1/public/profile/request-change`.
- **Update Propagation:** After a successful submission, it calls the `onUpdate` function (passed down from `ProfilePage`) to trigger a full refresh of the profile data.
- **Chat Color:** It also contains a separate, simple form for updating the user''s chat color, which calls the `PUT /api/v1/public/profile/chat-color` endpoint directly.');
COMMIT;