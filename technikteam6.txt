
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\OpSetBlob.js
========================================================================

/**
 * Copyright (C) 2012-2013 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global ops */

/**
 * @constructor
 * @implements ops.Operation
 */
ops.OpSetBlob = function OpSetBlob() {
    "use strict";

    var memberid, timestamp, filename, mimetype, content;

    /**
     * @param {!ops.OpSetBlob.InitSpec} data
     */
    this.init = function (data) {
        memberid = data.memberid;
        timestamp = data.timestamp;
        filename = data.filename;
        mimetype = data.mimetype;
        content = data.content;
    };

    this.isEdit = true;
    this.group = undefined;

    /**
     * @param {!ops.Document} document
     */
    this.execute = function (document) {
        var odtDocument = /**@type{ops.OdtDocument}*/(document);
        odtDocument.getOdfCanvas().odfContainer().setBlob(filename, mimetype, content);
        return true;
    };

    /**
     * @return {!ops.OpSetBlob.Spec}
     */
    this.spec = function () {
        return {
            optype: "SetBlob",
            memberid: memberid,
            timestamp: timestamp,
            filename: filename,
            mimetype: mimetype,
            content: content
        };
    };
};
/**@typedef{{
    optype:string,
    memberid:string,
    timestamp:number,
    filename:string,
    mimetype:string,
    content:string
 }}*/
ops.OpSetBlob.Spec;
/**@typedef{{
    memberid:string,
    timestamp:(number|undefined),
    filename:string,
    mimetype:string,
    content:string
 }}*/
ops.OpSetBlob.InitSpec;

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\OpSetParagraphStyle.js
========================================================================

/**
 * Copyright (C) 2012-2013 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global ops, odf, runtime*/

/**
 * Sets the paragraph style name of the specified paragraph.
 * The supplied position argument is expected to be the first
 * step within the paragraph.
 *
 * @constructor
 * @implements ops.Operation
 */
ops.OpSetParagraphStyle = function OpSetParagraphStyle() {
    "use strict";

    var memberid, timestamp, position, styleName,
        textns = "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
        odfUtils = odf.OdfUtils;

    /**
     * @param {!ops.OpSetParagraphStyle.InitSpec} data
     */
    this.init = function (data) {
        memberid = data.memberid;
        timestamp = data.timestamp;
        position = data.position;
        styleName = data.styleName;
    };

    this.isEdit = true;
    this.group = undefined;

    /**
     * Returns true if the iterator is set to the first step within the paragraph
     *
     * @param {!ops.OdtDocument} odtDocument
     * @param {!Node} paragraphNode
     * @param {!core.PositionIterator} iterator
     * @return {!boolean}
     */
    function isFirstStep(odtDocument, paragraphNode, iterator) {
        var filters = [odtDocument.getPositionFilter()],
            container = iterator.container(),
            offset = iterator.unfilteredDomOffset(),
            stepIterator = odtDocument.createStepIterator(container, offset, filters, paragraphNode);

        return stepIterator.previousStep() === false;
    }

    /**
     * @param {!ops.Document} document
     */
    this.execute = function (document) {
        var odtDocument = /**@type{ops.OdtDocument}*/(document),
            iterator,
            paragraphNode;

        iterator = odtDocument.getIteratorAtPosition(position);
        paragraphNode = odfUtils.getParagraphElement(iterator.container());
        if (paragraphNode) {
            runtime.assert(isFirstStep(odtDocument, paragraphNode, iterator),
                "SetParagraphStyle position should be the first position in the paragraph");
            if (styleName) {
                paragraphNode.setAttributeNS(textns, 'text:style-name', styleName);
            } else {
                paragraphNode.removeAttributeNS(textns, 'style-name');
            }

            odtDocument.getOdfCanvas().refreshSize();
            odtDocument.emit(ops.OdtDocument.signalParagraphChanged, {
                paragraphElement: paragraphNode,
                timeStamp: timestamp,
                memberId: memberid
            });

            odtDocument.getOdfCanvas().rerenderAnnotations();
            return true;
        }
        return false;
    };

    /**
     * @return {!ops.OpSetParagraphStyle.Spec}
     */
    this.spec = function () {
        return {
            optype: "SetParagraphStyle",
            memberid: memberid,
            timestamp: timestamp,
            position: position,
            styleName: styleName
        };
    };
};
/**@typedef{{
    optype:string,
    memberid:string,
    timestamp:number,
    position:number,
    styleName:string
}}*/
ops.OpSetParagraphStyle.Spec;
/**@typedef{{
    memberid:string,
    timestamp:(number|undefined),
    position:number,
    styleName:string
}}*/
ops.OpSetParagraphStyle.InitSpec;

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\OpSplitParagraph.js
========================================================================

/**
 * Copyright (C) 2012-2013 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global ops, odf*/
/*jslint nomen: true, evil: true, bitwise: true */

/**
 * This operation splits the paragraph at the given
 * position. If the `moveCursor` flag is specified
 * and is set as true, the cursor is moved to the
 * beginning of the next paragraph. Otherwise, it
 * remains in it's original position.
 * The paragraph style for the new paragraph is specified by the
 * paragraphStyleName. If blank or empty, the new paragraph will
 * have no specified style.
 *
 * @constructor
 * @implements ops.Operation
 */
ops.OpSplitParagraph = function OpSplitParagraph() {
    "use strict";

    var memberid, timestamp,
        /**@type{number}*/
        sourceParagraphPosition,
        /**@type{number}*/
        position,
        /**@type{boolean}*/
        moveCursor,
        /**@type{!string}*/
        paragraphStyleName,
        odfUtils = odf.OdfUtils,
        /**@const*/
        textns = odf.Namespaces.textns;

    /**
     * @param {!ops.OpSplitParagraph.InitSpec} data
     */
    this.init = function (data) {
        memberid = data.memberid;
        timestamp = data.timestamp;
        position = data.position;
        sourceParagraphPosition = data.sourceParagraphPosition;
        paragraphStyleName = data.paragraphStyleName;
        moveCursor = data.moveCursor === 'true' || data.moveCursor === true;
    };

    this.isEdit = true;
    this.group = undefined;

    /**
     * @param {!ops.Document} document
     */
    this.execute = function (document) {
        var odtDocument = /**@type{!ops.OdtDocument}*/(document),
            domPosition, paragraphNode, targetNode,
            node, splitNode, splitChildNode, keptChildNode,
            cursor = odtDocument.getCursor(memberid);

        odtDocument.upgradeWhitespacesAtPosition(position);
        domPosition = odtDocument.getTextNodeAtStep(position);
        if (!domPosition) {
            return false;
        }

        paragraphNode = odfUtils.getParagraphElement(domPosition.textNode);
        if (!paragraphNode) {
            return false;
        }

        if (odfUtils.isListItem(paragraphNode.parentNode)) {
            targetNode = paragraphNode.parentNode;
        } else {
            targetNode = paragraphNode;
        }

        // There can be a chain of multiple nodes between the text node
        // where the split is done and the containing paragraph nodes,
        // e.g. text:span nodes
        // So all nodes in this chain need to be split up, i.e. they need
        // to be cloned, and then the clone and any next siblings have to
        // be moved to the new paragraph node, which is also cloned from
        // the current one.

        // start with text node the cursor is in, needs special treatment
        // if text node is split at the beginning, do not split but simply
        // move the whole text node
        if (domPosition.offset === 0) {
            keptChildNode = domPosition.textNode.previousSibling;
            splitChildNode = null;
        } else {
            keptChildNode = domPosition.textNode;
            // if text node is to be split at the end, don't split at all
            if (domPosition.offset >= domPosition.textNode.length) {
                splitChildNode = null;
            } else {
                // splitText always returns {!Text} here
                splitChildNode = /**@type{!Text}*/(
                    domPosition.textNode.splitText(domPosition.offset)
                );
            }
        }

        // then handle all nodes until (incl.) the paragraph node:
        // create a clone and add as childs the split node of the node below
        // and any next siblings of it
        node = domPosition.textNode;
        while (node !== targetNode) {
            node = node.parentNode;

            // split off the node copy
            // TODO: handle unique attributes, e.g. xml:id
            splitNode = node.cloneNode(false);
            // add the split child node
            if (splitChildNode) {
                splitNode.appendChild(splitChildNode);
            }
            if (keptChildNode) {
                // Move all child nodes that should appear after the split to the new node
                while (keptChildNode && keptChildNode.nextSibling) {
                    splitNode.appendChild(keptChildNode.nextSibling);
                }
            } else {
                // All children of the original node should be moved after the split
                while (node.firstChild) {
                    splitNode.appendChild(node.firstChild);
                }
            }
            node.parentNode.insertBefore(splitNode, node.nextSibling);

            // prepare next level
            keptChildNode = node;
            splitChildNode = splitNode;
        }

        if (odfUtils.isListItem(splitChildNode)) {
            splitChildNode = splitChildNode.childNodes.item(0);
        }

        if (paragraphStyleName) {
            /**@type{!Element}*/(splitChildNode).setAttributeNS(textns, "text:style-name", paragraphStyleName);
        } else {
            /**@type{!Element}*/(splitChildNode).removeAttributeNS(textns, "style-name");
        }

        // clean up any empty text node which was created by odtDocument.getTextNodeAtStep
        if (domPosition.textNode.length === 0) {
            domPosition.textNode.parentNode.removeChild(domPosition.textNode);
        }
        odtDocument.emit(ops.OdtDocument.signalStepsInserted, {position: position});

        if (cursor && moveCursor) {
            odtDocument.moveCursor(memberid, position + 1, 0);
            odtDocument.emit(ops.Document.signalCursorMoved, cursor);
        }

        odtDocument.fixCursorPositions();
        odtDocument.getOdfCanvas().refreshSize();
        // mark both paragraphs as edited
        odtDocument.emit(ops.OdtDocument.signalParagraphChanged, {
            paragraphElement: paragraphNode,
            memberId: memberid,
            timeStamp: timestamp
        });
        odtDocument.emit(ops.OdtDocument.signalParagraphChanged, {
            paragraphElement: splitChildNode,
            memberId: memberid,
            timeStamp: timestamp
        });

        odtDocument.getOdfCanvas().rerenderAnnotations();
        return true;
    };

    /**
     * @return {!ops.OpSplitParagraph.Spec}
     */
    this.spec = function () {
        return {
            optype: "SplitParagraph",
            memberid: memberid,
            timestamp: timestamp,
            position: position,
            sourceParagraphPosition: sourceParagraphPosition,
            paragraphStyleName: paragraphStyleName,
            moveCursor: moveCursor
        };
    };
};
/**@typedef{{
    optype:string,
    memberid:string,
    timestamp:number,
    position:number,
    sourceParagraphPosition:number,
    paragraphStyleName:string,
    moveCursor:boolean
}}*/
ops.OpSplitParagraph.Spec;
/**@typedef{{
    memberid:string,
    timestamp:(number|undefined),
    position:number,
    sourceParagraphPosition:number,
    paragraphStyleName:string,
    moveCursor:(string|boolean|undefined)
}}*/
ops.OpSplitParagraph.InitSpec;

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\OpUpdateMember.js
========================================================================

/**
 * Copyright (C) 2013 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global ops, xmldom, odf, runtime*/

/**
 * OpUpdateMember allows you to set and remove
 * certain properties.
 * 'fullName', 'color', and 'imageUrl' are not
 * removable, they will be filtered out of 
 * removedProperties if found.
 * @constructor
 * @implements ops.Operation
 */
ops.OpUpdateMember = function OpUpdateMember() {
    "use strict";

    var /**@type{string}*/
        memberid,
        timestamp,
        /**@type{ops.MemberProperties}*/
        setProperties,
        removedProperties;

    /**
     * @param {!ops.OpUpdateMember.InitSpec} data
     */
    this.init = function (data) {
        memberid = data.memberid;
        timestamp = parseInt(data.timestamp, 10);
        setProperties = data.setProperties;
        removedProperties = data.removedProperties;
    };

    this.isEdit = false;
    this.group = undefined;

    /**
     * @param {!ops.OdtDocument} doc
     */
    function updateCreators(doc) {
        var xpath = xmldom.XPath,
            xp = "//dc:creator[@editinfo:memberid='" + memberid + "']",
            creators = xpath.getODFElementsWithXPath(doc.getRootNode(), xp, function (prefix) {
                if (prefix === "editinfo") {
                    return "urn:webodf:names:editinfo";
                }
                return odf.Namespaces.lookupNamespaceURI(prefix);
            }),
            i;

        for (i = 0; i < creators.length; i += 1) {
            creators[i].textContent = setProperties.fullName;
        }
    }

    /**
     * @param {!ops.Document} document
     */
    this.execute = function (document) {
        var odtDocument = /**@type{ops.OdtDocument}*/(document),
            member = odtDocument.getMember(memberid);
        if (!member) {
            return false;
        }

        if (removedProperties) {
            member.removeProperties(removedProperties);
        }
        if (setProperties) {
            member.setProperties(setProperties);
            if (setProperties.fullName) {
                updateCreators(odtDocument);
            }
        }

        odtDocument.emit(ops.Document.signalMemberUpdated, member);
        return true;
    };

    /**
     * @return {!ops.OpUpdateMember.Spec}
     */
    this.spec = function () {
        return {
            optype: "UpdateMember",
            memberid: memberid,
            timestamp: timestamp,
            setProperties: setProperties,
            removedProperties: removedProperties
        };
    };
};
/**@typedef{{
    optype:string,
    memberid:string,
    timestamp:number,
    setProperties:?ops.MemberProperties,
    removedProperties:Object
 }}*/
ops.OpUpdateMember.Spec;
/**@typedef{{
    memberid:string,
    timestamp:(number|undefined),
    setProperties:?ops.MemberProperties,
    removedProperties:Object
 }}*/
ops.OpUpdateMember.InitSpec;

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\OpUpdateMetadata.js
========================================================================

/**
 * Copyright (C) 2013 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global odf, runtime, ops*/

/**
 * This allows you to update metadata.
 * setProperties is a flat string -> string mapping Object
 * that maps a metadata field name (including namespace prefix)
 * to it's value.
 * removedProperties is a comma-separated (no spaces)
 * string of such field names to be removed.
 * @constructor
 * @implements ops.Operation
 */
ops.OpUpdateMetadata = function OpUpdateMetadata() {
    "use strict";

    var memberid, timestamp,
        setProperties,
        removedProperties;

    /**
     * @param {!ops.OpUpdateMetadata.InitSpec} data
     */
    this.init = function (data) {
        memberid = data.memberid;
        timestamp = parseInt(data.timestamp, 10);
        setProperties = data.setProperties;
        removedProperties = data.removedProperties;
    };

    this.isEdit = true;
    this.group = undefined;

    /**
     * @param {!ops.Document} document
     */
    this.execute = function (document) {
        var odtDocument = /**@type{ops.OdtDocument}*/(document),
            odfContainer = odtDocument.getOdfCanvas().odfContainer(),
            removedPropertiesArray = null;

        if (removedProperties) {
            removedPropertiesArray = removedProperties.attributes.split(',');
        }

        odfContainer.setMetadata(setProperties, removedPropertiesArray);

        odtDocument.emit(ops.OdtDocument.signalMetadataUpdated, {
            setProperties: setProperties !== null ? setProperties : {},
            removedProperties: removedPropertiesArray !== null ? removedPropertiesArray : []
        });

        return true;
    };

    /**
     * @return {!ops.OpUpdateMetadata.Spec}
     */
    this.spec = function () {
        return {
            optype: "UpdateMetadata",
            memberid: memberid,
            timestamp: timestamp,
            setProperties: setProperties,
            removedProperties: removedProperties
        };
    };
};
/**@typedef{{
    optype:string,
    memberid:string,
    timestamp:number,
    setProperties:Object,
    removedProperties:?{attributes:string}
 }}*/
ops.OpUpdateMetadata.Spec;
/**@typedef{{
    memberid:string,
    timestamp:(number|undefined),
    setProperties:Object,
    removedProperties:?{attributes:string}
 }}*/
ops.OpUpdateMetadata.InitSpec;

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\OpUpdateParagraphStyle.js
========================================================================

/**
 * Copyright (C) 2012-2013 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global runtime, odf, ops*/

/**
 * @constructor
 * @implements ops.Operation
 */
ops.OpUpdateParagraphStyle = function OpUpdateParagraphStyle() {
    "use strict";

    var memberid, timestamp, styleName,
        /**@type{!odf.Formatting.StyleData}*/
        setProperties,
        /**@type{{attributes:string}}*/
        removedProperties,
        /**@const*/
        paragraphPropertiesName = 'style:paragraph-properties',
        /**@const*/
        textPropertiesName = 'style:text-properties',
        /**@const*/
        stylens = odf.Namespaces.stylens;

    /**
     * Removes attributes of a node by the names listed in removedAttributeNames.
     * @param {!Element} node
     * @param {!string} removedAttributeNames
     */
    function removedAttributesFromStyleNode(node, removedAttributeNames) {
        var i, attributeNameParts,
            /**@type{!Array.<string>}*/
            attributeNameList = removedAttributeNames ? removedAttributeNames.split(',') : [];

        for (i = 0; i < attributeNameList.length; i += 1) {
            attributeNameParts = attributeNameList[i].split(":");
            // TODO: ensure all used prefixes have a namespaces listed
            node.removeAttributeNS(/**@type{string}*/(odf.Namespaces.lookupNamespaceURI(attributeNameParts[0])), attributeNameParts[1]);
        }
    }

    /**
     * @param {!ops.OpUpdateParagraphStyle.InitSpec} data
     */
    this.init = function (data) {
        memberid = data.memberid;
        timestamp = data.timestamp;
        styleName = data.styleName;
        setProperties = data.setProperties;
        removedProperties = data.removedProperties;
    };

    this.isEdit = true;
    this.group = undefined;

    /**
     * @param {!ops.Document} document
     */
    this.execute = function (document) {
        var odtDocument = /**@type{ops.OdtDocument}*/(document),
            formatting = odtDocument.getFormatting(),
            styleNode, object,
            paragraphPropertiesNode, textPropertiesNode;

        if (styleName !== "") {
            // Common Style
            styleNode = formatting.getStyleElement(styleName, 'paragraph');
        } else {
            // Default Style
            styleNode = formatting.getDefaultStyleElement('paragraph');
        }

        if (styleNode) {
            paragraphPropertiesNode = /**@type{Element}*/(styleNode.getElementsByTagNameNS(stylens, 'paragraph-properties').item(0));
            textPropertiesNode = /**@type{Element}*/(styleNode.getElementsByTagNameNS(stylens, 'text-properties').item(0));

            if (setProperties) {
                formatting.updateStyle(styleNode, setProperties);
            }

            // remove attributes in the style nodes
            if (removedProperties) {
                object = /**@type{{attributes:string}}*/(removedProperties[paragraphPropertiesName]);
                if (paragraphPropertiesNode && object) {
                    removedAttributesFromStyleNode(paragraphPropertiesNode, object.attributes);
                    if (paragraphPropertiesNode.attributes.length === 0) {
                        styleNode.removeChild(paragraphPropertiesNode);
                    }
                }

                object = /**@type{{attributes:string}}*/(removedProperties[textPropertiesName]);
                if (textPropertiesNode && object) {
                    // TODO: check if fontname can be removed from font-face-declaration
                    removedAttributesFromStyleNode(textPropertiesNode, object.attributes);
                    if (textPropertiesNode.attributes.length === 0) {
                        styleNode.removeChild(textPropertiesNode);
                    }
                }

                removedAttributesFromStyleNode(styleNode, removedProperties.attributes);
            }

            odtDocument.getOdfCanvas().refreshCSS();
            odtDocument.emit(ops.OdtDocument.signalParagraphStyleModified, styleName);
            odtDocument.getOdfCanvas().rerenderAnnotations();
            return true;
        }
        return false;
    };

    /**
     * @return {!ops.OpUpdateParagraphStyle.Spec}
     */
    this.spec = function () {
        return {
            optype: "UpdateParagraphStyle",
            memberid: memberid,
            timestamp: timestamp,
            styleName: styleName,
            setProperties: setProperties,
            removedProperties: removedProperties
        };
    };
};
/**@typedef{{
    optype:string,
    memberid:string,
    timestamp:number,
    styleName:string,
    setProperties:!odf.Formatting.StyleData,
    removedProperties:{attributes:string}
}}*/
ops.OpUpdateParagraphStyle.Spec;
/**@typedef{{
    memberid:string,
    timestamp:(number|undefined),
    styleName:string,
    setProperties:!odf.Formatting.StyleData,
    removedProperties:{attributes:string}
}}*/
ops.OpUpdateParagraphStyle.InitSpec;

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\Session.js
========================================================================

/**
 * Copyright (C) 2012-2013 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global runtime, ops, odf*/

/**
 * An editing session and what belongs to it.
 * @constructor
 * @implements {core.Destroyable}
 * @param {!odf.OdfCanvas} odfCanvas
 */
ops.Session = function Session(odfCanvas) {
    "use strict";
    var self = this,
        /**@type{!ops.OperationFactory}*/
        operationFactory = new ops.OperationFactory(),
        /**@type{!ops.OdtDocument}*/
        odtDocument = new ops.OdtDocument(odfCanvas),
        /**@type{?ops.OperationRouter}*/
        operationRouter = null;

    /**
     * Forward the router's batch start signal on to the document
     * @param {*} args
     * @return {undefined}
     */
    function forwardBatchStart(args) {
        odtDocument.emit(ops.OdtDocument.signalProcessingBatchStart, args);
    }

    /**
     * Forward the router's batch end signal on to the document
     * @param {*} args
     * @return {undefined}
     */
    function forwardBatchEnd(args) {
        odtDocument.emit(ops.OdtDocument.signalProcessingBatchEnd, args);
    }

    /**
     * @param {!ops.OperationFactory} opFactory
     */
    this.setOperationFactory = function (opFactory) {
        operationFactory = opFactory;
        if (operationRouter) {
            operationRouter.setOperationFactory(operationFactory);
        }
    };

    /**
     * @param {!ops.OperationRouter} opRouter
     * @return {undefined}
     */
    this.setOperationRouter = function (opRouter) {
        if (operationRouter) {
            operationRouter.unsubscribe(ops.OperationRouter.signalProcessingBatchStart, forwardBatchStart);
            operationRouter.unsubscribe(ops.OperationRouter.signalProcessingBatchEnd, forwardBatchEnd);
        }
        operationRouter = opRouter;
        operationRouter.subscribe(ops.OperationRouter.signalProcessingBatchStart, forwardBatchStart);
        operationRouter.subscribe(ops.OperationRouter.signalProcessingBatchEnd, forwardBatchEnd);
        opRouter.setPlaybackFunction(function (op) {
            odtDocument.emit(ops.OdtDocument.signalOperationStart, op);
            if (op.execute(odtDocument)) {
                odtDocument.emit(ops.OdtDocument.signalOperationEnd, op);
                return true;
            }
            return false;
        });
        opRouter.setOperationFactory(operationFactory);
    };

    /**
     * @return {!ops.OperationFactory}
     */
    this.getOperationFactory = function () {
        return operationFactory;
    };

    /**
     * @return {!ops.OdtDocument}
     */
    this.getOdtDocument = function () {
        return odtDocument;
    };

    /**
     * Controller sends operations to this method.
     *
     * @param {!Array.<!ops.Operation>} ops
     * @return {undefined}
     */
    this.enqueue = function (ops) {
        operationRouter.push(ops);
    };

    /**
     * @param {!function(!Object=)} callback, passing an error object in case of error
     * @return {undefined}
     */
    this.close = function (callback) {
        operationRouter.close(function (err) {
            if (err) {
                callback(err);
            } else {
                odtDocument.close(callback);
            }
        });
    };

    /**
     * @param {!function(!Error=)} callback, passing an error object in case of error
     * @return {undefined}
     */
    this.destroy = function (callback) {
        /*
        operationRouter.destroy(function(err) {
            if (err) {
                callback(err);
            } else {
                memberModel.destroy(function(err) {
                    if (err) {
                        callback(err);
                    } else {
                        */
                        odtDocument.destroy(callback);
                        /*
                    }
                });
            }
        });
        */
    };

    /**
     * @return {undefined}
     */
    function init() {
        self.setOperationRouter(new ops.TrivialOperationRouter());
    }
    init();
};

// vim:expandtab

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\StepsCache.js
========================================================================

/**
 * Copyright (C) 2010-2014 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global runtime, core, ops, Node*/

(function() {
    "use strict";
    // Multiple cached translators may exist in the same runtime. Therefore, each node id should
    // be globally unique, so they can be safely re-used by multiple translators
    var /**@type{number}*/
        nextNodeId = 0;

    /**
     * Implementation of a step to DOM point lookup cache.
     *
     * A cache point ("bookmark") is created each time updateBookmark is called, saving the number of steps from the root
     * node to the bookmarked node. This cached point is linked to the node via a unique identifier.
     *
     * The cache works by tracking "damage" to it's bookmarks (via steps inserted & removal). As re-iteration over the
     * damaged sections occur, the bookmarks are updated, and the damage repaired.
     *
     * A visual example of the cache during various states is as follows:
     * legend: -=good bookmark, x=damaged bookmark, !=indeterminate bookmark, ?=requested step,
     *          @=current iterator position
     * 
     * [--------------] <-- cache before steps change
     * [----x!!!!!!!!!] <-- damage occurs (e.g., a step is deleted) which means all bookmarks after the damage point are
     *                      now indeterminate as their step location is now outdated
     * [----xxxxxxxxxx] <-- trailing bookmarks now considered "damaged", and will not be used until they can be repaired
     * [---@xxxx?xxxxx] <-- when a bookmark is requested for step in the damaged region, the last undamaged bookmark will
     *                      be returned instead. The consumer of this interface already knows additional iteration may
     *                      be necessary to reach the desired step count, so this case is no different than if the cache
     *                      was unprimed.
     * [------@xxxxxxx] <-- as re-iteration over the doc occurs, bookmark positions are updated and the damage start
     *                      point is moved along to the next damaged node
     *
     * This cache depends on OdtStepsTranslator.handleStepsInserted & handleStepsRemoved being called at the step of change,
     * along with information about the region that has changed. The cache is able to cope with nodes being cloned, as
     * long as the position of change is correctly reported.
     *
     * However, this implementation will NOT cope with nodes being re-ordered, even if a change event is reported.
     * This is because the cache relies on the nodes order remaining fixed as long as they are in the DOM.
     * If node reordering is desired, it can be achieved through cloning the node into the new position and removing
     * the original node (the clone will be detected and rectified).
     *
     * @constructor
     * @param {!Element} rootElement
     * @param {!number} bucketSize  Minimum number of steps between cache points
     * @param {!function(!number, !core.PositionIterator):undefined} restoreBookmarkPosition Fine-tune the iterator position after
     *      it is set to a specific bookmark location.
     */
    ops.StepsCache = function StepsCache(rootElement, bucketSize, restoreBookmarkPosition) {
        var coordinatens = "urn:webodf:names:steps",
            // Note, our coding standards usually require a key of !string for a dictionary.
            // As I'm often assigning numbers as well (which JS quite happily converts for me)
            // using both types saves me a lot of extra typing
            /**@type{!Object.<(!string|!number), !ops.StepsCache.Bookmark>}*/
            stepToDomPoint = {},
            /**@type{!Object.<!string, !ops.StepsCache.Bookmark>}*/
            nodeToBookmark = {},
            domUtils = core.DomUtils,
            /**@type{!RootBookmark}*/
            basePoint,
            /**@type{!number|undefined}*/
            lastUndamagedCacheStep,
            /**
             * @const
             * @type {!number}
             */
            DOCUMENT_POSITION_FOLLOWING = Node.DOCUMENT_POSITION_FOLLOWING,
            /**
             * @const
             * @type {!number}
             */
            DOCUMENT_POSITION_PRECEDING = Node.DOCUMENT_POSITION_PRECEDING;

        /**
         * Bookmark tied to a specific node
         * @constructor
         * @param {!string} nodeId
         * @param {!Element} bookmarkNode
         *
         * @implements {ops.StepsCache.Bookmark}
         */
        function NodeBookmark(nodeId, bookmarkNode) {
            var self = this;
            this.nodeId = nodeId;
            this.steps = -1;
            this.node = bookmarkNode;
            this.nextBookmark = null;
            this.previousBookmark = null;

            /**
             * @param {!core.PositionIterator} iterator
             * @return {undefined}
             */
            this.setIteratorPosition = function(iterator) {
                iterator.setPositionBeforeElement(bookmarkNode);
                restoreBookmarkPosition(self.steps, iterator);
            };
        }

        /**
         * Bookmark indicating the first walkable position in the document
         * @constructor
         * @param {!string} nodeId
         * @param {!number} steps
         * @param {!Node} rootNode
         *
         * @implements {ops.StepsCache.Bookmark}
         */
        function RootBookmark(nodeId, steps, rootNode) {
            var self = this;
            this.nodeId = nodeId;
            this.steps = steps;
            this.node = rootNode;
            this.nextBookmark = null;
            this.previousBookmark = null;

            /**
             * @param {!core.PositionIterator} iterator
             * @return {undefined}
             */
            this.setIteratorPosition = function (iterator) {
                iterator.setUnfilteredPosition(rootNode, 0);
                restoreBookmarkPosition(self.steps, iterator);
            };
        }

        /**
         * Return a summary string of the supplied bookmark node id(s)
         * @param {!ops.StepsCache.Bookmark} bookmark1
         * @param {?ops.StepsCache.Bookmark=} bookmark2
         * @return {!string}
         */
        function inspectBookmarks(bookmark1, bookmark2) {
            var parts = "[" + bookmark1.nodeId;
            if (bookmark2) {
                parts += " => " + bookmark2.nodeId;
            }
            return parts + "]";
        }

        /**
         * Returns true if the specified bookmark is undamaged
         * @param {!ops.StepsCache.Bookmark} bookmark
         * @return {!boolean}
         */
        function isUndamagedBookmark(bookmark) {
            return lastUndamagedCacheStep === undefined
                || bookmark === basePoint
                || bookmark.steps <= lastUndamagedCacheStep;
        }

        /**
         * Run a series of verification checks against the complete cache to ensure it is operating
         * correctly. Note, this is VERY expensive, and should only be done when attempting to diagnose
         * caching problems
         * @return {undefined}
         */
        function verifyCache() {
            if (ops.StepsCache.ENABLE_CACHE_VERIFICATION !== true) {
                return;
            }

            var bookmark = basePoint,
                previousBookmark,
                nextBookmark,
                documentPosition,
                loopCheck = new core.LoopWatchDog(0, 100000),
                /**@type{!Object.<!string, !string>}*/
                stepToDomPointNodeIds = {};

            while (bookmark) {
                loopCheck.check();
                previousBookmark = bookmark.previousBookmark;
                if (previousBookmark) {
                    // Make sure previous => current chain is intact
                    runtime.assert(previousBookmark.nextBookmark === bookmark,
                        "Broken bookmark link to previous @" + inspectBookmarks(previousBookmark, bookmark));
                } else {
                    // If there is no previous, ensure this is the basePoint bookmark
                    runtime.assert(bookmark === basePoint, "Broken bookmark link @" + inspectBookmarks(bookmark));
                    runtime.assert(isUndamagedBookmark(basePoint), "Base point is damaged @" + inspectBookmarks(bookmark));
                }
                nextBookmark = bookmark.nextBookmark;
                if (nextBookmark) {
                    // Make sure current => next chain is intact
                    runtime.assert(nextBookmark.previousBookmark === bookmark,
                        "Broken bookmark link to next @" + inspectBookmarks(bookmark, nextBookmark));
                }

                if (isUndamagedBookmark(bookmark)) {
                    runtime.assert(domUtils.containsNode(rootElement, bookmark.node),
                        "Disconnected node is being reported as undamaged @" + inspectBookmarks(bookmark));
                    if (previousBookmark) {
                        documentPosition = bookmark.node.compareDocumentPosition(previousBookmark.node);
                        /*jslint bitwise:true*/
                        runtime.assert(documentPosition === 0 || (documentPosition & DOCUMENT_POSITION_PRECEDING) !== 0,
                            "Bookmark order with previous does not reflect DOM order @" + inspectBookmarks(previousBookmark, bookmark));
                        /*jslint bitwise:false*/
                    }
                    if (nextBookmark) {
                        if (domUtils.containsNode(rootElement, nextBookmark.node)) {
                            documentPosition = bookmark.node.compareDocumentPosition(nextBookmark.node);
                            /*jslint bitwise:true*/
                            runtime.assert(documentPosition === 0 || (documentPosition & DOCUMENT_POSITION_FOLLOWING) !== 0,
                                "Bookmark order with next does not reflect DOM order @" + inspectBookmarks(bookmark, nextBookmark));
                            /*jslint bitwise:false*/
                        }
                    }
                }

                bookmark = bookmark.nextBookmark;
            }

            Object.keys(stepToDomPoint).forEach(function(step) {
                var domPointBookmark = stepToDomPoint[step];
                if (lastUndamagedCacheStep === undefined || step <= lastUndamagedCacheStep) {
                    runtime.assert(domPointBookmark.steps <= step, "Bookmark step of " + domPointBookmark.steps +
                        " exceeds cached step lookup for " + step + " @" + inspectBookmarks(domPointBookmark));
                }

                runtime.assert(stepToDomPointNodeIds.hasOwnProperty(domPointBookmark.nodeId) === false,
                        "Bookmark " + inspectBookmarks(domPointBookmark) + " appears twice in cached step lookup at steps " +
                        stepToDomPointNodeIds[domPointBookmark.nodeId] + " and " + step);
                stepToDomPointNodeIds[domPointBookmark.nodeId] = step;
            });
        }

        /**
         * Returns the closest quantized step at or before the requested step
         * @param {!number} steps
         * @return {!number}
         */
        function getBucket(steps) {
            return Math.floor(steps / bucketSize) * bucketSize;
        }

        /**
         * Returns the closest quantized step at or just after the requested step
         * @param {!number} steps
         * @return {!number}
         */
        function getDestinationBucket(steps) {
            return Math.ceil(steps / bucketSize) * bucketSize;
        }

        /**
         * @param {!Element} node
         * @return {undefined}
         */
        function clearNodeId(node) {
            node.removeAttributeNS(coordinatens, "nodeId");
        }

        /**
         * @param {!Node} node
         * @return {!string}
         */
        function getNodeId(node) {
            var id = "";
            if (node.nodeType === Node.ELEMENT_NODE) {
                id = /**@type{!Element}*/(node).getAttributeNS(coordinatens, "nodeId") || "";
            }
            return id;
        }

        /**
         * @param {!Element} node
         * @return {!string}
         */
        function setNodeId(node) {
            var nodeId = nextNodeId.toString();
            node.setAttributeNS(coordinatens, "nodeId", nodeId);
            nextNodeId += 1;
            return nodeId;
        }

        /**
         * The element might have been cloned from another part of the document and have a stale or duplicate
         * nodeId
         * @param {!Node} node
         * @param {!ops.StepsCache.Bookmark} bookmark
         * @return {!boolean} True if the bookmark is actually for the supplied node
         */
        function isValidBookmarkForNode(node, bookmark) {
            return bookmark.node === node;
        }

        /**
         * Fetches (or creates) a bookmark for the specified node.
         *
         * @param {!Element} node
         * @return {!ops.StepsCache.Bookmark}
         */
        function getNodeBookmark(node) {
            var nodeId = getNodeId(node) || setNodeId(node),
                existingBookmark;
            existingBookmark = nodeToBookmark[nodeId];
            if (!existingBookmark) {
                existingBookmark = nodeToBookmark[nodeId] = new NodeBookmark(nodeId, node);
            } else if (!isValidBookmarkForNode(node, existingBookmark)) {
                runtime.log("Cloned node detected. Creating new bookmark");
                nodeId = setNodeId(node);
                existingBookmark = nodeToBookmark[nodeId] = new NodeBookmark(nodeId, node);
            }
            return existingBookmark;
        }

        /**
         * Returns the closest undamaged bookmark before or at the specified step
         * @param {!number} steps
         * @return {!ops.StepsCache.Bookmark}
         */
        function getClosestBookmark(steps) {
            var cacheBucket,
                cachePoint,
                loopGuard = new core.LoopWatchDog(0, 10000);

            // This function promises to return an undamaged bookmark at all times.
            // Easiest way to ensure this is don't allow requests to damaged sections
            // of the cache.
            if (lastUndamagedCacheStep !== undefined && steps > lastUndamagedCacheStep) {
                steps = lastUndamagedCacheStep;
            }
            cacheBucket = getBucket(steps);

            while (!cachePoint && cacheBucket >= 0) {
                cachePoint = stepToDomPoint[cacheBucket];
                cacheBucket -= bucketSize;
            }

            cachePoint = cachePoint || basePoint;
            while (cachePoint.nextBookmark && cachePoint.nextBookmark.steps <= steps) {
                loopGuard.check();
                cachePoint = cachePoint.nextBookmark;
            }
            runtime.assert(steps === -1 || cachePoint.steps <= steps,
                    "Bookmark @" + inspectBookmarks(cachePoint) + " at step " + cachePoint.steps +
                    " exceeds requested step of " + steps);
            return cachePoint;
        }

        /**
         * Returns the closest undamaged bookmark before (or equal to) the supplied bookmark
         * @param {!ops.StepsCache.Bookmark} bookmark
         * @return {!ops.StepsCache.Bookmark}
         */
        function getUndamagedBookmark(bookmark) {
            // Based on logic in the repairCacheUpToStep, a damaged bookmark is guaranteed to have it's
            // steps moved beyond the damage point. This makes it simple to check if the bookmark is
            // in the damaged region, and return the last undamaged one if it is.
            if (lastUndamagedCacheStep !== undefined && bookmark.steps > lastUndamagedCacheStep) {
                bookmark = getClosestBookmark(lastUndamagedCacheStep);
            }
            return bookmark;
        }

        /**
         * Remove a bookmark from the cache chain
         * @param {!ops.StepsCache.Bookmark} currentBookmark
         * @return {undefined}
         */
        function removeBookmark(currentBookmark) {
            if (currentBookmark.previousBookmark) {
                currentBookmark.previousBookmark.nextBookmark = currentBookmark.nextBookmark;
            }

            if (currentBookmark.nextBookmark) {
                currentBookmark.nextBookmark.previousBookmark = currentBookmark.previousBookmark;
            }
        }

        /**
         * Returns true if the newBookmark is already directly on or after the previous bookmark
         * @param {!ops.StepsCache.Bookmark} previousBookmark
         * @param {!ops.StepsCache.Bookmark} newBookmark
         * @return {!boolean}
         */
        function isAlreadyInOrder(previousBookmark, newBookmark) {
            return previousBookmark === newBookmark || previousBookmark.nextBookmark === newBookmark;
        }

        /**
         * Insert a bookmark into the cache chain just after the previous bookmark
         * @param {!ops.StepsCache.Bookmark} previousBookmark
         * @param {!ops.StepsCache.Bookmark} newBookmark
         * @return {undefined}
         */
        function insertBookmark(previousBookmark, newBookmark) {
            var nextBookmark;
            // Check if the newBookmark is already in the chain at the correct location. Don't bother updating
            // if it is in place.
            if (!isAlreadyInOrder(previousBookmark, newBookmark)) {
                if (previousBookmark.steps === newBookmark.steps) {
                    // It is valid for multiple bookmarks to share the same step.
                    // In this case, step order becomes ambiguous so DOM order is now required to determine the
                    // correct insertion point
                    /*jslint bitwise:true*/
                    while ((newBookmark.node.compareDocumentPosition(previousBookmark.node) & DOCUMENT_POSITION_FOLLOWING) !== 0
                            && previousBookmark !== basePoint) {
                        // if the previous bookmark FOLLOWS the new bookmark, navigate back one
                        previousBookmark = /**@type{!ops.StepsCache.Bookmark}*/(previousBookmark.previousBookmark);
                    }
                    /*jslint bitwise:false*/
                }

                if (!isAlreadyInOrder(previousBookmark, newBookmark)) {
                    // Removing the existing item first helps prevent infinite-loops from being created in the event of
                    // some type of undiscovered cache bug.
                    removeBookmark(newBookmark);
                    // Assign this value before we override it just below
                    nextBookmark = previousBookmark.nextBookmark;

                    newBookmark.nextBookmark = previousBookmark.nextBookmark;
                    newBookmark.previousBookmark = previousBookmark;
                    previousBookmark.nextBookmark = newBookmark;
                    if (nextBookmark) {
                        nextBookmark.previousBookmark = newBookmark;
                    }
                }
            }
        }

        /**
         * Signal that all bookmarks up to the specified step have been iterated over and are up-to-date. This allows
         * removed nodes and invalid bookmarks to be removed from the cache. This function will return the closest
         * undamaged bookmark just at or prior to the supplied step.
         * @param {!number} currentIteratorStep
         * @return {!ops.StepsCache.Bookmark}
         */
        function repairCacheUpToStep(currentIteratorStep) {
            var damagedBookmark,
                undamagedBookmark,
                nextBookmark,
                stepsBucket;

            if (lastUndamagedCacheStep !== undefined && lastUndamagedCacheStep < currentIteratorStep) {
                // The step indicates where in the document re-iteration has covered. This function
                // is called every time a bookmark is updated, and the lastUndamagedCacheStep is updated
                // after every call. This means that all bookmarks between the undamagedBookmark and the current step
                // have not been updated, so they are either:
                // a) no longer in the document and should be removed
                // or b) are no longer before this step and should be pushed back into the damaged region

                undamagedBookmark = getClosestBookmark(lastUndamagedCacheStep); // Get the last undamaged bookmark
                damagedBookmark = undamagedBookmark.nextBookmark; // Don't need to check the undamaged bookmark however

                while (damagedBookmark && damagedBookmark.steps <= currentIteratorStep) {
                    nextBookmark = damagedBookmark.nextBookmark;
                    stepsBucket = getDestinationBucket(damagedBookmark.steps);
                    // A damaged bookmark is not valid in the stepToDomPoint. In order to minimise update load though
                    // we don't remove them all at once. Each bookmark is checked vs. the damage point first before use,
                    // so in order to guarantee we never return a damaged bookmark, we only need to remove damaged
                    // bookmarks before the damage point.

                    if (stepToDomPoint[stepsBucket] === damagedBookmark) {
                        // stepToDomPoint is a sparsely populated cache. For damaged bookmarks, the
                        // safest thing to do is to remove them entirely from view
                        delete stepToDomPoint[stepsBucket];
                    }
                    if (!domUtils.containsNode(rootElement, damagedBookmark.node)) {
                        // Node no longer exists in the document. Discard the bookmark as well
                        removeBookmark(damagedBookmark);
                        delete nodeToBookmark[damagedBookmark.nodeId];
                    } else {
                        // Move the damaged bookmark clearly past the undamaged step
                        // If this appears later in the sequence, the step number will be corrected then
                        damagedBookmark.steps = currentIteratorStep + 1;
                    }
                    damagedBookmark = nextBookmark;
                }

                // Have now recovered the cache up to the supplied step. All bookmarks up to this
                // step are guaranteed to be up-to-date.
                lastUndamagedCacheStep = currentIteratorStep;
            } else {
                undamagedBookmark = getClosestBookmark(currentIteratorStep);
            }
            return undamagedBookmark;
        }

        /**
         * Cache the current step, using the supplied node as the anchor
         * @param {!number} steps Current steps offset from position 0
         * @param {!Node} node
         * @return {undefined}
         */
        this.updateBookmark = function(steps, node) {
            var previousCacheBucket,
                newCacheBucket = getDestinationBucket(steps),
                existingCachePoint,
                bookmark,
                closestPriorBookmark;

            closestPriorBookmark = repairCacheUpToStep(steps);
            // Note, the node bookmark must be updated after the repair as if steps < lastUndamagedCacheStep
            // the repair will assume any nodes after lastUndamagedCacheStep are damaged.
            bookmark = getNodeBookmark(/**@type{!HTMLElement}*/(node));
            if (bookmark.steps !== steps) {
                previousCacheBucket = getDestinationBucket(bookmark.steps);
                if (previousCacheBucket !== newCacheBucket && stepToDomPoint[previousCacheBucket] === bookmark) {
                    delete stepToDomPoint[previousCacheBucket];
                }
                bookmark.steps = steps;
            }
            insertBookmark(closestPriorBookmark, bookmark);
            existingCachePoint = stepToDomPoint[newCacheBucket];
            // E.g., steps <= 500 are valid for a request starting at 500 and counting forward
            if (!existingCachePoint || bookmark.steps > existingCachePoint.steps) {
                // The current node & offset are closer to the cache bucket boundary than the existing entry was
                stepToDomPoint[newCacheBucket] = bookmark;
            }
            verifyCache();
        };

        /**
         * Set the iterator to the closest known position before or at the requested step, returning the number of steps
         * from position 0.
         * @param {!number} steps
         * @param {!core.PositionIterator} iterator
         * @return {!number} Corresponding step for the current iterator position
         */
        this.setToClosestStep = function (steps, iterator) {
            var cachePoint;
            verifyCache();
            cachePoint = getClosestBookmark(steps);
            cachePoint.setIteratorPosition(iterator);
            return cachePoint.steps;
        };

        /**
         * Finds the nearest ancestor node that has an associated bookmark
         * @param {!Node} node
         * @return {?ops.StepsCache.Bookmark}
         */
        function findBookmarkedAncestor(node) {
            var currentNode = node,
                nodeId,
                bookmark = null;

            while (!bookmark && currentNode && currentNode !== rootElement) {
                nodeId = getNodeId(currentNode);
                if (nodeId) {
                    // Take care as a nodeId may be bookmarked in another translator, but not this particular instance
                    // Keep crawling up the hierarchy until a node is found with a node id AND bookmark in this translator
                    bookmark = nodeToBookmark[nodeId];
                    if (bookmark && !isValidBookmarkForNode(currentNode, bookmark)) {
                        runtime.log("Cloned node detected. Creating new bookmark");
                        bookmark = null;
                        clearNodeId(/**@type{!Element}*/(currentNode));
                    }
                }
                currentNode = currentNode.parentNode;
            }
            return bookmark;
        }

        /**
         * Set the iterator to the closest known position before or at the requested node & offset, returning the number
         * of steps from position 0.
         * @param {!Node} node
         * @param {!number} offset
         * @param {!core.PositionIterator} iterator
         * @return {!number} Corresponding step for the current iterator position
         */
        this.setToClosestDomPoint = function (node, offset, iterator) {
            var /**@type{?ops.StepsCache.Bookmark}*/
                bookmark,
                b,
                /**@type{string|number}*/
                key;

            verifyCache();
            if (node === rootElement && offset === 0) {
                bookmark = basePoint;
            } else if (node === rootElement && offset === rootElement.childNodes.length) {
                bookmark = basePoint;
                for (key in stepToDomPoint) {
                    if (stepToDomPoint.hasOwnProperty(key)) {
                        b = stepToDomPoint[key];
                        if (b.steps > bookmark.steps) {
                            bookmark = b;
                        }
                    }
                }
            } else {
                bookmark = findBookmarkedAncestor(node.childNodes.item(offset) || node);
                if (!bookmark) {
                    // No immediate bookmark was found, so crawl backwards using the iterator and try and find a known position
                    iterator.setUnfilteredPosition(node, offset);
                    while (!bookmark && iterator.previousNode()) {
                        bookmark = findBookmarkedAncestor(iterator.getCurrentNode());
                    }
                }
            }

            bookmark = getUndamagedBookmark(bookmark || basePoint);
            bookmark.setIteratorPosition(iterator);
            return bookmark.steps;
        };

        /**
         * Mark all steps beyond inflectionStep as no longer accurate. Note, if a negative value
         * is passed in it is treated as a -1, and the whole cache will be cleared.
         * @param {!number} inflectionStep
         * @return {undefined}
         */
        this.damageCacheAfterStep = function(inflectionStep) {
            if (inflectionStep < 0) {
                // Truncate negative steps to be 0. Saves some badness from occurring if a negative is passed in.
                inflectionStep = -1;
            }
            if (lastUndamagedCacheStep === undefined) {
                lastUndamagedCacheStep = inflectionStep;
            } else if (inflectionStep < lastUndamagedCacheStep) {
                lastUndamagedCacheStep = inflectionStep;
            }
            verifyCache();
        };

        function init() {
            var rootElementId = getNodeId(rootElement) || setNodeId(rootElement);
            basePoint = new RootBookmark(rootElementId, 0, rootElement);
        }
        init();
    };

    /**
     * Enable or disable cache verification operation after every modification. VERY SLOW.
     * This is primarily used in testing or during interactive diagnostics
     * @type {!boolean}
     */
    ops.StepsCache.ENABLE_CACHE_VERIFICATION = false;

    /*jslint emptyblock: true, unparam: true*/
    /**
     * @interface
     */
    ops.StepsCache.Bookmark = function Bookmark() { };

    /**
     * @type {!string}
     */
    ops.StepsCache.Bookmark.prototype.nodeId;

    /**
     * @type {!Node}
     */
    ops.StepsCache.Bookmark.prototype.node;

    /**
     * @type {!number}
     */
    ops.StepsCache.Bookmark.prototype.steps;

    /**
     * @type {?ops.StepsCache.Bookmark}
     */
    ops.StepsCache.Bookmark.prototype.previousBookmark;

    /**
     * @type {?ops.StepsCache.Bookmark}
     */
    ops.StepsCache.Bookmark.prototype.nextBookmark;

    /**
     * @param {!core.PositionIterator} iterator
     * @return {undefined}
     */
    ops.StepsCache.Bookmark.prototype.setIteratorPosition = function(iterator) { };
}());
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\TextPositionFilter.js
========================================================================

/**
 * Copyright (C) 2012-2013 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global Node, runtime, core, odf, ops*/

/**
 * @constructor
 * @implements {core.PositionFilter}
 */
ops.TextPositionFilter = function TextPositionFilter() {
    "use strict";
    var odfUtils = odf.OdfUtils,
        ELEMENT_NODE = Node.ELEMENT_NODE,
        TEXT_NODE = Node.TEXT_NODE,
        /**@const*/FILTER_ACCEPT = core.PositionFilter.FilterResult.FILTER_ACCEPT,
        /**@const*/FILTER_REJECT = core.PositionFilter.FilterResult.FILTER_REJECT;

    /**
     * Find the previous sibling of the specified node that passes the node filter.
     * @param {?Node} node
     * @param {!function(?Node):!number} nodeFilter
     * @return {?Node}
     */
    function previousSibling(node, nodeFilter) {
        while (node && nodeFilter(node) !== FILTER_ACCEPT) {
            node = node.previousSibling;
        }
        return node;
    }

    /**
     * @param {!Node} container
     * @param {?Node} leftNode
     * @param {?Node} rightNode
     * @param {!function(?Node):!number} nodeFilter
     * @return {!core.PositionFilter.FilterResult}
     */
    function checkLeftRight(container, leftNode, rightNode, nodeFilter) {
        var r, firstPos, rightOfChar;
        // accept if there is a character immediately to the left
        if (leftNode) {
            if (odfUtils.isInlineRoot(leftNode) && odfUtils.isGroupingElement(rightNode)) {
                // Move first position after inline root inside trailing grouping element (part 1)
                // Disallow positions to the right of an inline root (like an annotation) and
                // to the left of a grouping element (like an annotation highlight span)
                return FILTER_REJECT;
            }
            r = odfUtils.lookLeftForCharacter(leftNode);
            if (r === 1) {// non-whitespace character or a character element
                return FILTER_ACCEPT;
            }
            if (r === 2 && (odfUtils.scanRightForAnyCharacter(rightNode)
                || odfUtils.scanRightForAnyCharacter(odfUtils.nextNode(container)))) {
                // significant whitespace is ok, if not in trailing whitesp
                return FILTER_ACCEPT;
            }
        } else {
            if (odfUtils.isGroupingElement(container) && odfUtils.isInlineRoot(previousSibling(container.previousSibling, nodeFilter))) {
                // Move first position after inline root inside trailing grouping element (part 2)
                // Allow the first position inside the first grouping element trailing an annotation
                return FILTER_ACCEPT;
            }
        }
        // at this point, we know that the position is not directly to the
        // right of a significant character or element. so the position is
        // only acceptable if it is the first in an empty p or h or if it
        // is to the left of the first significant character or element.

        // accept if this is the first position in p or h and there is no
        // character in the p or h
        firstPos = leftNode === null && odfUtils.isParagraph(container);
        rightOfChar = odfUtils.lookRightForCharacter(rightNode);
        if (firstPos) {
            if (rightOfChar) {
                return FILTER_ACCEPT;
            }
            // position is first position in empty paragraph
            return odfUtils.scanRightForAnyCharacter(rightNode) ? FILTER_REJECT : FILTER_ACCEPT;
        }
        // if not directly to the right of a character, reject
        if (!rightOfChar) {
            return FILTER_REJECT;
        }
        // accept if there is no character to the left
        leftNode = leftNode || odfUtils.previousNode(container);
        return odfUtils.scanLeftForAnyCharacter(leftNode) ? FILTER_REJECT : FILTER_ACCEPT;
    }

    /**
     * @param {!core.PositionIterator} iterator
     * @return {!core.PositionFilter.FilterResult}
     */
    this.acceptPosition = function (iterator) {
        var container = iterator.container(),
            nodeType = container.nodeType,
            /**@type{number}*/
            offset,
            /**@type{string}*/
            text,
            /**@type{string}*/
            leftChar,
            /**@type{string}*/
            rightChar,
            leftNode,
            rightNode,
            r;

        if (nodeType !== ELEMENT_NODE && nodeType !== TEXT_NODE) {
            return FILTER_REJECT;
        }
        if (nodeType === TEXT_NODE) {
            // In a PositionIterator, the offset in a text node is never
            // equal to the length of the text node.
            offset = iterator.unfilteredDomOffset();
            text = container.data;
            runtime.assert(offset !== text.length, "Unexpected offset.");
            if (offset > 0) {
                // The cursor may be placed to the right of a non-whitespace
                // character.
                leftChar = /**@type{string}*/(text[offset - 1]);
                if (!odfUtils.isODFWhitespace(leftChar)) {
                    return FILTER_ACCEPT;
                }
                // A whitespace to the left is ok, if
                // * there is a non-whitespace character to the right and
                //   that is the first non-whitespace character or character
                //   element or
                // * there is not another whitespace character in front of
                //   it.
                if (offset > 1) {
                    leftChar = /**@type{string}*/(text[offset - 2]);
                    if (!odfUtils.isODFWhitespace(leftChar)) {
                        r = FILTER_ACCEPT;
                    } else if (!odfUtils.isODFWhitespace(text.substr(0, offset))) {
                        // check if this can be leading paragraph space
                        return FILTER_REJECT;
                    }
                } else {
                    // check if there is a non-whitespace character or
                    // character element (other than text:s) in a preceding node
                    leftNode = odfUtils.previousNode(container);
                    if (odfUtils.scanLeftForNonSpace(leftNode)) {
                        r = FILTER_ACCEPT;
                    }
                }
                if (r === FILTER_ACCEPT) {
                    return odfUtils.isTrailingWhitespace(
                            /**@type{!Text}*/(container), offset)
                        ? FILTER_REJECT : FILTER_ACCEPT;
                }
                rightChar = /**@type{string}*/(text[offset]);
                if (odfUtils.isODFWhitespace(rightChar)) {
                    return FILTER_REJECT;
                }
                return odfUtils.scanLeftForAnyCharacter(odfUtils.previousNode(container))
                    ? FILTER_REJECT : FILTER_ACCEPT;
            }
            leftNode = iterator.leftNode();
            rightNode = container;
            container = /**@type{!Node}*/(container.parentNode);
            r = checkLeftRight(container, leftNode, rightNode, iterator.getNodeFilter());
        } else if (!odfUtils.isGroupingElement(container)) {
            r = FILTER_REJECT;
        } else {
            leftNode = iterator.leftNode();
            rightNode = iterator.rightNode();
            r = checkLeftRight(container, leftNode, rightNode, iterator.getNodeFilter());
        }
        return r;
    };
};

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\ops\TrivialOperationRouter.js
========================================================================

/**
 * Copyright (C) 2012 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global ops, runtime, core*/

/*
 * route the operations.
 * this implementation immediately passes them to the
 * playback function.
 * other implementations might want to send them to a
 * server and wait for foreign ops.
 */

/**
 * @constructor
 * @implements ops.OperationRouter
 */
ops.TrivialOperationRouter = function TrivialOperationRouter() {
    "use strict";

    var events = new core.EventNotifier([
            ops.OperationRouter.signalProcessingBatchStart,
            ops.OperationRouter.signalProcessingBatchEnd
        ]),
        /**@type{!ops.OperationFactory}*/
        operationFactory,
        playbackFunction,
        /**@type{number}*/
        groupIdentifier = 0;

    /**
     * Sets the factory to use to create operation instances from operation specs.
     *
     * @param {!ops.OperationFactory} f
     * @return {undefined}
     */
    this.setOperationFactory = function (f) {
        operationFactory = f;
    };

    /**
     * Sets the method which should be called to apply operations.
     *
     * @param {!function(!ops.Operation):boolean} playback_func
     * @return {undefined}
     */
    this.setPlaybackFunction = function (playback_func) {
        playbackFunction = playback_func;
    };

    /**
     * Brings the locally created operations into the game.
     *
     * @param {!Array.<!ops.Operation>} operations
     * @return {undefined}
     */
    this.push = function (operations) {
        // This is an extremely simplistic and VERY temporary implementation of operation grouping.
        // In order to improve undo behaviour, the undo manager requires knowledge about what groups
        // of operations were queued together, so these can be stored in a single undo state.
        // The current implementation is only designed for a localeditor instance & the TrivialUndoManager.
        // TODO redesign this concept to work with collaborative editing
        groupIdentifier += 1;
        events.emit(ops.OperationRouter.signalProcessingBatchStart, {});
        operations.forEach(function (op) {
            var /**@type{?ops.Operation}*/
                timedOp,
                opspec = op.spec();

            opspec.timestamp = Date.now();
            timedOp = operationFactory.create(opspec);
            timedOp.group = "g" + groupIdentifier;

            // TODO: handle return flag in error case
            playbackFunction(timedOp);
        });
        events.emit(ops.OperationRouter.signalProcessingBatchEnd, {});
    };

    /**
     * @param {function()} cb
     */
    this.close = function (cb) {
        cb();
    };

    /**
     * @param {!string} eventId
     * @param {!Function} cb
     * @return {undefined}
     */
    this.subscribe = function (eventId, cb) {
        events.subscribe(eventId, cb);
    };

    /**
     * @param {!string} eventId
     * @param {!Function} cb
     * @return {undefined}
     */
    this.unsubscribe = function (eventId, cb) {
        events.unsubscribe(eventId, cb);
    };

    /**
     * @return {!boolean}
     */
    this.hasLocalUnsyncedOps = function () {
        return false;
    };

    /**
     * @return {!boolean}
     */
    this.hasSessionHostConnection = function () {
        return true;
    };
};

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\xmldom\LSSerializer.js
========================================================================

/**
 * Copyright (C) 2012 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global Node, NodeFilter, xmldom, runtime*/

/*jslint sub: true, emptyblock: true*/
if (typeof Object.create !== 'function') {
    /**
     * @param {!Object} o
     * @return {!Object}
     */
    Object['create'] = function (o) {
        "use strict";
        /**
         * @constructor
         */
        var F = function () {};
        F.prototype = o;
        return new F();
    };
}
/*jslint emptyblock: false*/

/**
 * Partial implementation of LSSerializer
 * @constructor
 */
xmldom.LSSerializer = function LSSerializer() {
    "use strict";
    var self = this;

    /**
     * @constructor
     * @param {!Object.<string,string>} nsmap
     */
    function Namespaces(nsmap) {
        /**
         * @param {!Object.<string,string>} map
         * @return {!Object.<string,string>}
         */
        function invertMap(map) {
            var m = {},
                /**@type{string}*/
                i;
            for (i in map) {
                if (map.hasOwnProperty(i)) {
                    m[map[i]] = i;
                }
            }
            return m;
        }
        var /**@type{!Object.<string,string>}*/
            current = nsmap || {},
            /**@type{!Object.<string,string>}*/
            currentrev = invertMap(nsmap),
            /**@type{!Array.<!Object.<string,string>>}*/
            levels = [ current ],
            /**@type{!Array.<!Object.<string,string>>}*/
            levelsrev = [ currentrev ],
            /**@type{number}*/
            level = 0;
        this.push = function () {
            level += 1;
            current = levels[level] = Object.create(current);
            currentrev = levelsrev[level] = Object.create(currentrev);
        };
        this.pop = function () {
            levels.pop();
            levelsrev.pop();
            level -= 1;
            current = levels[level];
            currentrev = levelsrev[level];
        };
        /**
         * @return {!Object.<string,string>} nsmap
         */
        this.getLocalNamespaceDefinitions = function () {
            return currentrev;
        };
        /**
         * @param {!Node} node
         * @return {!string}
         */
        this.getQName = function (node) {
            var ns = node.namespaceURI,
                i = 0,
                p;
            if (!ns) {
                return node.localName;
            }
            p = currentrev[ns];
            if (p) {
                return p + ":" + node.localName;
            }
            do {
                if (p || !node.prefix) {
                    p = "ns" + i;
                    i += 1;
                } else {
                    p = node.prefix;
                }
                if (current[p] === ns) {
                    break;
                }
                if (!current[p]) {
                    current[p] = ns;
                    currentrev[ns] = p;
                    break;
                }
                p = null;
            } while (p === null);
            return p + ":" + node.localName;
        };
    }
    /**
     * Escape characters within document content
     * Follows basic guidelines specified at http://xerces.apache.org/xerces2-j/javadocs/api/org/w3c/dom/ls/LSSerializer.html
     * @param {string} value
     * @return {string}
     */
    function escapeContent(value) {
        return value.replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/'/g, "&apos;")
            .replace(/"/g, "&quot;");
    }
    /**
     * @param {!string} qname
     * @param {!Attr} attr
     * @return {!string}
     */
    function serializeAttribute(qname, attr) {
        var escapedValue = typeof attr.value === 'string'
                           ? escapeContent(attr.value)
                           : attr.value,
            /**@type{!string}*/
            s = qname + "=\"" + escapedValue + "\"";
        return s;
    }
    /**
     * @param {!Namespaces} ns
     * @param {!string} qname
     * @param {!Node} element
     * @return {!string}
     */
    function startElement(ns, qname, element) {
        var /**@type{!string}*/ s = "",
            /**@const*/
            atts = /**@type{!NamedNodeMap}*/(element.attributes),
            /**@const
 *             @type{!number}*/
            length,
            /**@type{!number}*/
            i,
            /**@type{!Attr}*/
            attr,
            /**@type{!string}*/
            attstr = "",
            /**@type{!number}*/
            accept,
            /**@type{!string}*/
            prefix,
            nsmap;
        s += "<" + qname;
        length = atts.length;
        for (i = 0; i < length; i += 1) {
            attr = /**@type{!Attr}*/(atts.item(i));
            if (attr.namespaceURI !== "http://www.w3.org/2000/xmlns/") {
                accept = self.filter
                         ? self.filter.acceptNode(attr)
                         : NodeFilter.FILTER_ACCEPT;
                if (accept === NodeFilter.FILTER_ACCEPT) {
                    attstr += " " + serializeAttribute(ns.getQName(attr),
                        attr);
                }
            }
        }
        nsmap = ns.getLocalNamespaceDefinitions();
        for (i in nsmap) {
            if (nsmap.hasOwnProperty(i)) {
                prefix = nsmap[i];
                if (!prefix) {
                    s += " xmlns=\"" + i + "\"";
                } else if (prefix !== "xmlns") {
                    s += " xmlns:" + nsmap[i] + "=\"" + i + "\"";
                }
            }
        }
        s += attstr + ">";
        return s;
    }
    /**
     * @param {!Namespaces} ns
     * @param {!Node} node
     * @return {!string}
     */
    function serializeNode(ns, node) {
        var /**@type{!string}*/
            s = "",
            /**@const
 *             @type{!number}*/
            accept = (self.filter) ? self.filter.acceptNode(node) : NodeFilter.FILTER_ACCEPT,
            /**@type{Node}*/
            child,
            /**@const
 *             @type{string}*/
            qname;
        if (accept === NodeFilter.FILTER_ACCEPT
                && node.nodeType === Node.ELEMENT_NODE) {
            ns.push();
            qname = ns.getQName(node);
            s += startElement(ns, qname, node);
        }
        if (accept === NodeFilter.FILTER_ACCEPT
                || accept === NodeFilter.FILTER_SKIP) {
            child = node.firstChild;
            while (child) {
                s += serializeNode(ns, child);
                child = child.nextSibling;
            }
            if (node.nodeValue) {
                s += escapeContent(node.nodeValue);
            }
        }
        if (qname) {
            s += "</" + qname + ">";
            ns.pop();
        }
        return s;
    }
    /**
     * @type {xmldom.LSSerializerFilter}
     */
    this.filter = null;
    /**
     * @param {?Node} node
     * @param {!Object.<string,string>} nsmap
     * @return {!string}
     */
    this.writeToString = function (node, nsmap) {
        if (!node) {
            return "";
        }
        var ns = new Namespaces(nsmap);
        return serializeNode(ns, node);
    };
};

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\xmldom\LSSerializerFilter.js
========================================================================

/**
 * Copyright (C) 2012 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global xmldom*/
/*jslint emptyblock: true, unparam: true*/

/**
 * Partial implementation of LSSerializerFilter
 * @interface
 */
xmldom.LSSerializerFilter = function LSSerializerFilter() {"use strict"; };
/**
 * @param {!Node} node
 * @return {!number}
 */
xmldom.LSSerializerFilter.prototype.acceptNode = function (node) { "use strict"; };

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\xmldom\RelaxNG.js
========================================================================

/**
 * Copyright (C) 2012 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global Node, runtime, xmldom*/

/**
 * RelaxNG can check a DOM tree against a Relax NG schema
 * The RelaxNG implementation is currently not complete. Relax NG should not
 * report errors on valid DOM trees, but it will not check all constraints that
 * a Relax NG file can define. The current implementation does not load external
 * parts of a Relax NG file.
 * The main purpose of this Relax NG engine is to validate runtime ODF
 * documents. The DOM tree is traversed via a TreeWalker. A custom TreeWalker
 * implementation can hide parts of a DOM tree. This is useful in WebODF, where
 * special elements and attributes in the runtime DOM tree.
 *
 * implementation according to
 * http://www.thaiopensource.com/relaxng/derivative.html
 */
/**
 * @typedef {{
 *     type: string,
 *     nullable: boolean,
 *     hash: (undefined|string),
 *     nc: (undefined|!xmldom.RelaxNGItem),
 *     p: (undefined|!xmldom.RelaxNGItem),
 *     p1: (undefined|!xmldom.RelaxNGItem),
 *     p2: (undefined|!xmldom.RelaxNGItem),
 *     textDeriv: (undefined|function(*=,*=):xmldom.RelaxNGItem),
 *     startTagOpenDeriv: (undefined|function(*=):xmldom.RelaxNGItem),
 *     attDeriv: function(*=,*=):xmldom.RelaxNGItem,
 *     startTagCloseDeriv: function():xmldom.RelaxNGItem,
 *     endTagDeriv: (undefined|function():xmldom.RelaxNGItem)
 *  }}*/
xmldom.RelaxNGItem;
/**
 * @constructor
 */
xmldom.RelaxNG = function RelaxNG() {
    "use strict";
    var xmlnsns = "http://www.w3.org/2000/xmlns/",
        createChoice,
        createInterleave,
        createGroup,
        createAfter,
        createOneOrMore,
        createValue,
        createAttribute,
        createNameClass,
        createData,
        makePattern,
        applyAfter,
        childDeriv,
        rootPattern,
        /**@type{!xmldom.RelaxNGItem}*/
        notAllowed = {
            type: "notAllowed",
            nullable: false,
            hash: "notAllowed",
            nc: undefined,
            p: undefined,
            p1: undefined,
            p2: undefined,
            textDeriv: function () { return notAllowed; },
            startTagOpenDeriv: function () { return notAllowed; },
            attDeriv: function () { return notAllowed; },
            startTagCloseDeriv: function () { return notAllowed; },
            endTagDeriv: function () { return notAllowed; }
        },
        /**@type{!xmldom.RelaxNGItem}*/
        empty = {
            type: "empty",
            nullable: true,
            hash: "empty",
            nc: undefined,
            p: undefined,
            p1: undefined,
            p2: undefined,
            textDeriv: function () { return notAllowed; },
            startTagOpenDeriv: function () { return notAllowed; },
            attDeriv: function () { return notAllowed; },
            startTagCloseDeriv: function () { return empty; },
            endTagDeriv: function () { return notAllowed; }
        },
        /**@type{!xmldom.RelaxNGItem}*/
        text = {
            type: "text",
            nullable: true,
            hash: "text",
            nc: undefined,
            p: undefined,
            p1: undefined,
            p2: undefined,
            textDeriv: function () { return text; },
            startTagOpenDeriv: function () { return notAllowed; },
            attDeriv: function () { return notAllowed; },
            startTagCloseDeriv: function () { return text; },
            endTagDeriv: function () { return notAllowed; }
        };

    /**
     * @param {function():!xmldom.RelaxNGItem} func
     * @return {function():!xmldom.RelaxNGItem}
     */
    function memoize0arg(func) {
        /**
         * @return {function():!xmldom.RelaxNGItem}
         */
        function f() {
            /**
             * @type {xmldom.RelaxNGItem}
             */
            var cache;
            /**
             * @return {!xmldom.RelaxNGItem}
             */
            function g() {
                if (cache === undefined) {
                    cache = func();
                }
                return cache;
            }
            return g;
        }
        return f();
    }
    /**
     * @param {string} type
     * @param {function(!xmldom.RelaxNGItem):!xmldom.RelaxNGItem} func
     * @return {function(!xmldom.RelaxNGItem):!xmldom.RelaxNGItem}
     */
    function memoize1arg(type, func) {
        /**
         * @return {function(!xmldom.RelaxNGItem):!xmldom.RelaxNGItem}
         */
        function f() {
            var /**@type{!Object.<string,!xmldom.RelaxNGItem>}*/
                cache = {},
                /**@type{number}*/
                cachecount = 0;
            /**
             * @param {!xmldom.RelaxNGItem} a
             * @return {!xmldom.RelaxNGItem}
             */
            function g(a) {
                var ahash = a.hash || a.toString(),
                    v;
                if (cache.hasOwnProperty(ahash)) {
                    return cache[ahash];
                }
                cache[ahash] = v = func(a);
                v.hash = type + cachecount.toString();
                cachecount += 1;
                return v;
            }
            return g;
        }
        return f();
    }
    /**
     * @param {function(!Node):!xmldom.RelaxNGItem} func
     * @return {function(!Node):!xmldom.RelaxNGItem}
     */
    function memoizeNode(func) {
        /**
         * @return {function(!Node):!xmldom.RelaxNGItem}
         */
        function f() {
            var /**@type{!Object.<string,!Object.<string,!xmldom.RelaxNGItem>>}*/
                cache = {};
            /**
             * @param {!Node} node
             * @return {!xmldom.RelaxNGItem}
             */
            function g(node) {
                var v,
                    /**@type{!Object.<string,!xmldom.RelaxNGItem>}*/
                    m;
                if (!cache.hasOwnProperty(node.localName)) {
                    cache[node.localName] = m = {};
                } else {
                    m = cache[node.localName];
                    v = m[node.namespaceURI];
                    if (v !== undefined) {
                        return v;
                    }
                }
                m[node.namespaceURI] = v = func(node);
                return v;
            }
            return g;
        }
        return f();
    }
    /**
     * @param {string} type
     * @param {undefined|function(!xmldom.RelaxNGItem,!xmldom.RelaxNGItem):(undefined|xmldom.RelaxNGItem)} fastfunc
     * @param {function(!xmldom.RelaxNGItem,!xmldom.RelaxNGItem):!xmldom.RelaxNGItem} func
     * @return {function(!xmldom.RelaxNGItem,!xmldom.RelaxNGItem):!xmldom.RelaxNGItem}
     */
    function memoize2arg(type, fastfunc, func) {
        /**
         * @return {function(!xmldom.RelaxNGItem,!xmldom.RelaxNGItem):!xmldom.RelaxNGItem}
         */
        function f() {
            var /**@type{!Object.<string,!Object.<string,!xmldom.RelaxNGItem>>}*/
                cache = {},
                /**@type{number}*/
                cachecount = 0;
            /**
             * @param {!xmldom.RelaxNGItem} a
             * @param {!xmldom.RelaxNGItem} b
             * @return {!xmldom.RelaxNGItem}
             */
            function g(a, b) {
                var /**@type{undefined|!xmldom.RelaxNGItem}*/
                    v = fastfunc && fastfunc(a, b),
                    ahash,
                    bhash,
                    /**@type{!Object.<string,!xmldom.RelaxNGItem>}*/
                    m;
                if (v !== undefined) { return v; }
                ahash = a.hash || a.toString();
                bhash = b.hash || b.toString();
                if (!cache.hasOwnProperty(ahash)) {
                    cache[ahash] = m = {};
                } else {
                    m = cache[ahash];
                    if (m.hasOwnProperty(bhash)) {
                        return m[bhash];
                    }
                }
                m[bhash] = v = func(a, b);
                v.hash = type + cachecount.toString();
                cachecount += 1;
                return v;
            }
            return g;
        }
        return f();
    }
    /**
     * This memoize function can be used for functions where the order of two
     * arguments is not important.
     * @param {string} type
     * @param {undefined|function(!xmldom.RelaxNGItem,!xmldom.RelaxNGItem):(undefined|!xmldom.RelaxNGItem)} fastfunc
     * @param {function(!xmldom.RelaxNGItem,!xmldom.RelaxNGItem):!xmldom.RelaxNGItem} func
     * @return {function(!xmldom.RelaxNGItem,!xmldom.RelaxNGItem):!xmldom.RelaxNGItem}
     */
    function unorderedMemoize2arg(type, fastfunc, func) {
        function f() {
            var /**@type{!Object.<string,!Object.<string,!xmldom.RelaxNGItem>>}*/
                cache = {},
                /**@type{number}*/
                cachecount = 0;
            /**
             * @param {!xmldom.RelaxNGItem} a
             * @param {!xmldom.RelaxNGItem} b
             * @return {!xmldom.RelaxNGItem}
             */
            function g(a, b) {
                var /**@type{undefined|!xmldom.RelaxNGItem}*/
                    v = fastfunc && fastfunc(a, b),
                    ahash,
                    bhash,
                    hash,
                    /**@type{!Object.<string,!xmldom.RelaxNGItem>}*/
                    m;
                if (v !== undefined) { return v; }
                ahash = a.hash || a.toString();
                bhash = b.hash || b.toString();
                if (ahash < bhash) {
                    hash = ahash; ahash = bhash; bhash = hash;
                    hash = a; a = b; b = hash;
                }
                if (!cache.hasOwnProperty(ahash)) {
                    cache[ahash] = m = {};
                } else {
                    m = cache[ahash];
                    if (m.hasOwnProperty(bhash)) {
                        return m[bhash];
                    }
                }
                m[bhash] = v = func(a, b);
                v.hash = type + cachecount.toString();
                cachecount += 1;
                return v;
            }
            return g;
        }
        return f();
    }
    function getUniqueLeaves(leaves, pattern) {
        if (pattern.p1.type === "choice") {
            getUniqueLeaves(leaves, pattern.p1);
        } else {
            leaves[pattern.p1.hash] = pattern.p1;
        }
        if (pattern.p2.type === "choice") {
            getUniqueLeaves(leaves, pattern.p2);
        } else {
            leaves[pattern.p2.hash] = pattern.p2;
        }
    }
    createChoice = memoize2arg("choice", function (p1, p2) {
        if (p1 === notAllowed) { return p2; }
        if (p2 === notAllowed) { return p1; }
        if (p1 === p2) { return p1; }
    }, function (p1, p2) {
        /**
         * @param {!xmldom.RelaxNGItem} p1
         * @param {!xmldom.RelaxNGItem} p2
         * @return {!xmldom.RelaxNGItem}
         */
        function makeChoice(p1, p2) {
            return {
                type: "choice",
                nullable: p1.nullable || p2.nullable,
                hash: undefined,
                nc: undefined,
                p: undefined,
                p1: p1,
                p2: p2,
                textDeriv: function (context, text) {
                    return createChoice(p1.textDeriv(context, text),
                        p2.textDeriv(context, text));
                },
                startTagOpenDeriv: memoizeNode(function (node) {
                    return createChoice(p1.startTagOpenDeriv(node),
                        p2.startTagOpenDeriv(node));
                }),
                attDeriv: function (context, attribute) {
                    return createChoice(p1.attDeriv(context, attribute),
                        p2.attDeriv(context, attribute));
                },
                startTagCloseDeriv: memoize0arg(function () {
                    return createChoice(p1.startTagCloseDeriv(),
                        p2.startTagCloseDeriv());
                }),
                endTagDeriv: memoize0arg(function () {
                    return createChoice(p1.endTagDeriv(), p2.endTagDeriv());
                })
            };
        }
        var leaves = {}, i;
        getUniqueLeaves(leaves, {p1: p1, p2: p2});
        p1 = undefined;
        p2 = undefined;
        for (i in leaves) {
            if (leaves.hasOwnProperty(i)) {
                if (p1 === undefined) {
                    p1 = leaves[i];
                } else if (p2 === undefined) {
                    p2 = leaves[i];
                } else {
                    p2 = createChoice(p2, leaves[i]);
                }
            }
        }
        return makeChoice(p1, p2);
    });
    createInterleave = unorderedMemoize2arg("interleave", function (p1, p2) {
        if (p1 === notAllowed || p2 === notAllowed) { return notAllowed; }
        if (p1 === empty) { return p2; }
        if (p2 === empty) { return p1; }
    }, function (p1, p2) {
        return {
            type: "interleave",
            nullable: p1.nullable && p2.nullable,
            hash: undefined,
            p1: p1,
            p2: p2,
            textDeriv: function (context, text) {
                return createChoice(
                    createInterleave(p1.textDeriv(context, text), p2),
                    createInterleave(p1, p2.textDeriv(context, text))
                );
            },
            startTagOpenDeriv: memoizeNode(function (node) {
                return createChoice(
                    applyAfter(function (p) { return createInterleave(p, p2); },
                               p1.startTagOpenDeriv(node)),
                    applyAfter(function (p) { return createInterleave(p1, p); },
                               p2.startTagOpenDeriv(node))
                );
            }),
            attDeriv: function (context, attribute) {
                return createChoice(
                    createInterleave(p1.attDeriv(context, attribute), p2),
                    createInterleave(p1, p2.attDeriv(context, attribute))
                );
            },
            startTagCloseDeriv: memoize0arg(function () {
                return createInterleave(p1.startTagCloseDeriv(),
                    p2.startTagCloseDeriv());
            }),
            endTagDeriv: undefined
        };
    });
    createGroup = memoize2arg("group", function (p1, p2) {
        if (p1 === notAllowed || p2 === notAllowed) { return notAllowed; }
        if (p1 === empty) { return p2; }
        if (p2 === empty) { return p1; }
    }, function (p1, p2) {
        return {
            type: "group",
            p1: p1,
            p2: p2,
            nullable: p1.nullable && p2.nullable,
            textDeriv: function (context, text) {
                var p = createGroup(p1.textDeriv(context, text), p2);
                if (p1.nullable) {
                    return createChoice(p, p2.textDeriv(context, text));
                }
                return p;
            },
            startTagOpenDeriv: function (node) {
                var x = applyAfter(function (p) { return createGroup(p, p2); },
                        p1.startTagOpenDeriv(node));
                if (p1.nullable) {
                    return createChoice(x, p2.startTagOpenDeriv(node));
                }
                return x;
            },
            attDeriv: function (context, attribute) {
                return createChoice(
                    createGroup(p1.attDeriv(context, attribute), p2),
                    createGroup(p1, p2.attDeriv(context, attribute))
                );
            },
            startTagCloseDeriv: memoize0arg(function () {
                return createGroup(p1.startTagCloseDeriv(),
                    p2.startTagCloseDeriv());
            })
        };
    });
    createAfter = memoize2arg("after", function (p1, p2) {
        if (p1 === notAllowed || p2 === notAllowed) { return notAllowed; }
    }, function (p1, p2) {
        return {
            type: "after",
            p1: p1,
            p2: p2,
            nullable: false,
            textDeriv: function (context, text) {
                return createAfter(p1.textDeriv(context, text), p2);
            },
            startTagOpenDeriv: memoizeNode(function (node) {
                return applyAfter(function (p) { return createAfter(p, p2); },
                    p1.startTagOpenDeriv(node));
            }),
            attDeriv: function (context, attribute) {
                return createAfter(p1.attDeriv(context, attribute), p2);
            },
            startTagCloseDeriv: memoize0arg(function () {
                return createAfter(p1.startTagCloseDeriv(), p2);
            }),
            endTagDeriv: memoize0arg(function () {
                return (p1.nullable) ? p2 : notAllowed;
            })
        };
    });
    createOneOrMore = memoize1arg("oneormore", function (p) {
        if (p === notAllowed) { return notAllowed; }
        return {
            type: "oneOrMore",
            p: p,
            nullable: p.nullable,
            textDeriv: function (context, text) {
                return createGroup(p.textDeriv(context, text),
                            createChoice(this, empty));
            },
            startTagOpenDeriv: function (node) {
                var oneOrMore = this;
                return applyAfter(function (pf) {
                    return createGroup(pf, createChoice(oneOrMore, empty));
                }, p.startTagOpenDeriv(node));
            },
            attDeriv: function (context, attribute) {
                var oneOrMore = this;
                return createGroup(p.attDeriv(context, attribute),
                    createChoice(oneOrMore, empty));
            },
            startTagCloseDeriv: memoize0arg(function () {
                return createOneOrMore(p.startTagCloseDeriv());
            })
        };
    });
    function createElement(nc, p) {
        return {
            type: "element",
            nc: nc,
            nullable: false,
            textDeriv: function () { return notAllowed; },
            startTagOpenDeriv: function (node) {
                if (nc.contains(node)) {
                    return createAfter(p, empty);
                }
                return notAllowed;
            },
            attDeriv: function () { return notAllowed; },
            startTagCloseDeriv: function () { return this; }
        };
    }
    function valueMatch(context, pattern, text) {
        return (pattern.nullable && /^\s+$/.test(text)) ||
            pattern.textDeriv(context, text).nullable;
    }
    createAttribute = memoize2arg("attribute", undefined, function (nc, p) {
        return {
            type: "attribute",
            nullable: false,
            hash: undefined,
            nc: nc,
            p: p,
            p1: undefined,
            p2: undefined,
            textDeriv: undefined,
            startTagOpenDeriv: undefined,
            attDeriv: function (context, attribute) {
                if (nc.contains(attribute) && valueMatch(context, p,
                        attribute.nodeValue)) {
                    return empty;
                }
                return notAllowed;
            },
            startTagCloseDeriv: function () { return notAllowed; },
            endTagDeriv: undefined
        };
    });
    function createList() {
        return {
            type: "list",
            nullable: false,
            hash: "list",
            textDeriv: function () {
                return empty;
            }
        };
    }
/*jslint unparam: true*/
    createValue = memoize1arg("value", function (value) {
        return {
            type: "value",
            nullable: false,
            value: value,
            textDeriv: function (context, text) {
                return (text === value) ? empty : notAllowed;
            },
            attDeriv: function () { return notAllowed; },
            startTagCloseDeriv: function () { return this; }
        };
    });
/*jslint unparam: false*/
    createData = memoize1arg("data", function (type) {
        return {
            type: "data",
            nullable: false,
            dataType: type,
            textDeriv: function () { return empty; },
            attDeriv: function () { return notAllowed; },
            startTagCloseDeriv: function () { return this; }
        };
    });
    applyAfter = function applyAfter(f, p) {
        var result;
        if (p.type === "after") {
            result = createAfter(p.p1, f(p.p2));
        } else if (p.type === "choice") {
            result = createChoice(applyAfter(f, p.p1), applyAfter(f, p.p2));
        } else {
            result = p;
        }
        return result;
    };
    function attsDeriv(context, pattern, attributes, position) {
        if (pattern === notAllowed) {
            return notAllowed;
        }
        if (position >= attributes.length) {
            return pattern;
        }
        if (position === 0) {
            // TODO: loop over attributes to update namespace mapping
            position = 0;
        }
        var a = attributes.item(position);
        while (a.namespaceURI === xmlnsns) { // always ok
            position += 1;
            if (position >= attributes.length) {
                return pattern;
            }
            a = attributes.item(position);
        }
        a = attsDeriv(context, pattern.attDeriv(context,
                attributes.item(position)), attributes, position + 1);
        return a;
    }
    function childrenDeriv(context, pattern, walker) {
        var element = walker.currentNode,
            childNode = walker.firstChild(),
            childNodes = [],
            i,
            p;
        // simple incomplete implementation: only use non-empty text nodes
        while (childNode) {
            if (childNode.nodeType === Node.ELEMENT_NODE) {
                childNodes.push(childNode);
            } else if (childNode.nodeType === Node.TEXT_NODE &&
                    !/^\s*$/.test(childNode.nodeValue)) {
                childNodes.push(childNode.nodeValue);
            }
            childNode = walker.nextSibling();
        }
        // if there is no nodes at all, add an empty text node
        if (childNodes.length === 0) {
            childNodes = [""];
        }
        p = pattern;
        for (i = 0; p !== notAllowed && i < childNodes.length; i += 1) {
            childNode = childNodes[i];
            if (typeof childNode === "string") {
                if (/^\s*$/.test(childNode)) {
                    p = createChoice(p, p.textDeriv(context, childNode));
                } else {
                    p = p.textDeriv(context, childNode);
                }
            } else {
                walker.currentNode = childNode;
                p = childDeriv(context, p, walker);
            }
        }
        walker.currentNode = element;
        return p;
    }
    childDeriv = function childDeriv(context, pattern, walker) {
        var childNode = walker.currentNode, p;
        p = pattern.startTagOpenDeriv(childNode);
        p = attsDeriv(context, p, childNode.attributes, 0);
        p = p.startTagCloseDeriv();
        p = childrenDeriv(context, p, walker);
        p = p.endTagDeriv();
        return p;
    };
    function addNames(name, ns, pattern) {
        if (pattern.e[0].a) {
            name.push(pattern.e[0].text);
            ns.push(pattern.e[0].a.ns);
        } else {
            addNames(name, ns, pattern.e[0]);
        }
        if (pattern.e[1].a) {
            name.push(pattern.e[1].text);
            ns.push(pattern.e[1].a.ns);
        } else {
            addNames(name, ns, pattern.e[1]);
        }
    }
    createNameClass = function createNameClass(pattern) {
        var name, ns, hash, i, result;
        if (pattern.name === "name") {
            name = pattern.text;
            ns = pattern.a.ns;
            result = {
                name: name,
                ns: ns,
                hash: "{" + ns + "}" + name,
                contains: function (node) {
                    return node.namespaceURI === ns && node.localName === name;
                }
            };
        } else if (pattern.name === "choice") {
            name = [];
            ns = [];
            addNames(name, ns, pattern);
            hash = "";
            for (i = 0; i < name.length; i += 1) {
                hash += "{" + ns[i] + "}" + name[i] + ",";
            }
            result = {
                hash: hash,
                contains: function (node) {
                    var j;
                    for (j = 0; j < name.length; j += 1) {
                        if (name[j] === node.localName &&
                                ns[j] === node.namespaceURI) {
                            return true;
                        }
                    }
                    return false;
                }
            };
        } else {
            result = {
                hash: "anyName",
                contains: function () { return true; }
            };
        }
        return result;
    };
    function resolveElement(pattern, elements) {
        var element, p, i, hash;
        // create an empty object in the store to enable circular
        // dependencies
        hash = "element" + pattern.id.toString();
        p = elements[pattern.id] = { hash: hash };
        element = createElement(createNameClass(pattern.e[0]),
            makePattern(pattern.e[1], elements));
        // copy the properties of the new object into the predefined one
        for (i in element) {
            if (element.hasOwnProperty(i)) {
                p[i] = element[i];
            }
        }
        return p;
    }
    makePattern = function makePattern(pattern, elements) {
        var p, i;
        if (pattern.name === "elementref") {
            p = pattern.id || 0;
            pattern = elements[p];
            if (pattern.name !== undefined) {
                return resolveElement(pattern, elements);
            }
            return pattern;
        }
        switch (pattern.name) {
        case 'empty':
            return empty;
        case 'notAllowed':
            return notAllowed;
        case 'text':
            return text;
        case 'choice':
            return createChoice(makePattern(pattern.e[0], elements),
                 makePattern(pattern.e[1], elements));
        case 'interleave':
            p = makePattern(pattern.e[0], elements);
            for (i = 1; i < pattern.e.length; i += 1) {
                p = createInterleave(p, makePattern(pattern.e[i],
                        elements));
            }
            return p;
        case 'group':
            return createGroup(makePattern(pattern.e[0], elements),
                    makePattern(pattern.e[1], elements));
        case 'oneOrMore':
            return createOneOrMore(makePattern(pattern.e[0], elements));
        case 'attribute':
            return createAttribute(createNameClass(pattern.e[0]),
                makePattern(pattern.e[1], elements));
        case 'value':
            return createValue(pattern.text);
        case 'data':
            p = pattern.a && pattern.a.type;
            if (p === undefined) {
                p = "";
            }
            return createData(p);
        case 'list':
            return createList();
        }
        throw "No support for " + pattern.name;
    };
    this.makePattern = function (pattern, elements) {
        var copy = {}, i;
        for (i in elements) {
            if (elements.hasOwnProperty(i)) {
                copy[i] = elements[i];
            }
        }
        i = makePattern(pattern, copy);
        return i;
    };
    /**
     * Validate the elements pointed to by the TreeWalker
     * @param {!TreeWalker} walker
     * @param {!function(Array.<string>):undefined} callback
     * @return {undefined}
     */
    this.validate = function validate(walker, callback) {
        var errors;
        walker.currentNode = walker.root;
        errors = childDeriv(null, rootPattern, walker);
        if (!errors.nullable) {
            runtime.log("Error in Relax NG validation: " + errors);
            callback(["Error in Relax NG validation: " + errors]);
        } else {
            callback(null);
        }
    };
    this.init = function init(rootPattern1) {
        rootPattern = rootPattern1;
    };
};

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\xmldom\RelaxNG2.js
========================================================================

/**
 * Copyright (C) 2012 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global Node, runtime, xmldom*/

/**
 * RelaxNG can check a DOM tree against a Relax NG schema
 * The RelaxNG implementation is currently not complete. Relax NG should not
 * report errors on valid DOM trees, but it will not check all constraints that
 * a Relax NG file can define. The current implementation does not load external
 * parts of a Relax NG file.
 * The main purpose of this Relax NG engine is to validate runtime ODF
 * documents. The DOM tree is traversed via a TreeWalker. A custom TreeWalker
 * implementation can hide parts of a DOM tree. This is useful in WebODF, where
 * special elements and attributes in the runtime DOM tree.
 */
/**
 * @constructor
 */
xmldom.RelaxNG2 = function RelaxNG2() {
    "use strict";
    var start,
        validateNonEmptyPattern,
        nsmap;

    /**
     * @constructor
     * @param {!string} error
     * @param {Node=} context
     */
    function RelaxNGParseError(error, context) {
        this.message = function () {
            if (context) {
                error += (context.nodeType === Node.ELEMENT_NODE) ? " Element " : " Node ";
                error += context.nodeName;
                if (context.nodeValue) {
                    error += " with value '" + context.nodeValue + "'";
                }
                error += ".";
            }
            return error;
        };
//        runtime.log("[" + p.slice(0, depth) + this.message() + "]");
    }
    /**
     * @param elementdef
     * @param walker
     * @param {Element} element
     * @return {Array.<RelaxNGParseError>}
     */
    function validateOneOrMore(elementdef, walker, element) {
        // The list of definitions in the elements list should be completely
        // traversed at least once. If a second or later round fails, the walker
        // should go back to the start of the last successful traversal
        var node, i = 0, err;
        do {
            node = walker.currentNode;
            err = validateNonEmptyPattern(elementdef.e[0], walker, element);
            i += 1;
        } while (!err && node !== walker.currentNode);
        if (i > 1) { // at least one round was without error
            // set position back to position of before last failed round
            walker.currentNode = node;
            return null;
        }
        return err;
    }
    /**
     * @param {!Node} node
     * @return {!string}
     */
    function qName(node) {
        return nsmap[node.namespaceURI] + ":" + node.localName;
    }
    /**
     * @param {!Node} node
     * @return {!boolean}
     */
    function isWhitespace(node) {
        return node && node.nodeType === Node.TEXT_NODE && /^\s+$/.test(node.nodeValue);
    }
    /**
     * @param elementdef
     * @param walker
     * @param {Element} element
     * @param {string=} data
     * @return {Array.<RelaxNGParseError>}
     */
    function validatePattern(elementdef, walker, element, data) {
        if (elementdef.name === "empty") {
            return null;
        }
        return validateNonEmptyPattern(elementdef, walker, element, data);
    }
    /**
     * @param elementdef
     * @param walker
     * @param {Element} element
     * @return {Array.<RelaxNGParseError>}
     */
    function validateAttribute(elementdef, walker, element) {
        if (elementdef.e.length !== 2) {
            throw "Attribute with wrong # of elements: " + elementdef.e.length;
        }
        var att, a, l = elementdef.localnames.length, i;
        for (i = 0; i < l; i += 1) {
            // with older browsers getAttributeNS for a non-existing attribute
            // can return an empty string still, so explicitly check before
            // if the attribute is set
            if (element.hasAttributeNS(elementdef.namespaces[i], elementdef.localnames[i])) {
                a = element.getAttributeNS(elementdef.namespaces[i], elementdef.localnames[i]);
            } else {
                a = undefined;
            }

            if (att !== undefined && a !== undefined) {
                return [new RelaxNGParseError("Attribute defined too often.",
                        element)];
            }
            att = a;
        }
        if (att === undefined) {
            return [new RelaxNGParseError("Attribute not found: " +
                    elementdef.names, element)];
        }
        return validatePattern(elementdef.e[1], walker, element, att);
    }
    /**
     * @param elementdef
     * @param walker
     * @param {Element} element
     * @return {Array.<RelaxNGParseError>}
     */
    function validateTop(elementdef, walker, element) {
        // notAllowed not implemented atm
        return validatePattern(elementdef, walker, element);
    }
    /**
     * Validate an element.
     * Function forwards the walker until an element is met.
     * If element if of the right type, it is entered and the validation
     * continues inside the element. After validation, regardless of whether an
     * error occurred, the walker is at the same depth in the dom tree.
     * @param elementdef
     * @param walker
     * @return {Array.<RelaxNGParseError>}
     */
    function validateElement(elementdef, walker) {
        if (elementdef.e.length !== 2) {
            throw "Element with wrong # of elements: " + elementdef.e.length;
        }
        // forward until an element is seen, then check the name
        var /**@type{Node}*/ node = walker.currentNode,
            /**@type{number}*/ type = node ? node.nodeType : 0,
            error = null;
        // find the next element, skip text nodes with only whitespace
        while (type > Node.ELEMENT_NODE) {
            if (type !== Node.COMMENT_NODE &&
                    (type !== Node.TEXT_NODE ||
                     !/^\s+$/.test(walker.currentNode.nodeValue))) {
                return [new RelaxNGParseError("Not allowed node of type " +
                        type + ".")];
            }
            node = walker.nextSibling();
            type = node ? node.nodeType : 0;
        }
        if (!node) {
            return [new RelaxNGParseError("Missing element " +
                    elementdef.names)];
        }
        if (elementdef.names && elementdef.names.indexOf(qName(node)) === -1) {
            return [new RelaxNGParseError("Found " + node.nodeName +
                    " instead of " + elementdef.names + ".", node)];
        }
        // the right element was found, now parse the contents
        if (walker.firstChild()) {
            // currentNode now points to the first child node of this element
            error = validateTop(elementdef.e[1], walker, node);
            // there should be no content left
            while (walker.nextSibling()) {
                type = walker.currentNode.nodeType;
                if (!isWhitespace(walker.currentNode) && type !== Node.COMMENT_NODE) {
                    return [new RelaxNGParseError("Spurious content.",
                            walker.currentNode)];
                }
            }
            if (walker.parentNode() !== node) {
                return [new RelaxNGParseError("Implementation error.")];
            }
        } else {
            error = validateTop(elementdef.e[1], walker, node);
        }
        // move to the next node
        node = walker.nextSibling();
        return error;
    }
    /**
     * @param elementdef
     * @param walker
     * @param {Element} element
     * @param {string=} data
     * @return {Array.<RelaxNGParseError>}
     */
    function validateChoice(elementdef, walker, element, data) {
        // loop through child definitions and return if a match is found
        if (elementdef.e.length !== 2) {
            throw "Choice with wrong # of options: " + elementdef.e.length;
        }
        var node = walker.currentNode, err;
        // if the first option is empty, just check the second one for debugging
        // but the total choice is alwasy ok
        if (elementdef.e[0].name === "empty") {
            err = validateNonEmptyPattern(elementdef.e[1], walker, element,
                    data);
            if (err) {
                walker.currentNode = node;
            }
            return null;
        }
        err = validatePattern(elementdef.e[0], walker, element, data);
        if (err) {
            walker.currentNode = node;
            err = validateNonEmptyPattern(elementdef.e[1], walker, element,
                    data);
        }
        return err;
    }
    /**
     * @param elementdef
     * @param walker
     * @param {Element} element
     * @return {Array.<RelaxNGParseError>}
     */
    function validateInterleave(elementdef, walker, element) {
        var l = elementdef.e.length, n = [l], err, i, todo = l,
            donethisround, node, subnode, e;
        // the interleave is done when all items are 'true' and no
        while (todo > 0) {
            donethisround = 0;
            node = walker.currentNode;
            for (i = 0; i < l; i += 1) {
                subnode = walker.currentNode;
                if (n[i] !== true && n[i] !== subnode) {
                    e = elementdef.e[i];
                    err = validateNonEmptyPattern(e, walker, element);
                    if (err) {
                        walker.currentNode = subnode;
                        if (n[i] === undefined) {
                            n[i] = false;
                        }
                    } else if (subnode === walker.currentNode ||
                            // this is a bit dodgy, there should be a rule to
                            // see if multiple elements are allowed
                            e.name === "oneOrMore" ||
                            (e.name === "choice" &&
                            (e.e[0].name === "oneOrMore" ||
                                    e.e[1].name === "oneOrMore"))) {
                        donethisround += 1;
                        n[i] = subnode; // no error and try this one again later
                    } else {
                        donethisround += 1;
                        n[i] = true; // no error and progress
                    }
                }
            }
            if (node === walker.currentNode && donethisround === todo) {
                return null;
            }
            if (donethisround === 0) {
                for (i = 0; i < l; i += 1) {
                    if (n[i] === false) {
                        return [new RelaxNGParseError(
                                "Interleave does not match.", element
                        )];
                    }
                }
                return null;
            }
            todo = 0;
            for (i = 0; i < l; i += 1) {
                if (n[i] !== true) {
                    todo += 1;
                }
            }
        }
        return null;
    }
    /**
     * @param elementdef
     * @param walker
     * @param {Element} element
     * @return {Array.<RelaxNGParseError>}
     */
    function validateGroup(elementdef, walker, element) {
        if (elementdef.e.length !== 2) {
            throw "Group with wrong # of members: " + elementdef.e.length;
        }
        //runtime.log(elementdef.e[0].name + " " + elementdef.e[1].name);
        return validateNonEmptyPattern(elementdef.e[0], walker, element) ||
            validateNonEmptyPattern(elementdef.e[1], walker, element);
    }
/*jslint unparam: true*/
    /**
     * @param elementdef
     * @param walker
     * @param {Element} element
     * @return {Array.<RelaxNGParseError>}
     */
    function validateText(elementdef, walker, element) {
        var /**@type{Node}*/ node = walker.currentNode,
            /**@type{number}*/ type = node ? node.nodeType : 0;
        // find the next element, skip text nodes with only whitespace
        while (node !== element && type !== 3) {
            if (type === 1) {
                return [new RelaxNGParseError(
                        "Element not allowed here.", node
                )];
            }
            node = walker.nextSibling();
            type = node ? node.nodeType : 0;
        }
        walker.nextSibling();
        return null;
    }
/*jslint unparam: false*/
    /**
     * @param elementdef
     * @param walker
     * @param {Element} element
     * @param {string=} data
     * @return {Array.<RelaxNGParseError>}
     */
    validateNonEmptyPattern = function validateNonEmptyPattern(elementdef,
                walker, element, data) {
        var name = elementdef.name, err = null;
        if (name === "text") {
            err = validateText(elementdef, walker, element);
        } else if (name === "data") {
            err = null; // data not implemented
        } else if (name === "value") {
            if (data !== elementdef.text) {
                err = [new RelaxNGParseError("Wrong value, should be '" +
                        elementdef.text + "', not '" + data + "'", element)];
            }
        } else if (name === "list") {
            err = null; // list not implemented
        } else if (name === "attribute") {
            err = validateAttribute(elementdef, walker, element);
        } else if (name === "element") {
            err = validateElement(elementdef, walker);
        } else if (name === "oneOrMore") {
            err = validateOneOrMore(elementdef, walker, element);
        } else if (name === "choice") {
            err = validateChoice(elementdef, walker, element, data);
        } else if (name === "group") {
            err = validateGroup(elementdef, walker, element);
        } else if (name === "interleave") {
            err = validateInterleave(elementdef, walker, element);
        } else {
            throw name + " not allowed in nonEmptyPattern.";
        }
        return err;
    };
    /**
     * Validate the elements pointed to by the TreeWalker
     * @param {!TreeWalker} walker
     * @param {!function(Array.<RelaxNGParseError>):undefined} callback
     * @return {undefined}
     */
    this.validate = function validate(walker, callback) {
        walker.currentNode = walker.root;
        var errors = validatePattern(start.e[0], walker,
                       /**@type{?Element}*/(walker.root));
        callback(errors);
    };
    this.init = function init(start1, nsmap1) {
        start = start1;
        nsmap = nsmap1;
    };
};

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\xmldom\RelaxNGParser.js
========================================================================

/**
 * Copyright (C) 2012 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global Node, runtime, xmldom*/

/**
 * @namespace
 */
xmldom.RNG = {};
/**
 * @typedef {!{e:!Array.<xmldom.RNG.Name>,name:string}}
 */
xmldom.RNG.Name;
/**
 * @typedef {!{ns:string, name:string}}
 */
xmldom.RNG.Attr;
/**
 * @typedef {!{
 *     id:    number,
 *     e:     (undefined|?|!Array.<xmldom.RNG.Element>),
 *     name:  string,
 *     names: (undefined|!Array.<string>),
 *     a:     (undefined|?|!xmldom.RNG.Attr),
 *     text:  string
 * }}
 */
xmldom.RNG.Element;

/**
 * RelaxNG can check a DOM tree against a Relax NG schema
 * The RelaxNG implementation is currently not complete. Relax NG should not
 * report errors on valid DOM trees, but it will not check all constraints that
 * a Relax NG file can define. The current implementation does not load external
 * parts of a Relax NG file.
 * The main purpose of this Relax NG engine is to validate runtime ODF
 * documents. The DOM tree is traversed via a TreeWalker. A custom TreeWalker
 * implementation can hide parts of a DOM tree. This is useful in WebODF, where
 * special elements and attributes in the runtime DOM tree.
 * @constructor
 */
xmldom.RelaxNGParser = function RelaxNGParser() {
    "use strict";
    var self = this,
        rngns = "http://relaxng.org/ns/structure/1.0",
        xmlnsns = "http://www.w3.org/2000/xmlns/",
        start,
        /**@type{!Object.<string,string>}*/
        nsmap = { "http://www.w3.org/XML/1998/namespace": "xml" },
        /**@type{function(...):?xmldom.RNG.Element}*/
        parse;

    /**
     * @constructor
     * @param {!string} error
     * @param {Node=} context
     */
    function RelaxNGParseError(error, context) {
        /**
         * return {!string}
         */
        this.message = function () {
            if (context) {
                error += (context.nodeType === 1) ? " Element " : " Node ";
                error += context.nodeName;
                if (context.nodeValue) {
                    error += " with value '" + context.nodeValue + "'";
                }
                error += ".";
            }
            return error;
        };
    }
    /**
     * @param {!xmldom.RNG.Name} e
     * @return {!xmldom.RNG.Name}
     */
    function splitToDuos(e) {
        if (e.e.length <= 2) {
            return e;
        }
        var o = { name: e.name, e: e.e.slice(0, 2) };
        return splitToDuos({
            name: e.name,
            e: [ o ].concat(e.e.slice(2))
        });
    }
    /**
     * @param {!string} name
     * @return {!Array.<string>}
     */
    function splitQName(name) {
        var r = name.split(":", 2),
            prefix = "",
            /**@type{string}*/
            i;
        if (r.length === 1) {
            r = ["", r[0]];
        } else {
            prefix = r[0];
        }
        for (i in nsmap) {
            if (nsmap[i] === prefix) {
                r[0] = i;
            }
        }
        return r;
    }

    /**
     * @param {!{names:!Array.<string>}} def
     * @return {undefined}
     */
    function splitQNames(def) {
        var i, l = (def.names) ? def.names.length : 0, name,
            localnames = [],
            namespaces = [];
        for (i = 0; i < l; i += 1) {
            name = splitQName(def.names[i]);
            namespaces[i] = name[0];
            localnames[i] = name[1];
        }
        def.localnames = localnames;
        def.namespaces = namespaces;
    }

    /**
     * @param {!string} str
     * @return {!string}
     */
    function trim(str) {
        str = str.replace(/^\s\s*/, '');
        var ws = /\s/,
            i = str.length - 1;
        while (ws.test(str.charAt(i))) {
            i -= 1;
        }
        return str.slice(0, i + 1);
    }

    /**
     * @param {?NamedNodeMap} atts
     * @param {!string} name
     * @param {!Array.<string>} names
     * @return {!Object.<string,string>}
     */
    function copyAttributes(atts, name, names) {
        var a = {}, i, att;
        for (i = 0; atts && i < atts.length; i += 1) {
            att = /**@type{!Attr}*/(atts.item(i));
            if (!att.namespaceURI) {
                if (att.localName === "name" &&
                        (name === "element" || name === "attribute")) {
                    names.push(att.value);
                }
                if (att.localName === "name" || att.localName === "combine" ||
                        att.localName === "type") {
                    att.value = trim(att.value);
                }
                a[att.localName] = att.value;
            } else if (att.namespaceURI === xmlnsns) {
                nsmap[att.value] = att.localName;
            }
        }
        return a;
    }

    /**
     * @param {?Node} c
     * @param {!Array.<*>} e
     * @param {!Array.<*>} elements
     * @param {!Array.<string>} names
     * @return {string}
     */
    function parseChildren(c, e, elements, names) {
        var text = "", ce;
        while (c) {
            if (c.nodeType === Node.ELEMENT_NODE && c.namespaceURI === rngns) {
                ce = parse(/**@type{!Element}*/(c), elements, e);
                if (ce) {
                    if (ce.name === "name") {
                        names.push(nsmap[ce.a.ns] + ":" + ce.text);
                        e.push(ce);
                    } else if (ce.name === "choice" && ce.names &&
                            ce.names.length) {
                        names = names.concat(ce.names);
                        delete ce.names;
                        e.push(ce);
                    } else {
                        e.push(ce);
                    }
                }
            } else if (c.nodeType === Node.TEXT_NODE) {
                text += c.nodeValue;
            }
            c = c.nextSibling;
        }
        return text;
    }

    /**
     * @param {*} combine
     * @param {string} name
     * @param {!xmldom.RNG.Element} e
     * @param {undefined|!Array.<!xmldom.RNG.Element>} siblings
     * @return {?xmldom.RNG.Element}
     */
    function combineDefines(combine, name, e, siblings) {
        // combineDefines is called often enough that there can only be one
        // other element with the same name
        var i, ce;
        for (i = 0; siblings && i < siblings.length; i += 1) {
            ce = siblings[i];
            if (ce.name === "define" && ce.a && ce.a.name === name) {
                ce.e = [ { name: combine, e: ce.e.concat(e) } ];
                return ce;
            }
        }
        return null;
    }

    /**
     * @param {!Element} element
     * @param {!Array.<*>} elements
     * @param {!Array.<*>|undefined} siblings
     * @return {?}
     */
    parse = function parse(element, elements, siblings) {
        // parse all elements from the Relax NG namespace into JavaScript
        // objects
        var e = [],
            /**@type{Object}*/
            a,
            ce,
            i,
            text,
            name = element.localName,
            names = [];
        a = copyAttributes(element.attributes, name, names);
        a.combine = a.combine || undefined;
        text = parseChildren(element.firstChild, e, elements, names);

        // 4.2 strip leading and trailing whitespace
        if (name !== "value" && name !== "param") {
            text = /^\s*([\s\S]*\S)?\s*$/.exec(text)[1];
        }
        // 4.3 datatypeLibrary attribute
        // 4.4 type attribute of value element
        if (name === "value" && a.type === undefined) {
            a.type = "token";
            a.datatypeLibrary = "";
        }
        // 4.5 href attribute
        // 4.6 externalRef element
        // 4.7 include element
        // 4.8 name attribute of element and attribute elements
        if ((name === "attribute" || name === "element") &&
                a.name !== undefined) {
            i = splitQName(a.name);
            e = [{name: "name", text: i[1], a: {ns: i[0]}}].concat(e);
            delete a.name;
        }
        // 4.9 ns attribute
        if (name === "name" || name === "nsName" || name === "value") {
            if (a.ns === undefined) {
                a.ns = ""; // TODO
            }
        } else {
            delete a.ns;
        }
        // 4.10 QNames
        if (name === "name") {
            i = splitQName(text);
            a.ns = i[0];
            text = i[1];
        }
        // 4.11 div element
        // 4.12 Number of child elements
        if (e.length > 1 && (name === "define" || name === "oneOrMore" ||
                name === "zeroOrMore" || name === "optional" ||
                name === "list" || name === "mixed")) {
            e = [{name: "group", e: splitToDuos({name: "group", e: e}).e}];
        }
        if (e.length > 2 && name === "element") {
            e = [e[0]].concat({
                name: "group",
                e: splitToDuos({
                    name: "group",
                    e: e.slice(1)
                }).e
            });
        }
        if (e.length === 1 && name === "attribute") {
            e.push({name: "text", text: text});
        }
        // if node has only one child, replace node with child
        if (e.length === 1 && (name === "choice" || name === "group" ||
                name === "interleave")) {
            name = e[0].name;
            names = e[0].names;
            a = e[0].a;
            text = e[0].text;
            e = e[0].e;
        } else if (e.length > 2 && (name === "choice" || name === "group" ||
                name === "interleave")) {
            e = splitToDuos({name: name, e: e}).e;
        }
        // 4.13 mixed element
        if (name === "mixed") {
            name = "interleave";
            e = [ e[0], { name: "text" } ];
        }
        // 4.14 optional element
        if (name === "optional") {
            name = "choice";
            e = [ e[0], { name: "empty" } ];
        }
        // 4.15 zeroOrMore element
        if (name === "zeroOrMore") {
            name = "choice";
            e = [ {name: "oneOrMore", e: [ e[0] ] }, { name: "empty" } ];
        }
        // 4.17 combine attribute
        if (name === "define" && a.combine) {
            ce = combineDefines(a.combine, a.name, e, siblings);
            if (ce) {
                return null;
            }
        }

        // create the definition
        ce = { name: name };
        if (e && e.length > 0) { ce.e = e; }
        for (i in a) {
            if (a.hasOwnProperty(i)) {
                ce.a = a;
                break;
            }
        }
        if (text !== undefined) { ce.text = text; }
        if (names && names.length > 0) { ce.names = names; }

        // part one of 4.19
        if (name === "element") {
            ce.id = elements.length;
            elements.push(ce);
            ce = { name: "elementref", id: ce.id };
        }
        return ce;
    };

    function resolveDefines(def, defines) {
        var i = 0, e, defs, end, name = def.name;
        while (def.e && i < def.e.length) {
            e = def.e[i];
            if (e.name === "ref") {
                defs = defines[e.a.name];
                if (!defs) {
                    throw e.a.name + " was not defined.";
                }
                end = def.e.slice(i + 1);
                def.e = def.e.slice(0, i);
                def.e = def.e.concat(defs.e);
                def.e = def.e.concat(end);
            } else {
                i += 1;
                resolveDefines(e, defines);
            }
        }
        e = def.e;
        // 4.20 notAllowed element
        // 4.21 empty element
        if (name === "choice") {
            if (!e || !e[1] || e[1].name === "empty") {
                if (!e || !e[0] || e[0].name === "empty") {
                    delete def.e;
                    def.name = "empty";
                } else {
                    e[1] = e[0];
                    e[0] = { name: "empty" };
                }
            }
        }
        if (name === "group" || name === "interleave") {
            if (e[0].name === "empty") {
                if (e[1].name === "empty") {
                    delete def.e;
                    def.name = "empty";
                } else {
                    name = def.name = e[1].name;
                    def.names = e[1].names;
                    e = def.e = e[1].e;
                }
            } else if (e[1].name === "empty") {
                name = def.name = e[0].name;
                def.names = e[0].names;
                e = def.e = e[0].e;
            }
        }
        if (name === "oneOrMore" && e[0].name === "empty") {
            delete def.e;
            def.name = "empty";
        }
        // for attributes we need to have the list of namespaces and
        // localnames readily available, so we split up the qnames
        if (name === "attribute") {
            splitQNames(def);
        }
        // for interleaving validation, it is convenient to join all
        // interleave elements that touch into one element
        if (name === "interleave") {
            // at this point the interleave will have two child elements,
            // but the child interleave elements may have a different number
            if (e[0].name === "interleave") {
                if (e[1].name === "interleave") {
                    e = def.e = e[0].e.concat(e[1].e);
                } else {
                    e = def.e = [e[1]].concat(e[0].e);
                }
            } else if (e[1].name === "interleave") {
                e = def.e = [e[0]].concat(e[1].e);
            }
        }
    }

    /**
     * @param {!xmldom.RNG.Element} def
     * @return {undefined}
     */
    function resolveElements(def, elements) {
        var i = 0, e;
        while (def.e && i < def.e.length) {
            e = def.e[i];
            if (e.name === "elementref") {
                e.id = e.id || 0;
                def.e[i] = elements[e.id];
            } else if (e.name !== "element") {
                resolveElements(e, elements);
            }
            i += 1;
        }
    }

    /**
     * @param {!Document} dom
     * @param {!Function} callback
     * @return {?Array.<!RelaxNGParseError>}
     */
    function main(dom, callback) {
        var elements = [],
            grammar = parse(dom && dom.documentElement, elements, undefined),
            i,
            e,
            defines = {};

        for (i = 0; i < grammar.e.length; i += 1) {
            e = grammar.e[i];
            if (e.name === "define") {
                defines[e.a.name] = e;
            } else if (e.name === "start") {
                start = e;
            }
        }
        if (!start) {
            return [new RelaxNGParseError(
                "No Relax NG start element was found."
            )];
        }
        resolveDefines(start, defines);
        for (i in defines) {
            if (defines.hasOwnProperty(i)) {
                resolveDefines(defines[i], defines);
            }
        }
        for (i = 0; i < elements.length; i += 1) {
            resolveDefines(elements[i], defines);
        }
        if (callback) {
            self.rootPattern = callback(start.e[0], elements);
        }
        resolveElements(start, elements);
        for (i = 0; i < elements.length; i += 1) {
            resolveElements(elements[i], elements);
        }
        self.start = start;
        self.elements = elements;
        self.nsmap = nsmap;
        return null;
    }
    /**
     * @param {!Document} dom
     * @param {!Function} callback
     * @return {?Array}
     */
    this.parseRelaxNGDOM = main;
};

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\vendor\webodf\lib\xmldom\XPath.js
========================================================================

/**
 * Copyright (C) 2012 KO GmbH <copyright@kogmbh.com>
 *
 * @licstart
 * This file is part of WebODF.
 *
 * WebODF is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License (GNU AGPL)
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * WebODF is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with WebODF.  If not, see <http://www.gnu.org/licenses/>.
 * @licend
 *
 * @source: http://www.webodf.org/
 * @source: https://github.com/kogmbh/WebODF/
 */

/*global Node, xmldom, XPathResult, runtime*/
/*jslint emptyblock: true*/

/**
 * Iterator over nodes uses in the xpath implementation
 * @class
 * @interface
 */
xmldom.XPathIterator = function XPathIterator() {"use strict"; };
/**
 * @return {?Node}
 */
xmldom.XPathIterator.prototype.next = function () {"use strict"; };
/**
 * @return {undefined}
 */
xmldom.XPathIterator.prototype.reset = function () {"use strict"; };
/*jslint emptyblock: false*/

/**
 * @typedef{{
    steps: !Array.<{
        predicates: !Array.<!xmldom.XPathAtom>,
        location:   string
    }>,
    value: *
}}*/
xmldom.XPathAtom;

/**
 * @return {!{getODFElementsWithXPath:function(!Element,!string,!function(string):?string):!Array.<!Element>}}
 */
function createXPathSingleton() {
    "use strict";
    var /**@type{function(!xmldom.XPathIterator,!xmldom.XPathAtom,!Function):!xmldom.XPathIterator}*/
        createXPathPathIterator,
        /**@type{function(string,number,!Array.<!xmldom.XPathAtom>):number}*/
        parsePredicates;
    /**
     * @param {!number} a
     * @param {!number} b
     * @param {!number} c
     * @return {!boolean}
     */
    function isSmallestPositive(a, b, c) {
        return a !== -1 && (a < b || b === -1) && (a < c || c === -1);
    }
    /**
     * Parse a subset of xpaths.
     * The xpath predicates may contain xpaths. The location may be equated to
     * a value. If a parsing error occurs, null is returned.
     * @param {!string} xpath
     * @param {!number} pos
     * @param {!number} end
     * @param {!Array} steps
     * @return {number}
     */
    function parseXPathStep(xpath, pos, end, steps) {
        var location = "",
            predicates = [],
            /**@type{number}*/
            brapos = xpath.indexOf('[', pos),
            /**@type{number}*/
            slapos = xpath.indexOf('/', pos),
            /**@type{number}*/
            eqpos = xpath.indexOf('=', pos);
        // parse the location
        if (isSmallestPositive(slapos, brapos, eqpos)) {
            location = xpath.substring(pos, slapos);
            pos = slapos + 1;
        } else if (isSmallestPositive(brapos, slapos, eqpos)) {
            location = xpath.substring(pos, brapos);
            pos = parsePredicates(xpath, brapos, predicates);
        } else if (isSmallestPositive(eqpos, slapos, brapos)) {
            location = xpath.substring(pos, eqpos);
            pos = eqpos;
        } else {
            location = xpath.substring(pos, end);
            pos = end;
        }
        steps.push({location: location, predicates: predicates});
        return pos;
    }
    /**
     * @param {string} xpath
     * @return {!xmldom.XPathAtom}
     */
    function parseXPath(xpath) {
        var /**@type{!Array.<{predicates: !Array.<!xmldom.XPathAtom>,location:string}>}*/
            steps = [],
            p = 0,
            end = xpath.length,
            value;
        while (p < end) {
            p = parseXPathStep(xpath, p, end, steps);
            if (p < end && xpath[p] === '=') {
                value = xpath.substring(p + 1, end);
                if (value.length > 2 &&
                        (value[0] === '\'' || value[0] === '"')) {
                    value = value.slice(1, value.length - 1);
                } else {
                    try {
                        value = parseInt(value, 10);
                    } catch (ignore) {
                    }
                }
                p = end;
            }
        }
        return {steps: steps, value: value};
    }
    /**
     * @param {string} xpath
     * @param {number} start
     * @param {!Array.<!xmldom.XPathAtom>} predicates
     * @return {number}
     */
    parsePredicates = function parsePredicates(xpath, start, predicates) {
        var pos = start,
            l = xpath.length,
            depth = 0;
        while (pos < l) {
            if (xpath[pos] === ']') {
                depth -= 1;
                if (depth <= 0) {
                    predicates.push(parseXPath(xpath.substring(start, pos)));
                }
            } else if (xpath[pos] === '[') {
                if (depth <= 0) {
                    start = pos + 1;
                }
                depth += 1;
            }
            pos += 1;
        }
        return pos;
    };
    /**
     * @class
     * @constructor
     * @augments xmldom.XPathIterator
     * @implements {xmldom.XPathIterator}
     */
    function XPathNodeIterator() {
        var /**@type{?Node}*/
            node = null,
            /**@type{boolean}*/
            done = false;
        /**
         * @param {?Node} n
         * @return {undefined}
         */
        this.setNode = function setNode(n) {
            node = n;
        };
        /**
         * @return {undefined}
         */
        this.reset = function () {
            done = false;
        };
        /**
         * @return {?Node}
         */
        this.next = function next() {
            var val = done ? null : node;
            done = true;
            return val;
        };
    }
    /**
     * @class
     * @constructor
     * @augments xmldom.XPathIterator
     * @implements {xmldom.XPathIterator}
     * @param {xmldom.XPathIterator} it
     * @param {!string} namespace
     * @param {!string} localName
     */
    function AttributeIterator(it, namespace, localName) {
        this.reset = function reset() {
            it.reset();
        };
        /**
         * @return {?Node}
         */
        this.next = function next() {
            var node = it.next();
            while (node) {
                if (node.nodeType === Node.ELEMENT_NODE) {
                    node = /**@type{!Element}*/(node).getAttributeNodeNS(
                        namespace,
                        localName
                    );
                }
                if (node) {
                    return node;
                }
                node = it.next();
            }
            return node;
        };
    }
    /**
     * @class
     * @constructor
     * @augments xmldom.XPathIterator
     * @implements {xmldom.XPathIterator}
     * @param {xmldom.XPathIterator} it
     * @param {boolean} recurse
     */
    function AllChildElementIterator(it, recurse) {
        var root = it.next(),
            node = null;
        this.reset = function reset() {
            it.reset();
            root = it.next();
            node = null;
        };
        this.next = function next() {
            while (root) {
                if (node) {
                    if (recurse && node.firstChild) {
                        node = node.firstChild;
                    } else {
                        while (!node.nextSibling && node !== root) {
                            node = node.parentNode;
                        }
                        if (node === root) {
                            root = it.next();
                        } else {
                            node = node.nextSibling;
                        }
                    }
                } else {
                    do {
//                        node = (recurse) ?root :root.firstChild;
                        node = root.firstChild;
                        if (!node) {
                            root = it.next();
                        }
                    } while (root && !node);
                }
                if (node && node.nodeType === Node.ELEMENT_NODE) {
                    return node;
                }
            }
            return null;
        };
    }
    /**
     * @class
     * @constructor
     * @augments xmldom.XPathIterator
     * @implements {xmldom.XPathIterator}
     * @param {xmldom.XPathIterator} it
     * @param {function(Node):boolean} condition
     */
    function ConditionIterator(it, condition) {
        this.reset = function reset() {
            it.reset();
        };
        this.next = function next() {
            var n = it.next();
            while (n && !condition(n)) {
                n = it.next();
            }
            return n;
        };
    }
    /**
     * @param {xmldom.XPathIterator} it
     * @param {string} name
     * @param {function(string):?string} namespaceResolver
     * @return {!ConditionIterator}
     */
    function createNodenameFilter(it, name, namespaceResolver) {
        var s = name.split(':', 2),
            namespace = namespaceResolver(s[0]),
            localName = s[1];
        return new ConditionIterator(it, function (node) {
            return node.localName === localName &&
                node.namespaceURI === namespace;
        });
    }
    /**
     * @param {xmldom.XPathIterator} it
     * @param {!xmldom.XPathAtom} p
     * @param {function(string):?string} namespaceResolver
     * @return {!ConditionIterator}
     */
    function createPredicateFilteredIterator(it, p, namespaceResolver) {
        var nit = new XPathNodeIterator(),
            pit = createXPathPathIterator(nit, p, namespaceResolver),
            value = p.value;
        if (value === undefined) {
            return new ConditionIterator(it, function (node) {
                nit.setNode(node);
                pit.reset();
                return pit.next() !== null;
            });
        }
        return new ConditionIterator(it, function (node) {
            nit.setNode(node);
            pit.reset();
            var n = pit.next();
            // todo: distinuish between number and string
            return n ? n.nodeValue === value : false;
        });
    }
    /**
     * @param {!Array.<!xmldom.XPathAtom>} p
     * @param {!number} i
     * @return {!xmldom.XPathAtom}
     */
    function item(p, i) {
        return p[i];
    }
    /**
     * @param {!xmldom.XPathIterator} it
     * @param {!xmldom.XPathAtom} xpath
     * @param {!function(string):?string} namespaceResolver
     * @return {!xmldom.XPathIterator}
     */
    createXPathPathIterator = function createXPathPathIterator(it, xpath,
                namespaceResolver) {
        var i, j, step, location, s, p, ns;
        for (i = 0; i < xpath.steps.length; i += 1) {
            step = xpath.steps[i];
            location = step.location;
            if (location === "") {
                it = new AllChildElementIterator(it, false);
            } else if (location[0] === '@') {
                s = location.substr(1).split(":", 2);
                ns = namespaceResolver(s[0]);
                if (!ns) {
                    throw "No namespace associated with the prefix " + s[0];
                }
                it = new AttributeIterator(it, ns, s[1]);
            } else if (location !== ".") {
                it = new AllChildElementIterator(it, false);
                if (location.indexOf(":") !== -1) {
                    it = createNodenameFilter(it, location, namespaceResolver);
                }
            }
            for (j = 0; j < step.predicates.length; j += 1) {
                p = item(step.predicates, j);
                it = createPredicateFilteredIterator(it, p, namespaceResolver);
            }
        }
        return it;
    };
    /**
     * @param {!Element} node
     * @param {!string} xpath
     * @param {!function(string):?string} namespaceResolver
     * @return {!Array.<Element>}
     */
    function fallback(node, xpath, namespaceResolver) {
        var it = new XPathNodeIterator(),
            i,
            nodelist,
            parsedXPath;
        it.setNode(node);
        parsedXPath = parseXPath(xpath);
        it = createXPathPathIterator(it, parsedXPath, namespaceResolver);
        nodelist = [];
        i = it.next();
        while (i) {
            nodelist.push(i);
            i = it.next();
        }
        return nodelist;
    }
    /**
     * @param {!Element} node
     * @param {!string} xpath
     * @param {!function(string):?string} namespaceResolver
     * @return {!Array.<!Element>}
     */
    function getODFElementsWithXPath(node, xpath, namespaceResolver) {
        var doc = node.ownerDocument,
            nodes,
            elements = [],
            n = null;
        if (!doc || typeof doc.evaluate !== 'function') {
            elements = fallback(node, xpath, namespaceResolver);
        } else {
            nodes = doc.evaluate(xpath, node, namespaceResolver,
                XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);
            n = nodes.iterateNext();
            while (n !== null) {
                if (n.nodeType === Node.ELEMENT_NODE) {
                    elements.push(n);
                }
                n = nodes.iterateNext();
            }
        }
        return elements;
    }
    return {
        getODFElementsWithXPath: getODFElementsWithXPath
    };
}
/**
 * Wrapper for XPath functions
 * @const
 * @type {!{getODFElementsWithXPath:function(!Element,!string,!function(string):?string):!Array.<!Element>}}
 */
xmldom.XPath = createXPathSingleton();

========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_achievements.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Erfolge & Abzeichen" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />
<c:set var="hasMasterAccess"
	value="${userPermissions.contains('ACCESS_ADMIN_PANEL')}" />

<h1>
	<i class="fas fa-award"></i> Erfolge & Abzeichen verwalten
</h1>
<p>Hier können Sie die Bedingungen und das Aussehen für Erfolge
	definieren, die Benutzer verdienen können.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if
		test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_CREATE')}">
		<button type="button" id="new-achievement-btn" class="btn btn-success"
			data-modal-target="achievement-modal">
			<i class="fas fa-plus"></i> Neuen Erfolg anlegen
		</button>
	</c:if>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th>Icon</th>
				<th>Name</th>
				<th>Programmatischer Key</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty achievements}">
				<tr>
					<td colspan="4" style="text-align: center;">Keine Erfolge
						definiert.</td>
				</tr>
			</c:if>
			<c:forEach var="ach" items="${achievements}">
				<tr>
					<td style="font-size: 1.5rem; text-align: center;"><i
						class="fas ${ach.iconClass}"></i></td>
					<td><c:out value="${ach.name}" /></td>
					<td><code>
							<c:out value="${ach.achievementKey}" />
						</code></td>
					<td><c:if
							test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_UPDATE')}">
							<button type="button"
								class="btn btn-small btn-secondary edit-achievement-btn"
								data-id="${ach.id}" data-modal-target="achievement-modal">
								<i class="fas fa-edit"></i> Bearbeiten
							</button>
						</c:if> <c:if
							test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_DELETE')}">
							<form
								action="${pageContext.request.contextPath}/admin/achievements"
								method="post" class="js-confirm-form" style="display: inline;"
								data-confirm-message="Erfolg '${fn:escapeXml(ach.name)}' wirklich löschen?">
								<input type="hidden" name="csrfToken"
									value="${sessionScope.csrfToken}"> <input type="hidden"
									name="action" value="delete"> <input type="hidden"
									name="id" value="${ach.id}">
								<button type="submit" class="btn btn-small btn-danger">
									<i class="fas fa-trash"></i> Löschen
								</button>
							</form>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list">
	<c:if test="${empty achievements}">
		<div class="card">
			<p>Keine Erfolge definiert.</p>
		</div>
	</c:if>
	<c:forEach var="ach" items="${achievements}">
		<div class="list-item-card">
			<h3 class="card-title">
				<i class="fas ${ach.iconClass}"></i>
				<c:out value="${ach.name}" />
			</h3>
			<div class="card-row">
				<span>Key:</span>
				<code>
					<c:out value="${ach.achievementKey}" />
				</code>
			</div>
			<div class="card-actions">
				<c:if
					test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_UPDATE')}">
					<button type="button"
						class="btn btn-small btn-secondary edit-achievement-btn"
						data-id="${ach.id}" data-modal-target="achievement-modal">
						<i class="fas fa-edit"></i> Bearbeiten
					</button>
				</c:if>
				<c:if
					test="${hasMasterAccess or userPermissions.contains('ACHIEVEMENT_DELETE')}">
					<form
						action="${pageContext.request.contextPath}/admin/achievements"
						method="post" class="js-confirm-form"
						data-confirm-message="Erfolg '${fn:escapeXml(ach.name)}' wirklich löschen?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="delete"> <input type="hidden"
							name="id" value="${ach.id}">
						<button type="submit" class="btn btn-small btn-danger">
							<i class="fas fa-trash"></i> Löschen
						</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Modal for Create/Edit Achievement -->
<div class="modal-overlay" id="achievement-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen"
			data-modal-close>×</button>
		<h3 id="achievement-modal-title">Erfolg verwalten</h3>
		<form id="achievement-modal-form"
			action="${pageContext.request.contextPath}/admin/achievements"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="achievement-modal-action"> <input
				type="hidden" name="id" id="achievement-modal-id"> <input
				type="hidden" name="achievement_key" id="achievement-key-hidden">

			<div class="form-group">
				<label for="name-modal">Name des Erfolgs</label> <input type="text"
					id="name-modal" name="name" required>
			</div>

			<div id="key-builder-group">
				<div class="form-group">
					<label for="key-type-select">Art des Erfolgs (Trigger)</label> <select
						id="key-type-select">
						<option value="">-- Bitte wählen --</option>
						<option value="EVENT_PARTICIPANT">Event-Teilnahme
							(Anzahl)</option>
						<option value="EVENT_LEADER">Event-Leitung (Anzahl)</option>
						<option value="QUALIFICATION">Qualifikation erhalten</option>
					</select>
				</div>
				<div id="key-number-group" class="key-subtype-group"
					style="display: none;">
					<div class="form-group">
						<label for="key-value-input">Erforderliche Anzahl</label> <input
							type="number" id="key-value-input" min="1" value="1"
							placeholder="z.B. 5 für 5 Teilnahmen">
					</div>
				</div>
				<div id="key-course-group" class="key-subtype-group"
					style="display: none;">
					<div class="form-group">
						<label for="key-course-select">Qualifikation</label> <select
							id="key-course-select">
							<option value="">-- Lehrgang wählen --</option>
							<c:forEach var="course" items="${allCourses}">
								<option value="${fn:replace(course.abbreviation, ' ', '_')}"><c:out
										value="${course.name}" /></option>
							</c:forEach>
						</select>
					</div>
				</div>
				<p>
					Generierter Key:
					<code id="generated-key-preview">--</code>
				</p>
			</div>

			<div class="form-group">
				<label for="icon-modal"> Icon-Klasse (Font Awesome) <a
					href="https://fontawesome.com/v5/search?m=free" target="_blank"
					title="Icons durchsuchen"> <i class="fas fa-external-link-alt"></i>
				</a>
				</label> <input type="text" id="icon-modal" name="icon_class"
					value="fa-award" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>

			<button type="submit" class="btn btn-success">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_achievements.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_course_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lehrgangs-Vorlagen" />
</c:import>

<h1>Lehrgangs-Vorlagen verwalten</h1>
<p>Dies sind die übergeordneten Lehrgänge. Einzelne Termine
	(Meetings) werden für jede Vorlage separat verwaltet.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" id="new-course-btn" class="btn btn-success"
		data-modal-target="course-modal">
		<i class="fas fa-plus"></i> Neue Vorlage
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Vorlagen filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name der Vorlage</th>
				<th class="sortable" data-sort-type="string">Abkürzung (für
					Matrix)</th>
				<th style="min-width: 350px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty courseList}">
				<tr>
					<td colspan="3" style="text-align: center;">Es wurden noch
						keine Lehrgangs-Vorlagen erstellt.</td>
				</tr>
			</c:if>
			<c:forEach var="course" items="${courseList}">
				<tr>
					<td><c:out value="${course.name}" /></td>
					<td><c:out value="${course.abbreviation}" /></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><a
						href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
						class="btn btn-small"> <i class="fas fa-calendar-day"></i>
							Meetings
					</a>
						<button type="button"
							class="btn btn-small btn-secondary edit-course-btn"
							data-id="${course.id}" data-modal-target="course-modal">
							<i class="fas fa-edit"></i> Bearbeiten
						</button>
						<form action="${pageContext.request.contextPath}/admin/lehrgaenge"
							method="post" class="js-confirm-form"
							data-confirm-message="Vorlage '${fn:escapeXml(course.name)}' wirklich löschen? Alle zugehörigen Meetings und Qualifikationen werden auch gelöscht!">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="id" value="${course.id}">
							<button type="submit" class="btn btn-small btn-danger">
								<i class="fas fa-trash"></i> Löschen
							</button>
						</form></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty courseList}">
		<div class="card">
			<p>Es wurden noch keine Lehrgangs-Vorlagen erstellt.</p>
		</div>
	</c:if>
	<c:forEach var="course" items="${courseList}">
		<div class="list-item-card">
			<h3 class="card-title">
				<c:out value="${course.name}" />
			</h3>
			<div class="card-row">
				<span>Abkürzung:</span> <strong><c:out
						value="${course.abbreviation}" /></strong>
			</div>
			<div class="card-actions">
				<a
					href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
					class="btn btn-small"> <i class="fas fa-calendar-day"></i>
					Meetings
				</a>
				<button type="button"
					class="btn btn-small btn-secondary edit-course-btn"
					data-id="${course.id}" data-modal-target="course-modal">
					<i class="fas fa-edit"></i> Bearbeiten
				</button>
				<form action="${pageContext.request.contextPath}/admin/lehrgaenge"
					method="post" class="js-confirm-form"
					data-confirm-message="Vorlage '${fn:escapeXml(course.name)}' wirklich löschen? Alle zugehörigen Meetings und Qualifikationen werden auch gelöscht!">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="delete"> <input type="hidden"
						name="id" value="${course.id}">
					<button type="submit" class="btn btn-small btn-danger">
						<i class="fas fa-trash"></i> Löschen
					</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>

<!-- MODAL FOR CREATE/EDIT COURSE -->
<div class="modal-overlay" id="course-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen"
			data-modal-close>×</button>
		<h3 id="course-modal-title">Lehrgangs-Vorlage</h3>
		<form id="course-modal-form"
			action="${pageContext.request.contextPath}/admin/lehrgaenge"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="course-modal-action"> <input type="hidden"
				name="id" id="course-modal-id">
			<div class="form-group">
				<label for="name-modal">Name der Vorlage</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="form-group">
				<label for="abbreviation-modal">Abkürzung (max. 10 Zeichen)</label>
				<input type="text" id="abbreviation-modal" name="abbreviation"
					maxlength="10" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Allgemeine Beschreibung</label>
				<textarea id="description-modal" name="description" rows="4"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Vorlage Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_course_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_dashboard.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Dashboard" />
</c:import>

<h1>
	Willkommen im Admin-Bereich,
	<c:out value="${sessionScope.user.username}" />
	!
</h1>
<p>Hier können Sie die Anwendung verwalten. Wählen Sie eine Option
	aus der Navigation oder nutzen Sie den Schnellzugriff.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid">
	<div class="card" id="widget-upcoming-events">
		<h2>
			<i class="fas fa-calendar-check"></i> Nächste Einsätze
		</h2>
		<p>Lade Daten...</p>
	</div>

	<div class="card" id="widget-low-stock">
		<h2>
			<i class="fas fa-battery-quarter"></i> Niedriger Lagerbestand
		</h2>
		<p>Lade Daten...</p>
	</div>

	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-exclamation-triangle text-danger"></i> Defekte
			Artikel
		</h2>
		<p>
			Es sind aktuell <strong><c:out
					value="${fn:length(defectiveItems)}" /></strong> Artikel als defekt
			gemeldet.
		</p>
		<a href="${pageContext.request.contextPath}/admin/defekte"
			class="btn btn-small" style="margin-top: 1rem;">Defekte anzeigen</a>
	</div>

	<div class="card" id="widget-recent-logs">
		<h2>
			<i class="fas fa-history"></i> Letzte Aktivitäten
		</h2>
		<p>Lade Daten...</p>
	</div>
</div>

<div class="card" style="margin-top: 2rem;">
	<h2 class="card-title">Event-Trend (Letzte 12 Monate)</h2>
	<div style="position: relative; height: 300px;">
		<canvas id="eventTrendChart"></canvas>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script
	src="${pageContext.request.contextPath}/js/admin/admin_dashboard.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_defect_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Defekte Artikel" />
</c:import>

<h1>
	<i class="fas fa-wrench"></i> Defekte Artikel verwalten
</h1>
<p>Hier sind alle Artikel gelistet, von denen mindestens ein
	Exemplar als defekt markiert wurde.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Defekt / Gesamt</th>
				<th>Grund</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty defectiveItems}">
				<tr>
					<td colspan="4" style="text-align: center;">Aktuell sind keine
						Artikel als defekt gemeldet.</td>
				</tr>
			</c:if>
			<c:forEach var="item" items="${defectiveItems}">
				<tr>
					<td><a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
								value="${item.name}" /></a></td>
					<td><c:out value="${item.defectiveQuantity}" /> / <c:out
							value="${item.quantity}" /></td>
					<td><c:out value="${item.defectReason}" /></td>
					<td>
						<button class="btn btn-small btn-warning defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-max-qty="${item.quantity}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}"
							data-modal-target="defect-modal">Status bearbeiten</button>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list">
	<c:if test="${empty defectiveItems}">
		<div class="card">
			<p>Aktuell sind keine Artikel als defekt gemeldet.</p>
		</div>
	</c:if>
	<c:forEach var="item" items="${defectiveItems}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
						value="${item.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Defekt / Gesamt:</span> <strong><c:out
						value="${item.defectiveQuantity}" /> / <c:out
						value="${item.quantity}" /></strong>
			</div>
			<div class="card-row"
				style="flex-direction: column; align-items: flex-start;">
				<span>Grund:</span>
				<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
					<c:out
						value="${not empty item.defectReason ? item.defectReason : 'Kein Grund angegeben.'}" />
				</p>
			</div>
			<div class="card-actions">
				<button class="btn btn-small btn-warning defect-modal-btn"
					data-item-id="${item.id}"
					data-item-name="${fn:escapeXml(item.name)}"
					data-max-qty="${item.quantity}"
					data-current-defect-qty="${item.defectiveQuantity}"
					data-current-reason="${fn:escapeXml(item.defectReason)}"
					data-modal-target="defect-modal">Status bearbeiten</button>
			</div>
		</div>
	</c:forEach>
</div>


<!-- Modal for updating defect status -->
<div class="modal-overlay" id="defect-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen"
			data-modal-close>×</button>
		<h3 id="defect-modal-title">Defekt-Status bearbeiten</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="updateDefect"> <input type="hidden"
				name="id" id="defect-item-id"> <input type="hidden"
				name="returnTo" value="defekte">
			<div class="form-group">
				<label for="defective_quantity">Anzahl defekter Artikel</label> <input
					type="number" name="defective_quantity" id="defective_quantity"
					min="0" required>
			</div>
			<div class="form-group">
				<label for="defect_reason">Grund (optional)</label>
				<textarea name="defect_reason" id="defect_reason" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_defect_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_editor.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Editor: ${file.filename}" />
	<c:param name="page" value="editor" />
</c:import>

<div id="editor-page-wrapper">
	<div id="editor-page-container" data-file-id="${file.id}">
		<div class="editor-header">
			<h1>
				<i class="fas fa-file-alt"></i>
				<c:out value="${file.filename}" />
			</h1>
			<div class="editor-controls">
				<c:if test="${editorMode eq 'edit'}">
					<div class="mode-switcher">
						<span>View</span> <label class="toggle-switch"> <input
							type="checkbox" id="mode-toggle" checked> <span
							class="slider"></span>
						</label> <span>Edit</span>
					</div>
				</c:if>
				<span id="save-status-indicator" class="status-badge"
					style="display: none;"></span>
			</div>
		</div>

		<c:import url="/WEB-INF/jspf/message_banner.jspf" />

		<div class="editor-container card">
			<textarea id="editor" name="content"
				style="display: ${editorMode eq 'edit' ? 'block' : 'none'};"
				<c:if test="${editorMode ne 'edit'}">readonly</c:if>>${fn:escapeXml(fileContent)}</textarea>
			<div id="markdown-preview" class="markdown-content"
				style="display: ${editorMode eq 'edit' ? 'none' : 'block'};">
			</div>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_editor.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_events_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Eventverwaltung" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />
<c:set var="hasMasterAccess"
	value="${userPermissions.contains('ACCESS_ADMIN_PANEL')}" />

<h1>
	<i class="fas fa-calendar-check"></i> Eventverwaltung
</h1>
<p>Hier können Sie Events erstellen, bearbeiten, Personal zuweisen
	und den Status verwalten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if
		test="${hasMasterAccess or userPermissions.contains('EVENT_CREATE')}">
		<button type="button" class="btn btn-success" id="new-event-btn">
			<i class="fas fa-plus"></i> Neues Event anlegen
		</button>
	</c:if>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter" placeholder="Events filtern..."
			aria-label="Tabelle filtern">
	</div>
</div>

<c:if test="${empty eventList}">
	<div class="card">
		<p>Keine Events gefunden.</p>
	</div>
</c:if>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th class="sortable" data-sort-type="string">Zeitraum</th>
				<th class="sortable" data-sort-type="string">Status</th>
				<th style="min-width: 450px;">Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="event" items="${eventList}">
				<c:set var="isLeader"
					value="${sessionScope.user.id == event.leaderUserId}" />
				<tr data-event-id="${event.id}">
					<td><a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
								value="${event.name}" /></a></td>
					<td><c:out value="${event.formattedEventDateTimeRange}" /></td>
					<td><span
						class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
								value="${event.status}" /></span></td>
					<td style="display: flex; gap: 5px; flex-wrap: wrap;"><c:if
							test="${hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader}">
							<button type="button" class="btn btn-small edit-event-btn"
								data-event-id="${event.id}">Bearbeiten</button>
						</c:if> <c:if
							test="${hasMasterAccess or userPermissions.contains('EVENT_MANAGE_ASSIGNMENTS') or isLeader}">
							<button type="button"
								class="btn btn-small btn-success assign-users-btn"
								data-event-id="${event.id}"
								data-event-name="${fn:escapeXml(event.name)}">Zuweisen</button>
						</c:if>
						<div class="event-status-actions">
							<c:if
								test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and (event.status == 'GEPLANT' || event.status == 'KOMPLETT')}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich starten? Der Chat wird aktiviert.">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="LAUFEND">
									<button type="submit" class="btn btn-small btn-warning">Starten</button>
								</form>
							</c:if>
							<c:if
								test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and event.status == 'LAUFEND'}">
								<form
									action="${pageContext.request.contextPath}/admin/veranstaltungen"
									method="post" style="display: inline;" class="js-confirm-form"
									data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich abschließen?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="updateStatus"><input
										type="hidden" name="id" value="${event.id}"><input
										type="hidden" name="newStatus" value="ABGESCHLOSSEN">
									<button type="submit" class="btn btn-small"
										style="background-color: var(--text-muted-color);">Abschließen</button>
								</form>
							</c:if>
						</div> <c:if
							test="${hasMasterAccess or userPermissions.contains('EVENT_DELETE')}">
							<form
								action="${pageContext.request.contextPath}/admin/veranstaltungen"
								method="post" class="inline-form js-confirm-form"
								data-confirm-message="Soll das Event '${fn:escapeXml(event.name)}' wirklich endgültig gelöscht werden?">
								<input type="hidden" name="csrfToken"
									value="${sessionScope.csrfToken}"> <input type="hidden"
									name="action" value="delete"><input type="hidden"
									name="id" value="${event.id}">
								<button type="submit" class="btn btn-small btn-danger">Löschen</button>
							</form>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="event" items="${eventList}">
		<c:set var="isLeader"
			value="${sessionScope.user.id == event.leaderUserId}" />
		<div class="list-item-card" data-event-id="${event.id}">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
						value="${event.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${event.formattedEventDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Status:</span> <span><span
					class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
							value="${event.status}" /></span></span>
			</div>
			<div class="card-actions">
				<c:if
					test="${hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader}">
					<button type="button" class="btn btn-small edit-event-btn"
						data-event-id="${event.id}">Bearbeiten</button>
				</c:if>
				<c:if
					test="${hasMasterAccess or userPermissions.contains('EVENT_MANAGE_ASSIGNMENTS') or isLeader}">
					<button type="button"
						class="btn btn-small btn-success assign-users-btn"
						data-event-id="${event.id}"
						data-event-name="${fn:escapeXml(event.name)}">Zuweisen</button>
				</c:if>
				<div class="event-status-actions">
					<c:if
						test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and (event.status == 'GEPLANT' || event.status == 'KOMPLETT')}">
						<form
							action="${pageContext.request.contextPath}/admin/veranstaltungen"
							method="post" style="display: inline;" class="js-confirm-form"
							data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich starten? Der Chat wird aktiviert.">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="updateStatus"><input type="hidden"
								name="id" value="${event.id}"><input type="hidden"
								name="newStatus" value="LAUFEND">
							<button type="submit" class="btn btn-small btn-warning">Starten</button>
						</form>
					</c:if>
					<c:if
						test="${(hasMasterAccess or userPermissions.contains('EVENT_UPDATE') or isLeader) and event.status == 'LAUFEND'}">
						<form
							action="${pageContext.request.contextPath}/admin/veranstaltungen"
							method="post" style="display: inline;" class="js-confirm-form"
							data-confirm-message="Event '${fn:escapeXml(event.name)}' wirklich abschließen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="updateStatus"><input type="hidden"
								name="id" value="${event.id}"><input type="hidden"
								name="newStatus" value="ABGESCHLOSSEN">
							<button type="submit" class="btn btn-small"
								style="background-color: var(--text-muted-color);">Abschließen</button>
						</form>
					</c:if>
				</div>
				<c:if
					test="${hasMasterAccess or userPermissions.contains('EVENT_DELETE')}">
					<form
						action="${pageContext.request.contextPath}/admin/veranstaltungen"
						method="post" class="inline-form js-confirm-form"
						data-confirm-message="Soll das Event '${fn:escapeXml(event.name)}' wirklich endgültig gelöscht werden?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="delete"><input type="hidden"
							name="id" value="${event.id}">
						<button type="submit" class="btn btn-small btn-danger">Löschen</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<jsp:include page="/WEB-INF/jspf/event_modals.jspf" />

<!-- Crew Finder Modal -->
<div class="modal-overlay" id="find-crew-modal">
	<div class="modal-content" style="max-width: 500px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="find-crew-modal-title">Crew Finder</h3>
		<p>Folgende Benutzer sind qualifiziert und verfügbar. Wählen Sie
			aus, wen Sie per Benachrichtigung einladen möchten.</p>
		<form id="find-crew-form"
			action="${pageContext.request.contextPath}/admin/veranstaltungen"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="inviteUsers"> <input type="hidden"
				name="eventId" id="find-crew-event-id">
			<div id="find-crew-list"
				style="max-height: 40vh; overflow-y: auto; border: 1px solid var(--border-color); border-radius: 6px; padding: 0.5rem; margin-bottom: 1rem;">
				<!-- User list will be populated by JS -->
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-paper-plane"></i> Ausgewählte einladen
			</button>
		</form>
	</div>
</div>

<script id="allCoursesData" type="application/json">${allCoursesJson}</script>
<script id="allItemsData" type="application/json">${allItemsJson}</script>
<script id="allKitsData" type="application/json">${allKitsJson}</script>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_events_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_feedback.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Feedback Board" />
</c:import>

<style>
.feedback-board {
	display: flex;
	gap: 1.5rem;
	overflow-x: auto;
	padding-bottom: 1rem;
}

.feedback-column {
	flex: 1 0 300px; /* Flex-grow, flex-shrink, flex-basis */
	min-width: 300px;
	background-color: var(--bg-color);
	border-radius: var(--border-radius);
	padding: 1rem;
}

.feedback-column h2 {
	font-size: 1.2rem;
	border-bottom: 2px solid var(--border-color);
	padding-bottom: 0.5rem;
	margin-bottom: 1rem;
}

.feedback-list {
	min-height: 100px;
	display: flex;
	flex-direction: column;
	gap: 1rem;
}

.feedback-card-item {
	background-color: var(--surface-color);
	border: 1px solid var(--border-color);
	border-radius: 6px;
	padding: 1rem;
	box-shadow: var(--shadow-sm);
	cursor: pointer;
}

.feedback-card-item:active {
	cursor: grabbing;
}

.feedback-card-item .subject {
	font-weight: 600;
	margin-bottom: 0.5rem;
	display: block;
}

.feedback-card-item .content-preview {
	font-size: 0.9rem;
	color: var(--text-muted-color);
	margin-bottom: 0.75rem;
	display: -webkit-box;
	-webkit-line-clamp: 2;
	-webkit-box-orient: vertical;
	overflow: hidden;
	text-overflow: ellipsis;
}

.feedback-card-item .meta {
	font-size: 0.8rem;
	color: var(--text-muted-color);
}

.sortable-ghost {
	opacity: 0.4;
	background: var(--primary-color-light);
}
</style>

<h1>
	<i class="fas fa-columns"></i> Feedback Board
</h1>
<p>Verwalten Sie hier alle eingereichten Feedbacks. Sie können die
	Karten per Drag & Drop zwischen den Spalten verschieben, um den Status
	zu ändern.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="feedback-board">
	<c:forEach var="status" items="${feedbackStatusOrder}">
		<c:if test="${status ne 'NEW' or not empty groupedSubmissions['NEW']}">
			<div class="feedback-column">
				<h2>${status}</h2>
				<div class="feedback-list" data-status-id="${status}">
					<c:forEach var="submission" items="${groupedSubmissions[status]}">
						<div class="feedback-card-item" data-id="${submission.id}">
							<strong class="subject">${fn:escapeXml(not empty submission.displayTitle ? submission.displayTitle : submission.subject)}</strong>
							<p class="content-preview">${fn:escapeXml(submission.content)}</p>
							<p class="meta">
								Von: <strong>${fn:escapeXml(submission.username)}</strong> am
								${submission.formattedSubmittedAt}
							</p>
						</div>
					</c:forEach>
				</div>
			</div>
		</c:if>
	</c:forEach>
</div>

<!-- Modal for Feedback Details -->
<div class="modal-overlay" id="feedback-details-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="feedback-modal-title">Feedback Details</h3>
		<form id="feedback-details-form">
			<input type="hidden" name="submissionId" id="feedback-modal-id">
			<div class="form-group">
				<label>Originaltitel</label>
				<p id="feedback-modal-original-subject" style="font-weight: bold;"></p>
			</div>
			<div class="form-group">
				<label for="feedback-modal-display-title">Anzeigetitel
					(optional, für Admins)</label> <input type="text"
					id="feedback-modal-display-title" name="displayTitle">
			</div>
			<div class="form-group">
				<label>Inhalt</label>
				<div id="feedback-modal-content" class="markdown-content"
					style="white-space: pre-wrap; background-color: var(--bg-color); padding: 1rem; border-radius: var(--border-radius);"></div>
			</div>
			<div class="form-group">
				<label for="feedback-modal-status">Status</label> <select
					name="status" id="feedback-modal-status">
					<c:forEach var="status" items="${feedbackStatusOrder}">
						<option value="${status}">${status}</option>
					</c:forEach>
				</select>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-save"></i> Änderungen speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/webjars/sortablejs/1.15.2/Sortable.min.js"></script>
<script
	src="${pageContext.request.contextPath}/js/admin/admin_feedback.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_files.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Datei- & Kategorienverwaltung" />
</c:import>

<h1>
	<i class="fas fa-folder-open"></i> Datei- & Kategorienverwaltung
</h1>
<p>Verwalten Sie hier alle hochgeladenen Dateien und deren
	Kategorien.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="file-manager-layout">

	<div class="card">
		<h2>Aktionen</h2>
		<form
			action="${pageContext.request.contextPath}/admin/dateien/kategorien/erstellen"
			method="post" style="margin-bottom: 2rem;">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}">
			<div class="form-group">
				<label for="newCategoryName">Neue Kategorie erstellen</label> <input
					type="text" name="categoryName" id="newCategoryName" required>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-plus"></i> Erstellen
			</button>
		</form>

		<hr>

		<h3 style="margin-top: 1.5rem;">Neue Datei hochladen</h3>
		<form action="${pageContext.request.contextPath}/admin/uploadFile"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="create">
			<div class="form-group">
				<label for="file">Datei auswählen</label> <input type="file"
					name="file" id="file" class="file-input" data-max-size="20971520"
					required> <small class="file-size-warning">Datei
					ist zu groß! (Max. 20 MB)</small>
			</div>
			<div class="form-group">
				<label for="categoryId">In Kategorie</label> <select
					name="categoryId" id="categoryId" required>
					<option value="">-- Bitte wählen --</option>
					<c:forEach var="cat" items="${allCategories}">
						<option value="${cat.id}"><c:out value="${cat.name}" /></option>
					</c:forEach>
				</select>
			</div>
			<div class="form-group">
				<label for="requiredRole">Sichtbar für</label> <select
					name="requiredRole" id="requiredRole">
					<option value="NUTZER" selected>Alle zugeordneten Nutzer</option>
					<option value="ADMIN">Nur Admins</option>
				</select>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-cloud-upload-alt"></i> Hochladen
			</button>
		</form>
	</div>

	<div class="card">
		<h2>Vorhandene Dateien nach Kategorie</h2>
		<c:if test="${empty groupedFiles}">
			<p>Es sind keine Kategorien oder Dateien vorhanden.</p>
		</c:if>

		<c:forEach var="categoryEntry" items="${groupedFiles}">
			<div class="category-group" style="margin-bottom: 2rem;">
				<div
					style="display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid var(--border-color); padding-bottom: 0.5rem;">
					<h3>
						<i class="fas fa-folder"></i>
						<c:out value="${categoryEntry.key}" />
					</h3>
					<c:if test="${categoryEntry.key != 'Ohne Kategorie'}">
						<form
							action="${pageContext.request.contextPath}/admin/dateien/kategorien/loeschen"
							method="post" class="js-confirm-form"
							data-confirm-message="Kategorie '${fn:escapeXml(categoryEntry.key)}' wirklich löschen? Alle Dateien in dieser Kategorie werden der Gruppe 'Ohne Kategorie' zugeordnet.">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="categoryId" value="${categoryEntry.value[0].categoryId}">
							<button type="submit" class="btn btn-small btn-danger-outline"
								title="Kategorie löschen">
								<i class="fas fa-trash"></i>
							</button>
						</form>
					</c:if>
				</div>
				<ul class="file-list">
					<c:if test="${empty categoryEntry.value}">
						<li style="justify-content: center;">Keine Dateien in dieser
							Kategorie.</li>
					</c:if>
					<c:forEach var="file" items="${categoryEntry.value}">
						<li>
							<div class="file-info">
								<a href="<c:url value='/download?id=${file.id}'/>"
									title="Datei herunterladen"> <i class="fas fa-download"></i>
									<c:out value="${file.filename}" />
								</a> <small class="file-meta">Sichtbar für: <c:out
										value="${file.requiredRole}" /></small>
							</div>
							<div class="file-actions"
								style="display: flex; gap: 0.5rem; align-items: center;">
								<button type="button"
									class="btn btn-small btn-info reassign-file-btn"
									data-file-id="${file.id}"
									data-file-name="${fn:escapeXml(file.filename)}">
									<i class="fas fa-random"></i>
								</button>
								<button type="button"
									class="btn btn-small btn-secondary upload-new-version-btn"
									data-file-id="${file.id}"
									data-file-name="${fn:escapeXml(file.filename)}">
									<i class="fas fa-upload"></i>
								</button>
								<form
									action="${pageContext.request.contextPath}/admin/uploadFile"
									method="post" class="js-confirm-form"
									data-confirm-message="Datei '${fn:escapeXml(file.filename)}' wirklich löschen?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="action" value="delete"> <input
										type="hidden" name="fileId" value="${file.id}">
									<button type="submit" class="btn btn-small btn-danger-outline"
										title="Löschen">
										<i class="fas fa-trash-alt"></i>
									</button>
								</form>
							</div>
						</li>
					</c:forEach>
				</ul>
			</div>
		</c:forEach>
	</div>
</div>

<!-- Modal for reassigning a file -->
<div class="modal-overlay" id="reassign-file-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="reassign-modal-title">Datei neu zuordnen</h3>
		<form action="${pageContext.request.contextPath}/admin/uploadFile"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="reassign"> <input type="hidden"
				name="fileId" id="reassign-file-id">
			<p>
				Wählen Sie die neue Kategorie für die Datei <strong
					id="reassign-file-name"></strong>.
			</p>
			<div class="form-group">
				<label for="newCategoryId">Neue Kategorie</label> <select
					name="newCategoryId" id="newCategoryId" required>
					<c:forEach var="cat" items="${allCategories}">
						<option value="${cat.id}">${cat.name}</option>
					</c:forEach>
				</select>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-save"></i> Neu zuordnen
			</button>
		</form>
	</div>
</div>

<!-- Modal for uploading a new version -->
<div class="modal-overlay" id="upload-version-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="upload-modal-title">Neue Version hochladen</h3>
		<form id="upload-version-form"
			action="${pageContext.request.contextPath}/admin/uploadFile"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="update"> <input type="hidden"
				name="fileId" id="upload-file-id">
			<p>
				Sie sind dabei, eine neue Version für die Datei <strong
					id="upload-file-name"></strong> hochzuladen. Die alte Version wird
				dabei überschrieben.
			</p>
			<div class="form-group">
				<label for="new-file-version">Neue Datei auswählen (muss
					denselben Dateityp haben)</label> <input type="file" name="file"
					id="new-file-version" class="file-input" data-max-size="20971520"
					required> <small class="file-size-warning">Datei
					ist zu groß! (Max. 20 MB)</small>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-cloud-upload-alt"></i> Jetzt hochladen
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_files.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_kits.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Kit-Verwaltung" />
</c:import>

<h1>
	<i class="fas fa-box-open"></i> Kit-Verwaltung
</h1>
<p>Verwalten Sie hier wiederverwendbare Material-Zusammenstellungen
	(Kits oder Koffer).</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-kit-btn"
		data-modal-target="kit-modal">
		<i class="fas fa-plus"></i> Neues Kit anlegen
	</button>
</div>

<div class="card">
	<c:if test="${empty kits}">
		<p>Es wurden noch keine Kits erstellt.</p>
	</c:if>
	<c:forEach var="kit" items="${kits}">
		<div class="kit-container"
			style="border-bottom: 1px solid var(--border-color); padding-bottom: 1.5rem; margin-bottom: 1.5rem;">
			<div class="kit-header">
				<div>
					<h3>
						<i class="fas fa-chevron-down toggle-icon"></i>
						<c:out value="${kit.name}" />
					</h3>
					<p
						style="margin: -0.5rem 0 0 1.75rem; color: var(--text-muted-color);">
						<c:out value="${kit.description}" />
					</p>
				</div>
				<div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
					<c:set var="absoluteActionUrl"
						value="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/pack-kit?kitId=${kit.id}" />
					<c:set var="qrApiUrl"
						value="https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${fn:escapeXml(absoluteActionUrl)}" />
					<a href="${qrApiUrl}" target="_blank" class="btn btn-small">QR-Code</a>

					<button type="button"
						class="btn btn-small btn-secondary edit-kit-btn"
						data-kit-id="${kit.id}" data-kit-name="${fn:escapeXml(kit.name)}"
						data-kit-desc="${fn:escapeXml(kit.description)}"
						data-kit-location="${fn:escapeXml(kit.location)}"
						data-modal-target="kit-modal">Bearbeiten</button>
					<form action="${pageContext.request.contextPath}/admin/kits"
						method="post" class="js-confirm-form"
						data-confirm-message="Kit '${fn:escapeXml(kit.name)}' wirklich löschen?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="delete"> <input type="hidden"
							name="id" value="${kit.id}">
						<button type="submit" class="btn btn-small btn-danger">Löschen</button>
					</form>
				</div>
			</div>
			<div class="kit-content"
				style="display: none; padding-left: 2rem; margin-top: 1rem;">

				<form action="${pageContext.request.contextPath}/admin/kits"
					method="post">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="updateKitItems"> <input type="hidden"
						name="kitId" value="${kit.id}">

					<h4>Inhalt bearbeiten</h4>
					<div id="kit-items-container-${kit.id}" class="kit-items-container">
						<c:if test="${empty kit.items}">
							<p class="no-items-message">Dieses Kit ist leer. Fügen Sie
								einen Artikel hinzu.</p>
						</c:if>
						<c:forEach var="item" items="${kit.items}">
							<div class="dynamic-row">
								<select name="itemIds" class="form-group">
									<c:forEach var="storageItem" items="${allItems}">
										<option value="${storageItem.id}"
											${storageItem.id == item.itemId ? 'selected' : ''}>
											<c:out value="${storageItem.name}" />
										</option>
									</c:forEach>
								</select> <input type="number" name="quantities" value="${item.quantity}"
									min="1" class="form-group" style="max-width: 100px;">
								<button type="button"
									class="btn btn-small btn-danger btn-remove-kit-item-row"
									title="Zeile entfernen">×</button>
							</div>
						</c:forEach>
					</div>

					<div
						style="margin-top: 1rem; display: flex; justify-content: space-between; align-items: center;">
						<button type="button" class="btn btn-small btn-add-kit-item-row"
							data-container-id="kit-items-container-${kit.id}">
							<i class="fas fa-plus"></i> Zeile hinzufügen
						</button>
						<button type="submit" class="btn btn-success">
							<i class="fas fa-save"></i> Kit-Inhalt speichern
						</button>
					</div>
				</form>

			</div>
		</div>
	</c:forEach>
</div>

<!-- Modal for Create/Edit Kit -->
<div class="modal-overlay" id="kit-modal">
	<div class="modal-content">
		<button class="modal-close-btn" type="button" aria-label="Schließen"
			data-modal-close>×</button>
		<h3>Kit verwalten</h3>
		<form action="${pageContext.request.contextPath}/admin/kits"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value=""> <input type="hidden" name="id"
				value="">
			<div class="form-group">
				<label for="name-modal">Name des Kits</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>
			<div class="form-group">
				<label for="location-modal">Physischer Standort des Kits</label> <input
					type="text" id="location-modal" name="location"
					placeholder="z.B. Lager, Schrank 3, Fach A">
			</div>
			<button type="submit" class="btn">Speichern</button>
		</form>
	</div>
</div>

<script id="allItemsData" type="application/json">
    ${allItemsJson}
</script>
<script id="allSelectableItemsData" type="application/json">
    ${allItemsJson}
</script>


<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_kits.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_log.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Admin Log" />
</c:import>

<h1>Admin Aktions-Protokoll</h1>

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Nach Details, Name oder Aktion filtern..."
			style="width: 100%;" aria-label="Protokoll filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table searchable-table">
		<thead>
			<tr>
				<th>Wann</th>
				<th>Wer</th>
				<th>Aktionstyp</th>
				<th>Details</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="log" items="${logs}">
				<tr>
					<td><c:out value="${log.formattedActionTimestamp}" /> Uhr</td>
					<td><c:out value="${log.adminUsername}" /></td>
					<td><c:out value="${log.actionType}" /></td>
					<td style="white-space: normal;"><c:out value="${log.details}" /></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty logs}">
		<div class="card">
			<p>Keine Log-Einträge gefunden.</p>
		</div>
	</c:if>
	<c:forEach var="log" items="${logs}">
		<div class="list-item-card">
			<h3 class="card-title" style="word-break: break-all;">
				<c:out value="${log.actionType}" />
			</h3>
			<div class="card-row">
				<span>Wer:</span> <strong><c:out
						value="${log.adminUsername}" /></strong>
			</div>
			<div class="card-row">
				<span>Wann:</span> <strong><c:out
						value="${log.formattedActionTimestamp}" /> Uhr</strong>
			</div>
			<div class="card-row"
				style="flex-direction: column; align-items: flex-start;">
				<span style="font-weight: 500;">Details:</span>
				<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
					<c:out value="${log.details}" />
				</p>
			</div>
		</div>
	</c:forEach>
</div>


<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_matrix.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Qualifikations-Matrix" />
</c:import>

<h1>
	<i class="fas fa-th-list"></i> Qualifikations-Matrix
</h1>
<p>Klicken Sie auf eine Zelle, um die Teilnahme an einem Meeting zu
	bearbeiten. Die Kopfzeile und die Benutzerleiste bleiben beim Scrollen
	fixiert.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="horizontal-scroll-hint">
	<i class="fas fa-arrows-alt-h"></i> Tabelle ist seitlich scrollbar
</div>

<div class="table-wrapper">
	<table class="data-table">
		<thead>
			<tr>
				<th rowspan="2" class="sticky-header sticky-col"
					style="vertical-align: middle; left: 0; z-index: 15;">Nutzer /
					Lehrgang ↓</th>
				<c:forEach var="course" items="${allCourses}">
					<th colspan="${fn:length(meetingsByCourse[course.id])}"
						class="sticky-header" style="text-align: center;"><a
						href="${pageContext.request.contextPath}/admin/lehrgaenge"
						title="Vorlagen verwalten">${course.abbreviation}</a></th>
				</c:forEach>
			</tr>
			<tr>
				<c:forEach var="course" items="${allCourses}">
					<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
						<th class="sticky-header"
							style="text-align: center; min-width: 120px;"><a
							href="${pageContext.request.contextPath}/admin/meetings?courseId=${course.id}"
							title="Meetings für '${course.name}' verwalten">${meeting.name}</a>
						</th>
					</c:forEach>
				</c:forEach>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="user" items="${allUsers}">
				<tr>
					<td class="sticky-col" style="font-weight: 500; left: 0;"><a
						href="${pageContext.request.contextPath}/admin/mitglieder?action=details&id=${user.id}">${user.username}</a>
					</td>
					<c:forEach var="course" items="${allCourses}">
						<c:forEach var="meeting" items="${meetingsByCourse[course.id]}">
							<c:set var="attendanceKey" value="${user.id}-${meeting.id}" />
							<c:set var="attendance" value="${attendanceMap[attendanceKey]}" />
							<td class="qual-cell" data-user-id="${user.id}"
								data-user-name="${user.username}"
								data-meeting-id="${meeting.id}"
								data-meeting-name="${course.name} - ${meeting.name}"
								data-attended="${not empty attendance && attendance.attended}"
								data-remarks="${not empty attendance ? attendance.remarks : ''}"
								style="text-align: center; font-weight: bold; cursor: pointer;"
								title="Klicken zum Bearbeiten"><c:choose>
									<c:when test="${not empty attendance && attendance.attended}">
										<span style="font-size: 1.2rem;">✔</span>
									</c:when>
									<c:otherwise>
										<span class="text-muted">-</span>
									</c:otherwise>
								</c:choose></td>
						</c:forEach>
					</c:forEach>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Attendance Modal -->
<div class="modal-overlay" id="attendance-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3>Teilnahme bearbeiten</h3>
		<p id="modal-title" style="font-weight: bold; margin-bottom: 1rem;"></p>
		<form action="${pageContext.request.contextPath}/admin/teilnahme"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="returnTo" value="matrix"> <input type="hidden"
				name="userId" id="modal-user-id"> <input type="hidden"
				name="meetingId" id="modal-meeting-id">
			<div class="form-group"
				style="display: flex; align-items: center; gap: 1rem;">
				<label for="modal-attended" style="margin-bottom: 0;">Teilgenommen:</label>
				<input type="checkbox" id="modal-attended" name="attended"
					value="true" style="width: auto; height: 1.5rem;">
			</div>
			<div class="form-group">
				<label for="modal-remarks">Bemerkungen:</label>
				<textarea name="remarks" id="modal-remarks" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_matrix.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_meeting_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Meetings für ${parentCourse.name}" />
</c:import>

<h1>
	Meetings für "
	<c:out value="${parentCourse.name}" />
	"
</h1>
<a href="${pageContext.request.contextPath}/admin/lehrgaenge"
	style="margin-bottom: 1rem; display: inline-block;"> <i
	class="fas fa-arrow-left"></i> Zurück zu allen Vorlagen
</a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-meeting-btn">
		<i class="fas fa-plus"></i> Neues Meeting planen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Meetings filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<c:if test="${empty meetings}">
	<div class="card">
		<p>Für diesen Lehrgang wurden noch keine Meetings geplant.</p>
	</div>
</c:if>

<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Meeting-Name</th>
				<th class="sortable" data-sort-type="string">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Leitung</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="meeting" items="${meetings}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
								value="${meeting.name}" /></a></td>
					<td><c:out value="${meeting.formattedMeetingDateTimeRange}" /></td>
					<td><c:out
							value="${empty meeting.leaderUsername ? 'N/A' : meeting.leaderUsername}" /></td>
					<td style="display: flex; gap: 0.5rem;">
						<button type="button" class="btn btn-small edit-meeting-btn"
							data-meeting-id="${meeting.id}">Bearbeiten & Anhänge</button>
						<form action="${pageContext.request.contextPath}/admin/meetings"
							method="post" class="inline-form js-confirm-form"
							data-confirm-message="Meeting '${fn:escapeXml(meeting.name)}' wirklich löschen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="courseId" value="${parentCourse.id}"> <input
								type="hidden" name="meetingId" value="${meeting.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="meeting" items="${meetings}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
						value="${meeting.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${meeting.formattedMeetingDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Leitung:</span> <strong><c:out
						value="${empty meeting.leaderUsername ? 'N/A' : meeting.leaderUsername}" /></strong>
			</div>
			<div class="card-actions">
				<button type="button" class="btn btn-small edit-meeting-btn"
					data-meeting-id="${meeting.id}">Bearbeiten & Anhänge</button>
				<form action="${pageContext.request.contextPath}/admin/meetings"
					method="post" class="inline-form js-confirm-form"
					data-confirm-message="Meeting '${fn:escapeXml(meeting.name)}' wirklich löschen?">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="delete"> <input type="hidden"
						name="courseId" value="${parentCourse.id}"> <input
						type="hidden" name="meetingId" value="${meeting.id}">
					<button type="submit" class="btn btn-small btn-danger">Löschen</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>


<!-- Modal for creating/editing a meeting -->
<div class="modal-overlay" id="meeting-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="meeting-modal-title">Meeting</h3>
		<form id="meeting-modal-form"
			action="${pageContext.request.contextPath}/admin/meetings"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="meeting-action"> <input type="hidden"
				name="courseId" value="${parentCourse.id}"> <input
				type="hidden" name="id" id="meeting-id">
			<div class="form-group">
				<label for="name-modal">Name des Meetings</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="meetingDateTime-modal">Beginn</label> <input
						type="datetime-local" id="meetingDateTime-modal"
						name="meetingDateTime" required>
				</div>
				<div class="form-group">
					<label for="endDateTime-modal">Ende (optional)</label> <input
						type="datetime-local" id="endDateTime-modal" name="endDateTime">
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="location-modal">Ort</label><input type="text"
						id="location-modal" name="location">
				</div>
				<div class="form-group">
					<label for="leader-modal">Leitende Person</label> <select
						name="leaderUserId" id="leader-modal">
						<option value="">(Keine)</option>
						<c:forEach var="user" items="${allUsers}">
							<option value="${user.id}"><c:out
									value="${user.username}" /></option>
						</c:forEach>
					</select>
				</div>
			</div>
			<div class="form-group">
				<label for="description-modal">Beschreibung</label>
				<textarea id="description-modal" name="description" rows="3"></textarea>
			</div>
			<div class="card"
				style="margin-top: 1rem; padding: 1rem; background-color: var(--bg-color);">
				<h4 class="card-title" style="border: none; padding: 0;">Anhänge</h4>
				<ul id="modal-attachments-list" class="details-list"
					style="margin-bottom: 1rem;"></ul>
				<div class="form-group">
					<label for="attachment-modal">Neuen Anhang hochladen</label> <input
						type="file" name="attachment" id="attachment-modal"
						class="file-input" data-max-size="20971520"> <small
						class="file-size-warning" style="color: red; display: none;">Datei
						ist zu groß! (Max. 20 MB)</small>
				</div>
				<div class="form-group">
					<label for="requiredRole-modal">Sichtbar für</label> <select
						name="requiredRole" id="requiredRole-modal">
						<option value="NUTZER" selected>Alle Nutzer</option>
						<option value="ADMIN">Nur Admins</option>
					</select>
				</div>
			</div>
			<button type="submit" class="btn" style="margin-top: 1.5rem;">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_meeting_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_reports.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Berichte & Analysen" />
</c:import>

<h1>
	<i class="fas fa-chart-pie"></i> Berichte & Analysen
</h1>
<p>Hier finden Sie zusammengefasste Daten und Analysen über die
	Anwendungsnutzung.</p>

<div class="dashboard-grid">
	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Event-Trend (Letzte 12 Monate)</h2>
		<div style="position: relative; height: 300px;">
			<canvas id="eventTrendChart"></canvas>
		</div>
	</div>
	<div class="card">
		<h2 class="card-title">Top 10 Aktivste Benutzer</h2>
		<div style="position: relative; height: 400px;">
			<canvas id="userActivityChart"></canvas>
		</div>
		<a href="<c:url value='/admin/berichte?report=user_activity'/>"
			class="btn btn-small" style="margin-top: 1rem;">Vollständiger
			Bericht</a>
	</div>
	<div class="card">
		<h2 class="card-title">Sonstige Berichte</h2>
		<ul class="details-list">
			<li><a
				href="<c:url value='/admin/berichte?report=event_participation'/>">Teilnahme-Zusammenfassung</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt die
					Anzahl der Anmeldungen pro Event.</p></li>
			<li><a
				href="<c:url value='/admin/berichte?report=inventory_usage'/>">Nutzungsfrequenz
					(Material)</a>
				<p class="text-muted" style="margin: 0; padding: 0;">Zeigt,
					welche Artikel am häufigsten entnommen werden.</p></li>
			<li><span>Gesamtwert des Lagers</span> <span
				style="font-weight: bold;"> <fmt:setLocale value="de_DE" />
					<fmt:formatNumber value="${totalInventoryValue}" type="currency" />
			</span></li>
		</ul>
	</div>
</div>

<script id="eventTrendData" type="application/json">
    <c:out value="${eventTrendDataJson}" />
</script>
<script id="userActivityData" type="application/json">
    <c:out value="${userActivityDataJson}" />
</script>


<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_reports.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_requests.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Anträge" />
</c:import>

<h1>
	<i class="fas fa-inbox"></i> Offene Anträge
</h1>
<p>Hier sehen Sie alle ausstehenden Anträge von Benutzern auf
	Änderung ihrer Profildaten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="card">
	<div class="table-wrapper">
		<table class="data-table">
			<thead>
				<tr>
					<th>Antragssteller</th>
					<th>Beantragt am</th>
					<th>Beantragte Änderungen</th>
					<th style="width: 200px;">Aktionen</th>
				</tr>
			</thead>
			<tbody>
				<c:if test="${empty pendingRequests}">
					<tr>
						<td colspan="4" style="text-align: center;">Derzeit liegen
							keine offenen Anträge vor.</td>
					</tr>
				</c:if>
				<c:forEach var="req" items="${pendingRequests}">
					<tr data-request-id="${req.id}">
						<td><c:out value="${req.username}" /></td>
						<td><c:out value="${req.requestedAt}" /></td>
						<td><pre>
								<code>
									<c:out value="${req.requestedChanges}" />
								</code>
							</pre></td>
						<td>
							<div style="display: flex; gap: 0.5rem;">
								<form
									action="${pageContext.request.contextPath}/admin/action/request?action=approve"
									method="POST" class="js-approve-request-form">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="requestId" value="${req.id}">
									<button type="submit" class="btn btn-small btn-success">Genehmigen</button>
								</form>
								<form
									action="${pageContext.request.contextPath}/admin/action/request?action=deny"
									method="POST" class="js-deny-request-form">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="requestId" value="${req.id}">
									<button type="submit" class="btn btn-small btn-danger">Ablehnen</button>
								</form>
							</div>
						</td>
					</tr>
				</c:forEach>
			</tbody>
		</table>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_requests.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_storage_list.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lagerverwaltung" />
</c:import>

<h1>
	<i class="fas fa-warehouse"></i> Lagerverwaltung
</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<button type="button" class="btn btn-success" id="new-item-btn">
		<i class="fas fa-plus"></i> Neuen Artikel anlegen
	</button>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Artikel filtern..." aria-label="Tabelle filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Name</th>
				<th class="sortable" data-sort-type="string">Ort</th>
				<th class="sortable" data-sort-type="string">Schrank</th>
				<th class="sortable" data-sort-type="string">Fach</th>
				<th class="sortable" data-sort-type="number">Verfügbar</th>
				<th>Status</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="item" items="${storageList}">
				<tr
					class="${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
					<td class="item-name-cell"><a
						href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
								value="${item.name}" /></a> <c:if
							test="${not empty item.imagePath}">
							<button class="camera-btn lightbox-trigger"
								data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
								title="Bild anzeigen">
								<i class="fas fa-camera"></i>
							</button>
						</c:if></td>
					<td><c:out value="${item.location}" /></td>
					<td><c:out
							value="${not empty item.cabinet ? item.cabinet : '-'}" /></td>
					<td><c:out
							value="${not empty item.compartment ? item.compartment : '-'}" /></td>
					<td>${item.availableQuantity}/${item.maxQuantity}<c:if
							test="${item.defectiveQuantity > 0}">
							<span class="text-danger">(${item.defectiveQuantity} def.)</span>
						</c:if>
					</td>
					<td><span
						class="status-badge ${item.status == 'IN_STORAGE' ? 'status-ok' : (item.status == 'CHECKED_OUT' ? 'status-danger' : 'status-warn')}"><c:out
								value="${item.status}" /></span></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
						<button type="button" class="btn btn-small edit-item-btn"
							data-fetch-url="<c:url value='/admin/lager?action=getItemData&id=${item.id}'/>">Bearbeiten</button>

						<c:set var="absoluteActionUrl"
							value="${pageContext.request.scheme}://${pageContext.request.serverName}:${pageContext.request.serverPort}${pageContext.request.contextPath}/lager/aktionen?id=${item.id}" />
						<c:set var="qrApiUrl"
							value="https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${fn:escapeXml(absoluteActionUrl)}" />
						<a href="${qrApiUrl}" target="_blank"
						class="btn btn-small btn-secondary">QR-Code</a>

						<button class="btn btn-small btn-warning defect-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-max-qty="${item.quantity}"
							data-current-defect-qty="${item.defectiveQuantity}"
							data-current-reason="${fn:escapeXml(item.defectReason)}">Defekt</button>

						<button class="btn btn-small btn-info maintenance-modal-btn"
							data-item-id="${item.id}"
							data-item-name="${fn:escapeXml(item.name)}"
							data-current-status="${item.status}">Wartung</button>

						<form action="${pageContext.request.contextPath}/admin/lager"
							method="post" class="js-confirm-form"
							data-confirm-message="Artikel '${fn:escapeXml(item.name)}' wirklich löschen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="action" value="delete"> <input type="hidden"
								name="id" value="${item.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty storageList}">
		<div class="card">
			<p>Keine Artikel gefunden.</p>
		</div>
	</c:if>
	<c:forEach var="item" items="${storageList}">
		<div
			class="list-item-card ${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
			<h3 class="card-title">
				<a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
						value="${item.name}" /></a>
				<c:if test="${not empty item.imagePath}">
					<button class="camera-btn lightbox-trigger"
						data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
						title="Bild anzeigen">
						<i class="fas fa-camera"></i>
					</button>
				</c:if>
			</h3>
			<div class="card-row">
				<span>Ort:</span> <strong><c:out value="${item.location}" />,
					<c:out value="${item.cabinet}" />, <c:out
						value="${item.compartment}" /></strong>
			</div>
			<div class="card-row">
				<span>Bestand:</span> <strong>${item.availableQuantity} /
					${item.maxQuantity} <c:if test="${item.defectiveQuantity > 0}">
						<span class="text-danger">(${item.defectiveQuantity} def.)</span>
					</c:if>
				</strong>
			</div>
			<div class="card-row">
				<span>Status:</span> <span><span
					class="status-badge ${item.status == 'IN_STORAGE' ? 'status-ok' : (item.status == 'CHECKED_OUT' ? 'status-danger' : 'status-warn')}"><c:out
							value="${item.status}" /></span></span>
			</div>
			<div class="card-actions">
				<button type="button" class="btn btn-small edit-item-btn"
					data-fetch-url="<c:url value='/admin/lager?action=getItemData&id=${item.id}'/>">Bearbeiten</button>
				<c:if test="${item.defectiveQuantity > 0}">
					<button class="btn btn-small btn-success repair-modal-btn"
						data-item-id="${item.id}"
						data-item-name="${fn:escapeXml(item.name)}"
						data-max-repair-qty="${item.defectiveQuantity}">Repariert</button>
				</c:if>
				<button class="btn btn-small btn-warning defect-modal-btn"
					data-item-id="${item.id}"
					data-item-name="${fn:escapeXml(item.name)}"
					data-max-qty="${item.quantity}"
					data-current-defect-qty="${item.defectiveQuantity}"
					data-current-reason="${fn:escapeXml(item.defectReason)}">Defekt</button>
				<button class="btn btn-small btn-info maintenance-modal-btn"
					data-item-id="${item.id}"
					data-item-name="${fn:escapeXml(item.name)}"
					data-current-status="${item.status}">Wartung</button>
				<form action="${pageContext.request.contextPath}/admin/lager"
					method="post" class="js-confirm-form"
					data-confirm-message="Artikel '${fn:escapeXml(item.name)}' wirklich löschen?">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="delete"> <input type="hidden"
						name="id" value="${item.id}">
					<button type="submit" class="btn btn-small btn-danger">Löschen</button>
				</form>
			</div>
		</div>
	</c:forEach>
</div>

<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>

<jsp:include page="/WEB-INF/jspf/storage_modals.jspf" />

<!-- Repair Modal -->
<div class="modal-overlay" id="repair-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="repair-modal-title">Artikel als repariert markieren</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="repair"> <input type="hidden" name="id"
				id="repair-item-id">
			<div class="form-group">
				<label for="repaired_quantity">Anzahl reparierter Artikel</label> <input
					type="number" name="repaired_quantity" id="repaired_quantity"
					value="1" min="1" required>
			</div>
			<div class="form-group">
				<label for="repair_notes">Notiz (optional)</label>
				<textarea name="repair_notes" id="repair_notes" rows="3"
					placeholder="z.B. Kabel neu gelötet"></textarea>
			</div>
			<button type="submit" class="btn btn-success">
				<i class="fas fa-check-circle"></i> Als repariert buchen
			</button>
		</form>
	</div>
</div>


<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/admin/admin_storage_list.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_system.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Systemstatus" />
</c:import>

<h1>
	<i class="fas fa-server"></i> Systemstatus
</h1>
<p>Live-Statistiken des Servers. Die Daten werden alle 5 Sekunden
	aktualisiert.</p>

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-microchip"></i> CPU Auslastung
		</h2>
		<div class="progress-bar-container">
			<div id="cpu-progress" class="progress-bar"></div>
		</div>
		<p id="cpu-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-memory"></i> Arbeitsspeicher (RAM)
		</h2>
		<div class="progress-bar-container">
			<div id="ram-progress" class="progress-bar"></div>
		</div>
		<p id="ram-text" class="progress-text">Lade...</p>
	</div>
	<div class="card">
		<h2 class="card-title">
			<i class="fas fa-hdd"></i> Festplattenspeicher
		</h2>
		<div class="progress-bar-container">
			<div id="disk-progress" class="progress-bar"></div>
		</div>
		<p id="disk-text" class="progress-text">Lade...</p>
	</div>
	<div class="card" id="battery-card" style="display: none;">
		<h2 class="card-title">
			<i class="fas fa-battery-half"></i> Akku
		</h2>
		<div class="progress-bar-container">
			<div id="battery-progress" class="progress-bar"></div>
		</div>
		<p id="battery-text" class="progress-text">Lade...</p>
	</div>
	<div class="card" id="uptime-card">
		<h2 class="card-title">
			<i class="fas fa-clock"></i> Server Uptime
		</h2>
		<p id="uptime-text"
			style="font-size: 1.5rem; font-weight: 500; color: var(--primary-color); text-align: center;">Lade...</p>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="<c:url value='/js/admin/admin_system.js'/>"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_users.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Benutzerverwaltung" />
</c:import>

<c:set var="userPermissions" value="${sessionScope.user.permissions}" />
<c:set var="hasMasterAccess"
	value="${userPermissions.contains('ACCESS_ADMIN_PANEL')}" />

<h1>
	<i class="fas fa-users-cog"></i> Benutzerverwaltung
</h1>
<p>Verwalten Sie hier alle Benutzerkonten und deren individuelle
	Berechtigungen.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<c:if
		test="${hasMasterAccess or userPermissions.contains('USER_CREATE')}">
		<button type="button" class="btn btn-success" id="new-user-btn">
			<i class="fas fa-user-plus"></i> Neuen Benutzer anlegen
		</button>
	</c:if>
	<div class="form-group" style="margin-bottom: 0;">
		<input type="search" id="table-filter"
			placeholder="Benutzer filtern..." aria-label="Benutzer filtern">
	</div>
</div>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="number">ID</th>
				<th class="sortable" data-sort-type="string">Benutzername</th>
				<th class="sortable" data-sort-type="string">Rolle</th>
				<th>Aktionen</th>
			</tr>
		</thead>
		<tbody>
			<c:if test="${empty requestScope.userList}">
				<tr>
					<td colspan="4" style="text-align: center;">Keine Benutzer
						gefunden.</td>
				</tr>
			</c:if>
			<c:forEach var="user" items="${requestScope.userList}">
				<tr data-user-id="${user.id}">
					<td data-field="id"><c:out value="${user.id}" /></td>
					<td data-field="username"><c:out value="${user.username}" /></td>
					<td data-field="roleName"><c:out value="${user.roleName}" /></td>
					<td style="display: flex; gap: 0.5rem; flex-wrap: wrap;"><c:if
							test="${hasMasterAccess or userPermissions.contains('USER_UPDATE')}">
							<button type="button" class="btn btn-small edit-user-btn"
								data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
						</c:if> <a
						href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
						class="btn btn-small">Details</a>
						<form action="<c:url value='/admin/action/user?action=unlock'/>"
							method="post" class="js-unlock-form"
							data-confirm-message="Die Login-Sperre für '${fn:escapeXml(user.username)}' wirklich aufheben?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="username" value="${user.username}">
							<button type="submit" class="btn btn-small btn-info">Entsperren</button>
						</form> <c:if test="${sessionScope.user.id != user.id}">
							<c:if
								test="${hasMasterAccess or userPermissions.contains('USER_PASSWORD_RESET')}">
								<form
									action="<c:url value='/admin/action/user?action=resetPassword'/>"
									method="post" class="js-reset-password-form"
									data-confirm-message="Passwort für '${fn:escapeXml(user.username)}' zurücksetzen? Das neue Passwort wird als Nachricht angezeigt.">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-warning">Passwort
										Reset</button>
								</form>
							</c:if>
							<c:if
								test="${hasMasterAccess or userPermissions.contains('USER_DELETE')}">
								<form action="<c:url value='/admin/action/user?action=delete'/>"
									method="post" class="js-confirm-delete-form"
									data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="userId" value="${user.id}">
									<button type="submit" class="btn btn-small btn-danger">Löschen</button>
								</form>
							</c:if>
						</c:if></td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:if test="${empty requestScope.userList}">
		<div class="card">
			<p>Keine Benutzer gefunden.</p>
		</div>
	</c:if>
	<c:forEach var="user" items="${requestScope.userList}">
		<div class="list-item-card" data-user-id="${user.id}">
			<h3 class="card-title" data-field="username">
				<c:out value="${user.username}" />
			</h3>
			<div class="card-row">
				<span>Rolle:</span> <strong data-field="roleName"><c:out
						value="${user.roleName}" /></strong>
			</div>
			<div class="card-row">
				<span>ID:</span> <strong data-field="id"><c:out
						value="${user.id}" /></strong>
			</div>
			<div class="card-actions">
				<c:if
					test="${hasMasterAccess or userPermissions.contains('USER_UPDATE')}">
					<button type="button" class="btn btn-small edit-user-btn"
						data-fetch-url="<c:url value='/admin/mitglieder?action=getUserData&id=${user.id}'/>">Bearbeiten</button>
				</c:if>
				<a
					href="<c:url value='/admin/mitglieder?action=details&id=${user.id}'/>"
					class="btn btn-small">Details</a>
				<form action="<c:url value='/admin/action/user?action=unlock'/>"
					method="post" class="js-unlock-form"
					data-confirm-message="Die Login-Sperre für '${fn:escapeXml(user.username)}' wirklich aufheben?">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="username" value="${user.username}">
					<button type="submit" class="btn btn-small btn-info">Entsperren</button>
				</form>
				<c:if test="${sessionScope.user.id != user.id}">
					<c:if
						test="${hasMasterAccess or userPermissions.contains('USER_PASSWORD_RESET')}">
						<form
							action="<c:url value='/admin/action/user?action=resetPassword'/>"
							method="post" class="js-reset-password-form"
							data-confirm-message="Passwort für '${fn:escapeXml(user.username)}' zurücksetzen? Das neue Passwort wird als Nachricht angezeigt.">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="userId" value="${user.id}">
							<button type="submit" class="btn btn-small btn-warning">Reset</button>
						</form>
					</c:if>
					<c:if
						test="${hasMasterAccess or userPermissions.contains('USER_DELETE')}">
						<form action="<c:url value='/admin/action/user?action=delete'/>"
							method="post" class="js-confirm-delete-form"
							data-confirm-message="Benutzer '${fn:escapeXml(user.username)}' wirklich löschen?">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="userId" value="${user.id}">
							<button type="submit" class="btn btn-small btn-danger">Löschen</button>
						</form>
					</c:if>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<jsp:include page="/WEB-INF/jspf/user_modals.jspf" />

<script id="allPermissionsData" type="application/json">
    ${groupedPermissionsJson}
</script>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/admin/admin_users.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\admin_user_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle"
		value="Benutzerdetails: ${fn:escapeXml(userToView.username)}" />
</c:import>

<h1>
	Benutzerdetails:
	<c:out value="${userToView.username}" />
</h1>
<a href="${pageContext.request.contextPath}/admin/mitglieder"
	style="display: inline-block; margin-bottom: 1rem;"> <i
	class="fas fa-arrow-left"></i> Zurück zur Benutzerliste
</a>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="responsive-dashboard-grid">
	<div class="card">
		<h2 class="card-title">Stammdaten</h2>
		<ul class="details-list">
			<li><strong>Benutzername:</strong> <c:out
					value="${userToView.username}" /></li>
			<li><strong>Rolle:</strong> <c:out
					value="${userToView.roleName}" /></li>
			<li><strong>Jahrgang:</strong> <c:out
					value="${userToView.classYear}" /></li>
			<li><strong>Klasse:</strong> <c:out
					value="${userToView.className}" /></li>
			<li><strong>E-Mail:</strong> <c:out
					value="${not empty userToView.email ? userToView.email : 'Nicht hinterlegt'}" /></li>
			<li><strong>Registriert seit:</strong> <c:out
					value="${userToView.formattedCreatedAt}" /> Uhr</li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Event-Teilnahmehistorie</h2>
		<div class="table-wrapper"
			style="max-height: 450px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Event</th>
						<th>Datum</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty eventHistory}">
						<tr>
							<td colspan="3" style="text-align: center;">Keine
								Event-Historie vorhanden.</td>
						</tr>
					</c:if>
					<c:forEach var="event" items="${eventHistory}">
						<tr>
							<td><a
								href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
										value="${event.name}" /></a></td>
							<td><c:out value="${event.formattedEventDateTime}" /> Uhr</td>
							<td><c:out value="${event.userAttendanceStatus}" /></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\admin\report_display.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Bericht: ${reportTitle}" />
</c:import>

<h1>${reportTitle}</h1>
<div class="table-controls">
	<a href="<c:url value='/admin/berichte'/>" class="btn btn-secondary"><i
		class="fas fa-arrow-left"></i> Zurück zur Berichtsübersicht</a> <a
		href="?report=${param.report}&export=csv" class="btn btn-success"><i
		class="fas fa-file-csv"></i> Als CSV exportieren</a>
</div>

<div class="table-wrapper">
	<c:if test="${empty reportData}">
		<p style="text-align: center; padding: 2rem;">Keine Daten für
			diesen Bericht verfügbar.</p>
	</c:if>
	<c:if test="${not empty reportData}">
		<table class="data-table">
			<c:choose>
				<c:when test="${param.report == 'event_participation'}">
					<thead>
						<tr>
							<th>Event-Name</th>
							<th>Zugewiesene Teilnehmer</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<td><c:out value="${row.event_name}" /></td>
								<td><c:out value="${row.participant_count}" /></td>
							</tr>
						</c:forEach>
					</tbody>
				</c:when>

				<c:when test="${param.report == 'inventory_usage'}">
					<thead>
						<tr>
							<th>Artikelname</th>
							<th>Gesamtmenge entnommen</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<td><c:out value="${row.item_name}" /></td>
								<td><c:out value="${row.total_quantity_checked_out}" /></td>
							</tr>
						</c:forEach>
					</tbody>
				</c:when>

				<c:when test="${param.report == 'user_activity'}">
					<thead>
						<tr>
							<th>Benutzername</th>
							<th>Anmeldungen (Events)</th>
							<th>Teilnahmen (Meetings)</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<td><c:out value="${row.username}" /></td>
								<td><c:out value="${row.events_signed_up}" /></td>
								<td><c:out value="${row.meetings_attended}" /></td>
							</tr>
						</c:forEach>
					</tbody>
				</c:when>

				<c:otherwise>
					<thead>
						<tr>
							<c:forEach var="header" items="${reportData[0].keySet()}">
								<th><c:out value="${fn:replace(header, '_', ' ')}" /></th>
							</c:forEach>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="row" items="${reportData}">
							<tr>
								<c:forEach var="key" items="${reportData[0].keySet()}">
									<td><c:out value="${row[key]}" /></td>
								</c:forEach>
							</tr>
						</c:forEach>
					</tbody>
				</c:otherwise>
			</c:choose>
		</table>
	</c:if>

</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\auth\login.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Anmeldung" />
	<c:param name="showNav" value="false" />
</c:import>

<div class="login-page-container">
	<div class="login-box">
		<h1>
			<i class="fas fa-bolt"></i> TechnikTeam
		</h1>
		<c:import url="/WEB-INF/jspf/message_banner.jspf" />

		<c:if test="${not empty sessionScope.lockoutEndTime}">
			<div class="error-message" id="lockout-timer"
				data-end-time="${sessionScope.lockoutEndTime}"
				data-lockout-level="${sessionScope.lockoutLevel}">Lade
				Timer...</div>
			<c:remove var="lockoutEndTime" scope="session" />
			<c:remove var="lockoutLevel" scope="session" />
		</c:if>

		<form action="<c:url value='/login'/>" method="post">
			<div class="form-group">
				<label for="username">Benutzername</label> <input type="text"
					id="username" name="username"
					value="<c:out value='${failedUsername}'/>" required
					autocomplete="username" autofocus>
				<c:remove var="failedUsername" scope="session" />
			</div>
			<div class="form-group">
				<label for="password">Passwort</label>
				<div class="password-input-wrapper">
					<input type="password" id="password" name="password" required
						autocomplete="current-password"> <span
						class="password-toggle-icon"> <i class="fas fa-eye"></i>
					</span>
				</div>
			</div>
			<button type="submit" class="btn" style="width: 100%; margin-bottom: 0.75rem;"
				${not empty sessionScope.lockoutEndTime ? 'disabled' : ''}>Anmelden</button>
			<button type="button" id="login-passkey-btn" class="btn btn-secondary" style="width: 100%;"
				${not empty sessionScope.lockoutEndTime ? 'disabled' : ''}>
				<i class="fas fa-fingerprint"></i> Mit Passkey anmelden
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/auth/login.js"></script>
<script src="${pageContext.request.contextPath}/js/auth/passkey_auth.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\auth\logout.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Logout" />
	<c:param name="showNav" value="false" />
</c:import>

<div style="text-align: center; margin-top: 5rem; padding: 2rem;">
	<h1>
		<c:out value="${not empty username ? username : 'Du'}" />
		, du wurdest erfolgreich ausgeloggt!
	</h1>
	<p>Du wirst in 5 Sekunden automatisch zur Login-Seite
		weitergeleitet.</p>
	<p>
		<a href="${pageContext.request.contextPath}/login">Jetzt zur
			Login-Seite</a>
	</p>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/auth/logout.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error400.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="400 - Fehlerhafte Anfrage" />
</c:import>

<body
	data-content-length="${pageContext.request.contentLength > 0 ? pageContext.request.contentLength : 'UNKNOWN'}">
	<div class="error-page-container">
		<h1 class="error-code" style="color: var(--info-color);">400</h1>
		<h2>Fehlerhafte Anfrage</h2>
		<p class="error-message-text">Der Server konnte die Anfrage
			aufgrund einer fehlerhaften Syntax nicht verstehen. Das
			Protokolldroiden-System analysiert die Übertragung.</p>

		<div class="protocol-droid-console">
			<div class="droid-eye"></div>
			<pre id="droid-output"></pre>
		</div>

		<div id="redirect-container"
			style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
			<a href="javascript:history.back()" class="btn btn-secondary"> <i
				class="fas fa-arrow-left"></i> Einen Schritt zurück
			</a>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error400.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error401.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="401 - Nicht autorisiert" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--danger-color);">401</h1>
	<h2>Nicht Autorisiert</h2>
	<p class="error-message-text">Für den Zugriff auf diese Ressource
		ist eine Authentifizierung erforderlich. Ihre Anmeldeinformationen
		fehlen oder sind ungültig.</p>

	<div class="card-scanner">
		<div class="scanner-light" id="scanner-light"></div>
		<div class="card-slot">
			<div class="card-content">
				<p>STATUS:</p>
				<h3 id="scanner-status">BEREIT</h3>
				<div class="progress-bar-container"
					style="height: 10px; margin-top: 1rem;">
					<div id="scanner-progress" class="progress-bar"></div>
				</div>
			</div>
		</div>
	</div>

	<div id="redirect-container"
		style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
		<a href="${pageContext.request.contextPath}/login"
			class="btn btn-success"> <i class="fas fa-sign-in-alt"></i> Zur
			Anmeldeseite
		</a>
	</div>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error401.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error403.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="403 - Zugriff Verweigert" />
</c:import>

<body data-context-path="${pageContext.request.contextPath}"
	data-username="${fn:escapeXml(sessionScope.user.username)}"
	data-role="${fn:escapeXml(sessionScope.user.roleName)}"
	data-request-uri="${fn:escapeXml(pageContext.errorData.requestURI)}">

	<div class="error-page-container">
		<h1 class="error-code" style="color: var(--warning-color);">403</h1>
		<h2>Zugriff Verweigert</h2>
		<p class="error-message-text">Ihre Zugriffsebene ist für die
			angeforderte Ressource nicht ausreichend. Das Sicherheitsprotokoll
			wurde aktiviert.</p>

		<div class="security-console">
			<div class="console-header">
				<span>SYSTEM SECURITY DAEMON - PROTOKOLL</span>
			</div>
			<pre id="console-body"></pre>
		</div>

		<div id="redirect-container"
			style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
			<a href="${pageContext.request.contextPath}/home"
				class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
				Startseite
			</a>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error403.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error404.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="404 - Seite nicht gefunden" />
</c:import>

<body data-context-path="${pageContext.request.contextPath}"
	data-request-uri="${fn:escapeXml(pageContext.errorData.requestURI)}">

	<div class="error-page-container">
		<h1 class="error-code">404</h1>
		<h2>Ressource nicht gefunden</h2>
		<p class="error-message-text">
			Sie haben sich im Dateisystem verirrt. Die angeforderte Ressource
			wurde nicht gefunden. <br>Das Systemprotokoll unten zeigt
			weitere Details.
		</p>

		<div class="terminal-window">
			<div class="terminal-header">
				<div class="terminal-buttons">
					<span class="term-btn close"></span><span class="term-btn min"></span><span
						class="term-btn max"></span>
				</div>
				<span>bash -- technik-team</span>
			</div>
			<div id="terminal-body" class="terminal-body"></div>
		</div>

		<div id="home-link-container"
			style="margin-top: 1.5rem; opacity: 0; transition: opacity 0.5s;">
			<a href="${pageContext.request.contextPath}/home"
				class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
				Startseite
			</a>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error404.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error500.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="500 - Interner Fehler" />
</c:import>

<div class="error-page-container">
	<h1 class="error-code" style="color: var(--danger-color);">500</h1>
	<h2>Systemfehler im Hauptrechner</h2>
	<p class="error-message-text">Ein unerwarteter Fehler ist
		aufgetreten und unser System ist ins Stolpern geraten. Starten Sie die
		automatische Systemdiagnose, um den Fehler zu analysieren.</p>

	<div class="diagnostic-container">
		<button id="diagnostic-btn" class="btn btn-warning">
			<i class="fas fa-tasks"></i> Diagnose starten
		</button>
		<div id="diagnostic-output" class="diagnostic-console">
		</div>
	</div>

	<a href="${pageContext.request.contextPath}/home"
		class="btn btn-primary" style="margin-top: 1.5rem;"> <i
		class="fas fa-home"></i> Flucht zur Startseite
	</a>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error500.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error503.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="503 - Dienst nicht verfügbar" />
</c:import>

<body data-context-path="${pageContext.request.contextPath}">
	<div class="error-page-container">
		<h1 class="error-code" style="color: #ff8c00;">503</h1>
		<h2>Dienst Nicht Verfügbar</h2>
		<p class="error-message-text">Der Server ist zurzeit überlastet
			oder wird gewartet. Bitte versuchen Sie es in Kürze erneut. Das
			System versucht einen Neustart.</p>

		<div class="reboot-console">
			<pre id="reboot-output"></pre>
			<div class="progress-bar-container"
				style="margin-top: 1rem; background: #333;">
				<div id="reboot-progress" class="progress-bar"
					style="background: var(--success-color);"></div>
			</div>
		</div>
	</div>
</body>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/error/error503.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\error\error_generic.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isErrorPage="true" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/error_header.jspf">
	<c:param name="pageTitle" value="Fehler" />
</c:import>

<c:set var="statusCode" value="${pageContext.errorData.statusCode}" />

<c:set var="errorMessage"
	value="Ein unerwarteter Fehler ist aufgetreten." />
<c:choose>
	<c:when test="${statusCode == 402}">
		<c:set var="errorMessage"
			value="Zahlung erforderlich. (Dieser Code ist für die zukünftige Verwendung reserviert.)" />
	</c:when>
	<c:when test="${statusCode == 405}">
		<c:set var="errorMessage"
			value="Methode nicht erlaubt. Die verwendete HTTP-Methode (z.B. GET, POST) ist für diese Ressource nicht zulässig." />
	</c:when>
	<c:when test="${statusCode == 406}">
		<c:set var="errorMessage"
			value="Nicht akzeptabel. Der Server kann keine Antwort generieren, die den Kriterien des Clients entspricht." />
	</c:when>
	<c:when test="${statusCode == 408}">
		<c:set var="errorMessage"
			value="Anfrage-Zeitüberschreitung. Der Server hat zu lange auf eine Antwort gewartet." />
	</c:when>
	<c:when test="${statusCode == 409}">
		<c:set var="errorMessage"
			value="Konflikt. Die Anfrage konnte wegen eines Konflikts mit dem aktuellen Zustand der Ressource nicht abgeschlossen werden." />
	</c:when>
	<c:when test="${statusCode == 410}">
		<c:set var="errorMessage"
			value="Verschwunden. Die angeforderte Ressource ist nicht mehr verfügbar und wird es auch in Zukunft nicht sein." />
	</c:when>
	<c:when test="${statusCode == 501}">
		<c:set var="errorMessage"
			value="Nicht implementiert. Der Server erkennt die Anfragemethode nicht oder kann sie nicht erfüllen." />
	</c:when>
	<c:when test="${statusCode == 502}">
		<c:set var="errorMessage"
			value="Bad Gateway. Der Server hat als Gateway oder Proxy eine ungültige Antwort vom Upstream-Server erhalten." />
	</c:when>
	<c:when test="${statusCode == 504}">
		<c:set var="errorMessage"
			value="Gateway-Zeitüberschreitung. Der Server hat als Gateway oder Proxy keine rechtzeitige Antwort erhalten." />
	</c:when>
</c:choose>

<div class="error-page-container">
	<h1 class="error-code">${statusCode}</h1>
	<h2>${errorMessage}</h2>
	<p class="error-message-text">Wenn Sie glauben, dass dies ein
		Fehler ist, kontaktieren Sie bitte den Administrator.</p>
	<a href="${pageContext.request.contextPath}/home"
		class="btn btn-primary"> <i class="fas fa-home"></i> Zurück zur
		Startseite
	</a>
</div>

<c:import url="/WEB-INF/jspf/error_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\calendar.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Kalender" />
</c:import>

<h1>
	<i class="fas fa-calendar-alt"></i> Terminübersicht
</h1>
<p>
	Übersicht aller anstehenden Veranstaltungen und Lehrgänge. <a
		href="<c:url value='/calendar.ics'/>" class="btn btn-small btn-info"
		style="margin-left: 1rem;"> <i class="fas fa-rss"></i> Kalender
		abonnieren
	</a>
</p>

<!-- Mobile List View (Default for small screens) -->
<div class="mobile-list-view">
	<c:if test="${empty mobileList}">
		<div class="card">
			<p>Derzeit sind keine Termine geplant.</p>
		</div>
	</c:if>

	<c:forEach var="entry" items="${mobileList}">
		<a href="${entry.url}" class="termin-item-link">
			<div class="termin-item">
				<div class="termin-date">
					<span class="termin-date-day">${entry.day}</span> <span
						class="termin-date-month">${entry.monthAbbr}</span>
				</div>
				<div class="termin-details">
					<span class="termin-title">${entry.title}</span> <span
						class="status-badge ${entry.typeClass}">${entry.type}</span>
				</div>
				<div class="termin-arrow">
					<i class="fas fa-chevron-right"></i>
				</div>
			</div>
		</a>
	</c:forEach>
</div>

<!-- Desktop Calendar View -->
<div class="desktop-calendar-view card">
	<div class="calendar-controls">
		<div>
			<a
				href="?view=month&year=${prevMonth.year}&month=${prevMonth.monthValue}"
				class="btn btn-secondary"><</a> <a
				href="?view=month&year=${nextMonth.year}&month=${nextMonth.monthValue}"
				class="btn btn-secondary">></a> <a href="?view=month"
				class="btn btn-secondary">Heute</a>
		</div>
		<h2>${monthName}${year}</h2>
		<div>
			<a href="?view=week"
				class="btn ${view == 'week' ? 'btn-primary' : 'btn-secondary'}">Woche</a>
			<a href="?view=month"
				class="btn ${view == 'month' ? 'btn-primary' : 'btn-secondary'}">Monat</a>
		</div>
	</div>

	<c:if test="${view == 'month'}">
		<div class="calendar-grid">
			<div class="calendar-header">So</div>
			<div class="calendar-header">Mo</div>
			<div class="calendar-header">Di</div>
			<div class="calendar-header">Mi</div>
			<div class="calendar-header">Do</div>
			<div class="calendar-header">Fr</div>
			<div class="calendar-header">Sa</div>

			<c:if test="${startDayOfWeekOffset > 0}">
				<c:forEach begin="1" end="${startDayOfWeekOffset}">
					<div class="calendar-day other-month"></div>
				</c:forEach>
			</c:if>

			<c:forEach var="day" begin="1" end="${daysInMonth}">
				<c:set var="dayDate" value="${currentYearMonth.atDay(day)}" />
				<div
					class="calendar-day ${currentDate.isEqual(dayDate) ? 'today' : ''}">
					<div class="day-number">${day}</div>
					<c:forEach var="entry" items="${eventsByDate[dayDate]}">
						<c:choose>
							<c:when test="${entry.type == 'Event'}">
								<a
									href="${pageContext.request.contextPath}/veranstaltungen/details?id=${entry.object.id}"
									class="calendar-event">${entry.object.name}</a>
							</c:when>
							<c:when test="${entry.type == 'Meeting'}">
								<a
									href="${pageContext.request.contextPath}/meetingDetails?id=${entry.object.id}"
									class="calendar-meeting">${entry.object.name}</a>
							</c:when>
						</c:choose>
					</c:forEach>
				</div>
			</c:forEach>
		</div>
	</c:if>

	<c:if test="${view == 'week'}">
		<div class="calendar-week-grid">
			<c:forEach var="day" items="${weekData}">
				<div class="calendar-week-day">
					<div class="calendar-header">
						${day.dayName} <span class="day-number">${day.dayOfMonth}</span>
					</div>
					<div class="events-container">
						<c:forEach var="entry" items="${eventsByDate[day.date]}">
							<c:choose>
								<c:when test="${entry.type == 'Event'}">
									<a
										href="${pageContext.request.contextPath}/veranstaltungen/details?id=${entry.object.id}"
										class="calendar-event">${entry.object.name}</a>
								</c:when>
								<c:when test="${entry.type == 'Meeting'}">
									<a
										href="${pageContext.request.contextPath}/meetingDetails?id=${entry.object.id}"
										class="calendar-meeting">${entry.object.name}</a>
								</c:when>
							</c:choose>
						</c:forEach>
					</div>
				</div>
			</c:forEach>
		</div>
	</c:if>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\dateien.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Dateien & Dokumente" />
</c:import>

<h1>Dateien & Dokumente</h1>
<p>Hier können Sie zentrale Dokumente und Vorlagen herunterladen.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<c:if test="${empty fileData}">
	<div class="card">
		<p>Es sind keine Dateien oder Dokumente verfügbar.</p>
	</div>
</c:if>

<c:set var="canUpdateFiles"
	value="${sessionScope.user.permissions.contains('FILE_UPDATE') or sessionScope.user.permissions.contains('ACCESS_ADMIN_PANEL')}" />

<c:forEach var="categoryEntry" items="${fileData}">
	<div class="card">
		<h2>
			<i class="fas fa-folder"></i>
			<c:out value="${categoryEntry.key}" />
		</h2>
		<ul class="file-list">
			<c:forEach var="file" items="${categoryEntry.value}">
				<li style="padding: 0.75rem 0;">
					<div>
						<a href="<c:url value='/download?id=${file.id}'/>"><i
							class="fas fa-download"></i> <c:out value="${file.filename}" /></a>
					</div> <c:if
						test="${canUpdateFiles and fn:endsWith(fn:toLowerCase(file.filename), '.md')}">
						<div class="file-actions">
							<a href="<c:url value='/editor?fileId=${file.id}'/>"
								class="btn btn-small"> <i class="fas fa-edit"></i>
								Bearbeiten
							</a>
						</div>
					</c:if>
				</li>
			</c:forEach>
		</ul>
	</div>
</c:forEach>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\eventDetails.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Event Details: ${event.name}" />
</c:import>


<div
	style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap; margin-bottom: 0.5rem;">
	<h1>
		<c:out value="${event.name}" />
	</h1>
	<c:if test="${not empty event.status}">
		<c:set var="statusClass"
			value="${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}" />
		<span class="status-badge ${statusClass}"><c:out
				value="${event.status}" /></span>
	</c:if>
</div>

<p class="details-subtitle">
	<strong>Zeitraum:</strong>
	<c:out value="${event.formattedEventDateTimeRange}" />
	<c:if test="${not empty event.location}">
		<span style="margin-left: 1rem;"><strong>Ort:</strong> <c:out
				value="${event.location}" /></span>
	</c:if>
</p>

<div class="responsive-dashboard-grid">
	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Aufgaben</h2>
		<div id="task-list-container">
			<c:if test="${empty event.eventTasks}">
				<p>Für dieses Event wurden noch keine Aufgaben erstellt.</p>
			</c:if>
			<c:forEach var="task" items="${event.eventTasks}">
				<div class="card" style="margin-bottom: 1rem;">
					<div
						style="display: flex; justify-content: space-between; align-items: start;">
						<div>
							<span
								class="status-badge ${task.status == 'ERLEDIGT' ? 'status-ok' : 'status-warn'}"><c:out
									value="${task.status}" /></span>
							<h4 style="margin-top: 0.5rem;">
								<c:out value="${task.displayOrder}" />
								.
								<c:out value="${task.description}" />
							</h4>
						</div>
						<c:if test="${hasTaskManagementPermission}">
							<div>
								<button class="btn btn-small edit-task-btn"
									data-task-id="${task.id}">Bearbeiten</button>
							</div>
						</c:if>
					</div>

					<div class="markdown-content" style="margin-top: 1rem;">${fn:escapeXml(task.details)}</div>

					<p style="margin-top: 1rem;">
						<strong>Zugewiesen an:</strong>
						<c:if test="${task.requiredPersons > 0}">
							<span class="text-muted">Offener Pool
								(${fn:length(task.assignedUsers)} / ${task.requiredPersons}
								Plätze)</span>
						</c:if>
						<c:out value="${task.getAssignedUsernames()}" />
					</p>

					<c:if
						test="${not empty task.requiredItems || not empty task.requiredKits}">
						<p style="margin-top: 1rem;">
							<strong>Benötigtes Material:</strong>
						</p>
						<ul style="padding-left: 1.5rem;">
							<c:forEach var="item" items="${task.requiredItems}">
								<li><a
									href="${pageContext.request.contextPath}/lager/details?id=${item.id}"><c:out
											value="${item.quantity}" />x <c:out value="${item.name}" /></a></li>
							</c:forEach>
							<c:forEach var="kit" items="${task.requiredKits}">
								<li><a
									href="${pageContext.request.contextPath}/pack-kit?kitId=${kit.id}">1x
										Kit: <c:out value="${kit.name}" />
								</a></li>
							</c:forEach>
						</ul>
					</c:if>

					<c:if
						test="${event.status == 'LAUFEND' and (isUserAssigned or isUserParticipant)}">
						<div
							style="margin-top: 1.5rem; border-top: 1px solid var(--border-color); padding-top: 1rem;">
							<c:set var="isTaskAssignedToCurrentUser" value="false" />
							<c:forEach var="assigned" items="${task.assignedUsers}">
								<c:if test="${assigned.id == sessionScope.user.id}">
									<c:set var="isTaskAssignedToCurrentUser" value="true" />
								</c:if>
							</c:forEach>

							<c:if test="${task.requiredPersons > 0}">
								<c:choose>
									<c:when test="${isTaskAssignedToCurrentUser}">
										<form action="${pageContext.request.contextPath}/task-action"
											method="post">
											<input type="hidden" name="csrfToken"
												value="${sessionScope.csrfToken}"> <input
												type="hidden" name="action" value="unclaim"> <input
												type="hidden" name="taskId" value="${task.id}">
											<button type="submit"
												class="btn btn-danger-outline btn-small">Aufgabe
												zurückgeben</button>
										</form>
									</c:when>
									<c:when
										test="${fn:length(task.assignedUsers) < task.requiredPersons}">
										<form action="${pageContext.request.contextPath}/task-action"
											method="post">
											<input type="hidden" name="csrfToken"
												value="${sessionScope.csrfToken}"> <input
												type="hidden" name="action" value="claim"> <input
												type="hidden" name="taskId" value="${task.id}">
											<button type="submit" class="btn btn-success btn-small">Aufgabe
												übernehmen</button>
										</form>
									</c:when>
								</c:choose>
							</c:if>

							<c:if
								test="${isTaskAssignedToCurrentUser and task.status == 'OFFEN'}">
								<button class="btn btn-primary btn-small mark-task-done-btn"
									data-task-id="${task.id}">Als erledigt markieren</button>
							</c:if>
						</div>
					</c:if>
				</div>
			</c:forEach>
		</div>
		<c:if test="${hasTaskManagementPermission}">
			<button class="btn btn-success" id="new-task-btn"
				style="margin-top: 1rem;">
				<i class="fas fa-plus"></i> Neue Aufgabe
			</button>
		</c:if>
	</div>

	<c:if test="${isUserAssigned or isUserParticipant}">
		<div class="card" style="grid-column: 1/-1;">
			<h2 class="card-title">Event-Chat</h2>
			<c:choose>
				<c:when test="${event.status == 'LAUFEND'}">
					<div id="chat-box"
						style="height: 300px; overflow-y: auto; border: 1px solid var(--border-color); padding: 0.5rem; margin-bottom: 1rem; background: var(--bg-color);"></div>
					<div style="position: relative;">
						<form id="chat-form" style="display: flex; gap: 0.5rem;">
							<input type="text" id="chat-message-input" class="form-group"
								style="flex-grow: 1; margin: 0;"
								placeholder="Nachricht eingeben... @ für Erwähnungen">
							<button type="submit" class="btn">Senden</button>
						</form>
						<div id="mention-popup"
							style="display: none; position: absolute; bottom: 100%; left: 0; background: var(--surface-color); border: 1px solid var(--border-color); border-radius: 6px; box-shadow: var(--shadow-md); max-height: 150px; overflow-y: auto; z-index: 10;">
						</div>
					</div>
				</c:when>
				<c:otherwise>
					<p class="info-message">Der Chat ist nur aktiv, während das
						Event läuft.</p>
				</c:otherwise>
			</c:choose>
		</div>
	</c:if>
</div>

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">Beschreibung</h2>
		<div class="markdown-content">${fn:escapeXml(not empty event.description ? event.description : 'Keine Beschreibung für dieses Event vorhanden.')}
		</div>
	</div>
	<div class="card">
		<h2 class="card-title">Benötigter Personalbedarf</h2>
		<ul class="details-list">
			<c:if test="${empty event.skillRequirements}">
				<li>Keine speziellen Qualifikationen benötigt.</li>
			</c:if>
			<c:forEach var="req" items="${event.skillRequirements}">
				<li><strong><c:out value="${req.courseName}" />:</strong> <span><c:out
							value="${req.requiredPersons}" /> Person(en)</span></li>
			</c:forEach>
		</ul>
	</div>
	<div class="card">
		<h2 class="card-title">Reserviertes Material</h2>
		<ul class="details-list">
			<c:if test="${empty event.reservedItems}">
				<li>Kein Material für dieses Event reserviert.</li>
			</c:if>
			<c:forEach var="item" items="${event.reservedItems}">
				<li><c:out value="${item.name}" /> <span><c:out
							value="${item.quantity}" />x</span></li>
			</c:forEach>
		</ul>
	</div>
	<div class="card">
		<h2 class="card-title">Anhänge</h2>
		<ul class="details-list">
			<c:if test="${empty event.attachments}">
				<li>Keine Anhänge für dieses Event vorhanden.</li>
			</c:if>
			<c:forEach var="att" items="${event.attachments}">
				<li><a href="<c:url value='/download?id=${att.id}'/>"><c:out
							value="${att.filename}" /></a></li>
			</c:forEach>
		</ul>
	</div>
</div>

<div class="card">
	<h2 class="card-title">Zugewiesenes Team</h2>
	<ul class="details-list">
		<c:if test="${empty event.assignedAttendees}">
			<li>Noch kein Team zugewiesen.</li>
		</c:if>
		<c:forEach var="attendee" items="${event.assignedAttendees}">
			<li><c:out value="${attendee.username}" /></li>
		</c:forEach>
	</ul>
</div>

<div style="margin-top: 2rem;">
	<a href="${pageContext.request.contextPath}/veranstaltungen"
		class="btn"><i class="fas fa-arrow-left"></i> Zurück zur
		Event-Übersicht</a>
</div>

<c:if test="${hasTaskManagementPermission}">
	<jsp:include page="/WEB-INF/jspf/task_modal.jspf" />
</c:if>

<script id="allUsersData" type="application/json">${assignedUsersJson}</script>
<script id="allItemsData" type="application/json">${allItemsJson}</script>
<script id="allKitsData" type="application/json">${allKitsJson}</script>
<script id="allTasksData" type="application/json">${tasksJson}</script>


<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script>
	document.body.dataset.eventId = "${event.id}";
	document.body.dataset.userId = "${sessionScope.user.id}";
	document.body.dataset.isAdmin = "${hasTaskManagementPermission}";
</script>
<script
	src="${pageContext.request.contextPath}/js/public/eventDetails.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\events.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Veranstaltungen" />
</c:import>

<h1>Anstehende Veranstaltungen</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter" placeholder="Events filtern..."
			style="width: 100%;" aria-label="Events filtern">
	</div>
</div>

<c:if test="${empty events}">
	<div class="card">
		<p>Derzeit stehen keine Veranstaltungen an.</p>
	</div>
</c:if>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Veranstaltung</th>
				<th class="sortable" data-sort-type="date">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Event-Status</th>
				<th class="sortable" data-sort-type="string">Dein Status</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="event" items="${events}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
								value="${event.name}" /></a></td>
					<td data-sort-value="${event.eventDateTime}"><c:out
							value="${event.formattedEventDateTimeRange}" /></td>
					<td><span
						class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
								value="${event.status}" /></span></td>
					<td><c:choose>
							<c:when test="${event.userAttendanceStatus == 'ZUGEWIESEN'}">
								<strong class="text-success"><c:out value="Zugewiesen" /></strong>
							</c:when>
							<c:when test="${event.userAttendanceStatus == 'ANGEMELDET'}">
								<span class="text-success"><c:out value="Angemeldet" /></span>
							</c:when>
							<c:when test="${event.userAttendanceStatus == 'ABGEMELDET'}">
								<span class="text-danger"><c:out value="Abgemeldet" /></span>
							</c:when>
							<c:otherwise>
								<c:out value="Offen" />
							</c:otherwise>
						</c:choose></td>
					<td>
						<div style="display: flex; gap: 0.5rem;">
							<c:if
								test="${event.userAttendanceStatus == 'OFFEN' or event.userAttendanceStatus == 'ABGEMELDET'}">
								<c:choose>
									<c:when test="${event.userQualified}">
										<button type="button"
											class="btn btn-small btn-success signup-btn"
											data-event-id="${event.id}"
											data-event-name="${fn:escapeXml(event.name)}">Anmelden</button>
									</c:when>
									<c:otherwise>
										<button type="button" class="btn btn-small btn-success"
											disabled
											title="Du erfüllst die Anforderungen für dieses Event nicht.">Anmelden</button>
									</c:otherwise>
								</c:choose>
							</c:if>
							<c:if test="${event.userAttendanceStatus == 'ANGEMELDET'}">
								<form action="${pageContext.request.contextPath}/event-action"
									method="post" class="js-signoff-form"
									data-event-id="${event.id}" data-event-status="${event.status}"
									data-confirm-message="Wirklich vom Event '${fn:escapeXml(event.name)}' abmelden?">
									<input type="hidden" name="csrfToken"
										value="${sessionScope.csrfToken}"> <input
										type="hidden" name="eventId" value="${event.id}"> <input
										type="hidden" name="action" value="signoff">
									<button type="submit" class="btn btn-small btn-danger">Abmelden</button>
								</form>
							</c:if>
						</div>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="event" items="${events}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
						value="${event.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${event.formattedEventDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Event-Status:</span> <span><span
					class="status-badge ${event.status == 'LAUFEND' ? 'status-warn' : (event.status == 'ABGESCHLOSSEN' or event.status == 'ABGESAGT') ? 'status-info' : 'status-ok'}"><c:out
							value="${event.status}" /></span></span>
			</div>
			<div class="card-row">
				<span>Dein Status:</span> <strong> <c:choose>
						<c:when test="${event.userAttendanceStatus == 'ZUGEWIESEN'}">
							<span class="text-success">Zugewiesen</span>
						</c:when>
						<c:when test="${event.userAttendanceStatus == 'ANGEMELDET'}">
							<span class="text-success">Angemeldet</span>
						</c:when>
						<c:when test="${event.userAttendanceStatus == 'ABGEMELDET'}">
							<span class="text-danger">Abgemeldet</span>
						</c:when>
						<c:otherwise>Offen</c:otherwise>
					</c:choose>
				</strong>
			</div>
			<div class="card-actions">
				<c:if
					test="${event.userAttendanceStatus == 'OFFEN' or event.userAttendanceStatus == 'ABGEMELDET'}">
					<c:choose>
						<c:when test="${event.userQualified}">
							<button type="button"
								class="btn btn-small btn-success signup-btn"
								data-event-id="${event.id}"
								data-event-name="${fn:escapeXml(event.name)}">Anmelden</button>
						</c:when>
						<c:otherwise>
							<button type="button" class="btn btn-small btn-success" disabled
								title="Du erfüllst die Anforderungen für dieses Event nicht.">Anmelden</button>
						</c:otherwise>
					</c:choose>
				</c:if>
				<c:if test="${event.userAttendanceStatus == 'ANGEMELDET'}">
					<form action="${pageContext.request.contextPath}/event-action"
						method="post" class="js-signoff-form" data-event-id="${event.id}"
						data-event-status="${event.status}"
						data-confirm-message="Wirklich vom Event '${fn:escapeXml(event.name)}' abmelden?">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="eventId" value="${event.id}"> <input type="hidden"
							name="action" value="signoff">
						<button type="submit" class="btn btn-small btn-danger">Abmelden</button>
					</form>
				</c:if>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Signup Modal -->
<div class="modal-overlay" id="signup-modal">
	<div class="modal-content">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="signup-modal-title">Anmeldung</h3>
		<form id="signup-form"
			action="${pageContext.request.contextPath}/event-action"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="signup"> <input type="hidden"
				name="eventId" id="signup-event-id">
			<div id="custom-fields-container"></div>
			<button type="submit" class="btn btn-success"
				style="margin-top: 1rem;">Anmeldung bestätigen</button>
		</form>
	</div>
</div>

<!-- Sign-off with Reason Modal -->
<div class="modal-overlay" id="signoff-reason-modal">
	<div class="modal-content" style="max-width: 500px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3>Abmeldung vom laufenden Event</h3>
		<p>Da dieses Event bereits läuft, ist eine Begründung für die
			Abmeldung erforderlich. Der Event-Leiter wird benachrichtigt.</p>
		<form id="signoff-reason-form"
			action="${pageContext.request.contextPath}/event-action"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="signOffWithReason"> <input
				type="hidden" name="eventId" id="signoff-event-id">
			<div class="form-group">
				<label for="signoff-reason">Begründung</label>
				<textarea id="signoff-reason" name="reason" rows="4" required></textarea>
			</div>
			<button type="submit" class="btn btn-danger">Abmeldung
				bestätigen</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/public/events.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\feedback.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Feedback geben" />
</c:import>

<div style="max-width: 800px; margin: auto;">
	<div class="card">
		<h1>
			<i class="fas fa-lightbulb"></i> Feedback & Wünsche
		</h1>
		<p>Hast du eine Idee für eine neue Funktion, einen
			Verbesserungsvorschlag oder ist dir ein Fehler aufgefallen? Teile es
			uns hier mit! Dein Feedback hilft uns, diese Anwendung besser zu
			machen.</p>

		<c:import url="/WEB-INF/jspf/message_banner.jspf" />

		<form action="${pageContext.request.contextPath}/feedback"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="submitGeneralFeedback">

			<div class="form-group">
				<label for="subject">Betreff</label> <input type="text" id="subject"
					name="subject" required maxlength="255"
					placeholder="z.B. Feature-Wunsch: Dunkelmodus für die Packliste">
			</div>

			<div class="form-group">
				<label for="content">Deine Nachricht</label>
				<textarea id="content" name="content" rows="8" required
					placeholder="Bitte beschreibe deine Idee oder das Problem so detailliert wie möglich."></textarea>
			</div>

			<button type="submit" class="btn btn-success">
				<i class="fas fa-paper-plane"></i> Feedback absenden
			</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\feedback_form.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Feedback geben" />
</c:import>

<div style="max-width: 700px; margin: auto;">
	<div class="card">
		<h1>
			Feedback für:
			<c:out value="${event.name}" />
		</h1>
		<p>Dein Feedback hilft uns, zukünftige Events zu verbessern.</p>

		<form action="${pageContext.request.contextPath}/feedback"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="submitEventFeedbackResponse"> <input
				type="hidden" name="formId" value="${form.id}">

			<div class="form-group">
				<label>Gesamteindruck (1 = schlecht, 5 = super)</label>
				<div class="star-rating">
					<input type="radio" id="star5" name="rating" value="5" required /><label
						for="star5" title="5 Sterne"></label> <input type="radio"
						id="star4" name="rating" value="4" /><label for="star4"
						title="4 Sterne"></label> <input type="radio" id="star3"
						name="rating" value="3" /><label for="star3" title="3 Sterne"></label>
					<input type="radio" id="star2" name="rating" value="2" /><label
						for="star2" title="2 Sterne"></label> <input type="radio"
						id="star1" name="rating" value="1" /><label for="star1"
						title="1 Stern"></label>
				</div>
			</div>

			<div class="form-group">
				<label for="comments">Kommentare & Verbesserungsvorschläge</label>
				<textarea id="comments" name="comments" rows="5"></textarea>
			</div>

			<button type="submit" class="btn">Feedback absenden</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\home.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Home" />
</c:import>

<h1>
	Willkommen zurück,
	<c:out value="${sessionScope.user.username}" />
	!
</h1>
<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="dashboard-grid">
	<div class="card">
		<h2 class="card-title">Meine nächsten Einsätze</h2>
		<c:choose>
			<c:when test="${not empty assignedEvents}">
				<ul class="details-list">
					<c:forEach var="event" items="${assignedEvents}">
						<li><a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
									value="${event.name}" /></a> <small><c:out
									value="${event.formattedEventDateTimeRange}" /></small></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Du bist derzeit für keine kommenden Events fest eingeteilt.</p>
			</c:otherwise>
		</c:choose>
		<a href="${pageContext.request.contextPath}/veranstaltungen"
			class="btn btn-small" style="margin-top: 1rem;">Alle
			Veranstaltungen anzeigen</a>
	</div>

	<div class="card">
		<h2 class="card-title">Meine offenen Aufgaben</h2>
		<c:choose>
			<c:when test="${not empty openTasks}">
				<ul class="details-list">
					<c:forEach var="task" items="${openTasks}">
						<li><a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${task.eventId}">
								<c:out value="${task.description}" /> <small
								style="display: block; color: var(--text-muted-color);">Für
									Event: <c:out value="${task.eventName}" />
							</small>
						</a></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Super! Du hast aktuell keine offenen Aufgaben.</p>
			</c:otherwise>
		</c:choose>
	</div>

	<div class="card">
		<h2 class="card-title">Weitere anstehende Veranstaltungen</h2>
		<c:choose>
			<c:when test="${not empty upcomingEvents}">
				<ul class="details-list">
					<c:forEach var="event" items="${upcomingEvents}">
						<li><a
							href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
									value="${event.name}" /></a> <small><c:out
									value="${event.formattedEventDateTimeRange}" /></small></li>
					</c:forEach>
				</ul>
			</c:when>
			<c:otherwise>
				<p>Keine weiteren anstehenden Veranstaltungen.</p>
			</c:otherwise>
		</c:choose>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\lager.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lager" />
</c:import>

<h1>
	<i class="fas fa-boxes"></i> Lagerübersicht
</h1>
<p>Hier finden Sie eine Übersicht aller erfassten Artikel im Lager.
	Klicken Sie auf einen Artikelnamen für Details und Verlauf.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Alle Artikel filtern..." aria-label="Lager filtern">
	</div>
</div>

<c:if test="${empty storageData}">
	<div class="card">
		<p>Derzeit sind keine Artikel im Lager erfasst.</p>
	</div>
</c:if>

<div class="searchable-table">
	<c:forEach var="locationEntry" items="${storageData}">
		<div class="card">
			<h2>
				<i class="fas fa-map-marker-alt"></i>
				<c:out value="${locationEntry.key}" />
			</h2>

			<!-- Desktop Table View -->
			<div class="desktop-table-wrapper">
				<table class="data-table">
					<thead>
						<tr>
							<th>Gerät</th>
							<th class="sortable" data-sort-type="string">Schrank</th>
							<th class="sortable" data-sort-type="string">Fach</th>
							<th>Status</th>
							<th>Bestand</th>
							<th>Aktion</th>
						</tr>
					</thead>
					<tbody>
						<c:forEach var="item" items="${locationEntry.value}">
							<tr
								class="${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
								<td class="item-name-cell"><a
									href="<c:url value='/lager/details?id=${item.id}'/>"
									title="Details für ${item.name} ansehen"><c:out
											value="${item.name}" /></a> <c:if
										test="${not empty item.imagePath}">
										<button class="camera-btn lightbox-trigger"
											data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
											title="Bild anzeigen">
											<i class="fas fa-camera"></i>
										</button>
									</c:if></td>
								<td><c:out
										value="${not empty item.cabinet ? item.cabinet : '-'}" /></td>
								<td><c:out
										value="${not empty item.compartment ? item.compartment : '-'}" /></td>
								<td><c:choose>
										<c:when test="${item.status == 'CHECKED_OUT'}">
											<span class="status-badge status-warn">Entnommen</span>
											<span class="item-status-details">an:
												${item.currentHolderUsername}</span>
										</c:when>
										<c:when test="${item.status == 'MAINTENANCE'}">
											<span class="status-badge status-info">Wartung</span>
										</c:when>
										<c:otherwise>
											<span class="status-badge status-ok">Im Lager</span>
										</c:otherwise>
									</c:choose></td>
								<td><span class="inventory-details">${item.availableQuantity}
										/ ${item.maxQuantity}</span> <c:if
										test="${item.defectiveQuantity > 0}">
										<span class="inventory-details text-danger">(${item.defectiveQuantity}
											defekt)</span>
									</c:if></td>
								<td>
									<button class="btn btn-small transaction-btn"
										data-item-id="${item.id}"
										data-item-name="${fn:escapeXml(item.name)}"
										data-max-qty="${item.availableQuantity}"
										data-current-qty="${item.quantity}"
										data-total-max-qty="${item.maxQuantity}">Aktion</button>
								</td>
							</tr>
						</c:forEach>
					</tbody>
				</table>
			</div>

			<!-- Mobile Card View -->
			<div class="mobile-card-list">
				<c:forEach var="item" items="${locationEntry.value}">
					<div
						class="list-item-card ${item.defectiveQuantity > 0 ? 'item-status-defect' : ''}">
						<h3 class="card-title">
							<a href="<c:url value='/lager/details?id=${item.id}'/>"><c:out
									value="${item.name}" /></a>
							<c:if test="${not empty item.imagePath}">
								<button class="camera-btn lightbox-trigger"
									data-src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
									title="Bild anzeigen">
									<i class="fas fa-camera"></i>
								</button>
							</c:if>
						</h3>
						<div class="card-row">
							<span>Ort:</span> <strong><c:out value="${item.cabinet}" />,
								<c:out value="${item.compartment}" /></strong>
						</div>
						<div class="card-row">
							<span>Bestand:</span> <strong>${item.availableQuantity}
								/ ${item.maxQuantity} <c:if test="${item.defectiveQuantity > 0}">
									<span class="text-danger">(${item.defectiveQuantity}
										def.)</span>
								</c:if>
							</strong>
						</div>
						<div class="card-row">
							<span>Status:</span> <span> <c:choose>
									<c:when test="${item.status == 'CHECKED_OUT'}">
										<span class="status-badge status-warn">Entnommen</span>
										<span class="item-status-details">an:
											${item.currentHolderUsername}</span>
									</c:when>
									<c:when test="${item.status == 'MAINTENANCE'}">
										<span class="status-badge status-info">Wartung</span>
									</c:when>
									<c:otherwise>
										<span class="status-badge status-ok">Im Lager</span>
									</c:otherwise>
								</c:choose>
							</span>
						</div>
						<div class="card-actions">
							<button class="btn btn-small transaction-btn"
								data-item-id="${item.id}"
								data-item-name="${fn:escapeXml(item.name)}"
								data-max-qty="${item.availableQuantity}"
								data-current-qty="${item.quantity}"
								data-total-max-qty="${item.maxQuantity}">Aktion</button>
						</div>
					</div>
				</c:forEach>
			</div>
		</div>
	</c:forEach>
</div>

<!-- Lightbox Modal (HTML is in main_footer.jspf, this is just a comment) -->

<%@ include file="/WEB-INF/jspf/storage_modals.jspf"%>
<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/public/lager.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\lehrgaenge.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Lehrgänge" />
</c:import>

<h1>Anstehende Lehrgänge & Meetings</h1>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="table-controls">
	<div class="form-group" style="margin-bottom: 0; flex-grow: 1;">
		<input type="search" id="table-filter"
			placeholder="Lehrgänge filtern..." style="width: 100%;"
			aria-label="Lehrgänge filtern">
	</div>
</div>

<c:if test="${empty meetings}">
	<div class="card">
		<p>Derzeit stehen keine Lehrgänge oder Meetings an.</p>
	</div>
</c:if>

<!-- Desktop Table View -->
<div class="desktop-table-wrapper">
	<table class="data-table sortable-table searchable-table">
		<thead>
			<tr>
				<th class="sortable" data-sort-type="string">Meeting</th>
				<th class="sortable" data-sort-type="string">Gehört zu Kurs</th>
				<th class="sortable" data-sort-type="date">Datum & Uhrzeit</th>
				<th class="sortable" data-sort-type="string">Dein Status</th>
				<th>Aktion</th>
			</tr>
		</thead>
		<tbody>
			<c:forEach var="meeting" items="${meetings}">
				<tr>
					<td><a
						href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
								value="${meeting.name}" /></a></td>
					<td><c:out value="${meeting.parentCourseName}" /></td>
					<td data-sort-value="${meeting.meetingDateTime}"><c:out
							value="${meeting.formattedMeetingDateTimeRange}" /></td>
					<td><c:choose>
							<c:when test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
								<span class="text-success"><c:out value="Angemeldet" /></span>
							</c:when>
							<c:when test="${meeting.userAttendanceStatus == 'ABGEMELDET'}">
								<span class="text-danger"><c:out value="Abgemeldet" /></span>
							</c:when>
							<c:otherwise>
								<c:out value="Offen" />
							</c:otherwise>
						</c:choose></td>
					<td>
						<form action="${pageContext.request.contextPath}/meeting-action"
							method="post" style="display: flex; gap: 0.5rem;">
							<input type="hidden" name="csrfToken"
								value="${sessionScope.csrfToken}"> <input type="hidden"
								name="meetingId" value="${meeting.id}">
							<c:if test="${meeting.userAttendanceStatus != 'ANGEMELDET'}">
								<button type="submit" name="action" value="signup"
									class="btn btn-small btn-success">Anmelden</button>
							</c:if>
							<c:if test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
								<button type="submit" name="action" value="signoff"
									class="btn btn-small btn-danger">Abmelden</button>
							</c:if>
						</form>
					</td>
				</tr>
			</c:forEach>
		</tbody>
	</table>
</div>

<!-- Mobile Card View -->
<div class="mobile-card-list searchable-table">
	<c:forEach var="meeting" items="${meetings}">
		<div class="list-item-card">
			<h3 class="card-title">
				<a
					href="${pageContext.request.contextPath}/meetingDetails?id=${meeting.id}"><c:out
						value="${meeting.name}" /></a>
			</h3>
			<div class="card-row">
				<span>Kurs:</span> <strong><c:out
						value="${meeting.parentCourseName}" /></strong>
			</div>
			<div class="card-row">
				<span>Zeitraum:</span> <strong><c:out
						value="${meeting.formattedMeetingDateTimeRange}" /></strong>
			</div>
			<div class="card-row">
				<span>Dein Status:</span> <strong> <c:choose>
						<c:when test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
							<span class="text-success">Angemeldet</span>
						</c:when>
						<c:when test="${meeting.userAttendanceStatus == 'ABGEMELDET'}">
							<span class="text-danger">Abgemeldet</span>
						</c:when>
						<c:otherwise>Offen</c:otherwise>
					</c:choose>
				</strong>
			</div>
			<div class="card-actions">
				<form action="${pageContext.request.contextPath}/meeting-action"
					method="post" style="display: flex; gap: 0.5rem;">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="meetingId" value="${meeting.id}">
					<c:if test="${meeting.userAttendanceStatus != 'ANGEMELDET'}">
						<button type="submit" name="action" value="signup"
							class="btn btn-small btn-success">Anmelden</button>
					</c:if>
					<c:if test="${meeting.userAttendanceStatus == 'ANGEMELDET'}">
						<button type="submit" name="action" value="signoff"
							class="btn btn-small btn-danger">Abmelden</button>
					</c:if>
				</form>
			</div>
		</div>
	</c:forEach>
</div>

<c:import url="/WEB-INF/jspf/table_scripts.jspf" />
<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\meetingDetails.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Meeting Details" />
</c:import>

<h1>
	<c:out value="${meeting.parentCourseName}" />
</h1>
<h2 style="border: none; padding: 0; margin-top: -1rem;">
	<c:out value="${meeting.name}" />
</h2>

<div class="dashboard-grid"
	style="grid-template-columns: 2fr 1fr; align-items: flex-start;">

	<div class="card">
		<ul class="details-list">
			<li><strong>Datum & Uhrzeit:</strong> <span><c:out
						value="${meeting.formattedMeetingDateTimeRange}" /></span></li>
			<li><strong>Ort:</strong> <span><c:out
						value="${not empty meeting.location ? meeting.location : 'N/A'}" /></span></li>
			<li><strong>Leitung:</strong> <span><c:out
						value="${not empty meeting.leaderUsername ? meeting.leaderUsername : 'N/A'}" /></span></li>
		</ul>
		<h3 style="margin-top: 2rem;">Beschreibung</h3>
		<div class="markdown-content">${fn:escapeXml(not empty meeting.description ? meeting.description : 'Keine Beschreibung für dieses Meeting vorhanden.')}
		</div>
	</div>

	<div class="card">
		<h2 class="card-title">Anhänge</h2>
		<c:if test="${empty attachments}">
			<p>Für dieses Meeting sind keine Anhänge verfügbar.</p>
		</c:if>
		<ul class="details-list">
			<c:forEach var="att" items="${attachments}">
				<li><a href="<c:url value='/download?id=${att.id}'/>"><c:out
							value="${att.filename}" /></a> <c:if
						test="${sessionScope.user.id == meeting.leaderUserId or sessionScope.user.permissions.contains('ACCESS_ADMIN_PANEL')}">
						<span class="text-muted">(<c:out
								value="${att.requiredRole}" />)
						</span>
					</c:if></li>
			</c:forEach>
		</ul>
	</div>

</div>

<div style="margin-top: 1rem;">
	<a href="${pageContext.request.contextPath}/lehrgaenge"
		class="btn btn-secondary"> <i class="fas fa-arrow-left"></i>
		Zurück zu allen Lehrgängen
	</a>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\my_feedback.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Mein Feedback" />
</c:import>

<h1>
	<i class="fas-fa-inbox"></i> Mein eingereichtes Feedback
</h1>
<p>Hier sehen Sie den Status Ihrer Vorschläge und Meldungen.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="feedback-list">
	<c:if test="${empty mySubmissions}">
		<div class="card">
			<p>
				Sie haben noch kein Feedback eingereicht. <a
					href="${pageContext.request.contextPath}/feedback">Jetzt eine
					Idee teilen!</a>
			</p>
		</div>
	</c:if>

	<c:forEach var="sub" items="${mySubmissions}">
		<c:set var="statusClass" value="status-info" />
		<c:if test="${sub.status == 'PLANNED'}">
			<c:set var="statusClass" value="status-warn" />
		</c:if>
		<c:if test="${sub.status == 'COMPLETED'}">
			<c:set var="statusClass" value="status-ok" />
		</c:if>
		<c:if test="${sub.status == 'REJECTED'}">
			<c:set var="statusClass" value="status-danger" />
		</c:if>

		<div class="card">
			<div
				style="display: flex; justify-content: space-between; align-items: start;">
				<div>
					<h3 class="card-title" style="border: none; padding: 0;">
						<c:out value="${sub.subject}" />
					</h3>
					<p class="details-subtitle" style="margin-top: -0.75rem;">
						Eingereicht am
						<c:out value="${sub.formattedSubmittedAt}" />
						Uhr
					</p>
				</div>
				<div>
					<span class="status-badge ${statusClass}"><c:out
							value="${sub.status}" /></span>
				</div>
			</div>

			<div class="markdown-content"
				style="white-space: pre-wrap; background-color: var(--bg-color); padding: 1rem; border-radius: var(--border-radius);">${fn:escapeXml(sub.content)}
			</div>
		</div>
	</c:forEach>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\pack_kit.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Packliste: ${kit.name}" />
	<c:param name="showNav" value="false" />
</c:import>

<div class="main-content" style="max-width: 800px; margin: 2rem auto;">
	<div class="card">
		<div
			style="display: flex; justify-content: space-between; align-items: start;">
			<div>
				<h1>
					Packliste:
					<c:out value="${kit.name}" />
				</h1>
				<p class="details-subtitle" style="margin-top: -1rem;">
					<c:out value="${kit.description}" />
				</p>
			</div>
			<button class="btn no-print" onclick="window.print()">
				<i class="fas fa-print"></i> Drucken
			</button>
		</div>

		<c:if test="${not empty kit.location}">
			<div class="card" style="background-color: var(--bg-color);">
				<h3 class="card-title" style="border: none; padding: 0;">Standort</h3>
				<p style="font-size: 1.2rem; font-weight: 500;">
					<c:out value="${kit.location}" />
				</p>
			</div>
		</c:if>
		<c:if test="${empty kit.location}">
			<p class="info-message">Für dieses Kit ist kein physischer
				Standort hinterlegt.</p>
		</c:if>

		<h3 style="margin-top: 2rem;">Inhalt zum Einpacken</h3>
		<ul class="details-list">
			<c:if test="${empty kitItems}">
				<li>Dieses Kit hat keinen definierten Inhalt.</li>
			</c:if>
			<c:forEach var="item" items="${kitItems}">
				<li><label
					style="display: flex; align-items: center; gap: 1rem; cursor: pointer; width: 100%;">
						<input type="checkbox"
						style="width: 1.5rem; height: 1.5rem; flex-shrink: 0;"> <span>
							<strong>${item.quantity}x</strong> <c:out
								value="${item.itemName}" />
					</span>
				</label></li>
			</c:forEach>
		</ul>
		<div class="no-print" style="margin-top: 2rem; text-align: center;">
			<a href="${pageContext.request.contextPath}/lager"
				class="btn btn-secondary">Zurück zur Lagerübersicht</a>
		</div>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\passwort.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Passwort ändern" />
</c:import>

<div style="max-width: 600px; margin: auto;">
	<div class="card">
		<h1>Passwort ändern</h1>
		<p class="text-muted"
			style="margin-top: -1rem; margin-bottom: 1.5rem;">Das neue
			Passwort muss mindestens 10 Zeichen lang sein und Groß-,
			Kleinbuchstaben, Zahlen und Sonderzeichen enthalten.</p>

		<c:if test="${not empty successMessage}">
			<p class="success-message">
				<c:out value="${successMessage}" />
			</p>
		</c:if>
		<c:if test="${not empty errorMessage}">
			<p class="error-message">
				<c:out value="${errorMessage}" />
			</p>
		</c:if>

		<form action="${pageContext.request.contextPath}/passwort"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}">
			<div class="form-group">
				<label for="currentPassword">Aktuelles Passwort</label>
				<div class="password-input-wrapper">
					<input type="password" id="currentPassword" name="currentPassword"
						required autocomplete="current-password"> <span
						class="password-toggle-icon"> <i class="fas fa-eye"></i>
					</span>
				</div>
			</div>
			<div class="form-group">
				<label for="newPassword">Neues Passwort</label>
				<div class="password-input-wrapper">
					<input type="password" id="newPassword" name="newPassword" required
						autocomplete="new-password"> <span
						class="password-toggle-icon"> <i class="fas fa-eye"></i>
					</span>
				</div>
			</div>
			<div class="form-group">
				<label for="confirmPassword">Neues Passwort bestätigen</label>
				<div class="password-input-wrapper">
					<input type="password" id="confirmPassword" name="confirmPassword"
						required autocomplete="new-password"> <span
						class="password-toggle-icon"> <i class="fas fa-eye"></i>
					</span>
				</div>
			</div>
			<button type="submit" class="btn">Passwort speichern</button>
		</form>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\profile.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle" value="Mein Profil" />
</c:import>

<h1>Mein Profil</h1>
<p>Hier finden Sie eine Übersicht Ihrer Daten, Qualifikationen und
	Aktivitäten.</p>

<c:import url="/WEB-INF/jspf/message_banner.jspf" />

<div class="responsive-dashboard-grid">
	<div class="card">
		<h2 class="card-title">Stammdaten</h2>

		<c:if test="${hasPendingRequest}">
			<div class="info-message">
				<i class="fas fa-info-circle"></i> Sie haben eine ausstehende
				Profiländerung, die von einem Administrator geprüft wird.
			</div>
		</c:if>

		<form id="profile-form"
			action="${pageContext.request.contextPath}/profil" method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="requestProfileChange">

			<ul class="details-list">
				<li><strong>Benutzername:</strong> <input type="text"
					name="username" class="form-group"
					style="display: inline-block; width: auto; background-color: var(--bg-color); border-color: transparent;"
					value="${fn:escapeXml(sessionScope.user.username)}" readonly>
				</li>
				<li><strong>Jahrgang:</strong> <input type="number"
					name="classYear" class="form-group editable-field"
					style="display: inline-block; width: auto;"
					value="${sessionScope.user.classYear}"
					data-original="${sessionScope.user.classYear}" readonly></li>
				<li><strong>Klasse:</strong> <input type="text"
					name="className" class="form-group editable-field"
					style="display: inline-block; width: auto;"
					value="${fn:escapeXml(sessionScope.user.className)}"
					data-original="${fn:escapeXml(sessionScope.user.className)}"
					readonly></li>
				<li><strong>E-Mail:</strong> <input type="email" name="email"
					class="form-group editable-field"
					style="display: inline-block; width: auto;"
					value="${fn:escapeXml(sessionScope.user.email)}"
					data-original="${fn:escapeXml(sessionScope.user.email)}" readonly>
				</li>
			</ul>

			<div style="margin-top: 1.5rem; display: flex; gap: 0.5rem;">
				<c:if test="${!hasPendingRequest}">
					<button type="button" id="edit-profile-btn"
						class="btn btn-secondary">Profil bearbeiten</button>
					<button type="submit" id="submit-profile-btn"
						class="btn btn-success" style="display: none;">Antrag
						einreichen</button>
					<button type="button" id="cancel-edit-btn" class="btn"
						style="background-color: var(--text-muted-color); display: none;">Abbrechen</button>
				</c:if>
			</div>
		</form>

		<hr style="margin: 1.5rem 0;">

		<ul class="details-list">
			<li style="align-items: center; gap: 1rem;"><strong>Chat-Farbe:</strong>
				<form id="chat-color-form"
					action="${pageContext.request.contextPath}/profil" method="post"
					style="display: flex; align-items: center; gap: 0.5rem;">
					<input type="hidden" name="csrfToken"
						value="${sessionScope.csrfToken}"> <input type="hidden"
						name="action" value="updateChatColor"> <input type="color"
						name="chatColor"
						value="<c:out value='${not empty sessionScope.user.chatColor ? sessionScope.user.chatColor : "#E9ECEF"}'/>"
						title="Wähle deine Chat-Farbe">
					<button type="submit" class="btn btn-small">Speichern</button>
				</form></li>
			<li><a href="${pageContext.request.contextPath}/passwort"
				class="btn btn-secondary">Passwort ändern</a></li>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Sicherheit (Passkeys)</h2>
		<p>Registrieren Sie Geräte für einen passwortlosen Login.</p>
		<button id="register-passkey-btn" class="btn btn-success"
			style="margin-bottom: 1rem;">
			<i class="fas fa-plus-circle"></i> Neues Gerät registrieren
		</button>

		<h3 style="margin-top: 1.5rem; font-size: 1.1rem;">Registrierte
			Geräte</h3>
		<ul class="details-list">
			<c:if test="${empty passkeys}">
				<li>Keine Passkeys registriert.</li>
			</c:if>
			<c:forEach var="key" items="${passkeys}">
				<li><span> <i class="fas fa-key"></i> <c:out
							value="${key.name}" /> <small
						style="display: block; color: var(--text-muted-color);">
							Registriert am: <fmt:parseDate value="${key.createdAt}"
								pattern="yyyy-MM-dd'T'HH:mm:ss" var="parsedDate" type="both" />
							<fmt:formatDate value="${parsedDate}" type="both"
								dateStyle="medium" timeStyle="short" />
					</small>
				</span>
					<form action="${pageContext.request.contextPath}/profil"
						method="post" style="display: inline;">
						<input type="hidden" name="csrfToken"
							value="${sessionScope.csrfToken}"> <input type="hidden"
							name="action" value="deletePasskey"> <input type="hidden"
							name="credentialId" value="${key.id}">
						<button type="submit"
							class="btn btn-small btn-danger-outline delete-passkey-btn">Entfernen</button>
					</form></li>
			</c:forEach>
		</ul>
	</div>

	<div class="card">
		<h2 class="card-title">Meine Qualifikationen</h2>
		<div class="table-wrapper"
			style="max-height: 400px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Lehrgang</th>
						<th>Status</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty qualifications}">
						<tr>
							<td colspan="2">Keine Qualifikationen erworben.</td>
						</tr>
					</c:if>
					<c:forEach var="qual" items="${qualifications}">
						<tr>
							<td><c:out value="${qual.courseName}" /></td>
							<td><c:out value="${qual.status}" /></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>

	<div class="card" style="grid-column: 1/-1;">
		<h2 class="card-title">Meine Abzeichen</h2>
		<c:if test="${empty achievements}">
			<p>Du hast noch keine Abzeichen verdient. Nimm an Events teil, um
				sie freizuschalten!</p>
		</c:if>
		<div style="display: flex; flex-wrap: wrap; gap: 1rem;">
			<c:forEach var="ach" items="${achievements}">
				<div class="card"
					style="flex: 1; min-width: 250px; text-align: center;">
					<i class="fas ${ach.iconClass}"
						style="font-size: 3rem; color: var(--primary-color); margin-bottom: 1rem;"></i>
					<h4 style="margin: 0;">
						<c:out value="${ach.name}" />
					</h4>
					<p style="color: var(--text-muted-color); font-size: 0.9rem;">
						<c:out value="${ach.description}" />
					</p>
					<small>Verdient am: <c:out value="${ach.formattedEarnedAt}" /></small>
				</div>
			</c:forEach>
		</div>
	</div>

</div>

<div class="card">
	<h2 class="card-title">Meine Event-Historie</h2>
	<div class="desktop-table-wrapper">
		<div class="table-wrapper"
			style="max-height: 500px; overflow-y: auto;">
			<table class="data-table">
				<thead>
					<tr>
						<th>Event</th>
						<th>Datum</th>
						<th>Dein Status</th>
						<th>Feedback</th>
					</tr>
				</thead>
				<tbody>
					<c:if test="${empty eventHistory}">
						<tr>
							<td colspan="4">Keine Event-Historie vorhanden.</td>
						</tr>
					</c:if>
					<c:forEach var="event" items="${eventHistory}">
						<tr>
							<td><a
								href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
										value="${event.name}" /></a></td>
							<td><c:out value="${event.formattedEventDateTime}" /> Uhr</td>
							<td><c:out value="${event.userAttendanceStatus}" /></td>
							<td><c:if
									test="${event.status == 'ABGESCHLOSSEN' && event.userAttendanceStatus == 'ZUGEWIESEN'}">
									<a
										href="${pageContext.request.contextPath}/feedback?action=submitEventFeedback&eventId=${event.id}"
										class="btn btn-small">Feedback geben</a>
								</c:if></td>
						</tr>
					</c:forEach>
				</tbody>
			</table>
		</div>
	</div>
	<div class="mobile-card-list">
		<c:if test="${empty eventHistory}">
			<div class="list-item-card">
				<p>Keine Event-Historie vorhanden.</p>
			</div>
		</c:if>
		<c:forEach var="event" items="${eventHistory}">
			<div class="list-item-card">
				<h3 class="card-title">
					<a
						href="${pageContext.request.contextPath}/veranstaltungen/details?id=${event.id}"><c:out
							value="${event.name}" /></a>
				</h3>
				<div class="card-row">
					<span>Datum:</span> <strong><c:out
							value="${event.formattedEventDateTime}" /> Uhr</strong>
				</div>
				<div class="card-row">
					<span>Dein Status:</span> <strong><c:out
							value="${event.userAttendanceStatus}" /></strong>
				</div>
				<div class="card-actions">
					<c:if
						test="${event.status == 'ABGESCHLOSSEN' && event.userAttendanceStatus == 'ZUGEWIESEN'}">
						<a
							href="${pageContext.request.contextPath}/feedback?action=submitEventFeedback&eventId=${event.id}"
							class="btn btn-small">Feedback geben</a>
					</c:if>
				</div>
			</div>
		</c:forEach>
	</div>
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script src="${pageContext.request.contextPath}/js/auth/passkey_auth.js"></script>
<script src="${pageContext.request.contextPath}/js/public/profile.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\qr_action.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Lager-Aktion: <c:out value="${item.name}" /></title>
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet"
	href="${pageContext.request.contextPath}/css/style.css">

<script>
	// This script runs immediately to prevent a "flash" of the wrong theme.
	const savedTheme = localStorage.getItem('theme') || 'light';
	document.documentElement.setAttribute('data-theme', savedTheme);
</script>

</head>
<body class="qr-action-body">

	<div class="qr-action-container card">
		<p>Aktion für:</p>
		<h1 class="qr-action-item-name">
			<c:out value="${item.name}" />
		</h1>
		<p class="details-subtitle"
			style="margin-top: -1rem; margin-bottom: 2rem;">Bestand:
			${item.quantity} / ${item.maxQuantity} (Verfügbar:
			${item.availableQuantity})</p>


		<c:if test="${not empty sessionScope.successMessage}">
			<p class="success-message" style="margin-top: 1rem;">${sessionScope.successMessage}</p>
			<c:remove var="successMessage" scope="session" />
		</c:if>
		<c:if test="${not empty sessionScope.errorMessage}">
			<p class="error-message" style="margin-top: 1rem;">${sessionScope.errorMessage}</p>
			<c:remove var="errorMessage" scope="session" />
		</c:if>

		<form action="${pageContext.request.contextPath}/lager/transaktion"
			method="post" data-available-qty="${item.availableQuantity}"
			data-total-qty="${item.quantity}" data-max-qty="${item.maxQuantity}">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="itemId" value="${item.id}"> <input type="hidden"
				name="redirectUrl"
				value="${pageContext.request.contextPath}/lager/aktionen?id=${item.id}">

			<div class="form-group">
				<label for="quantity">Anzahl</label> <input type="number"
					name="quantity" id="quantity" value="1" min="1" required>
			</div>

			<div class="form-group">
				<label for="notes">Notiz (optional, z.B. für welches Event)</label>
				<input type="text" name="notes" id="notes"
					placeholder="z.B. für Event XYZ">
			</div>
			<div class="form-group">
				<label for="eventId">Zuweisen zu Event (optional)</label> <select
					name="eventId" id="eventId">
					<option value="">Kein Event</option>
					<c:forEach var="event" items="${activeEvents}">
						<option value="${event.id}">${event.name}</option>
					</c:forEach>
				</select>
			</div>

			<div class="qr-action-buttons">
				<button type="submit" name="type" value="checkout" id="checkout-btn"
					class="btn btn-danger qr-action-btn"
					${item.availableQuantity <= 0 ? 'disabled' : ''}>
					<i class="fas fa-sign-out-alt"></i> Entnehmen
				</button>
				<button type="submit" name="type" value="checkin" id="checkin-btn"
					class="btn btn-success qr-action-btn"
					${item.maxQuantity > 0 && item.quantity >= item.maxQuantity ? 'disabled' : ''}>
					<i class="fas fa-sign-in-alt"></i> Einräumen
				</button>
			</div>
		</form>
	</div>

	<script src="${pageContext.request.contextPath}/js/public/qr_action.js"></script>
</body>
</html>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\views\public\storage_item_details.jsp
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<c:import url="/WEB-INF/jspf/main_header.jspf">
	<c:param name="pageTitle"
		value="Artikeldetails: ${fn:escapeXml(item.name)}" />
</c:import>

<h1>
	<i class="fas fa-cube"></i> Artikeldetails
</h1>

<div class="responsive-dashboard-grid" style="align-items: flex-start;">

	<div class="card">
		<h2 class="card-title">
			<c:out value="${item.name}" />
		</h2>
		<c:if test="${not empty item.imagePath}">
			<a
				href="${pageContext.request.contextPath}/image?file=${item.imagePath}"
				class="lightbox-trigger"> <img
				src="${pageContext.request.contextPath}/image?file=${item.imagePath}"
				alt="<c:out value='${item.name}'/>"
				style="width: 100%; border-radius: var(--border-radius); margin-bottom: 1rem; cursor: zoom-in;">
			</a>
		</c:if>
		<ul class="details-list">
			<li><strong>Allg. Status:</strong> <span
				class="status-badge ${item.availabilityStatusCssClass}"><c:out
						value="${item.availabilityStatus}" /></span></li>
			<li><strong>Verfügbar:</strong> <span><c:out
						value="${item.availableQuantity}" /> / <c:out
						value="${item.quantity}" /></span></li>
			<li><strong>Defekt:</strong> <span><c:out
						value="${item.defectiveQuantity}" /></span></li>
			<li><strong>Tracking-Status:</strong> <span> <c:choose>
						<c:when test="${item.status == 'CHECKED_OUT'}">
							<span class="status-badge status-warn"><c:out
									value="Entnommen" /></span>
						</c:when>
						<c:when test="${item.status == 'MAINTENANCE'}">
							<span class="status-badge status-info"><c:out
									value="Wartung" /></span>
						</c:when>
						<c:otherwise>
							<span class="status-badge status-ok"><c:out
									value="Im Lager" /></span>
						</c:otherwise>
					</c:choose>
			</span></li>
			<c:if test="${not empty item.currentHolderUsername}">
				<li><strong>Aktueller Inhaber:</strong> <span><c:out
							value="${item.currentHolderUsername}" /></span></li>
			</c:if>
			<li><strong>Ort:</strong> <span><c:out
						value="${item.location}" /></span></li>
			<li><strong>Schrank:</strong> <span><c:out
						value="${not empty item.cabinet ? item.cabinet : 'N/A'}" /></span></li>
			<li><strong>Fach:</strong> <span><c:out
						value="${not empty item.compartment ? item.compartment : 'N/A'}" /></span></li>
		</ul>
		<div style="margin-top: 2rem;">
			<a href="<c:url value='/lager'/>" class="btn btn-small"><i
				class="fas fa-arrow-left"></i> Zur Lagerübersicht</a>
		</div>
	</div>

	<div class="card">
		<div class="modal-tabs">
			<button class="modal-tab-button active" data-tab="history-tab">Verlauf</button>
			<button class="modal-tab-button" data-tab="maintenance-tab">Wartungshistorie</button>
		</div>

		<div id="history-tab" class="modal-tab-content active">
			<h2 class="card-title" style="border: none; padding: 0;">Verlauf
				/ Chronik</h2>

			<!-- Desktop Table View -->
			<div class="desktop-table-wrapper">
				<div class="table-wrapper"
					style="max-height: 60vh; overflow-y: auto;">
					<table class="data-table">
						<thead>
							<tr>
								<th>Wann</th>
								<th>Aktion</th>
								<th>Wer</th>
								<th>Notiz</th>
							</tr>
						</thead>
						<tbody>
							<c:if test="${empty history}">
								<tr>
									<td colspan="4" style="text-align: center;">Kein Verlauf
										für diesen Artikel vorhanden.</td>
								</tr>
							</c:if>
							<c:forEach var="entry" items="${history}">
								<tr>
									<td><c:out
											value="${entry.transactionTimestampLocaleString}" /></td>
									<td><span
										class="status-badge ${entry.quantityChange > 0 ? 'status-ok' : 'status-danger'}">${entry.quantityChange > 0 ? '+' : ''}<c:out
												value="${entry.quantityChange}" /></span></td>
									<td><c:out value="${entry.username}" /></td>
									<td><c:out
											value="${not empty entry.notes ? entry.notes : '-'}" /></td>
								</tr>
							</c:forEach>
						</tbody>
					</table>
				</div>
			</div>

			<!-- Mobile Card View -->
			<div class="mobile-card-list">
				<c:if test="${empty history}">
					<div class="list-item-card">
						<p>Kein Verlauf für diesen Artikel vorhanden.</p>
					</div>
				</c:if>
				<c:forEach var="entry" items="${history}">
					<div class="list-item-card">
						<h3 class="card-title">
							<span
								class="status-badge ${entry.quantityChange > 0 ? 'status-ok' : 'status-danger'}">
								${entry.quantityChange > 0 ? '+' : ''}<c:out
									value="${entry.quantityChange}" />
							</span>
							<c:out value="${entry.username}" />
						</h3>
						<div class="card-row">
							<span>Wann:</span> <strong><c:out
									value="${entry.transactionTimestampLocaleString}" /></strong>
						</div>
						<div class="card-row"
							style="flex-direction: column; align-items: flex-start;">
							<span>Notiz:</span>
							<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
								<c:out value="${not empty entry.notes ? entry.notes : '-'}" />
							</p>
						</div>
					</div>
				</c:forEach>
			</div>
		</div>

		<div id="maintenance-tab" class="modal-tab-content">
			<h2 class="card-title" style="border: none; padding: 0;">Wartungshistorie</h2>
			<!-- Desktop Table View -->
			<div class="desktop-table-wrapper">
				<div class="table-wrapper"
					style="max-height: 60vh; overflow-y: auto;">
					<table class="data-table">
						<thead>
							<tr>
								<th>Datum</th>
								<th>Aktion</th>
								<th>Bearbeiter</th>
								<th>Notiz</th>
							</tr>
						</thead>
						<tbody>
							<c:if test="${empty maintenanceHistory}">
								<tr>
									<td colspan="4" style="text-align: center;">Keine
										Wartungseinträge für diesen Artikel vorhanden.</td>
								</tr>
							</c:if>
							<c:forEach var="entry" items="${maintenanceHistory}">
								<tr>
									<td><c:out value="${entry.formattedLogDate}" /></td>
									<td><c:out value="${entry.action}" /></td>
									<td><c:out value="${entry.username}" /></td>
									<td><c:out value="${entry.notes}" /></td>
								</tr>
							</c:forEach>
						</tbody>
					</table>
				</div>
			</div>

			<!-- Mobile Card View -->
			<div class="mobile-card-list">
				<c:if test="${empty maintenanceHistory}">
					<div class="list-item-card">
						<p>Keine Wartungseinträge für diesen Artikel vorhanden.</p>
					</div>
				</c:if>
				<c:forEach var="entry" items="${maintenanceHistory}">
					<div class="list-item-card">
						<h3 class="card-title">
							<c:out value="${entry.action}" />
						</h3>
						<div class="card-row">
							<span>Datum:</span> <strong><c:out
									value="${entry.formattedLogDate}" /></strong>
						</div>
						<div class="card-row">
							<span>Bearbeiter:</span> <strong><c:out
									value="${entry.username}" /></strong>
						</div>
						<div class="card-row"
							style="flex-direction: column; align-items: flex-start;">
							<span>Notiz:</span>
							<p style="margin-top: 0.25rem; font-size: 0.9em; width: 100%;">
								<c:out value="${entry.notes}" />
							</p>
						</div>
					</div>
				</c:forEach>
			</div>

		</div>
	</div>
</div>


<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>

<c:import url="/WEB-INF/jspf/main_footer.jspf" />
<script
	src="${pageContext.request.contextPath}/js/public/storage_item_details.js"></script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\web.xml
========================================================================

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="https://jakarta.ee/xml/ns/jakartaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd"
	version="5.0">

	<display-name>TechnikTeam Web Application</display-name>

	<listener>
		<listener-class>de.technikteam.listener.ApplicationInitializerListener</listener-class>
	</listener>
	<listener>
		<listener-class>de.technikteam.config.GuiceConfig</listener-class>
	</listener>
	<listener>
		<listener-class>de.technikteam.listener.AppContextListener</listener-class>
	</listener>
	<listener>
		<listener-class>de.technikteam.listener.SessionListener</listener-class>
	</listener>

	<filter>
		<filter-name>guiceFilter</filter-name>
		<filter-class>com.google.inject.servlet.GuiceFilter</filter-class>
		<async-supported>true</async-supported>
	</filter>
	<filter-mapping>
		<filter-name>guiceFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<session-config>
		<session-timeout>30</session-timeout>
		<cookie-config>
			<http-only>true</http-only>
			<secure>false</secure>
		</cookie-config>
	</session-config>

	<welcome-file-list>
		<welcome-file>/</welcome-file>
	</welcome-file-list>

	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<url-pattern>*.jspf</url-pattern>
			<el-ignored>false</el-ignored>
		</jsp-property-group>
	</jsp-config>

	<error-page>
		<error-code>400</error-code>
		<location>/views/error/error400.jsp</location>
	</error-page>
	<error-page>
		<error-code>401</error-code>
		<location>/views/error/error401.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/views/error/error403.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/views/error/error404.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/views/error/error500.jsp</location>
	</error-page>
	<error-page>
		<error-code>503</error-code>
		<location>/views/error/error503.jsp</location>
	</error-page>
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/views/error/error500.jsp</location>
	</error-page>
</web-app>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\common_modals.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
<!-- The confirmation modal is dynamically created and added to the body by main.js -->
<!-- This file is a placeholder for any other future global modals. -->
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\error_footer.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
    </div>
</div>
<script src="${pageContext.request.contextPath}/js/main.js"></script>
</body>
</html>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\error_header.jspf
========================================================================

<%@ page pageEncoding="UTF-8" isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<!DOCTYPE html>
<html lang="de" data-theme="light">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title><c:out value="${param.pageTitle}" /> - TechnikTeam</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="${pageContext.request.contextPath}/css/style.css">
</head>
<body data-context-path="${pageContext.request.contextPath}">
<div class="main-content-wrapper no-sidebar">
    <div class="main-content">
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\event_modals.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!-- Event Create/Edit Modal -->
<div class="modal-overlay" id="event-modal">
	<div class="modal-content" style="max-width: 800px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="event-modal-title">Event verwalten</h3>

		<div class="modal-tabs">
			<button class="modal-tab-button active" data-tab="general">Allgemein</button>
			<button class="modal-tab-button" data-tab="requirements">Bedarf</button>
			<button class="modal-tab-button" data-tab="reservations">Material</button>
			<button class="modal-tab-button" data-tab="attachments">Anhänge</button>
			<button class="modal-tab-button" data-tab="custom-fields">Anmeldefelder</button>
		</div>

		<form id="event-modal-form"
			action="${pageContext.request.contextPath}/admin/veranstaltungen"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" id="event-modal-action"> <input type="hidden"
				name="id" id="event-modal-id">

			<!-- General Tab -->
			<div class="modal-tab-content active" id="general">
				<div class="form-group">
					<label for="name-modal">Name des Events</label> <input type="text"
						id="name-modal" name="name" required>
				</div>
				<div class="responsive-dashboard-grid">
					<div class="form-group">
						<label for="eventDateTime-modal">Beginn</label> <input
							type="datetime-local" id="eventDateTime-modal"
							name="eventDateTime" required>
					</div>
					<div class="form-group">
						<label for="endDateTime-modal">Ende (optional)</label> <input
							type="datetime-local" id="endDateTime-modal" name="endDateTime">
					</div>
				</div>
				<div class="responsive-dashboard-grid">
					<div class="form-group">
						<label for="location-modal">Ort</label> <input type="text"
							id="location-modal" name="location">
					</div>
					<div class="form-group">
						<label for="leaderUserId-modal">Event-Leitung</label> <select
							name="leaderUserId" id="leaderUserId-modal">
							<option value="">(Keine)</option>
							<c:forEach var="user" items="${allUsers}">
								<option value="${user.id}"><c:out
										value="${user.username}" /></option>
							</c:forEach>
						</select>
					</div>
				</div>
				<div class="form-group">
					<label for="description-modal">Beschreibung (Markdown wird
						unterstützt)</label>
					<textarea id="description-modal" name="description" rows="3"></textarea>
				</div>
			</div>

			<!-- Requirements Tab -->
			<div class="modal-tab-content" id="requirements">
				<h4>Personalbedarf</h4>
				<p>Legen Sie fest, welche Qualifikationen für dieses Event
					benötigt werden.</p>
				<div id="modal-requirements-container"></div>
				<button type="button" class="btn btn-small"
					id="modal-add-requirement-btn" style="margin-top: 1rem;">
					<i class="fas fa-plus"></i> Bedarf hinzufügen
				</button>
				<button type="button" class="btn btn-info" id="find-crew-btn"
					style="margin-top: 1rem; margin-left: 1rem;">
					<i class="fas fa-search"></i> Crew finden
				</button>
			</div>

			<!-- Reservations Tab -->
			<div class="modal-tab-content" id="reservations">
				<h4>Materialreservierung</h4>
				<p>Reservieren Sie Material aus dem Lager für dieses Event.</p>
				<div class="form-group">
					<label for="kit-selection-modal">Aus Kit hinzufügen</label> <select
						id="kit-selection-modal">
						<option value="">-- Kit auswählen --</option>
						<c:forEach var="kit" items="${allKits}">
							<option value="${kit.id}"><c:out value="${kit.name}" /></option>
						</c:forEach>
					</select>
				</div>
				<div id="modal-reservations-container"></div>
				<button type="button" class="btn btn-small"
					id="modal-add-reservation-btn" style="margin-top: 1rem;">
					<i class="fas fa-plus"></i> Material hinzufügen
				</button>
			</div>

			<!-- Attachments Tab -->
			<div class="modal-tab-content" id="attachments">
				<h4>Anhänge</h4>
				<ul id="modal-attachments-list" class="details-list"></ul>
				<div class="form-group">
					<label for="attachment-modal">Neuen Anhang hochladen</label> <input
						type="file" name="attachment" id="attachment-modal">
				</div>
				<div class="form-group">
					<label for="requiredRole-modal">Sichtbar für</label> <select
						name="requiredRole" id="requiredRole-modal">
						<option value="NUTZER" selected>Alle Nutzer</option>
						<option value="ADMIN">Nur Admins</option>
					</select>
				</div>
			</div>

			<!-- Custom Fields Tab -->
			<div class="modal-tab-content" id="custom-fields">
				<h4>Zusätzliche Anmeldefelder</h4>
				<p>Fügen Sie benutzerdefinierte Felder hinzu, die bei der
					Anmeldung abgefragt werden (z.B. T-Shirt Größe, Allergien etc.).</p>
				<div id="modal-custom-fields-container"></div>
				<button type="button" class="btn btn-small"
					id="modal-add-custom-field-btn" style="margin-top: 1rem;">
					<i class="fas fa-plus"></i> Feld hinzufügen
				</button>
			</div>

			<div style="margin-top: 1.5rem;">
				<button type="submit" class="btn btn-success">
					<i class="fas fa-save"></i> Event speichern
				</button>
			</div>
		</form>
	</div>
</div>

<!-- User Assignment Modal -->
<div class="modal-overlay" id="assign-users-modal">
	<div class="modal-content" style="max-width: 500px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="assign-users-modal-title">Team zuweisen</h3>
		<form id="assign-users-form"
			action="${pageContext.request.contextPath}/admin/veranstaltungen"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="assignUsers"> <input type="hidden"
				name="eventId" value="">
			<div id="user-checkboxes-container"
				style="max-height: 40vh; overflow-y: auto;">
				<!-- Checkboxes populated by JS -->
			</div>
			<button type="submit" class="btn btn-success"
				style="margin-top: 1rem;">
				<i class="fas fa-users"></i> Team finalisieren
			</button>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\main_footer.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
</main>
</div>
<div id="lightbox" class="lightbox-overlay">
	<span class="lightbox-close" title="Schließen">×</span> <img
		class="lightbox-content" id="lightbox-image" alt="Großansicht">
</div>
<script
	src="${pageContext.request.contextPath}/vendor/diff-match-patch/diff_match_patch.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script src="${pageContext.request.contextPath}/js/main.js"></script>
</body>
</html>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\main_header.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn"%>

<!DOCTYPE html>
<html lang="de"
	data-theme="${not empty sessionScope.user.theme ? sessionScope.user.theme : 'light'}">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>${param.pageTitle}-TechnikTeam</title>
<link rel="stylesheet"
	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet"
	href="${pageContext.request.contextPath}/css/style.css">
<link rel="icon"
	href="${pageContext.request.contextPath}/images/favicon.ico"
	type="image/x-icon">
<script>
	// This script runs immediately to prevent a "flash" of the wrong theme.
	const savedTheme = localStorage.getItem('theme')
			|| document.documentElement.dataset.theme || 'light';
	document.documentElement.setAttribute('data-theme', savedTheme);
</script>
<c:if test="${param.pageTitle == 'Kalender'}">
	<link
		href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css"
		rel="stylesheet" />
</c:if>
</head>
<body data-context-path="${pageContext.request.contextPath}"
	data-is-logged-in="${not empty sessionScope.user}"
	data-csrf-token="${sessionScope.csrfToken}"
	data-page="${not empty param.page ? param.page : ''}"
	data-all-permissions="${fn:escapeXml(not empty param.permissionsJson ? param.permissionsJson : '[]')}">

	<c:set var="showNav"
		value="${empty param.showNav or param.showNav == 'true'}" />
	<c:if test="${showNav}">
		<c:set var="user" value="${sessionScope.user}" />

		<aside class="sidebar">
			<header class="sidebar-header">
				<a href="${pageContext.request.contextPath}/home" class="logo">
					<i class="fas fa-bolt"></i> TechnikTeam
				</a>
			</header>
			<nav class="sidebar-nav">
				<ul>
					<c:set var="userSectionDrawn" value="false" />
					<c:set var="adminSectionDrawn" value="false" />
					<c:forEach var="navItem" items="${sessionScope.navigationItems}">
						<c:if test="${navItem.requiredPermission == null}">
							<c:if test="${not userSectionDrawn}">
								<li class="nav-section-title">Benutzerbereich</li>
								<c:set var="userSectionDrawn" value="true" />
							</c:if>
							<li><a
								href="${pageContext.request.contextPath}${navItem.url}"
								class="${pageContext.request.requestURI eq (pageContext.request.contextPath.concat(navItem.url)) ? 'active-nav-link' : ''}">
									<i class="fas ${navItem.icon} fa-fw"></i> ${navItem.label}
							</a></li>
						</c:if>
					</c:forEach>

					<c:forEach var="navItem" items="${sessionScope.navigationItems}">
						<c:if test="${not empty navItem.requiredPermission}">
							<c:if test="${not adminSectionDrawn}">
								<li class="nav-section-title">Admin-Bereich</li>
								<c:set var="adminSectionDrawn" value="true" />
							</c:if>
							<li><a
								href="${pageContext.request.contextPath}${navItem.url}"
								class="${pageContext.request.requestURI eq (pageContext.request.contextPath.concat(navItem.url)) ? 'active-nav-link' : ''}">
									<i class="fas ${navItem.icon} fa-fw"></i> ${navItem.label}
							</a></li>
						</c:if>
					</c:forEach>
				</ul>
			</nav>
			<div class="user-actions">
				<div class="theme-switcher desktop-only">
					<i class="fas fa-sun"></i> <label class="toggle-switch"> <input
						type="checkbox" id="theme-toggle-desktop"> <span
						class="slider"></span>
					</label> <i class="fas fa-moon"></i>
				</div>
				<hr style="margin: 1rem 0;" class="desktop-only">
				<div class="user-info">
					Angemeldet als: <strong>${user.username}</strong>
				</div>
				<div class="sidebar-controls">
					<a href="${pageContext.request.contextPath}/profil"
						class="btn btn-secondary btn-small" style="flex-grow: 1;">Profil</a>
					<a href="${pageContext.request.contextPath}/logout"
						id="logout-link" class="btn btn-danger-outline btn-small"
						style="flex-grow: 1;">Logout</a>
				</div>
			</div>
		</aside>

		<header class="mobile-header">
			<button class="mobile-nav-toggle" aria-label="Navigation umschalten">
				<span class="line line-1"></span> <span class="line line-2"></span>
				<span class="line line-3"></span>
			</button>
			<a href="${pageContext.request.contextPath}/home" class="mobile-logo">TechnikTeam</a>
			<div class="mobile-header-right">
				<div class="theme-switcher mobile-only">
					<i class="fas fa-sun"></i> <label class="toggle-switch"> <input
						type="checkbox" id="theme-toggle"> <span class="slider"></span>
					</label> <i class="fas fa-moon"></i>
				</div>
				<a href="${pageContext.request.contextPath}/profil"><i
					class="fas fa-user-circle" style="font-size: 1.5rem;"></i></a>
			</div>
		</header>
		<div class="page-overlay"></div>
	</c:if>

	<div class="main-content-wrapper">
		<main class="main-content">
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\message_banner.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<c:if test="${not empty sessionScope.successMessage}">
	<p class="success-message">
		<i class="fas fa-check-circle"></i>
		<c:out value="${sessionScope.successMessage}" />
	</p>
	<c:remove var="successMessage" scope="session" />
</c:if>

<c:if test="${not empty sessionScope.errorMessage}">
	<p class="error-message">
		<i class="fas fa-exclamation-triangle"></i>
		<c:out value="${sessionScope.errorMessage}" />
	</p>
	<c:remove var="errorMessage" scope="session" />
</c:if>

<c:if test="${not empty sessionScope.infoMessage}">
	<p class="info-message">
		<i class="fas fa-info-circle"></i>
		<c:out value="${sessionScope.infoMessage}" />
	</p>
	<c:remove var="infoMessage" scope="session" />
</c:if>

<c:if
	test="${not empty sessionScope.passwordResetUser and not empty sessionScope.passwordResetNewPassword}">
	<p class="password-reset-alert" id="password-reset-alert"
		style="word-wrap: break-word;">
		<i class="fas fa-key"></i> Passwort für '<strong><c:out
				value="${sessionScope.passwordResetUser}" /></strong>' wurde zurückgesetzt
		auf: <strong class="copyable-password"
			title="In Zwischenablage kopieren"><c:out
				value="${sessionScope.passwordResetNewPassword}" /></strong> (wurde in die
		Zwischenablage kopiert).
	</p>
	<c:remove var="passwordResetUser" scope="session" />
	<c:remove var="passwordResetNewPassword" scope="session" />
</c:if>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\storage_modals.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<!-- Transaction Modal -->
<div class="modal-overlay" id="transaction-modal">
	<div class="modal-content" style="max-width: 450px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="transaction-modal-title">Aktion</h3>
		<form id="transaction-form"
			action="${pageContext.request.contextPath}/lager/transaktion"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="itemId" id="transaction-item-id">
			<div class="form-group">
				<label for="transaction-quantity">Anzahl</label> <input
					type="number" name="quantity" id="transaction-quantity" value="1"
					min="1" required>
			</div>
			<div class="form-group">
				<label for="transaction-notes">Notiz (optional)</label> <input
					type="text" name="notes" id="transaction-notes"
					placeholder="z.B. für Event XYZ">
			</div>
			<div class="form-group">
				<label for="transaction-eventId">Zuweisen zu Event
					(optional)</label> <select name="eventId" id="transaction-eventId">
					<option value="">Kein Event</option>
					<c:if test="${not empty activeEvents}">
						<c:forEach var="event" items="${activeEvents}">
							<option value="${event.id}">${event.name}</option>
						</c:forEach>
					</c:if>
				</select>
			</div>
			<div
				style="display: flex; justify-content: space-between; gap: 1rem;">
				<button type="submit" name="type" value="checkout"
					class="btn btn-danger" style="flex-grow: 1;">Entnehmen</button>
				<button type="submit" name="type" value="checkin"
					class="btn btn-success" style="flex-grow: 1;">Einräumen</button>
			</div>
		</form>
	</div>
</div>

<!-- Maintenance Modal -->
<div class="modal-overlay" id="maintenance-modal">
	<div class="modal-content" style="max-width: 450px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="maintenance-modal-title">Wartungs-Status</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="updateStatus"> <input type="hidden"
				name="id" id="maintenance-item-id">
			<div class="form-group">
				<label for="maintenance-status">Neuer Status</label> <select
					name="status" id="maintenance-status">
					<option value="IN_STORAGE">Zurück in den Bestand</option>
					<option value="MAINTENANCE">Zur Wartung</option>
				</select>
			</div>
			<div class="form-group">
				<label for="maintenance-notes">Notiz (z.B. was wurde
					gemacht?)</label>
				<textarea name="notes" id="maintenance-notes" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">Speichern</button>
		</form>
	</div>
</div>

<!-- Defect Modal -->
<div class="modal-overlay" id="defect-modal">
	<div class="modal-content" style="max-width: 450px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3>Defekt-Status bearbeiten</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="updateDefectStatus"> <input
				type="hidden" name="id" id="defect-item-id">

			<div class="form-group">
				<label for="defect-status">Status</label> <select name="status"
					id="defect-status" class="form-group">
					<option value="DEFECT">Defekt melden</option>
					<option value="UNREPAIRABLE">Nicht reparierbar</option>
				</select>
			</div>
			<div class="form-group">
				<label for="defective_quantity">Anzahl der betroffenen
					Artikel</label> <input type="number" name="quantity"
					id="defective_quantity" value="1" min="1" required>
			</div>
			<div class="form-group">
				<label for="defect_reason">Grund (optional)</label>
				<textarea name="reason" id="defect_reason" rows="3"></textarea>
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>


<!-- Item Create/Edit Modal -->
<div class="modal-overlay" id="item-modal">
	<div class="modal-content" style="max-width: 700px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3>Lagerartikel</h3>
		<form action="${pageContext.request.contextPath}/admin/lager"
			method="post" enctype="multipart/form-data">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value=""> <input type="hidden" name="id"
				value="">

			<div class="form-group">
				<label for="name-modal">Name</label> <input type="text"
					id="name-modal" name="name" required>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="location-modal">Ort</label> <input type="text"
						id="location-modal" name="location">
				</div>
				<div class="form-group">
					<label for="cabinet-modal">Schrank (optional)</label> <input
						type="text" id="cabinet-modal" name="cabinet">
				</div>
				<div class="form-group">
					<label for="compartment-modal">Fach (optional)</label> <input
						type="text" id="compartment-modal" name="compartment">
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="quantity-modal">Menge im Bestand</label> <input
						type="number" id="quantity-modal" name="quantity" min="0" required>
				</div>
				<div class="form-group">
					<label for="maxQuantity-modal">Max. Menge (für Status)</label> <input
						type="number" id="maxQuantity-modal" name="maxQuantity" min="0"
						required>
				</div>
			</div>
			<div class="responsive-dashboard-grid">
				<div class="form-group">
					<label for="weight_kg-modal">Gewicht (kg)</label> <input
						type="text" id="weight_kg-modal" name="weight_kg"
						placeholder="z.B. 1.25">
				</div>
				<div class="form-group">
					<label for="price_eur-modal">Preis (€)</label> <input type="text"
						id="price_eur-modal" name="price_eur" placeholder="z.B. 49.99">
				</div>
			</div>
			<div class="form-group">
				<label for="imageFile-modal">Bild (optional)</label> <input
					type="file" name="imageFile" id="imageFile-modal" accept="image/*">
			</div>
			<button type="submit" class="btn">
				<i class="fas fa-save"></i> Speichern
			</button>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\table_scripts.jspf
========================================================================

<%@ page pageEncoding="UTF-8"%>
<script>
document.addEventListener('DOMContentLoaded', () => {
    // --- TABLE FILTERING LOGIC ---
    const filterInput = document.getElementById('table-filter');
    if (filterInput) {
        const searchableLists = document.querySelectorAll('.searchable-list');
        const searchableTables = document.querySelectorAll('.searchable-table');

        filterInput.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            
            searchableLists.forEach(list => {
                const items = list.querySelectorAll('[data-searchable-content]');
                items.forEach(item => {
                    const content = item.dataset.searchableContent.toLowerCase();
                    item.style.display = content.includes(searchTerm) ? '' : 'none';
                });
            });

            searchableTables.forEach(table => {
                const rows = table.querySelectorAll('tbody tr');
                rows.forEach(row => {
                    const content = row.textContent.toLowerCase();
                    row.style.display = content.includes(searchTerm) ? '' : 'none';
                });
            });
        });
    }

    // --- TABLE SORTING LOGIC ---
    document.querySelectorAll('.sortable-table').forEach(table => {
        const headers = table.querySelectorAll('th.sortable');
        const tbody = table.querySelector('tbody');

        headers.forEach((header, index) => {
            header.addEventListener('click', () => {
                const rows = Array.from(tbody.querySelectorAll('tr'));
                const isAscending = !header.classList.contains('sorted-asc');
                const sortType = header.dataset.sortType || 'string';

                headers.forEach(h => h.classList.remove('sorted-asc', 'sorted-desc'));
                
                header.classList.toggle('sorted-asc', isAscending);
                header.classList.toggle('sorted-desc', !isAscending);

                rows.sort((a, b) => {
                    let valA = a.children[index].dataset.sortValue || a.children[index].textContent.trim();
                    let valB = b.children[index].dataset.sortValue || b.children[index].textContent.trim();
                    
                    if (sortType === 'number') {
                        valA = parseFloat(valA) || 0;
                        valB = parseFloat(valB) || 0;
                    }

                    if (valA < valB) return isAscending ? -1 : 1;
                    if (valA > valB) return isAscending ? 1 : -1;
                    return 0;
                });

                tbody.append(...rows);
            });
        });
    });
});
</script>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\task_modal.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<div class="modal-overlay" id="task-modal">
	<div class="modal-content" style="max-width: 800px;">
		<button type="button" class="modal-close-btn" aria-label="Schließen">×</button>
		<h3 id="task-modal-title">Aufgabe verwalten</h3>
		<form id="task-modal-form"
			action="${pageContext.request.contextPath}/task-action" method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				name="action" value="save"> <input type="hidden"
				name="eventId" value="${event.id}"> <input type="hidden"
				id="task-id-modal" name="taskId">

			<div class="form-group">
				<label for="task-description-modal">Beschreibung</label> <input
					type="text" id="task-description-modal" name="description" required>
			</div>

			<div class="form-group">
				<label for="task-details-modal">Zusätzliche Details /
					Anleitung (optional)</label>
				<textarea id="task-details-modal" name="details" rows="3"></textarea>
			</div>

			<div class="form-group">
				<label for="task-display-order-modal">Anzeigereihenfolge</label> <input
					type="number" id="task-display-order-modal" name="displayOrder"
					value="10" min="0" required>
			</div>

			<div class="form-group" id="task-status-group" style="display: none;">
				<label for="task-status-modal">Status</label> <select
					id="task-status-modal" name="status">
					<option value="OFFEN">Offen</option>
					<option value="IN_ARBEIT">In Arbeit</option>
					<option value="ERLEDIGT">Erledigt</option>
					<option value="BLOCKIERT">Blockiert</option>
				</select>
			</div>

			<div class="card"
				style="margin: 1.5rem 0; background-color: var(--bg-color);">
				<h4 class="card-title">Zuweisung</h4>
				<div style="display: flex; gap: 1rem; margin-bottom: 1rem;">
					<label> <input type="radio" name="assignmentType"
						value="direct" checked> Direkte Zuweisung
					</label> <label> <input type="radio" name="assignmentType"
						value="pool"> Offener Pool
					</label>
				</div>
				<div id="direct-assignment-fields">
					<p>Wählen Sie die Benutzer aus, die dieser Aufgabe direkt
						zugewiesen sind.</p>
					<div id="task-user-checkboxes"
						style="max-height: 150px; overflow-y: auto; border: 1px solid var(--border-color); padding: 0.5rem; border-radius: 6px;">
						<!-- Checkboxes are populated by JS -->
					</div>
				</div>
				<div id="pool-assignment-fields" style="display: none;">
					<div class="form-group">
						<label for="task-required-persons-modal">Benötigte
							Personen</label> <input type="number" id="task-required-persons-modal"
							name="requiredPersons" value="1" min="1">
					</div>
				</div>
			</div>

			<div class="card"
				style="margin: 1.5rem 0; background-color: var(--bg-color);">
				<h4 class="card-title">Material & Kits</h4>
				<div id="task-items-container"></div>
				<button type="button" class="btn btn-small" id="add-task-item-btn">
					<i class="fas fa-plus"></i> Material hinzufügen
				</button>
				<div id="task-kits-container" style="margin-top: 1rem;"></div>
				<button type="button" class="btn btn-small" id="add-task-kit-btn"
					style="margin-top: 0.5rem;">
					<i class="fas fa-plus"></i> Kit hinzufügen
				</button>
			</div>

			<div style="display: flex; justify-content: space-between;">
				<button type="submit" class="btn btn-success">
					<i class="fas fa-save"></i> Aufgabe Speichern
				</button>
				<button type="button" class="btn btn-danger" id="delete-task-btn"
					style="display: none;">
					<i class="fas fa-trash"></i> Aufgabe Löschen
				</button>
			</div>
		</form>
	</div>
</div>
========================================================================
FILE: C:\Users\techn\eclipse\workspace\TechnikTeam\src\main\webapp\WEB-INF\jspf\user_modals.jspf
========================================================================

<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"
	isELIgnored="false"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

<div class="modal-overlay" id="user-modal">
	<div class="modal-content" style="max-width: 800px;">
		<button class="modal-close-btn" type="button" aria-label="Schließen">×</button>
		<h3 id="user-modal-title">Benutzer</h3>

		<div class="modal-tabs">
			<button class="modal-tab-button active" data-tab="general-tab">Allgemein</button>
			<button class="modal-tab-button" data-tab="permissions-tab">Berechtigungen</button>
		</div>

		<form id="user-modal-form"
			action="${pageContext.request.contextPath}/admin/action/user"
			method="post">
			<input type="hidden" name="csrfToken"
				value="${sessionScope.csrfToken}"> <input type="hidden"
				id="user-modal-action" name="action"> <input type="hidden"
				id="userId-modal" name="userId">

			<div class="modal-tab-content active" id="general-tab">
				<div class="form-group">
					<label for="username-modal">Benutzername</label> <input type="text"
						id="username-modal" name="username" required>
				</div>
				<div class="form-group" id="password-group">
					<label for="password-modal">Passwort</label>
					<div class="password-input-wrapper">
						<input type="password" id="password-modal" name="password"
							minlength="10"> <span class="password-toggle-icon">
							<i class="fas fa-eye"></i>
						</span>
					</div>
					<small class="text-muted">Muss 10+ Zeichen,
						Groß/Kleinbuchstaben, Zahlen & Sonderzeichen enthalten. Leer
						lassen, um es nicht zu ändern.</small>
				</div>
				<div class="responsive-dashboard-grid">
					<div class="form-group">
						<label for="role-modal">Rolle</label> <select name="roleId"
							id="role-modal" required>
							<c:forEach var="role" items="${allRoles}">
								<option value="${role.id}"><c:out
										value="${role.roleName}" /></option>
							</c:forEach>
						</select>
					</div>
					<div class="form-group">
						<label for="classYear-modal">Jahrgang</label> <input type="number"
							id="classYear-modal" name="classYear" placeholder="z.B. 2023">
					</div>
					<div class="form-group">
						<label for="className-modal">Klasse</label> <input type="text"
							id="className-modal" name="className" placeholder="z.B. 10b">
					</div>
				</div>
				<div class="form-group">
					<label for="email-modal">E-Mail (optional)</label> <input
						type="email" id="email-modal" name="email">
				</div>
			</div>

			<div class="modal-tab-content" id="permissions-tab">
				<h4>Individuelle Berechtigungen</h4>
				<p>Diese Berechtigungen gelten zusätzlich zu denen, die eine
					Rolle evtl. standardmäßig hat. Hier können granulare Rechte
					vergeben werden.</p>
				<div id="permissions-checkbox-container"
					style="max-height: 40vh; overflow-y: auto; padding: 0.5rem; border: 1px solid var(--border-color); border-radius: var(--border-radius);">
					<!-- Checkboxes will be populated by JS -->
				</div>
			</div>

			<button type="submit" class="btn" style="margin-top: 1.5rem;">
				<i class="fas fa-save"></i> Benutzer speichern
			</button>
		</form>
	</div>
</div>